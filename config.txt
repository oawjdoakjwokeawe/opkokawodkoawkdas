---@diagnostic disable: undefined-global, duplicate-set-field

local assert = assert
local type = type


--########################################################################################################################################################
--########################################################################################################################################################
--########################################################################################################################################################
--########################################################################################################################################################
--########################################################################################################################################################
--########################################################################################################################################################
--########################################################################################################################################################
--########################################################################################################################################################
--########################################################################################################################################################
--########################################################################################################################################################


natives = {}

--[[
Invoke natives using raw native hashes and variable parameters, with a specified return type

Supported return types:

    boolean (or bool)
    float
    integer (or int)
    string (or str)
    vector2 (returns x, y as float)
    vector3 (returns x, y, z as float)
    void
]]
--- @param nativeHash integer
--- @param returnType string
--- @param ... any
--- @return any
natives.invoke = function(nativeHash, returnType, ...)
    assert(type(nativeHash) == 'number', 'Argument hash must be of type number.')
    assert(type(returnType) == 'string', 'Argument returnType must be of type string.')

    local call = natives.invoke(nativeHash, returnType, ...)\
    if call then return call
    else return nil end
end





-- #region natives


--- @param ms integer
natives.builtin_wait = function(ms)
    assert(type(ms) == 'integer', 'Argument ms must be of type integer.')

    local call = natives.invoke(0x4EDE34FBADD967A6, 'void', ms)
end

-- Counts up. Every 1000 is 1 real-time second. Use SETTIMERA(int value) to set the timer (e.g.: SETTIMERA(0)).
--- @return number
natives.builtin_timera = function()

    local call = natives.invoke(0x83666F9FB8FEBD4B, 'int')
    return call
end

--- @return number
natives.builtin_timerb = function()

    local call = natives.invoke(0xC9D9444186B5A374, 'int')
    return call
end

--- @param value integer
natives.builtin_settimera = function(value)
    assert(type(value) == 'integer', 'Argument value must be of type integer.')

    local call = natives.invoke(0xC1B1E9A034A63A62, 'void', value)
end

--- @param value integer
natives.builtin_settimerb = function(value)
    assert(type(value) == 'integer', 'Argument value must be of type integer.')

    local call = natives.invoke(0x5AE11BC36633DE4E, 'void', value)
end

-- Gets the current frame time.
--- @return number
natives.builtin_timestep = function()

    local call = natives.invoke(0x0000000050597EE2, 'float')
    return call
end

--- @param value number
--- @return number
natives.builtin_sin = function(value)
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0x0BADBFA3B172435F, 'float', value)
    return call
end

--- @param value number
--- @return number
natives.builtin_cos = function(value)
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0xD0FFB162F40A139C, 'float', value)
    return call
end

--- @param value number
--- @return number
natives.builtin_sqrt = function(value)
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0x71D93B57D07F9804, 'float', value)
    return call
end

--- @param base number
--- @param exponent number
--- @return number
natives.builtin_pow = function(base, exponent)
    assert(type(base) == 'number', 'Argument base must be of type number.')
    assert(type(exponent) == 'number', 'Argument exponent must be of type number.')

    local call = natives.invoke(0xE3621CC40F31FE2E, 'float', base, exponent)
    return call
end

-- Old name: _LOG10
--- @param value number
--- @return number
natives.builtin_log10 = function(value)
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0xE816E655DE37FE20, 'float', value)
    return call
end

-- Calculates the magnitude of a vector.
--- @param x number
--- @param y number
--- @param z number
--- @return number
natives.builtin_vmag = function(x, y, z)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0x652D2EEEF1D3E62C, 'float', x, y, z)
    return call
end

-- Calculates the magnitude of a vector but does not perform Sqrt operations. (Its way faster)
--- @param x number
--- @param y number
--- @param z number
--- @return number
natives.builtin_vmag2 = function(x, y, z)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0xA8CEACB4F35AE058, 'float', x, y, z)
    return call
end

-- Calculates distance between vectors.
-- The value returned will be in meters.
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @return number
natives.builtin_vdist = function(x1, y1, z1, x2, y2, z2)
    assert(type(x1) == 'number', 'Argument x1 must be of type number.')
    assert(type(y1) == 'number', 'Argument y1 must be of type number.')
    assert(type(z1) == 'number', 'Argument z1 must be of type number.')
    assert(type(x2) == 'number', 'Argument x2 must be of type number.')
    assert(type(y2) == 'number', 'Argument y2 must be of type number.')
    assert(type(z2) == 'number', 'Argument z2 must be of type number.')

    local call = natives.invoke(0x2A488C176D52CCA5, 'float', x1, y1, z1, x2, y2, z2)
    return call
end

-- Calculates distance between vectors but does not perform Sqrt operations. (Its way faster)
-- The value returned will be in RAGE units.
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @return number
natives.builtin_vdist2 = function(x1, y1, z1, x2, y2, z2)
    assert(type(x1) == 'number', 'Argument x1 must be of type number.')
    assert(type(y1) == 'number', 'Argument y1 must be of type number.')
    assert(type(z1) == 'number', 'Argument z1 must be of type number.')
    assert(type(x2) == 'number', 'Argument x2 must be of type number.')
    assert(type(y2) == 'number', 'Argument y2 must be of type number.')
    assert(type(z2) == 'number', 'Argument z2 must be of type number.')

    local call = natives.invoke(0xB7A628320EFF8E47, 'float', x1, y1, z1, x2, y2, z2)
    return call
end

--- @param value integer
--- @param bitshift integer
--- @return number
natives.builtin_shiftLeft = function(value, bitshift)
    assert(type(value) == 'integer', 'Argument value must be of type integer.')
    assert(type(bitshift) == 'integer', 'Argument bitshift must be of type integer.')

    local call = natives.invoke(0xEDD95A39E5544DE8, 'int', value, bitshift)
    return call
end

--- @param value integer
--- @param bitshift integer
--- @return number
natives.builtin_shiftRight = function(value, bitshift)
    assert(type(value) == 'integer', 'Argument value must be of type integer.')
    assert(type(bitshift) == 'integer', 'Argument bitshift must be of type integer.')

    local call = natives.invoke(0x97EF1E5BCE9DC075, 'int', value, bitshift)
    return call
end

-- Rounds a float value down to the next whole number
--- @param value number
--- @return number
natives.builtin_floor = function(value)
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0xF34EE736CF047844, 'int', value)
    return call
end

-- Rounds a float value up to the next whole number
--- @param value number
--- @return number
natives.builtin_ceil = function(value)
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0x11E019C8F43ACC8A, 'int', value)
    return call
end

--- @param value number
--- @return number
natives.builtin_round = function(value)
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0xF2DB717A73826179, 'int', value)
    return call
end

--- @param value integer
--- @return number
natives.builtin_toFloat = function(value)
    assert(type(value) == 'integer', 'Argument value must be of type integer.')

    local call = natives.invoke(0xBBDA792448DB5A89, 'float', value)
    return call
end

-- THREAD_PRIO_HIGHEST = 0
-- THREAD_PRIO_NORMAL = 1
-- THREAD_PRIO_LOWEST = 2
-- THREAD_PRIO_MANUAL_UPDATE = 100
--- @param priority integer
natives.builtin_setThisThreadPriority = function(priority)
    assert(type(priority) == 'integer', 'Argument priority must be of type integer.')

    local call = natives.invoke(0x42B65DEEF2EDF2A1, 'void', priority)
end

--- @param handle integer
--- @return number
natives.aicoverpoint_n0X53E4D0C079Ca6855 = function(handle)
    assert(type(handle) == 'integer', 'Argument handle must be of type integer.')

    local call = natives.invoke(0x53E4D0C079CA6855, 'int', handle)
    return call
end

--- @param handle integer
--- @return boolean
natives.aicoverpoint_doesCoverPointExist = function(handle)
    assert(type(handle) == 'integer', 'Argument handle must be of type integer.')

    local call = natives.invoke(0xC276FE69DDA22BAD, 'bool', handle)
    return call
end

-- 1 = In cover while crouched
-- 2 = In cover while standing
-- 3 = Not in cover
--- @param ped integer
--- @return number
natives.aicoverpoint_getCoverPointStateFromPed = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x5F5B1B7E8E8F94C6, 'int', ped)
    return call
end

--- @param ped integer
natives.aicoverpoint_taskEnterCover = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x4972A022AE6DAFA1, 'void', ped)
end

--- @param ped integer
natives.aicoverpoint_taskExitCover = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x2BC4A6D92D140112, 'void', ped)
end

--- @param ped integer
--- @return number
natives.aicoverpoint_n0X957D7E750216D74B = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x957D7E750216D74B, 'int', ped)
    return call
end

--- @param args userdata
natives.aicoverpoint_taskAiSeekCoverToCoverPoint = function(args)
    assert(type(args) == 'userdata', 'Argument args must be of type userdata.')

    local call = natives.invoke(0x89783FDDF079C88D, 'void', args)
end

-- coverLayer: see levels_0/levels/rdr3/coverlayers
--- @param coverlayer string
natives.aicoverpoint_n0X64340Dc208D671D5 = function(coverlayer)
    assert(type(coverlayer) == 'string', 'Argument coverlayer must be of type string.')

    local call = natives.invoke(0x64340DC208D671D5, 'void', coverlayer)
end

-- coverLayer: see levels_0/levels/rdr3/coverlayers
--- @param coverlayer string
natives.aicoverpoint_n0X7A1Fdcf35Eaa140F = function(coverlayer)
    assert(type(coverlayer) == 'string', 'Argument coverlayer must be of type string.')

    local call = natives.invoke(0x7A1FDCF35EAA140F, 'void', coverlayer)
end

-- Makes ped flinch (if in cover) like they have been shot at
--- @param ped integer
natives.aicoverpoint_requestFlinchCoverAnim = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x2A31D13C5F021D0D, 'void', ped)
end

--- @param ped integer
natives.aicoverpoint_n0X3C7A9C2C953128Fe = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x3C7A9C2C953128FE, 'void', ped)
end

--- @param args userdata
natives.aicoverpoint_n0Xeba51A294C73292E = function(args)
    assert(type(args) == 'userdata', 'Argument args must be of type userdata.')

    local call = natives.invoke(0xEBA51A294C73292E, 'void', args)
end

-- weaponHash can also be -1
--- @param ped integer
--- @param weaponhash integer
natives.aicoverpoint_n0X140B3Cb1D424A945 = function(ped, weaponhash)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0x140B3CB1D424A945, 'void', ped, weaponhash)
end

--- @param ped integer
--- @return boolean
natives.aicoverpoint_areLoadCoverAnimsLoaded = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x8CBE916CFC64AD5C, 'bool', ped)
    return call
end

-- Stops running cover anims and releases them
-- _STOP_RENDERING_* - _STOP_SCRIPTED*
--- @param ped integer
natives.aicoverpoint_stopRunningCoverAnims = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x1A7A802B2301EDC0, 'void', ped)
end

-- args: f_0 = Volume Handle, f_2 = integer (-1, 32 used in R* Scripts)
--- @param args userdata
natives.aicoverpoint_n0X733077295Ab51304 = function(args)
    assert(type(args) == 'userdata', 'Argument args must be of type userdata.')

    local call = natives.invoke(0x733077295AB51304, 'void', args)
end

--- @param data userdata
--- @return number
natives.aicoverpoint_addScriptedCoverPoint = function(data)
    assert(type(data) == 'userdata', 'Argument data must be of type userdata.')

    local call = natives.invoke(0x975BD6351648935F, 'int', data)
    return call
end

--- @param args userdata
natives.aitransport_taskEnterTransport = function(args)
    assert(type(args) == 'userdata', 'Argument args must be of type userdata.')

    local call = natives.invoke(0xAEE3ADD08829CB6F, 'void', args)
end

--- @param args userdata
natives.aitransport_taskExitTransport = function(args)
    assert(type(args) == 'userdata', 'Argument args must be of type userdata.')

    local call = natives.invoke(0xC273A5B8488F7838, 'void', args)
end

-- seat: see CREATE_PED_INSIDE_VEHICLE
--- @param ped integer
--- @param transportentity integer
--- @param seat integer
--- @param flags integer
natives.aitransport_setPedOnTransportSeat = function(ped, transportentity, seat, flags)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(transportentity) == 'integer', 'Argument transportentity must be of type integer.')
    assert(type(seat) == 'integer', 'Argument seat must be of type integer.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')

    local call = natives.invoke(0xE588B5A8A005CB5E, 'void', ped, transportentity, seat, flags)
end

--- @param ped integer
--- @param flags integer
natives.aitransport_setPedOffTransportSeat = function(ped, flags)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')

    local call = natives.invoke(0x8886D83A430537FD, 'void', ped, flags)
end

-- flagId:
-- enum eTransportConfigFlags
-- {
-- 	TCF_NotConsideredForEntryByLocalPlayer,
-- 	TCF_0xB78D6624,
-- 	TCF_0xA9700425,
-- 	TCF_0x8D7E4641,
-- 	TCF_0xF24BAA1F,
-- 	TCF_0x63B77935,
-- 	TCF_NotConsideredForEntryByAllPlayers,
-- 	TCF_0xD17A2AFD,
-- 	TCF_0xD4E4FDD5,
-- 	TCF_0x8227C929,
-- 	TCF_0x812C1070,
-- 	TCF_0x0E1AB26F,
-- 	TCF_0xBF4EC863,
-- 	TCF_0x75660C36,
-- 	TCF_0xA2539E20,
-- 	TCF_0x9162C633,
-- 	TCF_DisableHonorModifiers,
-- 	TCF_0xF9E71CB6,
-- 	TCF_0x933ECD3F,
-- 	TCF_0x18513A34
-- };
-- https:--github.com/femga/rdr3_discoveries/tree/master/AI/TRANSPORT_CONFIG_FLAGS
--- @param transportentity integer
--- @param flagid integer
--- @param value boolean
natives.aitransport_setTransportConfigFlag = function(transportentity, flagid, value)
    assert(type(transportentity) == 'integer', 'Argument transportentity must be of type integer.')
    assert(type(flagid) == 'integer', 'Argument flagid must be of type integer.')
    assert(type(value) == 'boolean', 'Argument value must be of type boolean.')

    local call = natives.invoke(0xBA8818212633500A, 'void', transportentity, flagid, value)
end

-- flagId: see SET_TRANSPORT_CONFIG_FLAG
--- @param transportentity integer
--- @param flagid integer
--- @param p2 boolean
--- @return boolean
natives.aitransport_getTransportConfigFlag = function(transportentity, flagid, p2)
    assert(type(transportentity) == 'integer', 'Argument transportentity must be of type integer.')
    assert(type(flagid) == 'integer', 'Argument flagid must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xF382C92CCC1CCDBC, 'bool', transportentity, flagid, p2)
    return call
end

-- See _SET_TRANSPORT_USAGE_FLAGS
--- @param transportentity integer
--- @param flags integer
--- @return any
natives.aitransport_getTransportUsageFlags = function(transportentity, flags)
    assert(type(transportentity) == 'integer', 'Argument transportentity must be of type integer.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')

    local call = natives.invoke(0xE195C5A82156321D, 'any', transportentity, flags)
    return call
end

-- enum eTransportUsageFlags
-- {
-- 	TUF_INVALID = 0,
-- 	TUF_ALLOW_DRIVER_ME = (1 << 0),
-- 	TUF_ALLOW_DRIVER_GANG = (1 << 1),
-- 	TUF_ALLOW_DRIVER_CREW = (1 << 2),
-- 	TUF_ALLOW_DRIVER_FRIENDS = (1 << 3),
-- 	TUF_ALLOW_DRIVER_ANYONE = (1 << 4),
-- 	TUF_ALLOW_PASSENGER_ME = (1 << 5),
-- 	TUF_ALLOW_PASSENGER_GANG = (1 << 6),
-- 	TUF_ALLOW_PASSENGER_CREW = (1 << 7),
-- 	TUF_ALLOW_PASSENGER_FRIENDS = (1 << 8),
-- 	TUF_ALLOW_PASSENGER_ANYONE = (1 << 9),
-- 	TUF_ALLOW_ACCESS_AI = (1 << 10)
-- };
--- @param transportentity integer
--- @param flags integer
natives.aitransport_setTransportUsageFlags = function(transportentity, flags)
    assert(type(transportentity) == 'integer', 'Argument transportentity must be of type integer.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')

    local call = natives.invoke(0xE2487779957FE897, 'void', transportentity, flags)
end

--- @param transportentity integer
--- @param flags integer
natives.aitransport_setTransportAccessibleSeatFlags = function(transportentity, flags)
    assert(type(transportentity) == 'integer', 'Argument transportentity must be of type integer.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')

    local call = natives.invoke(0xDD0660C997DE94FD, 'void', transportentity, flags)
end

--- @param p0 userdata
--- @param p1 userdata
natives.aitransport_n0X4B6C9A43F7D9109B = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x4B6C9A43F7D9109B, 'void', p0, p1)
end

-- Checks if ped is placed on target transportEntity
--- @param ped integer
--- @param transportentity integer
--- @return boolean
natives.aitransport_isPedOnTransportEntity = function(ped, transportentity)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(transportentity) == 'integer', 'Argument transportentity must be of type integer.')

    local call = natives.invoke(0x159EF5B6EDCE00E8, 'bool', ped, transportentity)
    return call
end

--- @param ped integer
--- @param p1 boolean
--- @return boolean
natives.aitransport_isPedOnTransportSeat = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xDC44F405A6B98D03, 'bool', ped, p1)
    return call
end

--- @param transportentity integer
--- @param seatindex integer
--- @return boolean
natives.aitransport_isTransportSeatOccupied = function(transportentity, seatindex)
    assert(type(transportentity) == 'integer', 'Argument transportentity must be of type integer.')
    assert(type(seatindex) == 'integer', 'Argument seatindex must be of type integer.')

    local call = natives.invoke(0x2E2E06023D07631E, 'bool', transportentity, seatindex)
    return call
end

-- Called together with IS_VEHICLE_SEAT_FREE
--- @param transportentity integer
--- @param seatindex integer
--- @return boolean
natives.aitransport_isTransportSeatFree = function(transportentity, seatindex)
    assert(type(transportentity) == 'integer', 'Argument transportentity must be of type integer.')
    assert(type(seatindex) == 'integer', 'Argument seatindex must be of type integer.')

    local call = natives.invoke(0x43FF27FC1829C202, 'bool', transportentity, seatindex)
    return call
end

-- seatIndex: see CREATE_PED_INSIDE_VEHICLE
--- @param transportentity integer
--- @param seatindex integer
--- @return number
natives.aitransport_getPedInTransportSeat = function(transportentity, seatindex)
    assert(type(transportentity) == 'integer', 'Argument transportentity must be of type integer.')
    assert(type(seatindex) == 'integer', 'Argument seatindex must be of type integer.')

    local call = natives.invoke(0xFFEC4B0A1A3ED515, 'int', transportentity, seatindex)
    return call
end

--- @param ped integer
--- @param transportentity integer
--- @param p2 boolean
--- @return boolean
natives.aitransport_isPedEnteringTransport = function(ped, transportentity, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(transportentity) == 'integer', 'Argument transportentity must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x619E63980BFC0096, 'bool', ped, transportentity, p2)
    return call
end

--- @param ped integer
--- @param transportentity integer
--- @return boolean
natives.aitransport_isPedExitingTransport = function(ped, transportentity)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(transportentity) == 'integer', 'Argument transportentity must be of type integer.')

    local call = natives.invoke(0x660639BC60157048, 'bool', ped, transportentity)
    return call
end

-- _SET_TRANSPORT_*
--- @param transportentity integer
--- @param ped integer
--- @param p2 boolean
natives.aitransport_n0X4248Ab2Eeb3C75Ad = function(transportentity, ped, p2)
    assert(type(transportentity) == 'integer', 'Argument transportentity must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x4248AB2EEB3C75AD, 'void', transportentity, ped, p2)
end

--- @param ped integer
--- @param transportentity integer
--- @param preferenceslot integer
--- @param p3 integer
--- @param seatindex integer
natives.aitransport_setPedUseTransportSeatPreference = function(ped, transportentity, preferenceslot, p3, seatindex)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(transportentity) == 'integer', 'Argument transportentity must be of type integer.')
    assert(type(preferenceslot) == 'integer', 'Argument preferenceslot must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')
    assert(type(seatindex) == 'integer', 'Argument seatindex must be of type integer.')

    local call = natives.invoke(0xB7079F4C72896756, 'void', ped, transportentity, preferenceslot, p3, seatindex)
end

-- _CLEAR_A*
--- @param transportentity integer
natives.aitransport_n0X5639Fbea922788Da = function(transportentity)
    assert(type(transportentity) == 'integer', 'Argument transportentity must be of type integer.')

    local call = natives.invoke(0x5639FBEA922788DA, 'void', transportentity)
end

--- @param transportentity integer
--- @param state boolean
natives.aitransport_setAiCanUseTransport = function(transportentity, state)
    assert(type(transportentity) == 'integer', 'Argument transportentity must be of type integer.')
    assert(type(state) == 'boolean', 'Argument state must be of type boolean.')

    local call = natives.invoke(0x67F7CEAC2391E114, 'void', transportentity, state)
end

-- _SET_TRANSPORT_*
--- @param ped integer
--- @param p1 number
natives.aitransport_n0X8C8371Edfaf014A0 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x8C8371EDFAF014A0, 'void', ped, p1)
end

-- _SET_TRANSPORT_*
--- @param ped integer
natives.aitransport_n0Xf8C20282B237E3F7 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xF8C20282B237E3F7, 'void', ped)
end

--- @param transportentity integer
--- @param seatindex integer
natives.aitransport_setTransportPrioritySeat = function(transportentity, seatindex)
    assert(type(transportentity) == 'integer', 'Argument transportentity must be of type integer.')
    assert(type(seatindex) == 'integer', 'Argument seatindex must be of type integer.')

    local call = natives.invoke(0x13F138225C202F66, 'void', transportentity, seatindex)
end

-- flags: https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eAnimSceneFlag
--- @param animdict string
--- @param flags integer
--- @param playbacklistname string
--- @param p3 boolean
--- @param p4 boolean
--- @return number
natives.animscene_createAnimScene = function(animdict, flags, playbacklistname, p3, p4)
    assert(type(animdict) == 'string', 'Argument animdict must be of type string.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')
    assert(type(playbacklistname) == 'string', 'Argument playbacklistname must be of type string.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')

    local call = natives.invoke(0x1FCA98E33C1437B3, 'integer', animdict, flags, playbacklistname, p3, p4)
    return call
end

--- @param animscene integer
natives.animscene_deleteAnimScene = function(animscene)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')

    local call = natives.invoke(0x84EEDB2C6E650000, 'void', animscene)
end

--- @param animscene integer
natives.animscene_triggerAnimSceneSkip = function(animscene)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')

    local call = natives.invoke(0x4B85B3CF9197AEDF, 'void', animscene)
end

-- Used in Script Function CUTSCENE_MANAGE_SKIP
-- _CHECK_* (?)
--- @param animscene integer
--- @return boolean
natives.animscene_n0X4B85B3Cf91972222 = function(animscene)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')

    local call = natives.invoke(0x4B85B3CF91972222, 'bool', animscene)
    return call
end

--- @param animscene integer
natives.animscene_clearAnimSceneWasSkipped = function(animscene)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')

    local call = natives.invoke(0x8A8208AE92BF87A5, 'void', animscene)
end

--- @param animscene integer
--- @return boolean
natives.animscene_doesAnimSceneExist = function(animscene)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')

    local call = natives.invoke(0x25557E324489393C, 'bool', animscene)
    return call
end

--- @param animscene integer
--- @param entityid string
--- @return boolean
natives.animscene_doesEntityWithIdExistInAnimScene = function(animscene, entityid)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(entityid) == 'string', 'Argument entityid must be of type string.')

    local call = natives.invoke(0x6F1F0B17109309DA, 'bool', animscene, entityid)
    return call
end

--- @param animscene integer
--- @param entityname string
--- @return boolean
natives.animscene_doesAnimSceneOwnershipOfEntityExist = function(animscene, entityname)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(entityname) == 'string', 'Argument entityname must be of type string.')

    local call = natives.invoke(0x9D1ECA9337BE9FC3, 'bool', animscene, entityname)
    return call
end

--- @param animscene integer
natives.animscene_loadAnimScene = function(animscene)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')

    local call = natives.invoke(0xAF068580194D9DC7, 'void', animscene)
end

--- @param animscene integer
--- @param p1 boolean
--- @param p2 boolean
--- @return boolean
natives.animscene_isAnimSceneLoaded = function(animscene, p1, p2)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x477122B8D05E7968, 'bool', animscene, p1, p2)
    return call
end

--- @param animscene integer
--- @param p1 boolean
--- @return boolean
natives.animscene_isAnimSceneLoading = function(animscene, p1)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x59606519FF9D3EC2, 'bool', animscene, p1)
    return call
end

--- @param animscene integer
--- @param p1 boolean
--- @return boolean
natives.animscene_isAnimSceneMetadataAssetInRangeLoading = function(animscene, p1)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xF8D1D2DAB6007EEF, 'bool', animscene, p1)
    return call
end

--- @param animscene integer
--- @param p1 boolean
--- @return boolean
natives.animscene_isAnimSceneMetadataLoaded = function(animscene, p1)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x95531A4A20CCE7BC, 'bool', animscene, p1)
    return call
end

--- @param animscene integer
--- @param phasename string
--- @return number
natives.animscene_getAnimScenePlaybackListPhaseAudioLoadStress = function(animscene, phasename)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(phasename) == 'string', 'Argument phasename must be of type string.')

    local call = natives.invoke(0x9E036D5204FFBBC8, 'int', animscene, phasename)
    return call
end

--- @param animscene integer
natives.animscene_startAnimScene = function(animscene)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')

    local call = natives.invoke(0xF4D94AF761768700, 'void', animscene)
end

--- @param animscene integer
--- @param playbacklistname string
natives.animscene_resetAnimScene = function(animscene, playbacklistname)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(playbacklistname) == 'string', 'Argument playbacklistname must be of type string.')

    local call = natives.invoke(0x8FDF221F13537936, 'void', animscene, playbacklistname)
end

--- @param animscene integer
--- @param p1 boolean
natives.animscene_abortAnimScene = function(animscene, p1)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x718CF1328D20C2B3, 'void', animscene, p1)
end

--- @param animscene integer
natives.animscene_resumeAnimSceneFromLastCheckpoint = function(animscene)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')

    local call = natives.invoke(0x8E1BA705F63C1925, 'void', animscene)
end

--- @param animscene integer
--- @param p1 boolean
--- @return boolean
natives.animscene_isAnimSceneRunning = function(animscene, p1)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xCBFC7725DE6CE2E0, 'bool', animscene, p1)
    return call
end

--- @param animscene integer
--- @param p1 boolean
--- @return boolean
natives.animscene_isAnimSceneFinished = function(animscene, p1)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xD8254CB2C586412B, 'bool', animscene, p1)
    return call
end

--- @param animscene integer
--- @return boolean
natives.animscene_isAnimSceneExitingThisFrame = function(animscene)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')

    local call = natives.invoke(0xCDC5512A407CF08D, 'bool', animscene)
    return call
end

--- @param animscene integer
--- @param p1 boolean
--- @return boolean
natives.animscene_hasAnimSceneExited = function(animscene, p1)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xF94692EB9DC15D74, 'bool', animscene, p1)
    return call
end

-- Used in SP R* Scripts only
-- _CO* - _CR*
--- @param animscene integer
--- @param p1 boolean
--- @return boolean
natives.animscene_n0X73616E64696C132E = function(animscene, p1)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x73616E64696C132E, 'bool', animscene, p1)
    return call
end

--- @param animscene integer
--- @param sectionname string
--- @param p2 boolean
--- @return boolean
natives.animscene_isAnimSceneInSection = function(animscene, sectionname, p2)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(sectionname) == 'string', 'Argument sectionname must be of type string.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x8D81E7824B7753F7, 'bool', animscene, sectionname, p2)
    return call
end

--- @param animscene integer
--- @return boolean
natives.animscene_isAnimSceneSkippable = function(animscene)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')

    local call = natives.invoke(0x4CDFFE3189EBDBD0, 'bool', animscene)
    return call
end

--- @param animscene integer
--- @return boolean
natives.animscene_isAnimSceneAborted = function(animscene)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')

    local call = natives.invoke(0x34A0671BE613D3D0, 'bool', animscene)
    return call
end

-- Used in SP R* Scripts only
-- _IS_ANIM_SCENE_*
--- @param animscene integer
--- @return boolean
natives.animscene_n0Xd70C7A30412F8Fa0 = function(animscene)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')

    local call = natives.invoke(0xD70C7A30412F8FA0, 'bool', animscene)
    return call
end

-- Used in SP R* Scripts only
-- _IS_ANIM_SCENE_*
--- @param animscene integer
--- @return boolean
natives.animscene_n0X9Aae3C1148A09Bca = function(animscene)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')

    local call = natives.invoke(0x9AAE3C1148A09BCA, 'bool', animscene)
    return call
end

-- Used in SP R* Scripts only
-- _WAS_ANIM_SCENE_*
--- @param animscene integer
--- @return boolean
natives.animscene_n0Xa96619Fe85159Ed2 = function(animscene)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')

    local call = natives.invoke(0xA96619FE85159ED2, 'bool', animscene)
    return call
end

--- @param animscene integer
--- @param p1 number
natives.animscene_fadeAnimSceneAudioIn = function(animscene, p1)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0xA41351EA2A18A0AD, 'void', animscene, p1)
end

--- @param animscene integer
--- @param p1 number
natives.animscene_fadeAnimSceneAudioOut = function(animscene, p1)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x323E3AD772BA5D57, 'void', animscene, p1)
end

--- @param p0 boolean
--- @param p1 boolean
natives.animscene_blockAnimSceneFadingNextFrame = function(p0, p1)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x1B70811D3BF75DB9, 'void', p0, p1)
end

--- @param animscene integer
--- @param posx number
--- @param posy number
--- @param posz number
--- @param rotx number
--- @param roty number
--- @param rotz number
--- @param order integer
natives.animscene_setAnimSceneOrigin = function(animscene, posx, posy, posz, rotx, roty, rotz, order)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(posx) == 'number', 'Argument posx must be of type number.')
    assert(type(posy) == 'number', 'Argument posy must be of type number.')
    assert(type(posz) == 'number', 'Argument posz must be of type number.')
    assert(type(rotx) == 'number', 'Argument rotx must be of type number.')
    assert(type(roty) == 'number', 'Argument roty must be of type number.')
    assert(type(rotz) == 'number', 'Argument rotz must be of type number.')
    assert(type(order) == 'integer', 'Argument order must be of type integer.')

    local call = natives.invoke(0x020894BF17A02EF2, 'void', animscene, posx, posy, posz, rotx, roty, rotz, order)
end

--- @param animscene integer
--- @param position integer
--- @param rotation integer
--- @param order integer
natives.animscene_getAnimSceneOrigin = function(animscene, position, rotation, order)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(position) == 'integer', 'Argument position must be of type integer.')
    assert(type(rotation) == 'integer', 'Argument rotation must be of type integer.')
    assert(type(order) == 'integer', 'Argument order must be of type integer.')

    local call = natives.invoke(0xADF1D53F3B1FE0A7, 'void', animscene, position, rotation, order)
end

--- @param animscene integer
--- @param toggle boolean
natives.animscene_setAnimScenePaused = function(animscene, toggle)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xD6824B7D24DC0CE0, 'void', animscene, toggle)
end

--- @param animscene integer
--- @return boolean
natives.animscene_isAnimScenePaused = function(animscene)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')

    local call = natives.invoke(0x4B4038796F0D6566, 'bool', animscene)
    return call
end

--- @param animscene integer
--- @param rate number
natives.animscene_setAnimSceneRate = function(animscene, rate)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(rate) == 'number', 'Argument rate must be of type number.')

    local call = natives.invoke(0x75820B801CFF262A, 'void', animscene, rate)
end

--- @param animscene integer
--- @return number
natives.animscene_getAnimSceneRate = function(animscene)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')

    local call = natives.invoke(0x43C21623E42B821B, 'float', animscene)
    return call
end

--- @param animscene integer
--- @return number
natives.animscene_getAnimScenePhase = function(animscene)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')

    local call = natives.invoke(0x3FBC3F51BF12DFBF, 'float', animscene)
    return call
end

--- @param animscene integer
--- @return number
natives.animscene_getAnimSceneTime = function(animscene)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')

    local call = natives.invoke(0x61BE7D6186260002, 'float', animscene)
    return call
end

--- @param animscene integer
--- @return number
natives.animscene_getAnimSceneDuration = function(animscene)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')

    local call = natives.invoke(0x49F1D143ADE32656, 'float', animscene)
    return call
end

--- @param animscene integer
--- @param entityname string
--- @param entity integer
--- @param flags integer
natives.animscene_setAnimSceneEntity = function(animscene, entityname, entity, flags)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(entityname) == 'string', 'Argument entityname must be of type string.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')

    local call = natives.invoke(0x8B720AD451CA2AB3, 'void', animscene, entityname, entity, flags)
end

--- @param animscene integer
--- @param entityname string
--- @param entity integer
natives.animscene_removeAnimSceneEntity = function(animscene, entityname, entity)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(entityname) == 'string', 'Argument entityname must be of type string.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x2BF96692C67F3E53, 'void', animscene, entityname, entity)
end

--- @param animscene integer
--- @param entityname string
--- @return boolean
natives.animscene_isEntityExitingAnimSceneThisFrame = function(animscene, entityname)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(entityname) == 'string', 'Argument entityname must be of type string.')

    local call = natives.invoke(0x005E6F28DD7ED58D, 'bool', animscene, entityname)
    return call
end

--- @param animscene integer
--- @param entityname string
--- @param p2 userdata
--- @param p3 userdata
--- @return boolean
natives.animscene_couldAnimSceneEntityReachExitNextFrame = function(animscene, entityname, p2, p3)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(entityname) == 'string', 'Argument entityname must be of type string.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x73616E64696C616E, 'bool', animscene, entityname, p2, p3)
    return call
end

--- @param animscene integer
--- @param entityname string
--- @return boolean
natives.animscene_hasEntityExitedAnimScene = function(animscene, entityname)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(entityname) == 'string', 'Argument entityname must be of type string.')

    local call = natives.invoke(0xB89FCFF19DAFFF28, 'bool', animscene, entityname)
    return call
end

-- _HAS_L* (?)
--- @param animscene integer
--- @param entityname string
--- @return boolean
natives.animscene_hasEntityEnteredAnimScene = function(animscene, entityname)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(entityname) == 'string', 'Argument entityname must be of type string.')

    local call = natives.invoke(0x337F1CC8EE895601, 'bool', animscene, entityname)
    return call
end

--- @param animscene integer
--- @param name string
--- @param isnetwork boolean
--- @return number
natives.animscene_getAnimScenePed = function(animscene, name, isnetwork)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(name) == 'string', 'Argument name must be of type string.')
    assert(type(isnetwork) == 'boolean', 'Argument isnetwork must be of type boolean.')

    local call = natives.invoke(0xE5822422197BBBA3, 'int', animscene, name, isnetwork)
    return call
end

--- @param animscene integer
--- @param name string
--- @param isnetwork boolean
--- @return number
natives.animscene_getAnimSceneObject = function(animscene, name, isnetwork)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(name) == 'string', 'Argument name must be of type string.')
    assert(type(isnetwork) == 'boolean', 'Argument isnetwork must be of type boolean.')

    local call = natives.invoke(0xFB5674687A1B2814, 'integer', animscene, name, isnetwork)
    return call
end

--- @param animscene integer
--- @param name string
--- @param isnetwork boolean
--- @return number
natives.animscene_getAnimSceneVehicle = function(animscene, name, isnetwork)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(name) == 'string', 'Argument name must be of type string.')
    assert(type(isnetwork) == 'boolean', 'Argument isnetwork must be of type boolean.')

    local call = natives.invoke(0x430EE0A19BC5A287, 'int', animscene, name, isnetwork)
    return call
end

--- @param animscene integer
--- @param name string
--- @param value boolean
--- @param p3 boolean
natives.animscene_setAnimSceneBool = function(animscene, name, value, p3)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(name) == 'string', 'Argument name must be of type string.')
    assert(type(value) == 'boolean', 'Argument value must be of type boolean.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0x519E96C2C68B404B, 'void', animscene, name, value, p3)
end

--- @param animscene integer
--- @param name string
--- @return boolean
natives.animscene_getAnimSceneBool = function(animscene, name)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0x07A6F6447ECA9B64, 'bool', animscene, name)
    return call
end

--- @param animscene integer
--- @param name string
--- @param value number
--- @param p3 boolean
--- @param p4 boolean
natives.animscene_setAnimSceneFloat = function(animscene, name, value, p3, p4)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(name) == 'string', 'Argument name must be of type string.')
    assert(type(value) == 'number', 'Argument value must be of type number.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')

    local call = natives.invoke(0x6BC5104E68CBEFE8, 'void', animscene, name, value, p3, p4)
end

--- @param animscene integer
--- @param name string
--- @return number
natives.animscene_getAnimSceneFloat = function(animscene, name)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0xCC24CB07F60B496E, 'float', animscene, name)
    return call
end

--- @param animscene integer
--- @param name string
--- @param value integer
--- @param p3 boolean
natives.animscene_setAnimSceneInt = function(animscene, name, value, p3)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(name) == 'string', 'Argument name must be of type string.')
    assert(type(value) == 'integer', 'Argument value must be of type integer.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0x3A379D2166CF5B92, 'void', animscene, name, value, p3)
end

--- @param animscene integer
--- @param name string
--- @return number
natives.animscene_getAnimSceneInt = function(animscene, name)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0x2B7277484CC095FD, 'int', animscene, name)
    return call
end

--- @param animscene integer
--- @param entityname string
--- @param matrix integer
--- @param p3 boolean
--- @param playbacklistname string
--- @param p5 integer
--- @return boolean
natives.animscene_getAnimSceneEntityLocationData = function(animscene, entityname, matrix, p3, playbacklistname, p5)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(entityname) == 'string', 'Argument entityname must be of type string.')
    assert(type(matrix) == 'integer', 'Argument matrix must be of type integer.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')
    assert(type(playbacklistname) == 'string', 'Argument playbacklistname must be of type string.')
    assert(type(p5) == 'integer', 'Argument p5 must be of type integer.')

    local call = natives.invoke(0x8398438D8F14F56D, 'bool', animscene, entityname, matrix, p3, playbacklistname, p5)
    return call
end

--- @param entity integer
--- @param animscene integer
--- @return boolean
natives.animscene_isEntityPlayingAnimScene = function(entity, animscene)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')

    local call = natives.invoke(0x3AB6C7B0BB0DF4B1, 'bool', entity, animscene)
    return call
end

--- @param animscene integer
--- @param entity integer
--- @param p2 integer
natives.animscene_attachAnimSceneToEntity = function(animscene, entity, p2)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0xDC418495DBA327A1, 'void', animscene, entity, p2)
end

--- @param animscene integer
--- @param entity integer
--- @param p2 integer
natives.animscene_attachAnimSceneToEntityPreservingLocation = function(animscene, entity, p2)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x1C0B105C3F30B88D, 'void', animscene, entity, p2)
end

--- @param animscene integer
natives.animscene_detachAnimScene = function(animscene)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')

    local call = natives.invoke(0x6843A1AA3A336DFF, 'void', animscene)
end

--- @param animscene integer
natives.animscene_detachAnimScenePreservingLocation = function(animscene)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')

    local call = natives.invoke(0xA2507C4948C83D2E, 'void', animscene)
end

--- @param animscene integer
natives.animscene_takeOwnershipOfAnimScene = function(animscene)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')

    local call = natives.invoke(0xF7A4C571E572D237, 'void', animscene)
end

--- @param animscene integer
--- @return boolean
natives.animscene_checkOwnershipOfAnimScene = function(animscene)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')

    local call = natives.invoke(0x661B8683611B9B97, 'bool', animscene)
    return call
end

--- @param animscene integer
--- @param playbacklistname string
natives.animscene_setAnimScenePlaybackList = function(animscene, playbacklistname)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(playbacklistname) == 'string', 'Argument playbacklistname must be of type string.')

    local call = natives.invoke(0xAB5E7CAB074D6B84, 'void', animscene, playbacklistname)
end

-- Used in SP R* Scripts only
-- _IS_ANIM_SCENE_P*
--- @param animscene integer
--- @param phasename string
--- @return boolean
natives.animscene_n0X1C5D33A4293E6Dde = function(animscene, phasename)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(phasename) == 'string', 'Argument phasename must be of type string.')

    local call = natives.invoke(0x1C5D33A4293E6DDE, 'bool', animscene, phasename)
    return call
end

--- @param animscene integer
--- @param playbacklistname string
--- @return boolean
natives.animscene_doesAnimScenePlayListExist = function(animscene, playbacklistname)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(playbacklistname) == 'string', 'Argument playbacklistname must be of type string.')

    local call = natives.invoke(0xA9016536015DE29D, 'bool', animscene, playbacklistname)
    return call
end

--- @param animscene integer
--- @param playlistname string
--- @param p2 boolean
natives.animscene_setAnimScenePlayList = function(animscene, playlistname, p2)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(playlistname) == 'string', 'Argument playlistname must be of type string.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x15598CFB25F3DC7E, 'void', animscene, playlistname, p2)
end

--- @param animscene integer
--- @param phasename string
--- @return boolean
natives.animscene_isAnimScenePlaybackListPhaseActive = function(animscene, phasename)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(phasename) == 'string', 'Argument phasename must be of type string.')

    local call = natives.invoke(0x1F0E401031E20146, 'bool', animscene, phasename)
    return call
end

--- @param animscene integer
--- @param playlistname string
--- @return boolean
natives.animscene_requestAnimScenePlayList = function(animscene, playlistname)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(playlistname) == 'string', 'Argument playlistname must be of type string.')

    local call = natives.invoke(0xDF7B5144E25CD3FE, 'bool', animscene, playlistname)
    return call
end

--- @param animscene integer
--- @param playlistname string
--- @return boolean
natives.animscene_releaseAnimScenePlayList = function(animscene, playlistname)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(playlistname) == 'string', 'Argument playlistname must be of type string.')

    local call = natives.invoke(0xAE6ADA8FE7E84ACC, 'bool', animscene, playlistname)
    return call
end

--- @param animscene integer
--- @return number
natives.animscene_getAnimSceneDict = function(animscene)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')

    local call = natives.invoke(0xAE5ADA4FE3E21ADC, 'integer', animscene)
    return call
end

-- Used in SP R* Scripts only
-- Params: p1 = 2B-LowHonor, 2A-HighHonor
--- @param animscene integer
--- @param p1 string
--- @return boolean
natives.animscene_n0X1407F5115Fb9583E = function(animscene, p1)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')

    local call = natives.invoke(0x1407F5115FB9583E, 'bool', animscene, p1)
    return call
end

--- @param animscene integer
--- @param phasename string
--- @return boolean
natives.animscene_isAnimScenePlaybackListPhaseLoaded = function(animscene, phasename)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(phasename) == 'string', 'Argument phasename must be of type string.')

    local call = natives.invoke(0x23E33CB9F4A3F547, 'bool', animscene, phasename)
    return call
end

--- @param animscene integer
--- @param phasename string
--- @return boolean
natives.animscene_isAnimScenePlaybackListPhaseLoading = function(animscene, phasename)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(phasename) == 'string', 'Argument phasename must be of type string.')

    local call = natives.invoke(0x0DF57F86FE71DBE5, 'bool', animscene, phasename)
    return call
end

-- Used in braithwaites2 SP R* Scripts only
-- _A*
natives.animscene_n0X1Ad896Bf43619551 = function()

    local call = natives.invoke(0x1AD896BF43619551, 'void')
end

--- @param animscene integer
--- @return number
natives.animscene_getAnimSceneCurrentActiveCameraCount = function(animscene)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')

    local call = natives.invoke(0x4822A65D5AF64E69, 'int', animscene)
    return call
end

-- Used in SP R* Scripts only
-- _IS_ANIM_SCENE_R* - _IS_ANIM_SCENE_S*
--- @param p0 string
--- @return boolean
natives.animscene_n0X5D7Bfda2290B4E39 = function(p0)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')

    local call = natives.invoke(0x5D7BFDA2290B4E39, 'bool', p0)
    return call
end

-- MGM stands for MiniGameMoments.
--- @param mgmfilename string
--- @return boolean
natives.animscene_isMgmSystemLoaded = function(mgmfilename)
    assert(type(mgmfilename) == 'string', 'Argument mgmfilename must be of type string.')

    local call = natives.invoke(0xFDFC14799373283F, 'bool', mgmfilename)
    return call
end

-- Used to request MiniGameMoments Assets.
-- 
-- mgmFilename's:
-- Poker
-- PokerArthur
-- PokerArthurCamp
-- PokerJohn
-- PokerJohnCamp
--- @param mgmfilename string
--- @return boolean
natives.animscene_loadMgmAssets = function(mgmfilename)
    assert(type(mgmfilename) == 'string', 'Argument mgmfilename must be of type string.')

    local call = natives.invoke(0xB727A847862CB00A, 'bool', mgmfilename)
    return call
end

-- Returns mgmHandle
--- @param mgmfilename string
--- @return number
natives.animscene_createMgmSystem = function(mgmfilename)
    assert(type(mgmfilename) == 'string', 'Argument mgmfilename must be of type string.')

    local call = natives.invoke(0xA1300DE03E5D1973, 'int', mgmfilename)
    return call
end

--- @param mgmhandle integer
natives.animscene_deleteMgmSystem = function(mgmhandle)
    assert(type(mgmhandle) == 'integer', 'Argument mgmhandle must be of type integer.')

    local call = natives.invoke(0x53CB3970BA02E3CC, 'void', mgmhandle)
end

-- _PREPARE_* - _REGISTER_*
--- @param mgmhandle integer
--- @param ped integer
natives.animscene_n0Xb1A196Bafe650402 = function(mgmhandle, ped)
    assert(type(mgmhandle) == 'integer', 'Argument mgmhandle must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xB1A196BAFE650402, 'void', mgmhandle, ped)
end

-- _UNLOAD_* - _WAS_ANIM_SCENE_*
--- @param mgmhandle integer
--- @param ped integer
natives.animscene_n0Xae6De22De0Ed4554 = function(mgmhandle, ped)
    assert(type(mgmhandle) == 'integer', 'Argument mgmhandle must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xAE6DE22DE0ED4554, 'void', mgmhandle, ped)
end

-- Only used in tg_p R* Script
-- Returns true when mgm event success
-- _PREPARE_* - _REGISTER_*
--- @param mgmeventhandle integer
--- @param p1 string
--- @param seatid integer
--- @param p3 integer
--- @param p4 boolean
--- @return boolean
natives.animscene_n0X61B2Aaef645Ddaf0 = function(mgmeventhandle, p1, seatid, p3, p4)
    assert(type(mgmeventhandle) == 'integer', 'Argument mgmeventhandle must be of type integer.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')
    assert(type(seatid) == 'integer', 'Argument seatid must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')

    local call = natives.invoke(0x61B2AAEF645DDAF0, 'bool', mgmeventhandle, p1, seatid, p3, p4)
    return call
end

--- @param mgmeventhandle integer
--- @param p1 string
--- @param seatid userdata
--- @param p3 integer
--- @param p4 number
natives.animscene_setMgmEvent = function(mgmeventhandle, p1, seatid, p3, p4)
    assert(type(mgmeventhandle) == 'integer', 'Argument mgmeventhandle must be of type integer.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')
    assert(type(seatid) == 'userdata', 'Argument seatid must be of type userdata.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')

    local call = natives.invoke(0x07706C4CC9C6CC9E, 'void', mgmeventhandle, p1, seatid, p3, p4)
end

-- p2: MINIGAME_GET_SECONDARY_VOICE_STRING
-- _SET_*
--- @param mgmhandle integer
--- @param ped integer
--- @param secondaryvoicestring string
natives.animscene_n0X3641Fcd53E59B335 = function(mgmhandle, ped, secondaryvoicestring)
    assert(type(mgmhandle) == 'integer', 'Argument mgmhandle must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(secondaryvoicestring) == 'string', 'Argument secondaryvoicestring must be of type string.')

    local call = natives.invoke(0x3641FCD53E59B335, 'void', mgmhandle, ped, secondaryvoicestring)
end

--- @param ped integer
--- @param archetype string
natives.animscene_setBreakoutArchetype = function(ped, archetype)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(archetype) == 'string', 'Argument archetype must be of type string.')

    local call = natives.invoke(0x99B2A2E3655DEAF1, 'void', ped, archetype)
end

--- @param ped integer
natives.animscene_clearBreakoutArchetype = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xBC781D24AA11F179, 'void', ped)
end

-- Used in SP R* Scripts only
-- _IS_*
--- @param ped integer
--- @return boolean
natives.animscene_n0X3B393716C3Fd8237 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x3B393716C3FD8237, 'bool', ped)
    return call
end

-- Used in SP R* Scripts only
-- _SET_B* - _SET_C*
natives.animscene_n0Xe12D7B4B959644Cd = function()

    local call = natives.invoke(0xE12D7B4B959644CD, 'void')
end

-- Used in SP R* Scripts only
-- _RESUME_* - _SET_A*
--- @param entity integer
--- @param p1 boolean
natives.animscene_n0Xc1193521E3B9Fadd = function(entity, p1)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xC1193521E3B9FADD, 'void', entity, p1)
end

natives.animscene_requestPhotoModeFreeze = function()

    local call = natives.invoke(0x7C709C01D43D94CD, 'void')
end

natives.animscene_requestPhotoModeDefreeze = function()

    local call = natives.invoke(0x41AFA5F228B0B6B0, 'void')
end

-- Used in SP R* Scripts only
-- _IS_PED_* - _IS_SC*
--- @return boolean
natives.animscene_n0X2Db524750Dc41Ed4 = function()

    local call = natives.invoke(0x2DB524750DC41ED4, 'bool')
    return call
end

-- Used in SP R* Scripts only
-- _PAUSE_* - _PLAY_*
--- @return boolean
natives.animscene_n0Xea41D44A8D42057B = function()

    local call = natives.invoke(0xEA41D44A8D42057B, 'bool')
    return call
end

-- Pauses all script threads except the one that called it.
--- @param toggle boolean
natives.animscene_pauseScriptThreads = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x37C1257849DEF24A, 'void', toggle)
end

-- Used in SP R* Scripts only
-- _SET_P*
--- @param p0 boolean
natives.animscene_n0Xcdcd7B2D49Aee73A = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0xCDCD7B2D49AEE73A, 'void', p0)
end

--- @param animscene integer
--- @return boolean
natives.animscene_wasAnimSceneSkipped = function(animscene)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')

    local call = natives.invoke(0xEF324E9550A394D5, 'bool', animscene)
    return call
end

-- nullsub, doesn't do anything
-- however it is being used in tty scripts: [NET_BAD_SPORT_REPORT_PLAYER] Detected bad sport behavior from Player
-- badSportBehavior: BS_QUITTER = 0, BS_VEHICLE_DESTRUCTION = 1, BS_VOTED_OUT = 2
--- @param gamerhandle userdata
--- @param badsportbehaviortype integer
natives._namespace4_reportPlayerBadSportBehavior = function(gamerhandle, badsportbehaviortype)
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')
    assert(type(badsportbehaviortype) == 'integer', 'Argument badsportbehaviortype must be of type integer.')

    local call = natives.invoke(0xC31C44C43B48FDE3, 'void', gamerhandle, badsportbehaviortype)
end

-- attributeIndex:
-- enum ePedAttribute
-- {
-- 	PA_HEALTH,
-- 	PA_STAMINA,
-- 	PA_SPECIALABILITY,
-- 	PA_COURAGE,
-- 	PA_AGILITY,
-- 	PA_SPEED,
-- 	PA_ACCELERATION,
-- 	PA_BONDING,
-- 	SA_HUNGER,
-- 	SA_FATIGUED,
-- 	SA_INEBRIATED,
-- 	SA_POISONED,
-- 	SA_BODYHEAT,
-- 	SA_BODYWEIGHT,
-- 	SA_OVERFED,
-- 	SA_SICKNESS,
-- 	SA_DIRTINESS,
-- 	SA_DIRTINESSHAT,
-- 	MTR_STRENGTH,
-- 	MTR_GRIT,
-- 	MTR_INSTINCT,
-- 	PA_UNRULINESS,
-- 	SA_DIRTINESSSKIN
-- };
--- @param ped integer
--- @param attributeindex integer
--- @param newvalue integer
natives.attribute_setAttributeBaseRank = function(ped, attributeindex, newvalue)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(attributeindex) == 'integer', 'Argument attributeindex must be of type integer.')
    assert(type(newvalue) == 'integer', 'Argument newvalue must be of type integer.')

    local call = natives.invoke(0x5DA12E025D47D4E5, 'void', ped, attributeindex, newvalue)
end

-- attributeIndex: see SET_ATTRIBUTE_BASE_RANK
--- @param ped integer
--- @param attributeindex integer
--- @return number
natives.attribute_getAttributeRank = function(ped, attributeindex)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(attributeindex) == 'integer', 'Argument attributeindex must be of type integer.')

    local call = natives.invoke(0xA4C8E23E29040DE0, 'int', ped, attributeindex)
    return call
end

-- attributeIndex: see SET_ATTRIBUTE_BASE_RANK
--- @param ped integer
--- @param attributeindex integer
--- @return number
natives.attribute_getAttributeBaseRank = function(ped, attributeindex)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(attributeindex) == 'integer', 'Argument attributeindex must be of type integer.')

    local call = natives.invoke(0x147149F2E909323C, 'int', ped, attributeindex)
    return call
end

-- attributeIndex: see SET_ATTRIBUTE_BASE_RANK
--- @param ped integer
--- @param coreindex integer
--- @return number
natives.attribute_getAttributeBonusRank = function(ped, coreindex)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(coreindex) == 'integer', 'Argument coreindex must be of type integer.')

    local call = natives.invoke(0x0EFA71F4B4330E04, 'int', ped, coreindex)
    return call
end

-- attributeIndex: see SET_ATTRIBUTE_BASE_RANK
--- @param ped integer
--- @param attributeindex integer
--- @return number
natives.attribute_getMaxAttributeRank = function(ped, attributeindex)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(attributeindex) == 'integer', 'Argument attributeindex must be of type integer.')

    local call = natives.invoke(0x704674A0535A471D, 'int', ped, attributeindex)
    return call
end

-- attributeIndex: see SET_ATTRIBUTE_BASE_RANK
--- @param ped integer
--- @param attributeindex integer
--- @param newvalue integer
natives.attribute_setAttributeBonusRank = function(ped, attributeindex, newvalue)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(attributeindex) == 'integer', 'Argument attributeindex must be of type integer.')
    assert(type(newvalue) == 'integer', 'Argument newvalue must be of type integer.')

    local call = natives.invoke(0x920F9488BD115EFB, 'void', ped, attributeindex, newvalue)
end

-- attributeIndex: see SET_ATTRIBUTE_BASE_RANK
--- @param ped integer
--- @param attributeindex integer
--- @return number
natives.attribute_getDefaultAttributeRank = function(ped, attributeindex)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(attributeindex) == 'integer', 'Argument attributeindex must be of type integer.')

    local call = natives.invoke(0x958DD43D41F89A47, 'int', ped, attributeindex)
    return call
end

-- attributeIndex: see SET_ATTRIBUTE_BASE_RANK
--- @param ped integer
--- @param attributeindex integer
--- @return number
natives.attribute_getDefaultMaxAttributeRank = function(ped, attributeindex)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(attributeindex) == 'integer', 'Argument attributeindex must be of type integer.')

    local call = natives.invoke(0x7C059C55AD940CB4, 'int', ped, attributeindex)
    return call
end

-- attributeIndex: see SET_ATTRIBUTE_BASE_RANK
--- @param ped integer
--- @param attributeindex integer
--- @param p2 integer
natives.attribute_addAttributePoints = function(ped, attributeindex, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(attributeindex) == 'integer', 'Argument attributeindex must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x75415EE0CB583760, 'void', ped, attributeindex, p2)
end

-- attributeIndex: see SET_ATTRIBUTE_BASE_RANK
--- @param ped integer
--- @param attributeindex integer
--- @param p2 integer
natives.attribute_setAttributePoints = function(ped, attributeindex, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(attributeindex) == 'integer', 'Argument attributeindex must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x09A59688C26D88DF, 'void', ped, attributeindex, p2)
end

-- attributeIndex: see SET_ATTRIBUTE_BASE_RANK
--- @param ped integer
--- @param attributeindex integer
--- @return number
natives.attribute_getAttributePoints = function(ped, attributeindex)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(attributeindex) == 'integer', 'Argument attributeindex must be of type integer.')

    local call = natives.invoke(0x219DA04BAA9CB065, 'int', ped, attributeindex)
    return call
end

-- attributeIndex: see SET_ATTRIBUTE_BASE_RANK
--- @param ped integer
--- @param attributeindex integer
--- @return number
natives.attribute_getMaxAttributePoints = function(ped, attributeindex)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(attributeindex) == 'integer', 'Argument attributeindex must be of type integer.')

    local call = natives.invoke(0x223BF310F854871C, 'int', ped, attributeindex)
    return call
end

-- coreIndex:
-- enum eAttributeCore
-- {
-- 	ATTRIBUTE_CORE_HEALTH,
-- 	ATTRIBUTE_CORE_STAMINA,
-- 	ATTRIBUTE_CORE_DEADEYE
-- };
--- @param ped integer
--- @param coreindex integer
--- @param value integer
natives.attribute_setAttributeCoreValue = function(ped, coreindex, value)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(coreindex) == 'integer', 'Argument coreindex must be of type integer.')
    assert(type(value) == 'integer', 'Argument value must be of type integer.')

    local call = natives.invoke(0xC6258F41D86676E0, 'void', ped, coreindex, value)
end

-- Gets the ped's core value on a scale of 0 to 100.
-- coreIndex: see _SET_ATTRIBUTE_CORE_VALUE
--- @param ped integer
--- @param coreindex integer
--- @return number
natives.attribute_getAttributeCoreValue = function(ped, coreindex)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(coreindex) == 'integer', 'Argument coreindex must be of type integer.')

    local call = natives.invoke(0x36731AC041289BB1, 'int', ped, coreindex)
    return call
end

-- attributeIndex: see SET_ATTRIBUTE_BASE_RANK
--- @param modelhash integer
--- @param attributeindex integer
--- @param rank integer
--- @return number
natives.attribute_getDefaultAttributePointsNeededForRank = function(modelhash, attributeindex, rank)
    assert(type(modelhash) == 'integer', 'Argument modelhash must be of type integer.')
    assert(type(attributeindex) == 'integer', 'Argument attributeindex must be of type integer.')
    assert(type(rank) == 'integer', 'Argument rank must be of type integer.')

    local call = natives.invoke(0x94A7F191DB49A44D, 'int', modelhash, attributeindex, rank)
    return call
end

-- attributeIndex: see SET_ATTRIBUTE_BASE_RANK
-- 
-- Old name: _SET_ATTRIBUTE_OVERPOWER_VALUE
--- @param ped integer
--- @param attributeindex integer
--- @param value number
--- @param makesound boolean
natives.attribute_enableAttributeOverpower = function(ped, attributeindex, value, makesound)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(attributeindex) == 'integer', 'Argument attributeindex must be of type integer.')
    assert(type(value) == 'number', 'Argument value must be of type number.')
    assert(type(makesound) == 'boolean', 'Argument makesound must be of type boolean.')

    local call = natives.invoke(0xF6A7C08DF2E28B28, 'void', ped, attributeindex, value, makesound)
end

-- coreIndex: see _SET_ATTRIBUTE_CORE_VALUE
-- 
-- Previously incorrectly named ENABLE_ATTRIBUTE_OVERPOWER
--- @param ped integer
--- @param coreindex integer
--- @param value number
--- @param makesound boolean
natives.attribute_enableAttributeCoreOverpower = function(ped, coreindex, value, makesound)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(coreindex) == 'integer', 'Argument coreindex must be of type integer.')
    assert(type(value) == 'number', 'Argument value must be of type number.')
    assert(type(makesound) == 'boolean', 'Argument makesound must be of type boolean.')

    local call = natives.invoke(0x4AF5A4C7B9157D14, 'void', ped, coreindex, value, makesound)
end

-- attributeIndex: see SET_ATTRIBUTE_BASE_RANK
--- @param ped integer
--- @param attributeindex integer
natives.attribute_disableAttributeOverpower = function(ped, attributeindex)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(attributeindex) == 'integer', 'Argument attributeindex must be of type integer.')

    local call = natives.invoke(0xF8DAC3D85636C241, 'void', ped, attributeindex)
end

-- attributeIndex: see SET_ATTRIBUTE_BASE_RANK
--- @param ped integer
--- @param attributeindex integer
--- @return boolean
natives.attribute_isAttributeOverpowered = function(ped, attributeindex)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(attributeindex) == 'integer', 'Argument attributeindex must be of type integer.')

    local call = natives.invoke(0x103C2F885ABEB00B, 'bool', ped, attributeindex)
    return call
end

--- @param ped integer
--- @param coreindex integer
--- @return boolean
natives.attribute_isAttributeCoreOverpowered = function(ped, coreindex)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(coreindex) == 'integer', 'Argument coreindex must be of type integer.')

    local call = natives.invoke(0x200373A8DF081F22, 'bool', ped, coreindex)
    return call
end

--- @param ped integer
--- @param attributeindex integer
--- @return number
natives.attribute_getAttributeOverpowerSecondsLeft = function(ped, attributeindex)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(attributeindex) == 'integer', 'Argument attributeindex must be of type integer.')

    local call = natives.invoke(0x4C9F782180712742, 'float', ped, attributeindex)
    return call
end

--- @param ped integer
--- @param coreindex integer
--- @return number
natives.attribute_getAttributeCoreOverpowerSecondsLeft = function(ped, coreindex)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(coreindex) == 'integer', 'Argument coreindex must be of type integer.')

    local call = natives.invoke(0xB429F58803D285B1, 'float', ped, coreindex)
    return call
end

-- Params: p1 is related to satchel_category
--- @param p0 userdata
--- @param p1 integer
natives.attribute_startItemPreview = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x7E2C766ADB2C5F1A, 'void', p0, p1)
end

natives.attribute_stopItemPreview = function()

    local call = natives.invoke(0xD962F8579D702DB5, 'void')
end

-- Displays status effects on core icons (includes warnings).
-- 
-- enum eUiRpgStatusEffect
-- {
-- 	STATUS_NONE,
-- 	STATUS_COLD,
-- 	STATUS_HOT,
-- 	STATUS_OVERFED,
-- 	STATUS_DIRTY,
-- 	STATUS_SNAKE_VENOM,
-- 	STATUS_ARROW_WOUNDED,
-- 	STATUS_ARROW_DRAINED,
-- 	STATUS_ARROW_DISORIENTED,
-- 	STATUS_ARROW_TRACKED,
-- 	STATUS_ARROW_CONFUSION,
-- 	STATUS_UNDERWEIGHT,
-- 	STATUS_OVERWEIGHT,
-- 	STATUS_SICK_1,
-- 	STATUS_SICK_2,
-- 	STATUS_PREDATOR_INVULNERABLE
-- };
--- @param statuseffecttype integer
natives.attribute_setStatusEffectCoreIcon = function(statuseffecttype)
    assert(type(statuseffecttype) == 'integer', 'Argument statuseffecttype must be of type integer.')

    local call = natives.invoke(0xA4D3A1C008F250DF, 'void', statuseffecttype)
end

-- Starts core periodic icon.
-- statusEffectType: see 0xA4D3A1C008F250DF
--- @param statuseffecttype integer
natives.attribute_setStatusEffectPeriodicIcon = function(statuseffecttype)
    assert(type(statuseffecttype) == 'integer', 'Argument statuseffecttype must be of type integer.')

    local call = natives.invoke(0xFB6E111908502871, 'void', statuseffecttype)
end

-- Stops periodic icon.
-- statusEffectType: see 0xA4D3A1C008F250DF
--- @param statuseffecttype integer
natives.attribute_stopStatusEffectPeriodicIcon = function(statuseffecttype)
    assert(type(statuseffecttype) == 'integer', 'Argument statuseffecttype must be of type integer.')

    local call = natives.invoke(0x3FC4C027FD0936F4, 'void', statuseffecttype)
end

-- _AUDIO_IS_* - _AUDIO_TRIGGER*
natives.audio_n0X7455Cd705F7E933E = function()

    local call = natives.invoke(0x7455CD705F7E933E, 'void')
end

natives.audio_clearConversationHistory = function()

    local call = natives.invoke(0x33D51F801CB16E4F, 'void')
end

--- @param convoroot string
natives.audio_clearConversationHistoryForScriptedConversation = function(convoroot)
    assert(type(convoroot) == 'string', 'Argument convoroot must be of type string.')

    local call = natives.invoke(0xEF51242E35242B47, 'void', convoroot)
end

--- @param convoroot string
--- @return boolean
natives.audio_createNewScriptedConversation = function(convoroot)
    assert(type(convoroot) == 'string', 'Argument convoroot must be of type string.')

    local call = natives.invoke(0xD2C91A0B572AAE56, 'bool', convoroot)
    return call
end

--- @param ped integer
--- @param p1 string
--- @return boolean
natives.audio_n0Xdf947Fe0D551684E = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')

    local call = natives.invoke(0xDF947FE0D551684E, 'bool', ped, p1)
    return call
end

--- @param convoroot string
--- @param ped integer
--- @param charactername string
natives.audio_addPedToConversation = function(convoroot, ped, charactername)
    assert(type(convoroot) == 'string', 'Argument convoroot must be of type string.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(charactername) == 'string', 'Argument charactername must be of type string.')

    local call = natives.invoke(0x95D9F4BC443956E7, 'void', convoroot, ped, charactername)
end

--- @param listeningtoped integer
--- @param ped integer
--- @param listenername string
natives.audio_n0Xa2323A2Eae32A290 = function(listeningtoped, ped, listenername)
    assert(type(listeningtoped) == 'integer', 'Argument listeningtoped must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(listenername) == 'string', 'Argument listenername must be of type string.')

    local call = natives.invoke(0xA2323A2EAE32A290, 'void', listeningtoped, ped, listenername)
end

-- Only used in R* SP Script cv_mus_shared
--- @param convoroot string
--- @param animscene integer
--- @return boolean
natives.audio_n0X79F9C57B8D0Dfe90 = function(convoroot, animscene)
    assert(type(convoroot) == 'string', 'Argument convoroot must be of type string.')
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')

    local call = natives.invoke(0x79F9C57B8D0DFE90, 'bool', convoroot, animscene)
    return call
end

--- @param convoroot string
--- @param p1 boolean
--- @param p2 boolean
--- @param clone boolean
natives.audio_startScriptConversation = function(convoroot, p1, p2, clone)
    assert(type(convoroot) == 'string', 'Argument convoroot must be of type string.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(clone) == 'boolean', 'Argument clone must be of type boolean.')

    local call = natives.invoke(0x6B17C62C9635D2DC, 'void', convoroot, p1, p2, clone)
end

--- @param convoroot string
--- @param p1 boolean
--- @param p2 boolean
--- @param clone boolean
natives.audio_preloadScriptConversation = function(convoroot, p1, p2, clone)
    assert(type(convoroot) == 'string', 'Argument convoroot must be of type string.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(clone) == 'boolean', 'Argument clone must be of type boolean.')

    local call = natives.invoke(0x3B3CAD6166916D87, 'void', convoroot, p1, p2, clone)
end

--- @param convoroot string
natives.audio_startPreloadedConversation = function(convoroot)
    assert(type(convoroot) == 'string', 'Argument convoroot must be of type string.')

    local call = natives.invoke(0x23641AFE870AF385, 'void', convoroot)
end

--- @param convoroot string
--- @return boolean
natives.audio_n0X0Cb3D1919E8D7Cba = function(convoroot)
    assert(type(convoroot) == 'string', 'Argument convoroot must be of type string.')

    local call = natives.invoke(0x0CB3D1919E8D7CBA, 'bool', convoroot)
    return call
end

--- @param p0 boolean
--- @return boolean
natives.audio_n0Xfe5C6177064Bd390 = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0xFE5C6177064BD390, 'bool', p0)
    return call
end

--- @param convoroot string
--- @return boolean
natives.audio_isScriptedConversationCreated = function(convoroot)
    assert(type(convoroot) == 'string', 'Argument convoroot must be of type string.')

    local call = natives.invoke(0xD89504D9D7D5057D, 'bool', convoroot)
    return call
end

--- @param p0 boolean
--- @return boolean
natives.audio_n0X5A13586A9447931F = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x5A13586A9447931F, 'bool', p0)
    return call
end

--- @param convoroot string
--- @return boolean
natives.audio_isScriptedConversationLoaded = function(convoroot)
    assert(type(convoroot) == 'string', 'Argument convoroot must be of type string.')

    local call = natives.invoke(0xDF0D54BE7A776737, 'bool', convoroot)
    return call
end

--- @param p0 boolean
--- @return boolean
natives.audio_isAnyConversationPlaying = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0xA2CAC9DEF0195E6F, 'bool', p0)
    return call
end

--- @param p0 string
--- @return boolean
natives.audio_isScriptedConversationPlaying = function(p0)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')

    local call = natives.invoke(0x1ECC76792F661CF5, 'bool', p0)
    return call
end

--- @param p0 string
--- @return boolean
natives.audio_isScriptedConversionOngoing = function(p0)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')

    local call = natives.invoke(0xF01C570E0A0A1E67, 'bool', p0)
    return call
end

--- @param p0 boolean
--- @return boolean
natives.audio_n0X847748Ae5D7B1071 = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x847748AE5D7B1071, 'bool', p0)
    return call
end

-- _IS_SCRIPTED_CONVERSATION_*
--- @param convoroot string
--- @return boolean
natives.audio_n0Xd0730C1Fa40348D9 = function(convoroot)
    assert(type(convoroot) == 'string', 'Argument convoroot must be of type string.')

    local call = natives.invoke(0xD0730C1FA40348D9, 'bool', convoroot)
    return call
end

--- @param p0 string
--- @return number
natives.audio_getCurrentScriptedConversationLine = function(p0)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')

    local call = natives.invoke(0x480357EE890C295A, 'int', p0)
    return call
end

--- @param p0 string
--- @param p1 boolean
--- @param p2 boolean
--- @param p3 boolean
--- @param p4 boolean
natives.audio_pauseScriptedConversation = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')

    local call = natives.invoke(0x8530AD776CD72B12, 'void', p0, p1, p2, p3, p4)
end

--- @param p0 string
natives.audio_restartScriptedConversation = function(p0)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')

    local call = natives.invoke(0x9AEB285D1818C9AC, 'void', p0)
end

--- @param p0 boolean
--- @param p1 boolean
--- @param p2 boolean
natives.audio_stopAllScriptedConversions = function(p0, p1, p2)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x36559148B78853B3, 'void', p0, p1, p2)
end

--- @param p0 string
--- @param p1 boolean
--- @param p2 boolean
--- @return number
natives.audio_stopScriptedConversation = function(p0, p1, p2)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xD79DEEFB53455EBA, 'int', p0, p1, p2)
    return call
end

--- @param p0 string
natives.audio_skipToNextScriptedConversationLine = function(p0)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')

    local call = natives.invoke(0x9663FE6B7A61EB00, 'void', p0)
end

--- @param p0 string
--- @return number
natives.audio_n0Xf336E9F989B3518F = function(p0)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')

    local call = natives.invoke(0xF336E9F989B3518F, 'int', p0)
    return call
end

--- @param p0 string
--- @param currentscriptedconvoline integer
--- @return number
natives.audio_n0X254B0241E964B450 = function(p0, currentscriptedconvoline)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')
    assert(type(currentscriptedconvoline) == 'integer', 'Argument currentscriptedconvoline must be of type integer.')

    local call = natives.invoke(0x254B0241E964B450, 'int', p0, currentscriptedconvoline)
    return call
end

--- @param p0 string
--- @param currentscriptedconvoline integer
--- @return number
natives.audio_n0X152Ed1B56E8F1F50 = function(p0, currentscriptedconvoline)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')
    assert(type(currentscriptedconvoline) == 'integer', 'Argument currentscriptedconvoline must be of type integer.')

    local call = natives.invoke(0x152ED1B56E8F1F50, 'int', p0, currentscriptedconvoline)
    return call
end

--- @param p0 string
--- @param currentscriptedconvoline integer
--- @return number
natives.audio_n0X935Dbd96D4A3Da1F = function(p0, currentscriptedconvoline)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')
    assert(type(currentscriptedconvoline) == 'integer', 'Argument currentscriptedconvoline must be of type integer.')

    local call = natives.invoke(0x935DBD96D4A3DA1F, 'int', p0, currentscriptedconvoline)
    return call
end

--- @param p0 string
--- @return number
natives.audio_n0X295859Eb18F48D82 = function(p0)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')

    local call = natives.invoke(0x295859EB18F48D82, 'int', p0)
    return call
end

--- @param convoroot string
--- @param singlelineindex integer
natives.audio_n0X40Ca665Ab9D8D505 = function(convoroot, singlelineindex)
    assert(type(convoroot) == 'string', 'Argument convoroot must be of type string.')
    assert(type(singlelineindex) == 'integer', 'Argument singlelineindex must be of type integer.')

    local call = natives.invoke(0x40CA665AB9D8D505, 'void', convoroot, singlelineindex)
end

--- @param p0 string
natives.audio_n0Xf232C2C546Ac16D0 = function(p0)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')

    local call = natives.invoke(0xF232C2C546AC16D0, 'void', p0)
end

--- @param audspeechevent string
natives.audio_n0X1E6F9A9Fe1A99F36 = function(audspeechevent)
    assert(type(audspeechevent) == 'string', 'Argument audspeechevent must be of type string.')

    local call = natives.invoke(0x1E6F9A9FE1A99F36, 'void', audspeechevent)
end

-- nullsub, doesn't do anything
--- @param p0 boolean
natives.audio_registerScriptWithAudio = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0xC6ED9D5092438D91, 'void', p0)
end

-- nullsub, doesn't do anything
natives.audio_unregisterScriptWithAudio = function()

    local call = natives.invoke(0xA8638BE228D4751A, 'void')
end

--- @param audiobank string
--- @return boolean
natives.audio_requestScriptAudioBank = function(audiobank)
    assert(type(audiobank) == 'string', 'Argument audiobank must be of type string.')

    local call = natives.invoke(0x2F844A8B08D76685, 'bool', audiobank)
    return call
end

--- @param audiobank string
natives.audio_releaseNamedScriptAudioBank = function(audiobank)
    assert(type(audiobank) == 'string', 'Argument audiobank must be of type string.')

    local call = natives.invoke(0x77ED170667F50170, 'void', audiobank)
end

natives.audio_releaseScriptAudioBank = function()

    local call = natives.invoke(0x7A2D8AD0A9EB9C3F, 'void')
end

--- @return number
natives.audio_getSoundId = function()

    local call = natives.invoke(0x430386FE9BF80B45, 'int')
    return call
end

--- @param soundid integer
natives.audio_releaseSoundId = function(soundid)
    assert(type(soundid) == 'integer', 'Argument soundid must be of type integer.')

    local call = natives.invoke(0x353FC880830B88FA, 'void', soundid)
end

--- @param audioname string
--- @param audioref string
--- @param p2 boolean
--- @param p3 userdata
--- @param p4 boolean
--- @param p5 userdata
natives.audio_playSound = function(audioname, audioref, p2, p3, p4, p5)
    assert(type(audioname) == 'string', 'Argument audioname must be of type string.')
    assert(type(audioref) == 'string', 'Argument audioref must be of type string.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0x7FF4944CC209192D, 'void', audioname, audioref, p2, p3, p4, p5)
end

-- https:--github.com/femga/rdr3_discoveries/tree/master/audio/frontend_soundsets
--- @param audioname string
--- @param audioref string
--- @param p2 boolean
--- @param p3 any
natives.audio_playSoundFrontend = function(audioname, audioref, p2, p3)
    assert(type(audioname) == 'string', 'Argument audioname must be of type string.')
    assert(type(audioref) == 'string', 'Argument audioref must be of type string.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x67C540AA08E4A6F5, 'void', audioname, audioref, p2, p3)
end

-- item: value returned from 0x2E1CDC1FF3B8473E
-- soundSet: HUD_SHOP_SOUNDSET, COMPANIONS_ROBBERIES_SOUNDSET
--- @param item integer
--- @param soundset integer
--- @param p2 userdata
natives.audio_playSoundFromItem = function(item, soundset, p2)
    assert(type(item) == 'integer', 'Argument item must be of type integer.')
    assert(type(soundset) == 'integer', 'Argument soundset must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xE8EAFF7B41EDD291, 'void', item, soundset, p2)
end

--- @param audioname string
--- @param entity integer
--- @param audioref string
--- @param isnetwork boolean
--- @param p4 userdata
--- @param p5 userdata
natives.audio_playSoundFromEntity = function(audioname, entity, audioref, isnetwork, p4, p5)
    assert(type(audioname) == 'string', 'Argument audioname must be of type string.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(audioref) == 'string', 'Argument audioref must be of type string.')
    assert(type(isnetwork) == 'boolean', 'Argument isnetwork must be of type boolean.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0x6FB1DA3CA9DA7D90, 'void', audioname, entity, audioref, isnetwork, p4, p5)
end

--- @param audioname string
--- @param x number
--- @param y number
--- @param z number
--- @param audioref string
--- @param isnetwork boolean
--- @param p6 userdata
--- @param p7 boolean
--- @param p8 userdata
natives.audio_playSoundFromPosition = function(audioname, x, y, z, audioref, isnetwork, p6, p7, p8)
    assert(type(audioname) == 'string', 'Argument audioname must be of type string.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(audioref) == 'string', 'Argument audioref must be of type string.')
    assert(type(isnetwork) == 'boolean', 'Argument isnetwork must be of type boolean.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'boolean', 'Argument p7 must be of type boolean.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')

    local call = natives.invoke(0xCCE219C922737BFA, 'void', audioname, x, y, z, audioref, isnetwork, p6, p7, p8)
end

--- @param audioname string
--- @param audioref string
natives.audio_stopSoundWithName = function(audioname, audioref)
    assert(type(audioname) == 'string', 'Argument audioname must be of type string.')
    assert(type(audioref) == 'string', 'Argument audioref must be of type string.')

    local call = natives.invoke(0x0F2A2175734926D8, 'void', audioname, audioref)
end

-- _IS_SOUND_RUNNING(?)
--- @param audioname string
--- @param audioref string
--- @return boolean
natives.audio_n0X580D71Dfe0088E34 = function(audioname, audioref)
    assert(type(audioname) == 'string', 'Argument audioname must be of type string.')
    assert(type(audioref) == 'string', 'Argument audioref must be of type string.')

    local call = natives.invoke(0x580D71DFE0088E34, 'bool', audioname, audioref)
    return call
end

-- item: FUSE, value returned from 0x2E1CDC1FF3B8473E
-- soundSet: HUD_SHOP_SOUNDSET, COMPANIONS_ROBBERIES_SOUNDSET
--- @param item integer
--- @param soundset integer
--- @return boolean
natives.audio_isScriptedAudioCustom = function(item, soundset)
    assert(type(item) == 'integer', 'Argument item must be of type integer.')
    assert(type(soundset) == 'integer', 'Argument soundset must be of type integer.')

    local call = natives.invoke(0x6DF942C4179BE5AB, 'bool', item, soundset)
    return call
end

--- @param variablename string
--- @param variablevalue number
--- @param audioname string
--- @param audioref string
natives.audio_setVariableOnSoundWithName = function(variablename, variablevalue, audioname, audioref)
    assert(type(variablename) == 'string', 'Argument variablename must be of type string.')
    assert(type(variablevalue) == 'number', 'Argument variablevalue must be of type number.')
    assert(type(audioname) == 'string', 'Argument audioname must be of type string.')
    assert(type(audioref) == 'string', 'Argument audioref must be of type string.')

    local call = natives.invoke(0x9821B68CD3E05F2B, 'void', variablename, variablevalue, audioname, audioref)
end

-- whistleConfig: Ped.WhistlePitch (0.0 - 1.0), Ped.WhistleClarity (0.0 - 1.0), Ped.WhistleShape (0.0 - 10.0)
--- @param ped integer
--- @param whistleconfig string
--- @param value number
natives.audio_setWhistleConfigForPed = function(ped, whistleconfig, value)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(whistleconfig) == 'string', 'Argument whistleconfig must be of type string.')
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0x9963681A8BC69BF3, 'void', ped, whistleconfig, value)
end

-- p1: Entity.Relationship
-- p2: Player, Enemy, Teammate, Neutral
--- @param ped integer
--- @param p1 string
--- @param p2 string
natives.audio_setSoundRelationshipOnPed = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')
    assert(type(p2) == 'string', 'Argument p2 must be of type string.')

    local call = natives.invoke(0x2E31ACA7477CF00F, 'void', ped, p1, p2)
end

--- @param soundid integer
--- @param name string
--- @param soundset string
--- @param p3 boolean
natives.audio_playSoundFrontendWithSoundId = function(soundid, name, soundset, p3)
    assert(type(soundid) == 'integer', 'Argument soundid must be of type integer.')
    assert(type(name) == 'string', 'Argument name must be of type string.')
    assert(type(soundset) == 'string', 'Argument soundset must be of type string.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0xCE5D0FFE83939AF1, 'void', soundid, name, soundset, p3)
end

-- Params: p5 seems to be always 0
--- @param soundid integer
--- @param soundname string
--- @param entity integer
--- @param soundsetname string
--- @param p4 boolean
--- @param p5 userdata
natives.audio_playSoundFromEntityWithSet = function(soundid, soundname, entity, soundsetname, p4, p5)
    assert(type(soundid) == 'integer', 'Argument soundid must be of type integer.')
    assert(type(soundname) == 'string', 'Argument soundname must be of type string.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(soundsetname) == 'string', 'Argument soundsetname must be of type string.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0xF1C5310FEAA36B48, 'void', soundid, soundname, entity, soundsetname, p4, p5)
end

-- Starts Audio Loop
-- _PLAY_SOUND_FROM_ENTITY* - _PLAY_SOUND_FRONTEND*
--- @param soundid integer
--- @param soundname string
--- @param x number
--- @param y number
--- @param z number
--- @param soundsetname string
--- @param p6 boolean
--- @param p7 integer
--- @param p8 boolean
natives.audio_playSoundFromPositionWithId = function(soundid, soundname, x, y, z, soundsetname, p6, p7, p8)
    assert(type(soundid) == 'integer', 'Argument soundid must be of type integer.')
    assert(type(soundname) == 'string', 'Argument soundname must be of type string.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(soundsetname) == 'string', 'Argument soundsetname must be of type string.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')
    assert(type(p7) == 'integer', 'Argument p7 must be of type integer.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')

    local call = natives.invoke(0xDCF5BA95BBF0FABA, 'void', soundid, soundname, x, y, z, soundsetname, p6, p7, p8)
end

-- Only used in R* SP Scripts
--- @param soundid integer
--- @param x number
--- @param y number
--- @param z number
natives.audio_updateSoundPosition = function(soundid, x, y, z)
    assert(type(soundid) == 'integer', 'Argument soundid must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0x0286617C8FC50A53, 'void', soundid, x, y, z)
end

--- @param soundid integer
natives.audio_stopSoundWithId = function(soundid)
    assert(type(soundid) == 'integer', 'Argument soundid must be of type integer.')

    local call = natives.invoke(0x3210BCB36AF7621B, 'void', soundid)
end

--- @param soundid integer
--- @param variablename string
--- @param variablevalue number
natives.audio_setVariableOnSoundWithId = function(soundid, variablename, variablevalue)
    assert(type(soundid) == 'integer', 'Argument soundid must be of type integer.')
    assert(type(variablename) == 'string', 'Argument variablename must be of type string.')
    assert(type(variablevalue) == 'number', 'Argument variablevalue must be of type number.')

    local call = natives.invoke(0x503703EC1781B7D6, 'void', soundid, variablename, variablevalue)
end

--- @param soundname string
--- @param soundsetname string
--- @param soundid integer
--- @return boolean
natives.audio_prepareSound = function(soundname, soundsetname, soundid)
    assert(type(soundname) == 'string', 'Argument soundname must be of type string.')
    assert(type(soundsetname) == 'string', 'Argument soundsetname must be of type string.')
    assert(type(soundid) == 'integer', 'Argument soundid must be of type integer.')

    local call = natives.invoke(0xE368E8422C860BA7, 'bool', soundname, soundsetname, soundid)
    return call
end

--- @param soundname string
--- @param soundsetname string
natives.audio_releaseShardSounds = function(soundname, soundsetname)
    assert(type(soundname) == 'string', 'Argument soundname must be of type string.')
    assert(type(soundsetname) == 'string', 'Argument soundsetname must be of type string.')

    local call = natives.invoke(0x9D746964E0CF2C5F, 'void', soundname, soundsetname)
end

-- https:--github.com/femga/rdr3_discoveries/tree/master/audio/soundsets
--- @param soundsetname string
--- @param p1 boolean
--- @return boolean
natives.audio_prepareSoundset = function(soundsetname, p1)
    assert(type(soundsetname) == 'string', 'Argument soundsetname must be of type string.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xD9130842D7226045, 'bool', soundsetname, p1)
    return call
end

--- @param soundsetname string
natives.audio_releaseSoundset = function(soundsetname)
    assert(type(soundsetname) == 'string', 'Argument soundsetname must be of type string.')

    local call = natives.invoke(0x531A78D6BF27014B, 'void', soundsetname)
end

--- @param soundname string
--- @param entity integer
--- @param soundsetname string
--- @param soundid integer
--- @return boolean
natives.audio_prepareSoundWithEntity = function(soundname, entity, soundsetname, soundid)
    assert(type(soundname) == 'string', 'Argument soundname must be of type string.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(soundsetname) == 'string', 'Argument soundsetname must be of type string.')
    assert(type(soundid) == 'integer', 'Argument soundid must be of type integer.')

    local call = natives.invoke(0x4AD019591E94C064, 'bool', soundname, entity, soundsetname, soundid)
    return call
end

--- @param p0 string
--- @param p1 number
natives.audio_n0X3E93Dddcbb6111E4 = function(p0, p1)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x3E93DDDCBB6111E4, 'void', p0, p1)
end

--- @param audioname string
--- @param soundsetname string
--- @return boolean
natives.audio_hasSoundAudioNameFinished = function(audioname, soundsetname)
    assert(type(audioname) == 'string', 'Argument audioname must be of type string.')
    assert(type(soundsetname) == 'string', 'Argument soundsetname must be of type string.')

    local call = natives.invoke(0x714A0EA7DE1167BE, 'bool', audioname, soundsetname)
    return call
end

--- @param soundid integer
--- @return boolean
natives.audio_hasSoundIdFinished = function(soundid)
    assert(type(soundid) == 'integer', 'Argument soundid must be of type integer.')

    local call = natives.invoke(0x84848E1C0FC67DBB, 'bool', soundid)
    return call
end

-- struct ScriptedSpeechParams
-- {
-- 	const char* speechName;
-- 	const char* voiceName;
-- 	alignas(8) int variation;
-- 	alignas(8) Hash speechParamHash;
-- 	alignas(8) Ped listenerPed;
-- 	alignas(8) BOOL syncOverNetwork;
-- 	alignas(8) int v7;
-- 	alignas(8) int v8;
-- };
-- 
-- static_assert(sizeof(ScriptedSpeechParams) == 0x40, "incorrect ScriptedSpeechParams size");
-- 
-- 
-- Example:
-- 
-- ScriptedSpeechParams params{"RE_PH_RHD_V3_AGGRO", "0405_U_M_M_RhdSheriff_01", 1, joaat("SPEECH_PARAMS_BEAT_SHOUTED_CLEAR"), 0, true, 1, 1};
-- PLAY_PED_AMBIENT_SPEECH_NATIVE(PLAYER_PED_ID(), (Any*)&params);
-- 
-- Old name: _PLAY_AMBIENT_SPEECH1
-- https:--github.com/femga/rdr3_discoveries/tree/master/audio/audio_banks
--- @param speaker integer
--- @param params userdata
--- @return boolean
natives.audio_playPedAmbientSpeechNative = function(speaker, params)
    assert(type(speaker) == 'integer', 'Argument speaker must be of type integer.')
    assert(type(params) == 'userdata', 'Argument params must be of type userdata.')

    local call = natives.invoke(0x8E04FEDD28D42462, 'bool', speaker, params)
    return call
end

-- Old name: _PLAY_AMBIENT_SPEECH_AT_COORDS
--- @param x number
--- @param y number
--- @param z number
--- @param params userdata
--- @return boolean
natives.audio_playAmbientSpeechFromPositionNative = function(x, y, z, params)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(params) == 'userdata', 'Argument params must be of type userdata.')

    local call = natives.invoke(0xED640017ED337E45, 'bool', x, y, z, params)
    return call
end

--- @param p0 integer
--- @param p1 userdata
--- @return any
natives.audio_n0X72E4D1C4639Bc465 = function(p0, p1)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x72E4D1C4639BC465, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @return any
natives.audio_n0Xb18Fec133C7C6C69 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xB18FEC133C7C6C69, 'any', p0)
    return call
end

--- @param p0 userdata
natives.audio_n0Xdc93F0948F2C28F4 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xDC93F0948F2C28F4, 'void', p0)
end

-- speechEventType: https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/naSpeechEventType 
-- p1 is possibly naSpeechAudibility, naSpeechType, or naSpeechEventTypeRequestPriority
-- SKIP_* - START_*
--- @param speecheventtype integer
--- @param p1 integer
--- @param p2 boolean
natives.audio_n0X0D7Fd6A55Fd63Aef = function(speecheventtype, p1, p2)
    assert(type(speecheventtype) == 'integer', 'Argument speecheventtype must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x0D7FD6A55FD63AEF, 'void', speecheventtype, p1, p2)
end

-- speechEventType: https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/naSpeechEventType 
-- SKIP_* - START_*
--- @param speecheventtype integer
natives.audio_n0X660A8F876Df1D4F8 = function(speecheventtype)
    assert(type(speecheventtype) == 'integer', 'Argument speecheventtype must be of type integer.')

    local call = natives.invoke(0x660A8F876DF1D4F8, 'void', speecheventtype)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.audio_n0X380A2E353Ad30917 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x380A2E353AD30917, 'void', p0, p1, p2)
end

--- @param p0 userdata
natives.audio_n0X0Faf7171Bf613B80 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x0FAF7171BF613B80, 'void', p0)
end

-- Valid pain IDs: 0..12
--- @param ped integer
--- @param painid integer
--- @param p2 number
--- @param p3 boolean
--- @param isnetwork boolean
natives.audio_playPain = function(ped, painid, p2, p3, isnetwork)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(painid) == 'integer', 'Argument painid must be of type integer.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')
    assert(type(isnetwork) == 'boolean', 'Argument isnetwork must be of type boolean.')

    local call = natives.invoke(0xBC9AE166038A5CEC, 'void', ped, painid, p2, p3, isnetwork)
end

--- @param p0 userdata
natives.audio_n0X6652B0C8F3D414D0 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x6652B0C8F3D414D0, 'void', p0)
end

-- Name: ROPE_SETTINGS_DEFAULT
--- @param ropeid integer
--- @param name string
natives.audio_n0Xf092B6030D6Fd49C = function(ropeid, name)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0xF092B6030D6FD49C, 'void', ropeid, name)
end

--- @param ropeid integer
--- @param p1 number
natives.audio_n0X2651Ddc0Ea269073 = function(ropeid, p1)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x2651DDC0EA269073, 'void', ropeid, p1)
end

--- @param ped integer
--- @param name string
natives.audio_setAmbientVoiceName = function(ped, name)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0x6C8065A3B780185B, 'void', ped, name)
end

-- Hashes: VOFX_PLAYER_MALE01, VOFX_PLAYER_MALE02, VOFX_PLAYER_MALE03, VOFX_PLAYER_FEMALE01, VOFX_PLAYER_FEMALE02, VOFX_PLAYER_FEMALE03
--- @param ped integer
--- @param voice integer
natives.audio_setVofxPedVoice = function(ped, voice)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(voice) == 'integer', 'Argument voice must be of type integer.')

    local call = natives.invoke(0x2703EFB583F0949A, 'void', ped, voice)
end

--- @param ped integer
--- @param p1 userdata
natives.audio_stopCurrentPlayingSpeech = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x79D2F0E66F81D90D, 'void', ped, p1)
end

--- @param ped integer
--- @param p1 userdata
natives.audio_stopCurrentPlayingAmbientSpeech = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xB8BEC0CA6F0EDB0F, 'void', ped, p1)
end

--- @param ped integer
--- @return boolean
natives.audio_isAmbientSpeechPlaying = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x9072C8B49907BFAD, 'bool', ped)
    return call
end

--- @param p0 userdata
--- @return boolean
natives.audio_isScriptedSpeechPlaying = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xCC9AA18DCC7084F4, 'bool', p0)
    return call
end

--- @param ped integer
--- @return boolean
natives.audio_isAnySpeechPlaying = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x729072355FA39EC9, 'bool', ped)
    return call
end

--- @return any
natives.audio_n0X2B101Ad9F651243A = function()

    local call = natives.invoke(0x2B101AD9F651243A, 'any')
    return call
end

--- @param p0 userdata
--- @return any
natives.audio_n0X4A98E228A936Dbcc = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x4A98E228A936DBCC, 'any', p0)
    return call
end

--- @param p0 userdata
--- @return any
natives.audio_n0X6Bffb7C276866996 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x6BFFB7C276866996, 'any', p0)
    return call
end

-- Checks if the ped can play the speech or has the speech file, last parameter is usually false.
--- @param ped integer
--- @param speechname string
--- @param unk boolean
--- @return boolean
natives.audio_doesContextExistForThisPed = function(ped, speechname, unk)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(speechname) == 'string', 'Argument speechname must be of type string.')
    assert(type(unk) == 'boolean', 'Argument unk must be of type boolean.')

    local call = natives.invoke(0x49B99BF3FDA89A7A, 'bool', ped, speechname, unk)
    return call
end

--- @param p0 userdata
--- @return any
natives.audio_n0Xf0Ee69F500952Fa5 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xF0EE69F500952FA5, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @return any
natives.audio_n0X9D6Dec9791A4E501 = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x9D6DEC9791A4E501, 'any', p0, p1, p2, p3)
    return call
end

-- Not implemented.
--- @param ped integer
natives.audio_n0X864A842B86993851 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x864A842B86993851, 'void', ped)
end

--- @param p0 string
--- @param ped integer
--- @param p2 userdata
--- @return boolean
natives.audio_isPedInCurrentConversation = function(p0, ped, p2)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x049E937F18F4020C, 'bool', p0, ped, p2)
    return call
end

--- @param ped integer
--- @param p1 boolean
--- @return boolean
natives.audio_isPedInAnyConversation = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x54B187F111D9C6F8, 'bool', ped, p1)
    return call
end

--- @param ped integer
--- @param toggle boolean
natives.audio_setPedIsDrunk = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x95D2D383D5396B8A, 'void', ped, toggle)
end

--- @param p0 userdata
--- @param p1 userdata
natives.audio_n0X3A00D87B20A2A5E4 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x3A00D87B20A2A5E4, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.audio_n0Xd47D47Efbf103Fb8 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xD47D47EFBF103FB8, 'void', p0, p1)
end

--- @param ped integer
--- @param vocalizationname string
--- @param p2 boolean
natives.audio_playAnimalVocalization = function(ped, vocalizationname, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(vocalizationname) == 'string', 'Argument vocalizationname must be of type string.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xEE066C7006C49C0A, 'void', ped, vocalizationname, p2)
end

--- @param ped integer
--- @param p1 integer
--- @param p2 boolean
natives.audio_playAnimalVocalizationPheromoneVialResponse = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x0E53530D9B2DB01D, 'void', ped, p1, p2)
end

--- @param pedhandle integer
--- @return boolean
natives.audio_isAnimalVocalizationPlaying = function(pedhandle)
    assert(type(pedhandle) == 'integer', 'Argument pedhandle must be of type integer.')

    local call = natives.invoke(0xC265DF9FB44A9FBD, 'bool', pedhandle)
    return call
end

-- Not implemented.
--- @param animal integer
--- @param mood integer
natives.audio_setAnimalMood = function(animal, mood)
    assert(type(animal) == 'integer', 'Argument animal must be of type integer.')
    assert(type(mood) == 'integer', 'Argument mood must be of type integer.')

    local call = natives.invoke(0xCC97B29285B1DC3B, 'void', animal, mood)
end

--- @param p0 userdata
--- @param p1 userdata
natives.audio_n0Xfcdec42B1C78B7F8 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xFCDEC42B1C78B7F8, 'void', p0, p1)
end

--- @param p0 userdata
natives.audio_n0Xeb4D592620B8C209 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xEB4D592620B8C209, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
natives.audio_n0Xa6847Bba4Fcdd13F = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xA6847BBA4FCDD13F, 'void', p0, p1)
end

--- @param emittername string
--- @param toggle boolean
natives.audio_setStaticEmitterEnabled = function(emittername, toggle)
    assert(type(emittername) == 'string', 'Argument emittername must be of type string.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x399D2D3B33F1B8EB, 'void', emittername, toggle)
end

--- @param play boolean
natives.audio_playEndCreditsMusic = function(play)
    assert(type(play) == 'boolean', 'Argument play must be of type boolean.')

    local call = natives.invoke(0xCD536C4D33DCC900, 'void', play)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.audio_n0X7678Fe0455Ed1145 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x7678FE0455ED1145, 'any', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param x number
--- @param y number
--- @param z number
--- @param issrlloaded boolean
--- @param p6 userdata
--- @return any
natives.audio_n0Xffe9C53Deea3Db0B = function(p0, p1, x, y, z, issrlloaded, p6)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(issrlloaded) == 'boolean', 'Argument issrlloaded must be of type boolean.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0xFFE9C53DEEA3DB0B, 'any', p0, p1, x, y, z, issrlloaded, p6)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.audio_n0X5E3Ccf03995388B5 = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x5E3CCF03995388B5, 'void', p0, p1, p2, p3)
end

natives.audio_n0X43037Abfe214A851 = function()

    local call = natives.invoke(0x43037ABFE214A851, 'void')
end

--- @param zonename string
--- @param isenabled boolean
--- @param p2 boolean
natives.audio_setAmbientZoneState = function(zonename, isenabled, p2)
    assert(type(zonename) == 'string', 'Argument zonename must be of type string.')
    assert(type(isenabled) == 'boolean', 'Argument isenabled must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xBDA07E5950085E46, 'void', zonename, isenabled, p2)
end

--- @param zonename string
--- @param p1 boolean
natives.audio_clearAmbientZoneState = function(zonename, p1)
    assert(type(zonename) == 'string', 'Argument zonename must be of type string.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x218DD44AAAC964FF, 'void', zonename, p1)
end

--- @param ambientzone string
--- @param p1 boolean
--- @param p2 boolean
natives.audio_setAmbientZoneListState = function(ambientzone, p1, p2)
    assert(type(ambientzone) == 'string', 'Argument ambientzone must be of type string.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x9748FA4DE50CCE3E, 'void', ambientzone, p1, p2)
end

--- @param ambientzone string
--- @param p1 boolean
natives.audio_clearAmbientZoneListState = function(ambientzone, p1)
    assert(type(ambientzone) == 'string', 'Argument ambientzone must be of type string.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x120C48C614909FA4, 'void', ambientzone, p1)
end

--- @param ambientzone string
--- @param p1 boolean
--- @param p2 boolean
natives.audio_setAmbientZoneStatePersistent = function(ambientzone, p1, p2)
    assert(type(ambientzone) == 'string', 'Argument ambientzone must be of type string.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x1D6650420CEC9D3B, 'void', ambientzone, p1, p2)
end

--- @param ambientzone string
--- @param p1 boolean
--- @param p2 boolean
natives.audio_setAmbientZoneListStatePersistent = function(ambientzone, p1, p2)
    assert(type(ambientzone) == 'string', 'Argument ambientzone must be of type string.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xF3638DAE8C4045E1, 'void', ambientzone, p1, p2)
end

--- @param ambientzone string
--- @param x number
--- @param y number
--- @param z number
--- @param heading number
natives.audio_setAmbientZonePosition = function(ambientzone, x, y, z, heading)
    assert(type(ambientzone) == 'string', 'Argument ambientzone must be of type string.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(heading) == 'number', 'Argument heading must be of type number.')

    local call = natives.invoke(0x3743CE6948194349, 'void', ambientzone, x, y, z, heading)
end

-- Checks whether the horn of a vehicle is currently played.
--- @param vehicle integer
--- @return boolean
natives.audio_isHornActive = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x9D6BFC12B05C6121, 'bool', vehicle)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.audio_n0Xfd461D0Aba5559B1 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xFD461D0ABA5559B1, 'void', p0, p1)
end

--- @param streamid integer
--- @return boolean
natives.audio_isStreamPlaying = function(streamid)
    assert(type(streamid) == 'integer', 'Argument streamid must be of type integer.')

    local call = natives.invoke(0xD11FA52EB849D978, 'bool', streamid)
    return call
end

--- @param streamname string
--- @param soundset string
--- @return boolean
natives.audio_loadStream = function(streamname, soundset)
    assert(type(streamname) == 'string', 'Argument streamname must be of type string.')
    assert(type(soundset) == 'string', 'Argument soundset must be of type string.')

    local call = natives.invoke(0x1F1F957154EC51DF, 'bool', streamname, soundset)
    return call
end

--- @param ped integer
--- @param streamid integer
natives.audio_playStreamFromPed = function(ped, streamid)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(streamid) == 'integer', 'Argument streamid must be of type integer.')

    local call = natives.invoke(0x89049DD63C08B5D1, 'void', ped, streamid)
end

--- @param streamid integer
natives.audio_playStreamFrontend = function(streamid)
    assert(type(streamid) == 'integer', 'Argument streamid must be of type integer.')

    local call = natives.invoke(0x58FCE43488F9F5F4, 'void', streamid)
end

--- @param x number
--- @param y number
--- @param z number
--- @param streamid integer
natives.audio_playStreamFromPosition = function(x, y, z, streamid)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(streamid) == 'integer', 'Argument streamid must be of type integer.')

    local call = natives.invoke(0x21442F412E8DE56B, 'void', x, y, z, streamid)
end

--- @param p0 userdata
--- @param p1 userdata
natives.audio_n0X3A3Be6B920525237 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x3A3BE6B920525237, 'void', p0, p1)
end

--- @param streamid integer
natives.audio_stopStream = function(streamid)
    assert(type(streamid) == 'integer', 'Argument streamid must be of type integer.')

    local call = natives.invoke(0xA4718A1419D18151, 'void', streamid)
end

--- @param ped integer
--- @param shaking boolean
natives.audio_stopPedSpeaking = function(ped, shaking)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(shaking) == 'boolean', 'Argument shaking must be of type boolean.')

    local call = natives.invoke(0x9D64D7405520E3D3, 'void', ped, shaking)
end

--- @param ped integer
--- @param toggle boolean
natives.audio_disablePedPainAudio = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xA9A41C1E940FB0E8, 'void', ped, toggle)
end

--- @param ped integer
--- @return boolean
natives.audio_isAmbientSpeechDisabled = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x932C2D096A2C3FFF, 'bool', ped)
    return call
end

--- @param ped integer
--- @param disabled boolean
--- @return any
natives.audio_setIsScriptedSpeechDisabled = function(ped, disabled)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(disabled) == 'boolean', 'Argument disabled must be of type boolean.')

    local call = natives.invoke(0xB2DE3AEBE31150E2, 'any', ped, disabled)
    return call
end

--- @param context string
--- @param block boolean
natives.audio_blockSpeechContext = function(context, block)
    assert(type(context) == 'string', 'Argument context must be of type string.')
    assert(type(block) == 'boolean', 'Argument block must be of type boolean.')

    local call = natives.invoke(0x6378A235374B852F, 'void', context, block)
end

-- _UNLOAD_[A-C]* - USE_*
--- @param speechcontext string
natives.audio_unloadSpeechContext = function(speechcontext)
    assert(type(speechcontext) == 'string', 'Argument speechcontext must be of type string.')

    local call = natives.invoke(0x87E6302FC61208CC, 'void', speechcontext)
end

--- @param vehicle integer
--- @param toggle boolean
natives.audio_setHornEnabled = function(vehicle, toggle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x76D683C108594D0E, 'void', vehicle, toggle)
end

--- @param vehicle integer
--- @param p1 userdata
natives.audio_setAudioVehiclePriority = function(vehicle, p1)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xE5564483E407F914, 'void', vehicle, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.audio_n0X259Acc5B52A2B2D9 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x259ACC5B52A2B2D9, 'void', p0, p1)
end

-- Old name: _FORCE_VEHICLE_ENGINE_AUDIO
--- @param vehicle integer
--- @param audioname string
natives.audio_forceUseAudioGameObject = function(vehicle, audioname)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(audioname) == 'string', 'Argument audioname must be of type string.')

    local call = natives.invoke(0x4F0C413926060B38, 'void', vehicle, audioname)
end

-- nullsub, doesn't do anything
--- @param active boolean
natives.audio_setGpsActive = function(active)
    assert(type(active) == 'boolean', 'Argument active must be of type boolean.')

    local call = natives.invoke(0x3BD3F52BA9B1E4E8, 'void', active)
end

--- @param audioname string
--- @param sceneset string
--- @return boolean
natives.audio_startAudioSceneset = function(audioname, sceneset)
    assert(type(audioname) == 'string', 'Argument audioname must be of type string.')
    assert(type(sceneset) == 'string', 'Argument sceneset must be of type string.')

    local call = natives.invoke(0x6339C1EA3979B5F7, 'bool', audioname, sceneset)
    return call
end

--- @param sceneset string
natives.audio_stopAudioSceneset = function(sceneset)
    assert(type(sceneset) == 'string', 'Argument sceneset must be of type string.')

    local call = natives.invoke(0x9428447DED71FC7E, 'void', sceneset)
end

--- @param audioname string
--- @param sceneset string
--- @return boolean
natives.audio_setAudioSceneset = function(audioname, sceneset)
    assert(type(audioname) == 'string', 'Argument audioname must be of type string.')
    assert(type(sceneset) == 'string', 'Argument sceneset must be of type string.')

    local call = natives.invoke(0xAC84686C06184B0D, 'bool', audioname, sceneset)
    return call
end

--- @param scene string
--- @return boolean
natives.audio_startAudioScene = function(scene)
    assert(type(scene) == 'string', 'Argument scene must be of type string.')

    local call = natives.invoke(0x013A80FC08F6E4F2, 'bool', scene)
    return call
end

--- @param p0 userdata
--- @return any
natives.audio_n0Xdc2F83A0612Ca34D = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xDC2F83A0612CA34D, 'any', p0)
    return call
end

--- @param scene string
natives.audio_stopAudioScene = function(scene)
    assert(type(scene) == 'string', 'Argument scene must be of type string.')

    local call = natives.invoke(0xDFE8422B3B94E688, 'void', scene)
end

-- _STOP_AUDIO_*
--- @param p0 userdata
natives.audio_n0X6Ab944Df68B512D3 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x6AB944DF68B512D3, 'void', p0)
end

natives.audio_stopAudioScenes = function()

    local call = natives.invoke(0xBAC7FC81A75EC1A1, 'void')
end

--- @param scene string
--- @return boolean
natives.audio_isAudioSceneActive = function(scene)
    assert(type(scene) == 'string', 'Argument scene must be of type string.')

    local call = natives.invoke(0xB65B60556E2A9225, 'bool', scene)
    return call
end

--- @param scene string
--- @param variable string
--- @param value number
natives.audio_setAudioSceneVariable = function(scene, variable, value)
    assert(type(scene) == 'string', 'Argument scene must be of type string.')
    assert(type(variable) == 'string', 'Argument variable must be of type string.')
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0xEF21A9EF089A2668, 'void', scene, variable, value)
end

--- @param entity integer
--- @return number
natives.audio_getEntityAudioMixGroup = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x8B25A18E390F75BF, 'integer', entity)
    return call
end

--- @param entity integer
--- @param groupname string
--- @param p2 number
natives.audio_addEntityToAudioMixGroup = function(entity, groupname, p2)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(groupname) == 'string', 'Argument groupname must be of type string.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')

    local call = natives.invoke(0x153973AB99FE8980, 'void', entity, groupname, p2)
end

--- @param p0 userdata
--- @return any
natives.audio_n0X131Ec9247E7A2903 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x131EC9247E7A2903, 'any', p0)
    return call
end

--- @param entity integer
--- @param p1 number
natives.audio_removeEntityFromAudioMixGroup = function(entity, p1)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x18EB48CFC41F2EA0, 'void', entity, p1)
end

--- @return any
natives.audio_n0Xe600F61F54A444A6 = function()

    local call = natives.invoke(0xE600F61F54A444A6, 'any')
    return call
end

-- Old name: AUDIO_IS_SCRIPTED_MUSIC_PLAYING
--- @return boolean
natives.audio_audioIsMusicPlaying = function()

    local call = natives.invoke(0x845FFC3A4FEEFA3E, 'bool')
    return call
end

-- Checks for MOONSHINE_BAND
--- @param entity integer
--- @return number
natives.audio_n0Xbe28Db99556Ff8D9 = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xBE28DB99556FF8D9, 'integer', entity)
    return call
end

--- @param ped integer
natives.audio_n0X8E901B65206C2D3E = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x8E901B65206C2D3E, 'void', ped)
end

--- @param ped integer
natives.audio_n0Xc4Cfce4C656Ef480 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xC4CFCE4C656EF480, 'void', ped)
end

--- @param entity integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 number
--- @param p4 userdata
natives.audio_n0Xabdb4863D3D72021 = function(entity, p1, p2, p3, p4)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0xABDB4863D3D72021, 'void', entity, p1, p2, p3, p4)
end

-- Used in Script Function NET_CAMP_CLIENT_UPDATE_PED_ROLE_STATE_SHOP: hash exists! Playing hash
--- @param ped integer
--- @param p1 integer
natives.audio_n0Xb93A769B8B726950 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xB93A769B8B726950, 'void', ped, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.audio_n0Xe891504B2F0E2Dba = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xE891504B2F0E2DBA, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.audio_n0X9Eb779765E68C52E = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x9EB779765E68C52E, 'void', p0, p1)
end

--- @param entity integer
--- @param p1 userdata
natives.audio_n0Xe9694B2D6Cb87B06 = function(entity, p1)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xE9694B2D6CB87B06, 'void', entity, p1)
end

--- @param entity integer
--- @return any
natives.audio_n0X886657C5B3D8Ede3 = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x886657C5B3D8EDE3, 'any', entity)
    return call
end

--- @param p0 userdata
--- @return any
natives.audio_n0Xc68C02De259C927C = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xC68C02DE259C927C, 'any', p0)
    return call
end

--- @param entity integer
--- @return any
natives.audio_n0X2Fff4A78384Affdf = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x2FFF4A78384AFFDF, 'any', entity)
    return call
end

--- @param entity integer
--- @return number
natives.audio_n0X62377977E4F08668 = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x62377977E4F08668, 'integer', entity)
    return call
end

--- @param ped integer
--- @return any
natives.audio_getPedSongIndexHost = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x2DBBF0C5E19383EE, 'any', ped)
    return call
end

--- @param p0 userdata
--- @return any
natives.audio_n0Xd05A460328560477 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xD05A460328560477, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.audio_n0X8D29Fdf565Ded9Ae = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x8D29FDF565DED9AE, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.audio_n0X448F2647Dd6F2E27 = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x448F2647DD6F2E27, 'void', p0, p1, p2, p3, p4)
end

--- @param p0 userdata
--- @param p1 userdata
natives.audio_n0X139A4B9Df2D26Cbf = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x139A4B9DF2D26CBF, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.audio_n0X018Abe833Ca64D2A = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x018ABE833CA64D2A, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.audio_n0Xbc07Ca8Fd710E7Fd = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xBC07CA8FD710E7FD, 'void', p0, p1)
end

--- @param eventname string
--- @return boolean
natives.audio_prepareMusicEvent = function(eventname)
    assert(type(eventname) == 'string', 'Argument eventname must be of type string.')

    local call = natives.invoke(0x1E5185B72EF5158A, 'bool', eventname)
    return call
end

--- @param eventname string
--- @return boolean
natives.audio_cancelMusicEvent = function(eventname)
    assert(type(eventname) == 'string', 'Argument eventname must be of type string.')

    local call = natives.invoke(0x5B17A90291133DA5, 'bool', eventname)
    return call
end

-- https:--github.com/femga/rdr3_discoveries/blob/master/audio/music_events/music_events.lua
--- @param eventname string
--- @return boolean
natives.audio_triggerMusicEvent = function(eventname)
    assert(type(eventname) == 'string', 'Argument eventname must be of type string.')

    local call = natives.invoke(0x706D57B0F50DA710, 'bool', eventname)
    return call
end

--- @param eventname integer
--- @return any
natives.audio_triggerMusicEventWithHash = function(eventname)
    assert(type(eventname) == 'integer', 'Argument eventname must be of type integer.')

    local call = natives.invoke(0x05D6195FB4D428F4, 'any', eventname)
    return call
end

--- @return number
natives.audio_getMusicPlaytime = function()

    local call = natives.invoke(0xE7A0D23DC414507B, 'int')
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.audio_n0Xf64034D533Ce8Aac = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xF64034D533CE8AAC, 'void', p0, p1, p2)
end

-- https:--en.m.wikipedia.org/wiki/Walla
--- @param p0 number
--- @param p1 number
natives.audio_setPedWallaDensity = function(p0, p1)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x149AEE66F0CB3A99, 'void', p0, p1)
end

natives.audio_n0Xdad6Cd07Caa4F382 = function()

    local call = natives.invoke(0xDAD6CD07CAA4F382, 'void')
end

--- @param p0 number
--- @param p1 number
natives.audio_setPedInteriorWallaDensity = function(p0, p1)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x8BF907833BE275DE, 'void', p0, p1)
end

natives.audio_forcePedPanicWalla = function()

    local call = natives.invoke(0x062D5EAD4DA2FA6A, 'void')
end

natives.audio_n0X138Adb94F8B90616 = function()

    local call = natives.invoke(0x138ADB94F8B90616, 'void')
end

--- @param ped integer
--- @param p1 boolean
--- @param hash integer
natives.audio_useFootstepScriptSweeteners = function(ped, p1, hash)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(hash) == 'integer', 'Argument hash must be of type integer.')

    local call = natives.invoke(0xBF4DC1784BE94DFA, 'void', ped, p1, hash)
end

-- https:--github.com/femga/rdr3_discoveries/tree/master/audio/audio_flags
--- @param flagname string
--- @param toggle boolean
natives.audio_setAudioFlag = function(flagname, toggle)
    assert(type(flagname) == 'string', 'Argument flagname must be of type string.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xB9EFD5C25018725A, 'void', flagname, toggle)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
natives.audio_n0X6Da15746D5Cc1A92 = function(p0, p1, p2, p3, p4, p5)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0x6DA15746D5CC1A92, 'void', p0, p1, p2, p3, p4, p5)
end

--- @param p0 userdata
--- @param p1 userdata
natives.audio_n0X078F77Fd1A43Eab3 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x078F77FD1A43EAB3, 'void', p0, p1)
end

natives.audio_n0X3D0Bbccf401B5Fdb = function()

    local call = natives.invoke(0x3D0BBCCF401B5FDB, 'void')
end

--- @param p0 string
--- @param p1 string
natives.audio_setPortalSettingsOverride = function(p0, p1)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')

    local call = natives.invoke(0x044DBAD7A7FA2BE5, 'void', p0, p1)
end

--- @param p0 string
natives.audio_removePortalSettingsOverride = function(p0)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')

    local call = natives.invoke(0xB4BBFD9CD8B3922B, 'void', p0)
end

--- @param p0 userdata
natives.audio_n0Xea546C31Fd45F8Cd = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xEA546C31FD45F8CD, 'void', p0)
end

--- @param p0 userdata
--- @return any
natives.audio_n0X44A5Eef54F62E823 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x44A5EEF54F62E823, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.audio_n0X017492B2201E3428 = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x017492B2201E3428, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
natives.audio_n0Xc886Cd666Add42E1 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xC886CD666ADD42E1, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
natives.audio_n0X5Ae0Cb5F35F034Fd = function(p0, p1, p2, p3, p4, p5, p6, p7)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')

    local call = natives.invoke(0x5AE0CB5F35F034FD, 'void', p0, p1, p2, p3, p4, p5, p6, p7)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.audio_n0X821C32C728B24477 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x821C32C728B24477, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.audio_n0X06C5Df5Ee444Bc6B = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x06C5DF5EE444BC6B, 'void', p0, p1, p2, p3, p4)
end

--- @param p0 userdata
--- @param p1 userdata
natives.audio_n0X341Cdd17Efc2472E = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x341CDD17EFC2472E, 'void', p0, p1)
end

--- @param p0 userdata
natives.audio_n0X7E176C676F8652A9 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x7E176C676F8652A9, 'void', p0)
end

--- @param p0 userdata
--- @return any
natives.audio_n0X2B9C37C01Bf25Edb = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x2B9C37C01BF25EDB, 'any', p0)
    return call
end

--- @return any
natives.audio_n0Xa6A3A3F96B8B030E = function()

    local call = natives.invoke(0xA6A3A3F96B8B030E, 'any')
    return call
end

-- Creates stream and returns streamId handle to be used with PLAY_STREAM_* natives
-- https:--github.com/femga/rdr3_discoveries/tree/master/audio/create_stream
--- @param streamname string
--- @param soundset string
--- @return number
natives.audio_getLoadedStreamIdFromCreation = function(streamname, soundset)
    assert(type(streamname) == 'string', 'Argument streamname must be of type string.')
    assert(type(soundset) == 'string', 'Argument soundset must be of type string.')

    local call = natives.invoke(0x0556C784FA056628, 'int', streamname, soundset)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.audio_n0Xc369E2234E34A0Ca = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xC369E2234E34A0CA, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.audio_n0X35B8C070E0C16E2F = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x35B8C070E0C16E2F, 'void', p0, p1)
end

natives.audio_n0Xe7E6Cb8B713Ed190 = function()

    local call = natives.invoke(0xE7E6CB8B713ED190, 'void')
end

natives.audio_n0X569Abc36E28Ddeaa = function()

    local call = natives.invoke(0x569ABC36E28DDEAA, 'void')
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.audio_n0X839C9F124Be74D94 = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x839C9F124BE74D94, 'void', p0, p1, p2, p3, p4)
end

--- @param name string
--- @param x number
--- @param y number
--- @param z number
natives.audio_audioTriggerExplosion = function(name, x, y, z)
    assert(type(name) == 'string', 'Argument name must be of type string.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0x374F0E716BFCDE82, 'void', name, x, y, z)
end

--- @param p0 userdata
natives.audio_n0X3E98Ac9D8C56C62C = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x3E98AC9D8C56C62C, 'void', p0)
end

--- @param p0 userdata
natives.audio_n0Xcbf2Bebb468A34F3 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xCBF2BEBB468A34F3, 'void', p0)
end

natives.audio_n0Xa2B851605748Ad0E = function()

    local call = natives.invoke(0xA2B851605748AD0E, 'void')
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.audio_n0Xcfad2C8Cd1054523 = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xCFAD2C8CD1054523, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
natives.audio_n0Xd733528B6C35647A = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xD733528B6C35647A, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.audio_n0X5Bc885Ebd75Faa7D = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x5BC885EBD75FAA7D, 'void', p0, p1)
end

--- @param p0 userdata
natives.audio_n0X6B7A88A61B41E589 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x6B7A88A61B41E589, 'void', p0)
end

natives.audio_n0X4Be3Ec91C01F0Fe8 = function()

    local call = natives.invoke(0x4BE3EC91C01F0FE8, 'void')
end

--- @param p0 string
natives.audio_setAudioOnlineTransitionStage = function(p0)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')

    local call = natives.invoke(0x9B1FC259187C97C0, 'void', p0)
end

natives.audio_stopAllScriptedAudioSounds = function()

    local call = natives.invoke(0x2E399EAFBEEA74D5, 'void')
end

--- @param p0 userdata
natives.audio_n0X64B956F4E761Df5C = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x64B956F4E761DF5C, 'void', p0)
end

--- @param outrpcguid userdata
--- @return boolean
natives.bounty_bountyRequestPayOffBounty = function(outrpcguid)
    assert(type(outrpcguid) == 'userdata', 'Argument outrpcguid must be of type userdata.')

    local call = natives.invoke(0x537CE992BD2D7BCB, 'bool', outrpcguid)
    return call
end

--- @param outrpcguid userdata
--- @param p1 integer
--- @param costtype integer
--- @return boolean
natives.bounty_bountyRequestPayOffBountyEx = function(outrpcguid, p1, costtype)
    assert(type(outrpcguid) == 'userdata', 'Argument outrpcguid must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(costtype) == 'integer', 'Argument costtype must be of type integer.')

    local call = natives.invoke(0x587BCEC31D64F382, 'bool', outrpcguid, p1, costtype)
    return call
end

-- crimeType: see _REPORT_CRIME
--- @param outrpcguid userdata
--- @param crimetype integer
--- @param p2 boolean
--- @return boolean
natives.bounty_bountyRequestSelfReportCrime = function(outrpcguid, crimetype, p2)
    assert(type(outrpcguid) == 'userdata', 'Argument outrpcguid must be of type userdata.')
    assert(type(crimetype) == 'integer', 'Argument crimetype must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x188B748861B5BA17, 'bool', outrpcguid, crimetype, p2)
    return call
end

--- @param outrpcguid userdata
--- @return boolean
natives.bounty_bountyRequestSelfReportKilledByBountyHunter = function(outrpcguid)
    assert(type(outrpcguid) == 'userdata', 'Argument outrpcguid must be of type userdata.')

    local call = natives.invoke(0xB462D69D406A2602, 'bool', outrpcguid)
    return call
end

--- @param gamerhandle userdata
--- @param bountydata userdata
--- @return boolean
natives.bounty_bountyGetBountyOnPlayer = function(gamerhandle, bountydata)
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')
    assert(type(bountydata) == 'userdata', 'Argument bountydata must be of type userdata.')

    local call = natives.invoke(0x4EF23E04A0C8FF51, 'bool', gamerhandle, bountydata)
    return call
end

--- @param rpcguid userdata
--- @return boolean
natives.bounty_bountyIsRequestPending = function(rpcguid)
    assert(type(rpcguid) == 'userdata', 'Argument rpcguid must be of type userdata.')

    local call = natives.invoke(0x03B61CD51097DE60, 'bool', rpcguid)
    return call
end

--- @param outrpcguid userdata
--- @param p1 integer
--- @return boolean
natives.bounty_bountyRequestBeginWantedPoster = function(outrpcguid, p1)
    assert(type(outrpcguid) == 'userdata', 'Argument outrpcguid must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xFFA13742E43507E3, 'bool', outrpcguid, p1)
    return call
end

--- @param p0 userdata
--- @return boolean
natives.bounty_n0X81847C2134039Bdc = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x81847C2134039BDC, 'bool', p0)
    return call
end

--- @param outrpcguid userdata
--- @param p1 userdata
--- @return boolean
natives.bounty_bountyRequestCompleteWantedPoster = function(outrpcguid, p1)
    assert(type(outrpcguid) == 'userdata', 'Argument outrpcguid must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x727AB6F008BB9F29, 'bool', outrpcguid, p1)
    return call
end

--- @param outrpcguid userdata
--- @param p1 userdata
--- @return boolean
natives.bounty_bountyRequestCompleteSplitWantedPoster = function(outrpcguid, p1)
    assert(type(outrpcguid) == 'userdata', 'Argument outrpcguid must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xFBD137BF0EC50FC9, 'bool', outrpcguid, p1)
    return call
end

natives.bounty_bountyCancelWantedPoster = function()

    local call = natives.invoke(0x6A9DF0FCD0C87FF9, 'void')
end

--- @param outrpcguid userdata
--- @param p1 integer
--- @param p2 integer
--- @return boolean
natives.bounty_bountyRequestBeginLegendaryMission = function(outrpcguid, p1, p2)
    assert(type(outrpcguid) == 'userdata', 'Argument outrpcguid must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0xFC81D7C7A151CFAA, 'bool', outrpcguid, p1, p2)
    return call
end

--- @param outrpcguid userdata
--- @param p1 integer
--- @param p2 integer
--- @return boolean
natives.bounty_bountyRequestBeginLegendaryMissionForPosse = function(outrpcguid, p1, p2)
    assert(type(outrpcguid) == 'userdata', 'Argument outrpcguid must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x48E4E23F1739E197, 'bool', outrpcguid, p1, p2)
    return call
end

--- @param outrpcguid userdata
--- @param p1 userdata
--- @return boolean
natives.bounty_bountyRequestCompleteLegendaryMission = function(outrpcguid, p1)
    assert(type(outrpcguid) == 'userdata', 'Argument outrpcguid must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xA7309AC0DCF6D950, 'bool', outrpcguid, p1)
    return call
end

natives.bounty_bountyCancelLegendaryMission = function()

    local call = natives.invoke(0x2BA1BCC99826CDA2, 'void')
end

--- @param p0 integer
--- @param p1 integer
--- @param p2 userdata
--- @return boolean
natives.bounty_bountyGetWantedPosterSlot = function(p0, p1, p2)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xB395A44A0C7CA615, 'bool', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return boolean
natives.bounty_bountyGetLegendaryTarget = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x85E4D7B225A30ED1, 'bool', p0, p1)
    return call
end

-- _BOUNTY_C* or _BOUNTY_GET_*
--- @param p0 userdata
--- @return boolean
natives.bounty_n0X86Ec5F83867C4B70 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x86EC5F83867C4B70, 'bool', p0)
    return call
end

--- @param p0 userdata
--- @return boolean
natives.bounty_bountyGetCooldownCollection = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x8FAF4D262FABA99C, 'bool', p0)
    return call
end

--- @param outrpcguid userdata
--- @return boolean
natives.bounty_bountyRequestBecomeTargetOfCharacterBountyHunt = function(outrpcguid)
    assert(type(outrpcguid) == 'userdata', 'Argument outrpcguid must be of type userdata.')

    local call = natives.invoke(0xB096547D61868254, 'bool', outrpcguid)
    return call
end

-- _BOUNTY_IS_* or _BOUNTY_REQUEST_*
--- @param p0 userdata
--- @return boolean
natives.bounty_n0X27D3A0E1Fe090A43 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x27D3A0E1FE090A43, 'bool', p0)
    return call
end

--- @param outrpcguid userdata
--- @param p1 integer
--- @param p2 userdata
--- @return boolean
natives.bounty_bountyRequestClaimCharacterBounty = function(outrpcguid, p1, p2)
    assert(type(outrpcguid) == 'userdata', 'Argument outrpcguid must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xA9C3B0F746375162, 'bool', outrpcguid, p1, p2)
    return call
end

--- @param outrpcguid userdata
--- @param p1 integer
--- @param p2 userdata
--- @return boolean
natives.bounty_bountyRequestPosseLeaderClaimCharacterBounty = function(outrpcguid, p1, p2)
    assert(type(outrpcguid) == 'userdata', 'Argument outrpcguid must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x5B53CA0E2AC3FF45, 'bool', outrpcguid, p1, p2)
    return call
end

--- @param outrpcguid userdata
--- @param p1 userdata
--- @return boolean
natives.bounty_bountyRequestPosseMemberClaimCharacterBountyShare = function(outrpcguid, p1)
    assert(type(outrpcguid) == 'userdata', 'Argument outrpcguid must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x22D3A61CE053270C, 'bool', outrpcguid, p1)
    return call
end

natives.bounty_bountyClearBeingBountyHunter = function()

    local call = natives.invoke(0xA59D1997ECD99F0A, 'void')
end

--- @param outrpcguid userdata
--- @return boolean
natives.bounty_bountyRequestEscapedCharacterBountyHunt = function(outrpcguid)
    assert(type(outrpcguid) == 'userdata', 'Argument outrpcguid must be of type userdata.')

    local call = natives.invoke(0x12E981D53B07BF48, 'bool', outrpcguid)
    return call
end

--- @param outrpcguid userdata
--- @return boolean
natives.bounty_bountyRequestPosseLeaderEscapedCharacterBountyHunt = function(outrpcguid)
    assert(type(outrpcguid) == 'userdata', 'Argument outrpcguid must be of type userdata.')

    local call = natives.invoke(0x2D874BA20E8E1F20, 'bool', outrpcguid)
    return call
end

--- @param outrpcguid userdata
--- @return boolean
natives.bounty_bountyRequestPosseMemberEscapedCharacterBountyHunt = function(outrpcguid)
    assert(type(outrpcguid) == 'userdata', 'Argument outrpcguid must be of type userdata.')

    local call = natives.invoke(0x8521C2E235558278, 'bool', outrpcguid)
    return call
end

natives.bounty_bountyClearBeingTarget = function()

    local call = natives.invoke(0x932DB3C05A7465D1, 'void')
end

--- @param outrpcguid userdata
--- @return boolean
natives.bounty_bountyRequestServedFullJailSentence = function(outrpcguid)
    assert(type(outrpcguid) == 'userdata', 'Argument outrpcguid must be of type userdata.')

    local call = natives.invoke(0x3F73AED12A5EF0FF, 'bool', outrpcguid)
    return call
end

--- @param outrpcguid userdata
--- @param p1 integer
--- @return boolean
natives.bounty_bountyRequestBribeJailGuard = function(outrpcguid, p1)
    assert(type(outrpcguid) == 'userdata', 'Argument outrpcguid must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x28717806D3BDD0D0, 'bool', outrpcguid, p1)
    return call
end

-- _BOUNTY_GET_*
--- @return number
natives.bounty_n0Xf8Bcc5Eca33Ac9C1 = function()

    local call = natives.invoke(0xF8BCC5ECA33AC9C1, 'int')
    return call
end

-- _BOUNTY_GET_*
--- @param p0 integer
--- @return number
natives.bounty_n0Xd6A67E2Ff373D0E3 = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0xD6A67E2FF373D0E3, 'int', p0)
    return call
end

-- Registers a script for any object with a specific model hash.
--- @param scriptname string
--- @param modelhash integer
--- @param p2 integer
--- @param activationrange number
--- @param p4 integer
--- @param p5 integer
natives.brain_registerObjectScriptBrain = function(scriptname, modelhash, p2, activationrange, p4, p5)
    assert(type(scriptname) == 'string', 'Argument scriptname must be of type string.')
    assert(type(modelhash) == 'integer', 'Argument modelhash must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(activationrange) == 'number', 'Argument activationrange must be of type number.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')
    assert(type(p5) == 'integer', 'Argument p5 must be of type integer.')

    local call = natives.invoke(0x16AF9B4EEAC3B305, 'void', scriptname, modelhash, p2, activationrange, p4, p5)
end

-- Returns threadId
--- @param entity integer
--- @param scriptname string
--- @param scriptstacksize integer
--- @param p3 boolean
--- @return number
natives.brain_startPreloadedScriptBrain = function(entity, scriptname, scriptstacksize, p3)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(scriptname) == 'string', 'Argument scriptname must be of type string.')
    assert(type(scriptstacksize) == 'integer', 'Argument scriptstacksize must be of type integer.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0x4E4507CC5E4DB869, 'int', entity, scriptname, scriptstacksize, p3)
    return call
end

-- Returns threadId
--- @param entity integer
--- @param scriptname string
--- @param p2 integer
--- @param p3 userdata
--- @param p4 integer
--- @param p5 boolean
--- @return number
natives.brain_startScriptBrain = function(entity, scriptname, p2, p3, p4, p5)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(scriptname) == 'string', 'Argument scriptname must be of type string.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')

    local call = natives.invoke(0x6F62FAE266DCFC81, 'int', entity, scriptname, p2, p3, p4, p5)
    return call
end

--- @param entity integer
natives.brain_removeScriptBrainEntity = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x38F1E09224EECA09, 'void', entity)
end

--- @return number
natives.brain_getScriptBrainEntity = function()

    local call = natives.invoke(0x6818D1A194E29983, 'int')
    return call
end

-- Common flags: 250, 99999
-- _SET_SCRIPT_BRAIN*
--- @param flag integer
natives.brain_n0Xa6Ac35Db4A7957A8 = function(flag)
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')

    local call = natives.invoke(0xA6AC35DB4A7957A8, 'void', flag)
end

-- Called with flag 0 before 0xA6AC35DB4A7957A8 in net_entity_brain
-- _SET_SCRIPT_BRAIN*
--- @param flag integer
natives.brain_n0X4Aa5Ea1Edfb25786 = function(flag)
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')

    local call = natives.invoke(0x4AA5EA1EDFB25786, 'void', flag)
end

--- @param brainset integer
natives.brain_enableScriptBrainSet = function(brainset)
    assert(type(brainset) == 'integer', 'Argument brainset must be of type integer.')

    local call = natives.invoke(0x1CF6E5C6750EADBD, 'void', brainset)
end

--- @param brainset integer
natives.brain_disableScriptBrainSet = function(brainset)
    assert(type(brainset) == 'integer', 'Argument brainset must be of type integer.')

    local call = natives.invoke(0x3F44EA613A5B2676, 'void', brainset)
end

-- Called before starting a new thread_monitor script thread in startup_mp/startup_tlg
-- Alternative name _REGISTER_SCRIPT_BRAIN
-- 
-- Old name: _PREPARE_SCRIPT_BRAIN
natives.brain_reactivateAllObjectBrainsThatAreWaitingTillOutOfRange = function()

    local call = natives.invoke(0xA32B0B05EFF75730, 'void')
end

--- @param scriptname string
natives.brain_reactivateNamedObjectBrainsWaitingTillOutOfRange = function(scriptname)
    assert(type(scriptname) == 'string', 'Argument scriptname must be of type string.')

    local call = natives.invoke(0x74C333E34DF74E8A, 'void', scriptname)
end

-- ease - smooth transition between the camera's positions
-- easeTime - Time in milliseconds for the transition to happen
-- 
-- If you have created a script (rendering) camera, and want to go back to the 
-- character (gameplay) camera, call this native with render set to FALSE.
-- Setting ease to TRUE will smooth the transition.
--- @param render boolean
--- @param ease boolean
--- @param easetime integer
--- @param p3 boolean
--- @param p4 boolean
--- @param p5 integer
natives.cam_renderScriptCams = function(render, ease, easetime, p3, p4, p5)
    assert(type(render) == 'boolean', 'Argument render must be of type boolean.')
    assert(type(ease) == 'boolean', 'Argument ease must be of type boolean.')
    assert(type(easetime) == 'integer', 'Argument easetime must be of type integer.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')
    assert(type(p5) == 'integer', 'Argument p5 must be of type integer.')

    local call = natives.invoke(0x33281167E4942E4F, 'void', render, ease, easetime, p3, p4, p5)
end

-- This native makes the gameplay camera zoom into first person/third person with a special effect.
-- blendBackSmoothingType: https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eBlendBackSmoothing
--- @param render boolean
--- @param distance number
--- @param blendbacksmoothingtype integer
--- @param p3 boolean
--- @param p4 boolean
--- @param p5 boolean
natives.cam_stopRenderingScriptCamsUsingCatchUp = function(render, distance, blendbacksmoothingtype, p3, p4, p5)
    assert(type(render) == 'boolean', 'Argument render must be of type boolean.')
    assert(type(distance) == 'number', 'Argument distance must be of type number.')
    assert(type(blendbacksmoothingtype) == 'integer', 'Argument blendbacksmoothingtype must be of type integer.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')

    local call = natives.invoke(0x8C7C7FF7CF0E5153, 'void', render, distance, blendbacksmoothingtype, p3, p4, p5)
end

--- @param camname string
--- @param p1 boolean
--- @return number
natives.cam_createCam = function(camname, p1)
    assert(type(camname) == 'string', 'Argument camname must be of type string.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xE72CDBA7F0A02DD6, 'int', camname, p1)
    return call
end

--- @param camname string
--- @param posx number
--- @param posy number
--- @param posz number
--- @param rotx number
--- @param roty number
--- @param rotz number
--- @param fov number
--- @param p8 boolean
--- @param p9 integer
--- @return number
natives.cam_createCamWithParams = function(camname, posx, posy, posz, rotx, roty, rotz, fov, p8, p9)
    assert(type(camname) == 'string', 'Argument camname must be of type string.')
    assert(type(posx) == 'number', 'Argument posx must be of type number.')
    assert(type(posy) == 'number', 'Argument posy must be of type number.')
    assert(type(posz) == 'number', 'Argument posz must be of type number.')
    assert(type(rotx) == 'number', 'Argument rotx must be of type number.')
    assert(type(roty) == 'number', 'Argument roty must be of type number.')
    assert(type(rotz) == 'number', 'Argument rotz must be of type number.')
    assert(type(fov) == 'number', 'Argument fov must be of type number.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')
    assert(type(p9) == 'integer', 'Argument p9 must be of type integer.')

    local call = natives.invoke(0x40C23491CE83708E, 'int', camname, posx, posy, posz, rotx, roty, rotz, fov, p8, p9)
    return call
end

--- @param camhash integer
--- @param p1 boolean
--- @return number
natives.cam_createCamera = function(camhash, p1)
    assert(type(camhash) == 'integer', 'Argument camhash must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x57CDF879EA466C46, 'int', camhash, p1)
    return call
end

--- @param camhash integer
--- @param posx number
--- @param posy number
--- @param posz number
--- @param rotx number
--- @param roty number
--- @param rotz number
--- @param fov number
--- @param p8 boolean
--- @param p9 userdata
--- @return number
natives.cam_createCameraWithParams = function(camhash, posx, posy, posz, rotx, roty, rotz, fov, p8, p9)
    assert(type(camhash) == 'integer', 'Argument camhash must be of type integer.')
    assert(type(posx) == 'number', 'Argument posx must be of type number.')
    assert(type(posy) == 'number', 'Argument posy must be of type number.')
    assert(type(posz) == 'number', 'Argument posz must be of type number.')
    assert(type(rotx) == 'number', 'Argument rotx must be of type number.')
    assert(type(roty) == 'number', 'Argument roty must be of type number.')
    assert(type(rotz) == 'number', 'Argument rotz must be of type number.')
    assert(type(fov) == 'number', 'Argument fov must be of type number.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')

    local call = natives.invoke(0x98B99B9F27E2D60B, 'int', camhash, posx, posy, posz, rotx, roty, rotz, fov, p8, p9)
    return call
end

-- BOOL param indicates whether the cam should be destroyed if it belongs to the calling script.
--- @param cam integer
--- @param p1 boolean
natives.cam_destroyCam = function(cam, p1)
    assert(type(cam) == 'integer', 'Argument cam must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x4E67E0B6D7FD5145, 'void', cam, p1)
end

-- BOOL param indicates whether the cam should be destroyed if it belongs to the calling script.
--- @param p0 boolean
natives.cam_destroyAllCams = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x163600D6E136C9F8, 'void', p0)
end

-- Returns whether or not the passed camera handle exists.
--- @param cam integer
--- @return boolean
natives.cam_doesCamExist = function(cam)
    assert(type(cam) == 'integer', 'Argument cam must be of type integer.')

    local call = natives.invoke(0x153AD457764FD704, 'bool', cam)
    return call
end

-- Set camera as active/inactive.
--- @param cam integer
--- @param active boolean
natives.cam_setCamActive = function(cam, active)
    assert(type(cam) == 'integer', 'Argument cam must be of type integer.')
    assert(type(active) == 'boolean', 'Argument active must be of type boolean.')

    local call = natives.invoke(0x87295BCA613800C8, 'void', cam, active)
end

-- Returns whether or not the passed camera handle is active.
--- @param cam integer
--- @return boolean
natives.cam_isCamActive = function(cam)
    assert(type(cam) == 'integer', 'Argument cam must be of type integer.')

    local call = natives.invoke(0x63EFCC7E1810B8E6, 'bool', cam)
    return call
end

--- @param cam integer
--- @return boolean
natives.cam_isCamRendering = function(cam)
    assert(type(cam) == 'integer', 'Argument cam must be of type integer.')

    local call = natives.invoke(0x4415F8A6C536D39F, 'bool', cam)
    return call
end

--- @return number
natives.cam_getRenderingCam = function()

    local call = natives.invoke(0x03A8931ECC8015D6, 'int')
    return call
end

--- @param cam integer
--- @return number, number, number
natives.cam_getCamCoord = function(cam)
    assert(type(cam) == 'integer', 'Argument cam must be of type integer.')

    local call = natives.invoke(0x6B12F11C2A9F0344, 'vector3', cam)
    return call.x, call.y, call.z
end

-- rotationOrder: https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eEulerRotationOrder
--- @param cam integer
--- @param rotationorder integer
--- @return number, number, number
natives.cam_getCamRot = function(cam, rotationorder)
    assert(type(cam) == 'integer', 'Argument cam must be of type integer.')
    assert(type(rotationorder) == 'integer', 'Argument rotationorder must be of type integer.')

    local call = natives.invoke(0x9BF96B57254E7889, 'vector3', cam, rotationorder)
    return call.x, call.y, call.z
end

--- @param cam integer
--- @return number
natives.cam_getCamFov = function(cam)
    assert(type(cam) == 'integer', 'Argument cam must be of type integer.')

    local call = natives.invoke(0x8101D32A0A6B0F60, 'float', cam)
    return call
end

--- @param cam integer
--- @param posx number
--- @param posy number
--- @param posz number
--- @param rotx number
--- @param roty number
--- @param rotz number
--- @param fieldofview number
--- @param p8 userdata
--- @param p9 integer
--- @param p10 integer
--- @param p11 integer
--- @param p12 userdata
--- @param p13 userdata
natives.cam_setCamParams = function(cam, posx, posy, posz, rotx, roty, rotz, fieldofview, p8, p9, p10, p11, p12, p13)
    assert(type(cam) == 'integer', 'Argument cam must be of type integer.')
    assert(type(posx) == 'number', 'Argument posx must be of type number.')
    assert(type(posy) == 'number', 'Argument posy must be of type number.')
    assert(type(posz) == 'number', 'Argument posz must be of type number.')
    assert(type(rotx) == 'number', 'Argument rotx must be of type number.')
    assert(type(roty) == 'number', 'Argument roty must be of type number.')
    assert(type(rotz) == 'number', 'Argument rotz must be of type number.')
    assert(type(fieldofview) == 'number', 'Argument fieldofview must be of type number.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'integer', 'Argument p9 must be of type integer.')
    assert(type(p10) == 'integer', 'Argument p10 must be of type integer.')
    assert(type(p11) == 'integer', 'Argument p11 must be of type integer.')
    assert(type(p12) == 'userdata', 'Argument p12 must be of type userdata.')
    assert(type(p13) == 'userdata', 'Argument p13 must be of type userdata.')

    local call = natives.invoke(0xA47BBFFFB83D4D0A, 'void', cam, posx, posy, posz, rotx, roty, rotz, fieldofview, p8, p9, p10, p11, p12, p13)
end

-- Sets the position of the cam.
--- @param cam integer
--- @param posx number
--- @param posy number
--- @param posz number
natives.cam_setCamCoord = function(cam, posx, posy, posz)
    assert(type(cam) == 'integer', 'Argument cam must be of type integer.')
    assert(type(posx) == 'number', 'Argument posx must be of type number.')
    assert(type(posy) == 'number', 'Argument posy must be of type number.')
    assert(type(posz) == 'number', 'Argument posz must be of type number.')

    local call = natives.invoke(0xF9EE7D419EE49DE6, 'void', cam, posx, posy, posz)
end

-- Sets the rotation of the cam.
--- @param cam integer
--- @param rotx number
--- @param roty number
--- @param rotz number
--- @param rotationorder integer
natives.cam_setCamRot = function(cam, rotx, roty, rotz, rotationorder)
    assert(type(cam) == 'integer', 'Argument cam must be of type integer.')
    assert(type(rotx) == 'number', 'Argument rotx must be of type number.')
    assert(type(roty) == 'number', 'Argument roty must be of type number.')
    assert(type(rotz) == 'number', 'Argument rotz must be of type number.')
    assert(type(rotationorder) == 'integer', 'Argument rotationorder must be of type integer.')

    local call = natives.invoke(0x63DFA6810AD78719, 'void', cam, rotx, roty, rotz, rotationorder)
end

-- Sets the field of view of the cam.
-- 
-- Min: 1.0f
-- Max: 130.0f
--- @param cam integer
--- @param fieldofview number
natives.cam_setCamFov = function(cam, fieldofview)
    assert(type(cam) == 'integer', 'Argument cam must be of type integer.')
    assert(type(fieldofview) == 'number', 'Argument fieldofview must be of type number.')

    local call = natives.invoke(0x27666E5988D9D429, 'void', cam, fieldofview)
end

--- @param cam integer
--- @param nearclip number
natives.cam_setCamNearClip = function(cam, nearclip)
    assert(type(cam) == 'integer', 'Argument cam must be of type integer.')
    assert(type(nearclip) == 'number', 'Argument nearclip must be of type number.')

    local call = natives.invoke(0xA924028272A61364, 'void', cam, nearclip)
end

--- @param cam integer
--- @param farclip number
natives.cam_setCamFarClip = function(cam, farclip)
    assert(type(cam) == 'integer', 'Argument cam must be of type integer.')
    assert(type(farclip) == 'number', 'Argument farclip must be of type number.')

    local call = natives.invoke(0x5E32817BF6302111, 'void', cam, farclip)
end

--- @param cam integer
--- @param strength number
natives.cam_setCamMotionBlurStrength = function(cam, strength)
    assert(type(cam) == 'integer', 'Argument cam must be of type integer.')
    assert(type(strength) == 'number', 'Argument strength must be of type number.')

    local call = natives.invoke(0x45FD891364181F9E, 'void', cam, strength)
end

natives.cam_n0Xfc3F638Be2B6Bb02 = function()

    local call = natives.invoke(0xFC3F638BE2B6BB02, 'void')
end

--- @param cam integer
--- @param args userdata
natives.cam_n0Xe4B7945Ef4F1Bfb2 = function(cam, args)
    assert(type(cam) == 'integer', 'Argument cam must be of type integer.')
    assert(type(args) == 'userdata', 'Argument args must be of type userdata.')

    local call = natives.invoke(0xE4B7945EF4F1BFB2, 'void', cam, args)
end

--- @param p0 userdata
natives.cam_n0X1Fc6C727D30Ffdde = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x1FC6C727D30FFDDE, 'void', p0)
end

-- Last param determines if its relative to the Entity
--- @param cam integer
--- @param entity integer
--- @param xoffset number
--- @param yoffset number
--- @param zoffset number
--- @param isrelative boolean
natives.cam_attachCamToEntity = function(cam, entity, xoffset, yoffset, zoffset, isrelative)
    assert(type(cam) == 'integer', 'Argument cam must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(xoffset) == 'number', 'Argument xoffset must be of type number.')
    assert(type(yoffset) == 'number', 'Argument yoffset must be of type number.')
    assert(type(zoffset) == 'number', 'Argument zoffset must be of type number.')
    assert(type(isrelative) == 'boolean', 'Argument isrelative must be of type boolean.')

    local call = natives.invoke(0xFDC0DF7F6FB0A592, 'void', cam, entity, xoffset, yoffset, zoffset, isrelative)
end

-- boneIndex: https:--github.com/femga/rdr3_discoveries/tree/master/boneNames
--- @param cam integer
--- @param ped integer
--- @param boneindex integer
--- @param x number
--- @param y number
--- @param z number
--- @param heading boolean
natives.cam_attachCamToPedBone = function(cam, ped, boneindex, x, y, z, heading)
    assert(type(cam) == 'integer', 'Argument cam must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(boneindex) == 'integer', 'Argument boneindex must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(heading) == 'boolean', 'Argument heading must be of type boolean.')

    local call = natives.invoke(0xDFC1E4A44C0324CA, 'void', cam, ped, boneindex, x, y, z, heading)
end

--- @param cam integer
natives.cam_detachCam = function(cam)
    assert(type(cam) == 'integer', 'Argument cam must be of type integer.')

    local call = natives.invoke(0x05B41DDBEB559556, 'void', cam)
end

--- @param cam integer
--- @param x number
--- @param y number
--- @param z number
natives.cam_pointCamAtCoord = function(cam, x, y, z)
    assert(type(cam) == 'integer', 'Argument cam must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0x948B39341C3A40C2, 'void', cam, x, y, z)
end

--- @param cam integer
--- @param entity integer
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 boolean
natives.cam_pointCamAtEntity = function(cam, entity, p2, p3, p4, p5)
    assert(type(cam) == 'integer', 'Argument cam must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')

    local call = natives.invoke(0xFC2867E6074D3A61, 'void', cam, entity, p2, p3, p4, p5)
end

--- @param cam integer
natives.cam_stopCamPointing = function(cam)
    assert(type(cam) == 'integer', 'Argument cam must be of type integer.')

    local call = natives.invoke(0xCA1B30A3357C71F1, 'void', cam)
end

--- @param cam integer
--- @param distance number
natives.cam_setCamFocusDistance = function(cam, distance)
    assert(type(cam) == 'integer', 'Argument cam must be of type integer.')
    assert(type(distance) == 'number', 'Argument distance must be of type number.')

    local call = natives.invoke(0x11F32BB61B756732, 'void', cam, distance)
end

--- @param cam integer
--- @param pause boolean
natives.cam_pauseCameraFocus = function(cam, pause)
    assert(type(cam) == 'integer', 'Argument cam must be of type integer.')
    assert(type(pause) == 'boolean', 'Argument pause must be of type boolean.')

    local call = natives.invoke(0x9F97E85EC142255E, 'void', cam, pause)
end

-- Allows you to aim and shoot at the direction the camera is facing.
--- @param cam integer
--- @param toggle boolean
natives.cam_setCamAffectsAiming = function(cam, toggle)
    assert(type(cam) == 'integer', 'Argument cam must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x3CB9E8BDE5E76F33, 'void', cam, toggle)
end

--- @param cam integer
--- @param p1 boolean
natives.cam_setCamControlsMiniMapHeading = function(cam, p1)
    assert(type(cam) == 'integer', 'Argument cam must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x1B8F3CE5A6001298, 'void', cam, p1)
end

--- @param cam integer
--- @param p1 boolean
natives.cam_allowMotionBlurDecay = function(cam, p1)
    assert(type(cam) == 'integer', 'Argument cam must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x42ED56B02E05D109, 'void', cam, p1)
end

-- p7 (length) determines the length of the spline, affects camera path and duration of transition between previous node and this one
-- 
-- p8 big values ~100 will slow down the camera movement before reaching this node
-- 
-- p9 != 0 seems to override the rotation/pitch (bool?)
--- @param camera integer
--- @param x number
--- @param y number
--- @param z number
--- @param xrot number
--- @param yrot number
--- @param zrot number
--- @param length integer
--- @param p8 integer
--- @param p9 integer
natives.cam_addCamSplineNode = function(camera, x, y, z, xrot, yrot, zrot, length, p8, p9)
    assert(type(camera) == 'integer', 'Argument camera must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(xrot) == 'number', 'Argument xrot must be of type number.')
    assert(type(yrot) == 'number', 'Argument yrot must be of type number.')
    assert(type(zrot) == 'number', 'Argument zrot must be of type number.')
    assert(type(length) == 'integer', 'Argument length must be of type integer.')
    assert(type(p8) == 'integer', 'Argument p8 must be of type integer.')
    assert(type(p9) == 'integer', 'Argument p9 must be of type integer.')

    local call = natives.invoke(0xF1F57F9D230F9CD1, 'void', camera, x, y, z, xrot, yrot, zrot, length, p8, p9)
end

--- @param cam integer
--- @param p1 number
natives.cam_setCamSplinePhase = function(cam, p1)
    assert(type(cam) == 'integer', 'Argument cam must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0xF1898A68E7C15636, 'void', cam, p1)
end

-- Can use this with SET_CAM_SPLINE_PHASE to set the float it this native returns.
-- 
-- (returns 1.0f when no nodes has been added, reached end of non existing spline)
--- @param cam integer
--- @return number
natives.cam_getCamSplinePhase = function(cam)
    assert(type(cam) == 'integer', 'Argument cam must be of type integer.')

    local call = natives.invoke(0x095EDCD24D90033A, 'float', cam)
    return call
end

--- @param cam integer
--- @param timeduration integer
natives.cam_setCamSplineDuration = function(cam, timeduration)
    assert(type(cam) == 'integer', 'Argument cam must be of type integer.')
    assert(type(timeduration) == 'integer', 'Argument timeduration must be of type integer.')

    local call = natives.invoke(0xFF6311652CA91015, 'void', cam, timeduration)
end

--- @param cam integer
--- @param smoothingstyle integer
natives.cam_setCamSplineSmoothingStyle = function(cam, smoothingstyle)
    assert(type(cam) == 'integer', 'Argument cam must be of type integer.')
    assert(type(smoothingstyle) == 'integer', 'Argument smoothingstyle must be of type integer.')

    local call = natives.invoke(0x84B3645618E726B0, 'void', cam, smoothingstyle)
end

--- @param camto integer
--- @param camfrom integer
--- @param duration integer
--- @param easelocation integer
--- @param easerotation integer
natives.cam_setCamActiveWithInterp = function(camto, camfrom, duration, easelocation, easerotation)
    assert(type(camto) == 'integer', 'Argument camto must be of type integer.')
    assert(type(camfrom) == 'integer', 'Argument camfrom must be of type integer.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')
    assert(type(easelocation) == 'integer', 'Argument easelocation must be of type integer.')
    assert(type(easerotation) == 'integer', 'Argument easerotation must be of type integer.')

    local call = natives.invoke(0x8B15AE2987C1AC8F, 'void', camto, camfrom, duration, easelocation, easerotation)
end

--- @param cam integer
--- @return boolean
natives.cam_isCamInterpolating = function(cam)
    assert(type(cam) == 'integer', 'Argument cam must be of type integer.')

    local call = natives.invoke(0x578F8F1CAA17BD2B, 'bool', cam)
    return call
end

--- @param cam integer
--- @param type string
--- @param amplitude number
natives.cam_shakeCam = function(cam, type, amplitude)
    assert(type(cam) == 'integer', 'Argument cam must be of type integer.')
    assert(type(type) == 'string', 'Argument type must be of type string.')
    assert(type(amplitude) == 'number', 'Argument amplitude must be of type number.')

    local call = natives.invoke(0xF9A7BCF5D050D4E7, 'void', cam, type, amplitude)
end

--- @param cam integer
--- @return boolean
natives.cam_isCamShaking = function(cam)
    assert(type(cam) == 'integer', 'Argument cam must be of type integer.')

    local call = natives.invoke(0x2EEB402BD7320159, 'bool', cam)
    return call
end

--- @param cam integer
--- @param p1 boolean
natives.cam_stopCamShaking = function(cam, p1)
    assert(type(cam) == 'integer', 'Argument cam must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xB78CC4B4706614B0, 'void', cam, p1)
end

--- @param cam integer
--- @param animname string
--- @param animdictionary string
--- @param x number
--- @param y number
--- @param z number
--- @param xrot number
--- @param yrot number
--- @param zrot number
--- @param animflags integer
--- @param rotorder integer
--- @return boolean
natives.cam_playCamAnim = function(cam, animname, animdictionary, x, y, z, xrot, yrot, zrot, animflags, rotorder)
    assert(type(cam) == 'integer', 'Argument cam must be of type integer.')
    assert(type(animname) == 'string', 'Argument animname must be of type string.')
    assert(type(animdictionary) == 'string', 'Argument animdictionary must be of type string.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(xrot) == 'number', 'Argument xrot must be of type number.')
    assert(type(yrot) == 'number', 'Argument yrot must be of type number.')
    assert(type(zrot) == 'number', 'Argument zrot must be of type number.')
    assert(type(animflags) == 'integer', 'Argument animflags must be of type integer.')
    assert(type(rotorder) == 'integer', 'Argument rotorder must be of type integer.')

    local call = natives.invoke(0xA263DDF694D563F6, 'bool', cam, animname, animdictionary, x, y, z, xrot, yrot, zrot, animflags, rotorder)
    return call
end

natives.cam_n0Xcf69Ea05Cd9C33C9 = function()

    local call = natives.invoke(0xCF69EA05CD9C33C9, 'void')
end

-- Only used in R* Script camera_photomode
--- @return boolean
natives.cam_isAnimSceneCamActive = function()

    local call = natives.invoke(0x20389408F0E93B9A, 'bool')
    return call
end

--- @return boolean
natives.cam_isScreenFadedOut = function()

    local call = natives.invoke(0xF5472C80DF2FF847, 'bool')
    return call
end

--- @return boolean
natives.cam_isScreenFadedIn = function()

    local call = natives.invoke(0x37F9A426FBCF4AF2, 'bool')
    return call
end

--- @return boolean
natives.cam_isScreenFadingOut = function()

    local call = natives.invoke(0x02F39BEFE7B88D00, 'bool')
    return call
end

--- @return boolean
natives.cam_isScreenFadingIn = function()

    local call = natives.invoke(0x0CECCC63FFA2EF24, 'bool')
    return call
end

-- Fades the screen in.
-- 
-- duration: The time the fade should take, in milliseconds.
--- @param duration integer
natives.cam_doScreenFadeIn = function(duration)
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')

    local call = natives.invoke(0x6A053CF596F67DF7, 'void', duration)
end

-- Fades the screen out.
-- 
-- duration: The time the fade should take, in milliseconds.
--- @param duration integer
natives.cam_doScreenFadeOut = function(duration)
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')

    local call = natives.invoke(0x40C719A5E410B9E4, 'void', duration)
end

-- More info: https:--en.wikipedia.org/wiki/Letterboxing_(filming)
--- @return boolean
natives.cam_hasLetterBox = function()

    local call = natives.invoke(0x81DCFD13CF39920E, 'bool')
    return call
end

-- Creates Cinematic Black Bars (at top and bottom)
-- Disable instantly: false/false, Enable instantly: true/true
--- @param p0 boolean
--- @param p1 boolean
natives.cam_requestLetterBoxNow = function(p0, p1)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x69D65E89FFD72313, 'void', p0, p1)
end

--- @param p0 integer
--- @param p1 integer
--- @param p2 boolean
--- @param p3 integer
--- @param p4 boolean
--- @param p5 boolean
natives.cam_requestLetterBoxOvertime = function(p0, p1, p2, p3, p4, p5)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')

    local call = natives.invoke(0xE296208C273BD7F0, 'void', p0, p1, p2, p3, p4, p5)
end

natives.cam_forceLetterBoxThisUpdate = function()

    local call = natives.invoke(0xC64ABC0676AF262B, 'void')
end

-- More info: see HAS_LETTER_BOX
--- @return number
natives.cam_getLetterBoxRatio = function()

    local call = natives.invoke(0xA2B1C7EF759A63CE, 'float')
    return call
end

--- @return any
natives.cam_n0X73Ff6Be63Dc18819 = function()

    local call = natives.invoke(0x73FF6BE63DC18819, 'any')
    return call
end

--- @return any
natives.cam_n0X450769C833D58844 = function()

    local call = natives.invoke(0x450769C833D58844, 'any')
    return call
end

--- @param p0 boolean
--- @param p1 integer
natives.cam_setWidescreenBorders = function(p0, p1)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xD7F4D54CF80AFA34, 'void', p0, p1)
end

--- @return number, number, number
natives.cam_getGameplayCamCoord = function()

    local call = natives.invoke(0x595320200B98596E, 'vector3')
    return call.x, call.y, call.z
end

--- @param rotationorder integer
--- @return number, number, number
natives.cam_getGameplayCamRot = function(rotationorder)
    assert(type(rotationorder) == 'integer', 'Argument rotationorder must be of type integer.')

    local call = natives.invoke(0x0252D2B5582957A6, 'vector3', rotationorder)
    return call.x, call.y, call.z
end

--- @return number
natives.cam_getGameplayCamFov = function()

    local call = natives.invoke(0xF6A96E5ACEEC6E50, 'float')
    return call
end

--- @param p0 number
natives.cam_setGameplayCamMaxMotionBlurStrengthThisUpdate = function(p0)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')

    local call = natives.invoke(0x8459B3E64257B21D, 'void', p0)
end

--- @return number
natives.cam_getGameplayCamRelativeHeading = function()

    local call = natives.invoke(0xC4ABF536048998AA, 'float')
    return call
end

-- Sets the camera position relative to heading in float from -360 to +360.
-- 
-- Heading is always 0 in aiming camera.
--- @param heading number
--- @param p1 number
natives.cam_setGameplayCamRelativeHeading = function(heading, p1)
    assert(type(heading) == 'number', 'Argument heading must be of type number.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x5D1EB123EAC5D071, 'void', heading, p1)
end

--- @return number
natives.cam_getGameplayCamRelativePitch = function()

    local call = natives.invoke(0x99AADEBBA803F827, 'float')
    return call
end

-- Sets the camera pitch.
-- 
-- Parameters:
-- x = pitches the camera on the x axis.
-- Value2 = always seems to be hex 0x3F800000 (1.000000 float).
--- @param x number
--- @param value2 number
natives.cam_setGameplayCamRelativePitch = function(x, value2)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(value2) == 'number', 'Argument value2 must be of type number.')

    local call = natives.invoke(0xFB760AF4F537B8BF, 'void', x, value2)
end

--- @param p0 userdata
natives.cam_n0X0961B089947Ba6D0 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x0961B089947BA6D0, 'void', p0)
end

natives.cam_n0X04084490Cc302Cfb = function()

    local call = natives.invoke(0x04084490CC302CFB, 'void')
end

--- @param p0 boolean
natives.cam_setScriptedCameraIsFirstPersonThisFrame = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x1DD95A8D6B24A0C9, 'void', p0)
end

-- Returns true if player is in first person
--- @return boolean
natives.cam_isInFullFirstPersonMode = function()

    local call = natives.invoke(0xD1BA66940E94C547, 'bool')
    return call
end

--- @param shakename string
--- @param intensity number
natives.cam_shakeGameplayCam = function(shakename, intensity)
    assert(type(shakename) == 'string', 'Argument shakename must be of type string.')
    assert(type(intensity) == 'number', 'Argument intensity must be of type number.')

    local call = natives.invoke(0xD9B31B4650520529, 'void', shakename, intensity)
end

-- shakeName: REINFORCED_LASSO_STRUGGLE_SHAKE
-- _RES*
--- @param shakename string
--- @param intensity number
natives.cam_n0Xc3E9E5D4F413B773 = function(shakename, intensity)
    assert(type(shakename) == 'string', 'Argument shakename must be of type string.')
    assert(type(intensity) == 'number', 'Argument intensity must be of type number.')

    local call = natives.invoke(0xC3E9E5D4F413B773, 'void', shakename, intensity)
end

--- @return boolean
natives.cam_isGameplayCamShaking = function()

    local call = natives.invoke(0xEA4C5F4AA0A4DBEF, 'bool')
    return call
end

-- shakeNames in script_rel: CORRECTOR_SHAKE, MINIGAME_BOUNTY_SHAKE, POV_DRUNK_SHAKE, DRUNK_SHAKE, MINIGAME_TRAIN_SHAKE
-- _IS_GAMEPLAY_*
--- @param shakename string
--- @return boolean
natives.cam_n0X0060B31968E60E41 = function(shakename)
    assert(type(shakename) == 'string', 'Argument shakename must be of type string.')

    local call = natives.invoke(0x0060B31968E60E41, 'bool', shakename)
    return call
end

-- Sets the amplitude for the gameplay (i.e. 3rd or 1st) camera to shake.
--- @param amplitude number
natives.cam_setGameplayCamShakeAmplitude = function(amplitude)
    assert(type(amplitude) == 'number', 'Argument amplitude must be of type number.')

    local call = natives.invoke(0x570E35F5C4A44838, 'void', amplitude)
end

-- _SET_GAMEPLAY_P* - _SET_GAMEPLAY_V*
--- @param shakename string
--- @param intensity number
natives.cam_n0Xfefddc6E8Fdf8A75 = function(shakename, intensity)
    assert(type(shakename) == 'string', 'Argument shakename must be of type string.')
    assert(type(intensity) == 'number', 'Argument intensity must be of type number.')

    local call = natives.invoke(0xFEFDDC6E8FDF8A75, 'void', shakename, intensity)
end

--- @param p0 boolean
natives.cam_stopGameplayCamShaking = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0xE0DE43D290FB65F9, 'void', p0)
end

-- script_rel: DRUNK_SHAKE, REINFORCED_LASSO_STRUGGLE_SHAKE, CORRECTOR_SHAKE, MINIGAME_BOUNTY_SHAKE, HAND_SHAKE, MINIGAME_TRAIN_SHAKE
-- script_mp_rel: DRUNK_SHAKE, REINFORCED_LASSO_STRUGGLE_SHAKE
-- _STOP_GAMEPLAY_CAM* - _STOP_I*
--- @param shakename string
--- @param p1 boolean
natives.cam_stopGameplayCamShakingWithName = function(shakename, p1)
    assert(type(shakename) == 'string', 'Argument shakename must be of type string.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x4285804FD65D8066, 'void', shakename, p1)
end

-- Forces gameplay cam to specified ped as if you were the ped or spectating it
--- @param ped integer
natives.cam_setGameplayCamFollowPedThisUpdate = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x82E41D6ADE924FCA, 'void', ped)
end

--- @return boolean
natives.cam_isGameplayCamRendering = function()

    local call = natives.invoke(0x8660EA714834E412, 'bool')
    return call
end

--- @return boolean
natives.cam_isInterpolatingFromScriptCams = function()

    local call = natives.invoke(0x251241CAEC707106, 'bool')
    return call
end

--- @return boolean
natives.cam_isInterpolatingToScriptCams = function()

    local call = natives.invoke(0x43AB9D5A7D415478, 'bool')
    return call
end

--- @return boolean
natives.cam_isGameplayCamLookingBehind = function()

    local call = natives.invoke(0x8FE0D24FFD04D5A2, 'bool')
    return call
end

-- Old name: _DISABLE_CAM_COLLISION_FOR_ENTITY
--- @param entity integer
natives.cam_setGameplayCamIgnoreEntityCollisionThisUpdate = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xD904F75DBD7AB865, 'void', entity)
end

--- @param entity integer
natives.cam_disableCamCollisionForObject = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x7E3F546ACFE6C8D9, 'void', entity)
end

--- @param p0 userdata
natives.cam_n0X39073Da4Eddbc91D = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x39073DA4EDDBC91D, 'void', p0)
end

natives.cam_n0X70A6658D476C6187 = function()

    local call = natives.invoke(0x70A6658D476C6187, 'void')
end

natives.cam_n0X18C3Dfac458783Bb = function()

    local call = natives.invoke(0x18C3DFAC458783BB, 'void')
end

natives.cam_n0Xf1A6Feedf3776Ef9 = function()

    local call = natives.invoke(0xF1A6FEEDF3776EF9, 'void')
end

natives.cam_n0Xe6F364De6C2Fdefe = function()

    local call = natives.invoke(0xE6F364DE6C2FDEFE, 'void')
end

-- NPLOI_UPDATE__GUN_SPINNING_PREVIEW - Adjusting Camera / Ped Reset Flags This Frame
-- _DISABLE_*
natives.cam_n0X0F1Ffef5D54Ae832 = function()

    local call = natives.invoke(0x0F1FFEF5D54AE832, 'void')
end

natives.cam_n0X3C8F74E8Fe751614 = function()

    local call = natives.invoke(0x3C8F74E8FE751614, 'void')
end

natives.cam_n0X06557F6D96C86881 = function()

    local call = natives.invoke(0x06557F6D96C86881, 'void')
end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @return boolean
natives.cam_isSphereVisible = function(x, y, z, radius)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')

    local call = natives.invoke(0x2E941B5FFA2989C6, 'bool', x, y, z, radius)
    return call
end

--- @return any
natives.cam_n0X190F7Da1Ac09A8Ef = function()

    local call = natives.invoke(0x190F7DA1AC09A8EF, 'any')
    return call
end

-- Used in Script Function SHOP_CAMERA_SUPPORT_START_NEW_ORBIT
--- @param caminitialzoom number
natives.cam_setGameplayCamInitialZoom = function(caminitialzoom)
    assert(type(caminitialzoom) == 'number', 'Argument caminitialzoom must be of type number.')

    local call = natives.invoke(0xBCDA0BA8762FACB9, 'void', caminitialzoom)
end

--- @param caminitialheading number
natives.cam_setGameplayCamInitialHeading = function(caminitialheading)
    assert(type(caminitialheading) == 'number', 'Argument caminitialheading must be of type number.')

    local call = natives.invoke(0x6C1053C433A573CF, 'void', caminitialheading)
end

--- @param caminitialpitch number
natives.cam_setGameplayCamInitialPitch = function(caminitialpitch)
    assert(type(caminitialpitch) == 'number', 'Argument caminitialpitch must be of type number.')

    local call = natives.invoke(0x449995EA846D3FC2, 'void', caminitialpitch)
end

-- minimum: Degrees between -180f and 180f.
-- maximum: Degrees between -180f and 180f.
-- 
-- Clamps the gameplay camera's current yaw.
-- 
-- Eg. _CLAMP_GAMEPLAY_CAM_YAW(0.0f, 0.0f) will set the horizontal angle directly behind the player.
-- 
-- Old name: _CLAMP_GAMEPLAY_CAM_YAW
--- @param minimum number
--- @param maximum number
natives.cam_setThirdPersonCamRelativeHeadingLimitsThisUpdate = function(minimum, maximum)
    assert(type(minimum) == 'number', 'Argument minimum must be of type number.')
    assert(type(maximum) == 'number', 'Argument maximum must be of type number.')

    local call = natives.invoke(0x14F3947318CA8AD2, 'void', minimum, maximum)
end

-- minimum: Degrees between -90f and 90f.
-- maximum: Degrees between -90f and 90f.
-- 
-- Clamps the gameplay camera's current pitch.
-- 
-- Eg. _CLAMP_GAMEPLAY_CAM_PITCH(0.0f, 0.0f) will set the vertical angle directly behind the player.
-- 
-- Old name: _CLAMP_GAMEPLAY_CAM_PITCH
--- @param minimum number
--- @param maximum number
natives.cam_setThirdPersonCamRelativePitchLimitsThisUpdate = function(minimum, maximum)
    assert(type(minimum) == 'number', 'Argument minimum must be of type number.')
    assert(type(maximum) == 'number', 'Argument maximum must be of type number.')

    local call = natives.invoke(0x326C7AA308F3DF6A, 'void', minimum, maximum)
end

-- Old name: _ANIMATE_GAMEPLAY_CAM_ZOOM
--- @param p0 number
--- @param distance number
natives.cam_setThirdPersonCamOrbitDistanceLimitsThisUpdate = function(p0, distance)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')
    assert(type(distance) == 'number', 'Argument distance must be of type number.')

    local call = natives.invoke(0x2126C740A4AC370B, 'void', p0, distance)
end

-- Forces gameplay cam to specified vehicle as if you were in it
--- @param vehicle integer
--- @param p1 integer
natives.cam_setInVehicleCamStateThisUpdate = function(vehicle, p1)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xFA1D5E8D1C3CCD67, 'void', vehicle, p1)
end

-- Old name: _DISABLE_FIRST_PERSON_CAM_THIS_FRAME
natives.cam_disableOnFootFirstPersonViewThisUpdate = function()

    local call = natives.invoke(0x9C473089A934C930, 'void')
end

-- nullsub, doesn't do anything
natives.cam_disableFirstPersonFlashEffectThisUpdate = function()

    local call = natives.invoke(0x77D65669A05D1A1A, 'void')
end

natives.cam_disableCinematicModeThisFrame = function()

    local call = natives.invoke(0x8910C24B7E0046EC, 'void')
end

--- @return boolean
natives.cam_isInCinematicMode = function()

    local call = natives.invoke(0x74F1D22EFA71FAB8, 'bool')
    return call
end

natives.cam_n0X718C6Ecf5E8Cbdd4 = function()

    local call = natives.invoke(0x718C6ECF5E8CBDD4, 'void')
end

-- Forces camera position to second furthest 3rd person
natives.cam_forceThirdPersonCamThisFrame = function()

    local call = natives.invoke(0x8370D34BD2E60B73, 'void')
end

-- Forces camera position to furthest 3rd person
natives.cam_forceThirdPersonCamFarThisFrame = function()

    local call = natives.invoke(0x1CFB749AD4317BDE, 'void')
end

-- Returns true if first person camera is active in saloon1.ysc
--- @return boolean
natives.cam_forceFirstPersonCamThisFrame = function()

    local call = natives.invoke(0x90DA5BA5C2635416, 'bool')
    return call
end

-- Does the same as 0x9C473089A934C930 (DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE)
natives.cam_disableOnFootFirstPersonViewThisUpdate2 = function()

    local call = natives.invoke(0x05AB44D906738426, 'void')
end

-- Zooms in the gameplay camera to the next zoom level?
-- USE_* - WAS_*
natives.cam_n0X632Be8D84846Fa56 = function()

    local call = natives.invoke(0x632BE8D84846FA56, 'void')
end

--- @param p0 userdata
natives.cam_n0X71D71E08A7Ed5Bd7 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x71D71E08A7ED5BD7, 'void', p0)
end

--- @return boolean
natives.cam_isFollowVehicleCamActive = function()

    local call = natives.invoke(0xA40C2F51FB589E9A, 'bool')
    return call
end

natives.cam_n0X7E40A01B11398Fcb = function()

    local call = natives.invoke(0x7E40A01B11398FCB, 'void')
end

--- @return boolean
natives.cam_isAimCamActive = function()

    local call = natives.invoke(0x698F456FB909E077, 'bool')
    return call
end

--- @return boolean
natives.cam_isFirstPersonAimCamActive = function()

    local call = natives.invoke(0xF63134C54B6EC212, 'bool')
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return boolean
natives.cam_isFirstPersonCameraActive = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xA24C1D341C6E0D53, 'bool', p0, p1, p2)
    return call
end

--- @return any
natives.cam_n0Xdc62Cd70658E7A02 = function()

    local call = natives.invoke(0xDC62CD70658E7A02, 'any')
    return call
end

--- @return any
natives.cam_n0X796085220Adcc847 = function()

    local call = natives.invoke(0x796085220ADCC847, 'any')
    return call
end

--- @return any
natives.cam_n0Xb6A80E1E3A5444F1 = function()

    local call = natives.invoke(0xB6A80E1E3A5444F1, 'any')
    return call
end

--- @return any
natives.cam_n0X8B1A5Fe7E41E52B2 = function()

    local call = natives.invoke(0x8B1A5FE7E41E52B2, 'any')
    return call
end

--- @return number
natives.cam_getFirstPersonAimCamZoomFactor = function()

    local call = natives.invoke(0xB4132CA1B0EE1365, 'float')
    return call
end

--- @param p0 number
--- @param p1 number
natives.cam_setFirstPersonAimCamRelativeHeadingLimitsThisUpdate = function(p0, p1)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x05BD5E4088B30A66, 'void', p0, p1)
end

-- Old name: _SET_FIRST_PERSON_CAM_PITCH_RANGE
--- @param p0 number
--- @param p1 number
natives.cam_setFirstPersonAimCamRelativePitchLimitsThisUpdate = function(p0, p1)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x715B7F5E8BED32A2, 'void', p0, p1)
end

--- @param p0 userdata
natives.cam_n0Xc205B3C54C6A4E37 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xC205B3C54C6A4E37, 'void', p0)
end

--- @return number, number, number
natives.cam_getFinalRenderedCamCoord = function()

    local call = natives.invoke(0x5352E025EC2B416F, 'vector3')
    return call.x, call.y, call.z
end

--- @param rotationorder integer
--- @return number, number, number
natives.cam_getFinalRenderedCamRot = function(rotationorder)
    assert(type(rotationorder) == 'integer', 'Argument rotationorder must be of type integer.')

    local call = natives.invoke(0x602685BD85DD26CA, 'vector3', rotationorder)
    return call.x, call.y, call.z
end

--- @return number
natives.cam_getFinalRenderedCamFov = function()

    local call = natives.invoke(0x04AF77971E508F6A, 'float')
    return call
end

-- Hash used in finale1.ysc: 1726668277
--- @param x number
--- @param y number
--- @param z number
--- @param duration integer
--- @param blendoutduration integer
--- @param blendinduration integer
--- @param p6 integer
natives.cam_setGameplayCoordHint = function(x, y, z, duration, blendoutduration, blendinduration, p6)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')
    assert(type(blendoutduration) == 'integer', 'Argument blendoutduration must be of type integer.')
    assert(type(blendinduration) == 'integer', 'Argument blendinduration must be of type integer.')
    assert(type(p6) == 'integer', 'Argument p6 must be of type integer.')

    local call = natives.invoke(0xFA33B8C69A4A6A0F, 'void', x, y, z, duration, blendoutduration, blendinduration, p6)
end

--- @param p0 integer
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param p4 boolean
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
natives.cam_setGameplayPedHint = function(p0, x1, y1, z1, p4, p5, p6, p7)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(x1) == 'number', 'Argument x1 must be of type number.')
    assert(type(y1) == 'number', 'Argument y1 must be of type number.')
    assert(type(z1) == 'number', 'Argument z1 must be of type number.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')

    local call = natives.invoke(0x90FB951648851733, 'void', p0, x1, y1, z1, p4, p5, p6, p7)
end

--- @param p0 userdata
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 boolean
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
natives.cam_setGameplayVehicleHint = function(p0, p1, p2, p3, p4, p5, p6, p7)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')

    local call = natives.invoke(0xE2B2BB7DAC280515, 'void', p0, p1, p2, p3, p4, p5, p6, p7)
end

--- @param p0 userdata
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 boolean
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
natives.cam_setGameplayObjectHint = function(p0, p1, p2, p3, p4, p5, p6, p7)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')

    local call = natives.invoke(0xC40551D65F2BF297, 'void', p0, p1, p2, p3, p4, p5, p6, p7)
end

-- p6 & p7 - possibly length or time
--- @param entity integer
--- @param xoffset number
--- @param yoffset number
--- @param zoffset number
--- @param p4 boolean
--- @param p5 integer
--- @param p6 integer
--- @param p7 integer
--- @param p8 userdata
natives.cam_setGameplayEntityHint = function(entity, xoffset, yoffset, zoffset, p4, p5, p6, p7, p8)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(xoffset) == 'number', 'Argument xoffset must be of type number.')
    assert(type(yoffset) == 'number', 'Argument yoffset must be of type number.')
    assert(type(zoffset) == 'number', 'Argument zoffset must be of type number.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')
    assert(type(p5) == 'integer', 'Argument p5 must be of type integer.')
    assert(type(p6) == 'integer', 'Argument p6 must be of type integer.')
    assert(type(p7) == 'integer', 'Argument p7 must be of type integer.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')

    local call = natives.invoke(0xD1F7F32640ADFD12, 'void', entity, xoffset, yoffset, zoffset, p4, p5, p6, p7, p8)
end

--- @return boolean
natives.cam_isGameplayHintActive = function()

    local call = natives.invoke(0x2E04AB5FEE042D4A, 'bool')
    return call
end

--- @param p0 boolean
natives.cam_stopGameplayHint = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x1BCEC33D54CFCA8A, 'void', p0)
end

--- @param p0 boolean
natives.cam_stopCodeGameplayHint = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x93759A83D0D844E7, 'void', p0)
end

-- UPDATE_PLAYER_PLAYING_STATE - Releasing Lasso Hint Cam
-- Return type char in ida
-- _SET_GAMEPLAY_HINT_*
--- @param p0 boolean
natives.cam_n0X88544C0E3291Dcae = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x88544C0E3291DCAE, 'void', p0)
end

--- @param fov number
natives.cam_setGameplayHintFov = function(fov)
    assert(type(fov) == 'number', 'Argument fov must be of type number.')

    local call = natives.invoke(0x661E58BC6F00A49A, 'void', fov)
end

--- @param p0 number
natives.cam_setGameplayHintFollowDistanceScalar = function(p0)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')

    local call = natives.invoke(0xDDDC54181868F81F, 'void', p0)
end

--- @param p0 number
natives.cam_setGameplayHintBaseOrbitPitchOffset = function(p0)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')

    local call = natives.invoke(0x421192A2DA48FD01, 'void', p0)
end

-- Old name: _SET_GAMEPLAY_HINT_ANIM_OFFSETX
--- @param p0 number
natives.cam_setGameplayHintCameraRelativeSideOffset = function(p0)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')

    local call = natives.invoke(0xF86B6F93727C59C9, 'void', p0)
end

-- Old name: _SET_GAMEPLAY_HINT_ANIM_OFFSETY
--- @param p0 number
natives.cam_setGameplayHintCameraRelativeVerticalOffset = function(p0)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')

    local call = natives.invoke(0x29E74F819150CC32, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
natives.cam_n0Xf48664E9C83825E3 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xF48664E9C83825E3, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.cam_n0X1F6Ebd94680252Ce = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x1F6EBD94680252CE, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.cam_n0Xe28F73212A813E82 = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xE28F73212A813E82, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
natives.cam_n0X4D2F46D1B28D90Fb = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x4D2F46D1B28D90FB, 'void', p0, p1)
end

-- [SHOP_CAMERA_SUPPORT_START_NEW_ORBIT]
-- p0: struct<32> /*256*/
--- @param p0 userdata
natives.cam_startCameraOrbit = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x65B205BF30C13DDB, 'void', p0)
end

natives.cam_n0X641092322A8852Ab = function()

    local call = natives.invoke(0x641092322A8852AB, 'void')
end

--- @param p0 userdata
natives.cam_n0Xdb382Fe20C2Da222 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xDB382FE20C2DA222, 'void', p0)
end

--- @param p0 userdata
natives.cam_n0X2Dd3149Dc34A3F4C = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x2DD3149DC34A3F4C, 'void', p0)
end

natives.cam_freezeGameplayCamThisFrame = function()

    local call = natives.invoke(0x027CAB2C3AF27010, 'void')
end

natives.cam_n0X3C486E334520579D = function()

    local call = natives.invoke(0x3C486E334520579D, 'void')
end

natives.cam_n0X41E452A3C580D1A7 = function()

    local call = natives.invoke(0x41E452A3C580D1A7, 'void')
end

--- @param p0 boolean
natives.cam_setCinematicButtonActive = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0xB90411F480457A6C, 'void', p0)
end

--- @return boolean
natives.cam_isCinematicCamRendering = function()

    local call = natives.invoke(0xBF7C780731AADBF8, 'bool')
    return call
end

-- Old name: _DISABLE_VEHICLE_FIRST_PERSON_CAM_THIS_FRAME
natives.cam_disableCinematicBonnetCameraThisUpdate = function()

    local call = natives.invoke(0xA5929C2E57AC90D1, 'void')
end

-- Old name: _INVALIDATE_VEHICLE_IDLE_CAM
natives.cam_invalidateCinematicVehicleIdleMode = function()

    local call = natives.invoke(0x634F4A0562CF19B8, 'void')
end

--- @param p0 boolean
natives.cam_forceCinematicRenderingThisUpdate = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x702B75DC9D3EDE56, 'void', p0)
end

--- @param p0 userdata
natives.cam_n0X9Ac65A36D3C0C189 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x9AC65A36D3C0C189, 'void', p0)
end

-- _IS_SCRIPTED_S*
--- @return boolean
natives.cam_n0X975F6Ebb62632Fe3 = function()

    local call = natives.invoke(0x975F6EBB62632FE3, 'bool')
    return call
end

--- @param p0 boolean
natives.cam_setCinematicModeActive = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0xCE7A90B160F75046, 'void', p0)
end

--- @return boolean
natives.cam_n0X1811A02277A9E49D = function()

    local call = natives.invoke(0x1811A02277A9E49D, 'bool')
    return call
end

-- Used for DUELING_MANAGE_DEATH_CAMERA - Initializing death camera
-- Params: targetPed = death cam focuses on it
--- @param targetped integer
natives.cam_forceCinematicDeathCamOnPed = function(targetped)
    assert(type(targetped) == 'integer', 'Argument targetped must be of type integer.')

    local call = natives.invoke(0xE3639DB78B3B5400, 'void', targetped)
end

-- Used to enable headshot kill replay when you headshot set ped.
-- Params: p1 seems to be 0 or 1 in R* Scripts
--- @param ped integer
--- @param p1 integer
natives.cam_reactivatePedHeadshotExecuteSlowcam = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x986F7A51EE3E1F92, 'void', ped, p1)
end

--- @param p0 userdata
natives.cam_n0X5B637D6F3B67716A = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x5B637D6F3B67716A, 'void', p0)
end

--- @param p0 userdata
natives.cam_n0Xc252C0Cc969Af79A = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xC252C0CC969AF79A, 'void', p0)
end

--- @param p0 userdata
natives.cam_n0Xe2Bb2D6A9Fe2Ecde = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xE2BB2D6A9FE2ECDE, 'void', p0)
end

-- Used for DUELING_MANAGE_DEATH_CAMERA - Initializing death camera
-- _SET_P* - _SET_S*
--- @param p0 boolean
natives.cam_setStartCinematicDeathCam = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x6E969927CF632608, 'void', p0)
end

--- @return any
natives.cam_n0X6072B7420A83A03F = function()

    local call = natives.invoke(0x6072B7420A83A03F, 'any')
    return call
end

-- Used for DUELING_LOCK_CAMERA_CONTROLS_THIS_FRAME: Disabling look/aim controls
-- _IS_SC(REEN_)* (?)
--- @return boolean
natives.cam_n0X1204Eb53A5Fbc63D = function()

    local call = natives.invoke(0x1204EB53A5FBC63D, 'bool')
    return call
end

--- @param p0 userdata
natives.cam_n0X6519238858Af5479 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x6519238858AF5479, 'void', p0)
end

-- Creates Kill Cam for specified Ped Handle
--- @param ped integer
natives.cam_createKillCam = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x2F994CC29CAA9D22, 'void', ped)
end

--- @return boolean
natives.cam_isCamPhotofxRunning = function()

    local call = natives.invoke(0xA14D5FE82BCB1D9E, 'bool')
    return call
end

--- @return any
natives.cam_n0X6Dfd37E586D4F44F = function()

    local call = natives.invoke(0x6DFD37E586D4F44F, 'any')
    return call
end

--- @return any
natives.cam_n0X80D7A3E39B120Bc4 = function()

    local call = natives.invoke(0x80D7A3E39B120BC4, 'any')
    return call
end

-- Maintains the death camera after respawn
--- @param toggle boolean
natives.cam_n0X63E5841A9264D016 = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x63E5841A9264D016, 'void', toggle)
end

natives.cam_triggerMissionFailedCam = function()

    local call = natives.invoke(0x9A92C06ACBAF9731, 'void')
end

natives.cam_n0X16E9Abdd34Ddd931 = function()

    local call = natives.invoke(0x16E9ABDD34DDD931, 'void')
end

--- @return boolean
natives.cam_isDeathFailCameraRunning = function()

    local call = natives.invoke(0x139EFB0A71DD9011, 'bool')
    return call
end

--- @return any
natives.cam_n0X7Ce9Dc58E3E4755F = function()

    local call = natives.invoke(0x7CE9DC58E3E4755F, 'any')
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.cam_n0X3B8E3Ad9677Ce12B = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x3B8E3AD9677CE12B, 'void', p0, p1, p2)
end

--- @param p0 userdata
natives.cam_n0Xdf7F5Be9150E47E4 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xDF7F5BE9150E47E4, 'void', p0)
end

--- @param p0 userdata
natives.cam_n0Xb85C13E0Bf1F2A1C = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xB85C13E0BF1F2A1C, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.cam_n0X066167C63111D8Cf = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x066167C63111D8CF, 'void', p0, p1, p2, p3, p4)
end

-- NPLOI_UPDATE__GUN_SPINNING_PREVIEW - Adjusting Camera / Ped Reset Flags This Frame
-- _DISABLE_*
natives.cam_n0Xa8Ba2E0204D8486F = function()

    local call = natives.invoke(0xA8BA2E0204D8486F, 'void')
end

-- Camera will be or is running
natives.cam_n0Xc3742F1Fdf0A6824 = function()

    local call = natives.invoke(0xC3742F1FDF0A6824, 'void')
end

--- @param p0 userdata
--- @param p1 userdata
natives.cam_n0X0Ff7125F07Deb84F = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x0FF7125F07DEB84F, 'void', p0, p1)
end

natives.cam_n0X6Cab0Ba160B168D2 = function()

    local call = natives.invoke(0x6CAB0BA160B168D2, 'void')
end

--- @param locationdictname string
natives.cam_loadCinematicCamLocation = function(locationdictname)
    assert(type(locationdictname) == 'string', 'Argument locationdictname must be of type string.')

    local call = natives.invoke(0x1B3C2D961F5FC0E1, 'void', locationdictname)
end

--- @param dictionaryname string
natives.cam_unloadCinematicCameraLocation = function(dictionaryname)
    assert(type(dictionaryname) == 'string', 'Argument dictionaryname must be of type string.')

    local call = natives.invoke(0x2412216FCC7B4E3E, 'void', dictionaryname)
end

--- @param slocationdictname string
--- @return boolean
natives.cam_isCinematicCamLocationLoaded = function(slocationdictname)
    assert(type(slocationdictname) == 'string', 'Argument slocationdictname must be of type string.')

    local call = natives.invoke(0xAA235E2F2C09E952, 'bool', slocationdictname)
    return call
end

-- Checks data related to Cinematic Cam Locations, if the check fails, the location is being loaded using 0x1B3C2D961F5FC0E1.
--- @param locationdictname string
--- @return boolean
natives.cam_isCinematicCamLocationLoaded2 = function(locationdictname)
    assert(type(locationdictname) == 'string', 'Argument locationdictname must be of type string.')

    local call = natives.invoke(0x595550376B7EA230, 'bool', locationdictname)
    return call
end

--- @param dictionary string
--- @param shotname string
--- @param duration integer
--- @return any
natives.cam_n0X465F04F68Ad38197 = function(dictionary, shotname, duration)
    assert(type(dictionary) == 'string', 'Argument dictionary must be of type string.')
    assert(type(shotname) == 'string', 'Argument shotname must be of type string.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')

    local call = natives.invoke(0x465F04F68AD38197, 'any', dictionary, shotname, duration)
    return call
end

--- @param dictionary string
--- @param shotname string
--- @param duration integer
--- @return any
natives.cam_n0Xea113Bf9B0C0C5D7 = function(dictionary, shotname, duration)
    assert(type(dictionary) == 'string', 'Argument dictionary must be of type string.')
    assert(type(shotname) == 'string', 'Argument shotname must be of type string.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')

    local call = natives.invoke(0xEA113BF9B0C0C5D7, 'any', dictionary, shotname, duration)
    return call
end

--- @param dictionary string
--- @param shotname string
--- @param duration integer
natives.cam_cinematicLocationTriggerScriptedShotEvent2 = function(dictionary, shotname, duration)
    assert(type(dictionary) == 'string', 'Argument dictionary must be of type string.')
    assert(type(shotname) == 'string', 'Argument shotname must be of type string.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')

    local call = natives.invoke(0xBC016635D6A73B31, 'void', dictionary, shotname, duration)
end

--- @param dictionary string
--- @param shotname string
--- @param cameraname string
--- @param p3 userdata
natives.cam_cinematicLocationTriggerScriptedShotEvent = function(dictionary, shotname, cameraname, p3)
    assert(type(dictionary) == 'string', 'Argument dictionary must be of type string.')
    assert(type(shotname) == 'string', 'Argument shotname must be of type string.')
    assert(type(cameraname) == 'string', 'Argument cameraname must be of type string.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x02389579A53C3276, 'void', dictionary, shotname, cameraname, p3)
end

--- @param dictionary string
--- @param shotname string
--- @param duration integer
natives.cam_n0Xa54D643D0773Eb65 = function(dictionary, shotname, duration)
    assert(type(dictionary) == 'string', 'Argument dictionary must be of type string.')
    assert(type(shotname) == 'string', 'Argument shotname must be of type string.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')

    local call = natives.invoke(0xA54D643D0773EB65, 'void', dictionary, shotname, duration)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.cam_cinematicLocationStopScriptedShotEvent = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x6D4D25C2137FF511, 'void', p0, p1, p2)
end

--- @param dictionary string
--- @param shotname string
--- @param duration integer
--- @return boolean
natives.cam_n0Xc3Aebb276825A359 = function(dictionary, shotname, duration)
    assert(type(dictionary) == 'string', 'Argument dictionary must be of type string.')
    assert(type(shotname) == 'string', 'Argument shotname must be of type string.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')

    local call = natives.invoke(0xC3AEBB276825A359, 'bool', dictionary, shotname, duration)
    return call
end

--- @param dictionary string
--- @param shotname string
--- @param cameraname string
--- @return boolean
natives.cam_n0X1D931B7Cc0Ee3956 = function(dictionary, shotname, cameraname)
    assert(type(dictionary) == 'string', 'Argument dictionary must be of type string.')
    assert(type(shotname) == 'string', 'Argument shotname must be of type string.')
    assert(type(cameraname) == 'string', 'Argument cameraname must be of type string.')

    local call = natives.invoke(0x1D931B7CC0EE3956, 'bool', dictionary, shotname, cameraname)
    return call
end

--- @param name string
--- @param x number
--- @param y number
--- @param z number
--- @param rotx number
--- @param roty number
--- @param rotz number
natives.cam_cinematicLocationSetLocationAndRotation = function(name, x, y, z, rotx, roty, rotz)
    assert(type(name) == 'string', 'Argument name must be of type string.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(rotx) == 'number', 'Argument rotx must be of type number.')
    assert(type(roty) == 'number', 'Argument roty must be of type number.')
    assert(type(rotz) == 'number', 'Argument rotz must be of type number.')

    local call = natives.invoke(0x0E94C95EC3185FA9, 'void', name, x, y, z, rotx, roty, rotz)
end

-- Only used in R* Script fm_mission_controller
--- @param name string
--- @param entity integer
natives.cam_cinematicLocationOverrideTargetEntityThisUpdate = function(name, entity)
    assert(type(name) == 'string', 'Argument name must be of type string.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x0B0F914459731F60, 'void', name, entity)
end

--- @param cameradictionary string
natives.cam_loadCameraDataDict = function(cameradictionary)
    assert(type(cameradictionary) == 'string', 'Argument cameradictionary must be of type string.')

    local call = natives.invoke(0x6A4D224FC7643941, 'void', cameradictionary)
end

--- @param cameradictionary string
natives.cam_unloadCameraDataDict = function(cameradictionary)
    assert(type(cameradictionary) == 'string', 'Argument cameradictionary must be of type string.')

    local call = natives.invoke(0x798BE43C9393632B, 'void', cameradictionary)
end

--- @param cameradictionary string
--- @return boolean
natives.cam_isCamDataDictLoaded = function(cameradictionary)
    assert(type(cameradictionary) == 'string', 'Argument cameradictionary must be of type string.')

    local call = natives.invoke(0xDD0B7C5AE58F721D, 'bool', cameradictionary)
    return call
end

--- @param cameradictionary string
--- @return boolean
natives.cam_n0Xc285Fd21294A1C49 = function(cameradictionary)
    assert(type(cameradictionary) == 'string', 'Argument cameradictionary must be of type string.')

    local call = natives.invoke(0xC285FD21294A1C49, 'bool', cameradictionary)
    return call
end

--- @param cameradictionary string
natives.cam_camCreate = function(cameradictionary)
    assert(type(cameradictionary) == 'string', 'Argument cameradictionary must be of type string.')

    local call = natives.invoke(0xB8B207C34285E978, 'void', cameradictionary)
end

--- @param cameradictionary string
natives.cam_camDestroy = function(cameradictionary)
    assert(type(cameradictionary) == 'string', 'Argument cameradictionary must be of type string.')

    local call = natives.invoke(0x0A5A4F1979ABB40E, 'void', cameradictionary)
end

--- @param cameradictionary string
--- @return boolean
natives.cam_isCameraAvailable = function(cameradictionary)
    assert(type(cameradictionary) == 'string', 'Argument cameradictionary must be of type string.')

    local call = natives.invoke(0x927B810E43E99932, 'bool', cameradictionary)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.cam_n0X4138Ee36Bc3Dc0A7 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x4138EE36BC3DC0A7, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.cam_n0Xfeb8646818294C75 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xFEB8646818294C75, 'void', p0, p1)
end

--- @param p0 userdata
natives.cam_n0X29E6655Df3590B0D = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x29E6655DF3590B0D, 'void', p0)
end

--- @param cameradictionary string
natives.cam_n0Xac77757C05De9E5A = function(cameradictionary)
    assert(type(cameradictionary) == 'string', 'Argument cameradictionary must be of type string.')

    local call = natives.invoke(0xAC77757C05DE9E5A, 'void', cameradictionary)
end

--- @param p0 userdata
natives.cam_n0X8E036B41C37D0E5F = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x8E036B41C37D0E5F, 'void', p0)
end

--- @param p0 userdata
natives.cam_n0X1D9F72Dd4Fd9A9D7 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x1D9F72DD4FD9A9D7, 'void', p0)
end

--- @param cameradictionary string
natives.cam_camCreate2 = function(cameradictionary)
    assert(type(cameradictionary) == 'string', 'Argument cameradictionary must be of type string.')

    local call = natives.invoke(0x7B0279170961A73F, 'void', cameradictionary)
end

--- @param p0 userdata
natives.cam_n0X728491Fb3Dffef99 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x728491FB3DFFEF99, 'void', p0)
end

--- @return any
natives.cam_n0X14C4A49E36C29E49 = function()

    local call = natives.invoke(0x14C4A49E36C29E49, 'any')
    return call
end

--- @return any
natives.cam_n0Xf824530B612Fe0Ce = function()

    local call = natives.invoke(0xF824530B612FE0CE, 'any')
    return call
end

--- @return any
natives.cam_n0Xef9A3132A0Aa6B19 = function()

    local call = natives.invoke(0xEF9A3132A0AA6B19, 'any')
    return call
end

--- @return any
natives.cam_n0X5060Fa977Cea4455 = function()

    local call = natives.invoke(0x5060FA977CEA4455, 'any')
    return call
end

--- @return number
natives.cam_getPhotoModeFocalLength = function()

    local call = natives.invoke(0x2533BAFFBE737E54, 'float')
    return call
end

--- @return number
natives.cam_getPhotoModeFocusDistance = function()

    local call = natives.invoke(0x18FC740FFDCD7454, 'float')
    return call
end

--- @return number
natives.cam_getPhotoModeDof = function()

    local call = natives.invoke(0x4653A741D17F2CD0, 'float')
    return call
end

--- @return any
natives.cam_n0X2Ab7C81B3F70570C = function()

    local call = natives.invoke(0x2AB7C81B3F70570C, 'any')
    return call
end

--- @param p0 userdata
natives.cam_n0X8505E05Fc8822843 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x8505E05FC8822843, 'void', p0)
end

-- SET_CLOCK_TIME(12, 34, 56);
--- @param hour integer
--- @param minute integer
--- @param second integer
natives.clock_setClockTime = function(hour, minute, second)
    assert(type(hour) == 'integer', 'Argument hour must be of type integer.')
    assert(type(minute) == 'integer', 'Argument minute must be of type integer.')
    assert(type(second) == 'integer', 'Argument second must be of type integer.')

    local call = natives.invoke(0x3A52C59FFB2DEED8, 'void', hour, minute, second)
end

--- @param toggle boolean
--- @param unused userdata
natives.clock_pauseClock = function(toggle, unused)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')
    assert(type(unused) == 'userdata', 'Argument unused must be of type userdata.')

    local call = natives.invoke(0x4D1A590C92BF377E, 'void', toggle, unused)
end

--- @param toggle boolean
natives.clock_pauseClockThisFrame = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x568D998A9FF96774, 'void', toggle)
end

--- @param hour integer
--- @param minute integer
--- @param second integer
natives.clock_advanceClockTimeTo = function(hour, minute, second)
    assert(type(hour) == 'integer', 'Argument hour must be of type integer.')
    assert(type(minute) == 'integer', 'Argument minute must be of type integer.')
    assert(type(second) == 'integer', 'Argument second must be of type integer.')

    local call = natives.invoke(0x0184750AE88D0B1D, 'void', hour, minute, second)
end

--- @param hours integer
--- @param minutes integer
--- @param seconds integer
natives.clock_addToClockTime = function(hours, minutes, seconds)
    assert(type(hours) == 'integer', 'Argument hours must be of type integer.')
    assert(type(minutes) == 'integer', 'Argument minutes must be of type integer.')
    assert(type(seconds) == 'integer', 'Argument seconds must be of type integer.')

    local call = natives.invoke(0xAB7C251C7701D336, 'void', hours, minutes, seconds)
end

-- Gets the current ingame hour, expressed without zeros. (09:34 will be represented as 9)
--- @return number
natives.clock_getClockHours = function()

    local call = natives.invoke(0xC82CF208C2B19199, 'int')
    return call
end

-- Gets the current ingame clock minute.
--- @return number
natives.clock_getClockMinutes = function()

    local call = natives.invoke(0x4E162231B823DBBF, 'int')
    return call
end

-- Gets the current ingame clock second. Note that ingame clock seconds change really fast since a day in RDR is only 48 minutes in real life.
--- @return number
natives.clock_getClockSeconds = function()

    local call = natives.invoke(0xB6101ABE62B5F080, 'int')
    return call
end

--- @param ms integer
natives.clock_setMillisecondsPerGameMinute = function(ms)
    assert(type(ms) == 'integer', 'Argument ms must be of type integer.')

    local call = natives.invoke(0x04EEDB3848DACF68, 'void', ms)
end

-- Base year is 1898.
--- @return number
natives.clock_getSecondsSinceBaseYear = function()

    local call = natives.invoke(0x78FD8BE812E436B2, 'int')
    return call
end

--- @param day integer
--- @param month integer
--- @param year integer
natives.clock_setClockDate = function(day, month, year)
    assert(type(day) == 'integer', 'Argument day must be of type integer.')
    assert(type(month) == 'integer', 'Argument month must be of type integer.')
    assert(type(year) == 'integer', 'Argument year must be of type integer.')

    local call = natives.invoke(0x02AD3092562941E2, 'void', day, month, year)
end

-- Gets the current day of the week.
-- 
-- 0: Sunday
-- 1: Monday
-- 2: Tuesday
-- 3: Wednesday
-- 4: Thursday
-- 5: Friday
-- 6: Saturday
--- @return number
natives.clock_getClockDayOfWeek = function()

    local call = natives.invoke(0x4DD02D4C7FB30076, 'int')
    return call
end

--- @return number
natives.clock_getClockDayOfMonth = function()

    local call = natives.invoke(0xDF2FD796C54480A5, 'int')
    return call
end

--- @return number
natives.clock_getClockMonth = function()

    local call = natives.invoke(0x2D44E8FC79EAB1AC, 'int')
    return call
end

--- @return number
natives.clock_getClockYear = function()

    local call = natives.invoke(0xE136DCA28C4A48BA, 'int')
    return call
end

--- @return number
natives.clock_getMillisecondsPerGameMinute = function()

    local call = natives.invoke(0xE4CB8D126501EC52, 'int')
    return call
end

--- @param year integer
--- @param month integer
--- @param day integer
--- @param hour integer
--- @param minute integer
--- @param second integer
natives.clock_getPosixTime = function(year, month, day, hour, minute, second)
    assert(type(year) == 'integer', 'Argument year must be of type integer.')
    assert(type(month) == 'integer', 'Argument month must be of type integer.')
    assert(type(day) == 'integer', 'Argument day must be of type integer.')
    assert(type(hour) == 'integer', 'Argument hour must be of type integer.')
    assert(type(minute) == 'integer', 'Argument minute must be of type integer.')
    assert(type(second) == 'integer', 'Argument second must be of type integer.')

    local call = natives.invoke(0x90338AD4A784E455, 'void', year, month, day, hour, minute, second)
end

-- Same as GET_POSIX_TIME except that it takes a single pointer to a struct.
--- @param outtime userdata
natives.clock_getPosixTimeStruct = function(outtime)
    assert(type(outtime) == 'userdata', 'Argument outtime must be of type userdata.')

    local call = natives.invoke(0x86A68E84E5884951, 'void', outtime)
end

--- @param indatetime userdata
--- @param timetoadd userdata
--- @param outdatetime userdata
natives.clock_addTimeToDateTime = function(indatetime, timetoadd, outdatetime)
    assert(type(indatetime) == 'userdata', 'Argument indatetime must be of type userdata.')
    assert(type(timetoadd) == 'userdata', 'Argument timetoadd must be of type userdata.')
    assert(type(outdatetime) == 'userdata', 'Argument outdatetime must be of type userdata.')

    local call = natives.invoke(0x28EEACE9B43D9597, 'void', indatetime, timetoadd, outdatetime)
end

-- Used in Script Function NET_COLLECTABLES_HANDLE_ITEM_ADDED
-- Returns collectableCategory Hash
--- @param collectableitem integer
--- @return number
natives.collection_collectableGetCategory = function(collectableitem)
    assert(type(collectableitem) == 'integer', 'Argument collectableitem must be of type integer.')

    local call = natives.invoke(0x725D52F21A5E9EF6, 'integer', collectableitem)
    return call
end

--- @param collectableitem integer
--- @return number
natives.collection_collectableGetSubcategory = function(collectableitem)
    assert(type(collectableitem) == 'integer', 'Argument collectableitem must be of type integer.')

    local call = natives.invoke(0x6052B4DE6657684F, 'integer', collectableitem)
    return call
end

--- @param collectableitem integer
--- @return number
natives.collection_collectableGetIpl = function(collectableitem)
    assert(type(collectableitem) == 'integer', 'Argument collectableitem must be of type integer.')

    local call = natives.invoke(0x922A79CD4A033B8B, 'integer', collectableitem)
    return call
end

--- @param collectableitem integer
--- @return number, number, number
natives.collection_collectableGetPlacementLocation = function(collectableitem)
    assert(type(collectableitem) == 'integer', 'Argument collectableitem must be of type integer.')

    local call = natives.invoke(0x1F1DD794908C2BFA, 'vector3', collectableitem)
    return call.x, call.y, call.z
end

--- @param collectableitem integer
--- @return number
natives.collection_collectableGetNumFound = function(collectableitem)
    assert(type(collectableitem) == 'integer', 'Argument collectableitem must be of type integer.')

    local call = natives.invoke(0xF83D3DDA4D3C8169, 'int', collectableitem)
    return call
end

--- @param collectableitem integer
--- @return number
natives.collection_collectableGetNumTurnedIn = function(collectableitem)
    assert(type(collectableitem) == 'integer', 'Argument collectableitem must be of type integer.')

    local call = natives.invoke(0x9A03F22AD446EEAC, 'int', collectableitem)
    return call
end

--- @param collectableitem integer
--- @param amount integer
natives.collection_collectableIncrementNumFound = function(collectableitem, amount)
    assert(type(collectableitem) == 'integer', 'Argument collectableitem must be of type integer.')
    assert(type(amount) == 'integer', 'Argument amount must be of type integer.')

    local call = natives.invoke(0x3EA62E56F386C997, 'void', collectableitem, amount)
end

--- @param collectableitem integer
--- @param amount integer
natives.collection_collectableIncrementNumTurnedIn = function(collectableitem, amount)
    assert(type(collectableitem) == 'integer', 'Argument collectableitem must be of type integer.')
    assert(type(amount) == 'integer', 'Argument amount must be of type integer.')

    local call = natives.invoke(0x398FAB9C96A81924, 'void', collectableitem, amount)
end

--- @param collectablecategory integer
--- @param collectablesubcategory integer
--- @return number
natives.collection_collectableCategoryGetNumCollectables = function(collectablecategory, collectablesubcategory)
    assert(type(collectablecategory) == 'integer', 'Argument collectablecategory must be of type integer.')
    assert(type(collectablesubcategory) == 'integer', 'Argument collectablesubcategory must be of type integer.')

    local call = natives.invoke(0x62CAB7DB62EAD434, 'int', collectablecategory, collectablesubcategory)
    return call
end

--- @param index integer
--- @param collectablecategory integer
--- @param collectablesubcategory integer
--- @return number
natives.collection_collectableGetCollectableItemHash = function(index, collectablecategory, collectablesubcategory)
    assert(type(index) == 'integer', 'Argument index must be of type integer.')
    assert(type(collectablecategory) == 'integer', 'Argument collectablecategory must be of type integer.')
    assert(type(collectablesubcategory) == 'integer', 'Argument collectablesubcategory must be of type integer.')

    local call = natives.invoke(0x126CBEBBA46693CF, 'integer', index, collectablecategory, collectablesubcategory)
    return call
end

--- @param collectablecategory integer
--- @param collectablesubcategory integer
--- @return number
natives.collection_collectableCategoryGetNumFound = function(collectablecategory, collectablesubcategory)
    assert(type(collectablecategory) == 'integer', 'Argument collectablecategory must be of type integer.')
    assert(type(collectablesubcategory) == 'integer', 'Argument collectablesubcategory must be of type integer.')

    local call = natives.invoke(0x5461C821D00FE15A, 'int', collectablecategory, collectablesubcategory)
    return call
end

--- @param collectablecategory integer
--- @param collectablesubcategory integer
--- @return number
natives.collection_collectableCategoryGetNumTurnedIn = function(collectablecategory, collectablesubcategory)
    assert(type(collectablecategory) == 'integer', 'Argument collectablecategory must be of type integer.')
    assert(type(collectablesubcategory) == 'integer', 'Argument collectablesubcategory must be of type integer.')

    local call = natives.invoke(0x3A65F4844913A047, 'int', collectablecategory, collectablesubcategory)
    return call
end

--- @param collectablecategory integer
--- @param p1 integer
--- @return number
natives.collection_n0X33825A7388A6B9F6 = function(collectablecategory, p1)
    assert(type(collectablecategory) == 'integer', 'Argument collectablecategory must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x33825A7388A6B9F6, 'int', collectablecategory, p1)
    return call
end

-- Returns p2 (index?) for 0xB9020EC89C07DF04
--- @param collectablecategory integer
--- @param p1 integer
--- @return number
natives.collection_n0X755901C7598B97Bc = function(collectablecategory, p1)
    assert(type(collectablecategory) == 'integer', 'Argument collectablecategory must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x755901C7598B97BC, 'int', collectablecategory, p1)
    return call
end

-- Accepts more hashes than 0xCC644BC1DD655269
-- Such as: CAROLINA_PARAKEETS, DINO_BONES, EGRET_FEATHERS, ...
--- @param collectablecategory integer
--- @param p1 integer
--- @param index integer
--- @return any
natives.collection_n0Xb9020Ec89C07Df04 = function(collectablecategory, p1, index)
    assert(type(collectablecategory) == 'integer', 'Argument collectablecategory must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0xB9020EC89C07DF04, 'any', collectablecategory, p1, index)
    return call
end

--- @param collectablecategory integer
--- @param p1 integer
--- @return boolean
natives.collection_n0Xfc832B06127D8E99 = function(collectablecategory, p1)
    assert(type(collectablecategory) == 'integer', 'Argument collectablecategory must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xFC832B06127D8E99, 'bool', collectablecategory, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.collection_collectableCategorySetHasReceivedList = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x0B6D275D2F242E17, 'void', p0, p1, p2)
end

-- Params: collectableCategory = WEEKLY_COLLECTABLES
--- @param collectablecategory integer
--- @param p1 integer
--- @return boolean
natives.collection_n0X6Bab7Aced1017204 = function(collectablecategory, p1)
    assert(type(collectablecategory) == 'integer', 'Argument collectablecategory must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x6BAB7ACED1017204, 'bool', collectablecategory, p1)
    return call
end

-- Params: collectableCategory = WEEKLY_COLLECTABLES
--- @param collectablecategory integer
--- @param p1 integer
--- @return boolean
natives.collection_n0X61Befba3Ce7A3Bc8 = function(collectablecategory, p1)
    assert(type(collectablecategory) == 'integer', 'Argument collectablecategory must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x61BEFBA3CE7A3BC8, 'bool', collectablecategory, p1)
    return call
end

--- @param collectablecategory integer
--- @param p1 userdata
--- @return any
natives.collection_n0Xc4Ac39719C1Bb559 = function(collectablecategory, p1)
    assert(type(collectablecategory) == 'integer', 'Argument collectablecategory must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xC4AC39719C1BB559, 'any', collectablecategory, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.collection_n0X93F2E7B5Db85657B = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x93F2E7B5DB85657B, 'any', p0, p1)
    return call
end

-- collectableCategory: ANTIQUE_BOTTLES, BIRD_EGGS, ARROWHEADS, FAMILY_HEIRLOOMS, WILD_FLOWERS, COINS, LOST_JEWELRY_RINGS, LOST_JEWELRY_BRACELETS, LOST_JEWELRY_EARRINGS, LOST_JEWELRY_NECKLACES, TAROT_CARDS_CUPS, TAROT_CARDS_PENTACLES, TAROT_CARDS_SWORDS, TAROT_CARDS_WANDS, FOSSILS_COMMON, FOSSILS_UNCOMMON, FOSSILS_RARE
--- @param collectablecategory integer
--- @param p1 integer
--- @return number
natives.collection_collectableGetCategoryItemSetBuyAward = function(collectablecategory, p1)
    assert(type(collectablecategory) == 'integer', 'Argument collectablecategory must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xCC644BC1DD655269, 'integer', collectablecategory, p1)
    return call
end

-- Params: collectableCategory = WEEKLY_COLLECTABLES
--- @param collectablecategory integer
--- @return number
natives.collection_n0X9Adee485726025D4 = function(collectablecategory)
    assert(type(collectablecategory) == 'integer', 'Argument collectablecategory must be of type integer.')

    local call = natives.invoke(0x9ADEE485726025D4, 'integer', collectablecategory)
    return call
end

--- @param collectablecategory integer
--- @param p1 integer
--- @return any
natives.collection_n0Xd1806Fb3Eded6D11 = function(collectablecategory, p1)
    assert(type(collectablecategory) == 'integer', 'Argument collectablecategory must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xD1806FB3EDED6D11, 'any', collectablecategory, p1)
    return call
end

--- @param collectablecategory integer
--- @param p1 integer
--- @return any
natives.collection_n0X3Fd91F1A148A0468 = function(collectablecategory, p1)
    assert(type(collectablecategory) == 'integer', 'Argument collectablecategory must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x3FD91F1A148A0468, 'any', collectablecategory, p1)
    return call
end

--- @param collectablecategory integer
--- @param p1 integer
--- @return any
natives.collection_n0Xc3Ca424E1F12Ed0C = function(collectablecategory, p1)
    assert(type(collectablecategory) == 'integer', 'Argument collectablecategory must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xC3CA424E1F12ED0C, 'any', collectablecategory, p1)
    return call
end

--- @param collectablecategory integer
--- @param collectablesubcategory integer
--- @return number
natives.collection_collectableCategoryGetToastTextureName = function(collectablecategory, collectablesubcategory)
    assert(type(collectablecategory) == 'integer', 'Argument collectablecategory must be of type integer.')
    assert(type(collectablesubcategory) == 'integer', 'Argument collectablesubcategory must be of type integer.')

    local call = natives.invoke(0xD52D20B0C76BB26D, 'integer', collectablecategory, collectablesubcategory)
    return call
end

--- @param collectablecategory integer
--- @param collectablesubcategory integer
--- @return number
natives.collection_collectableCategoryGetToastTextureDictionary = function(collectablecategory, collectablesubcategory)
    assert(type(collectablecategory) == 'integer', 'Argument collectablecategory must be of type integer.')
    assert(type(collectablesubcategory) == 'integer', 'Argument collectablesubcategory must be of type integer.')

    local call = natives.invoke(0x13AAECDA43318BFE, 'integer', collectablecategory, collectablesubcategory)
    return call
end

--- @param collectablecategory integer
--- @param p1 integer
--- @return any
natives.collection_n0Xd297F68928A58130 = function(collectablecategory, p1)
    assert(type(collectablecategory) == 'integer', 'Argument collectablecategory must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xD297F68928A58130, 'any', collectablecategory, p1)
    return call
end

--- @param collectablecategory integer
--- @param p1 integer
--- @return any
natives.collection_n0X775Fa1Fc87666847 = function(collectablecategory, p1)
    assert(type(collectablecategory) == 'integer', 'Argument collectablecategory must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x775FA1FC87666847, 'any', collectablecategory, p1)
    return call
end

--- @param p0 integer
--- @return any
natives.collection_n0Xec3959E9950Bf56B = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0xEC3959E9950BF56B, 'any', p0)
    return call
end

--- @param ped integer
--- @param p1 integer
natives.companion_n0Xd730281E496621Fb = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xD730281E496621FB, 'void', ped, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.companion_n0Xbf6583E926D13890 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xBF6583E926D13890, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.companion_n0X0A8Fd91Ede7B328A = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x0A8FD91EDE7B328A, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.companion_n0X991E3346D788F20F = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x991E3346D788F20F, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.companion_n0Xce27824B5968B79A = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xCE27824B5968B79A, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.companion_n0Xf06Cbb8Ccca823C0 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xF06CBB8CCCA823C0, 'void', p0, p1)
end

--- @param ped integer
--- @param p1 integer
natives.companion_n0X2917E634206B9E17 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x2917E634206B9E17, 'void', ped, p1)
end

--- @param ped integer
--- @param p1 string
natives.companion_n0Xd428C3F92Fc3F6F8 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')

    local call = natives.invoke(0xD428C3F92FC3F6F8, 'void', ped, p1)
end

-- Used for Script Function NET_FETCH_CLIENT_ACTIVATE_COMAPNION_ANALYSIS: Hiding! Ped
--- @param ped integer
--- @param p1 integer
natives.companion_addCompanionFlag = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xDEB369F6AD168C58, 'void', ped, p1)
end

--- @param ped integer
--- @param p1 integer
natives.companion_removeCompanionFlag = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x1740E3DEE0AE4D27, 'void', ped, p1)
end

--- @param ped integer
--- @param p1 integer
natives.companion_n0X0De02Da3C0F66955 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x0DE02DA3C0F66955, 'void', ped, p1)
end

-- enum _0x18F77396
--- @param groupid integer
--- @param activity integer
natives.companion_setCompanionActivity = function(groupid, activity)
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')
    assert(type(activity) == 'integer', 'Argument activity must be of type integer.')

    local call = natives.invoke(0x0F1CD8CA9E65D5F6, 'void', groupid, activity)
end

-- enum _0x18F77396
--- @param groupid integer
--- @return number
natives.companion_getCompanionActivity = function(groupid)
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')

    local call = natives.invoke(0xB7E0590C86E1711F, 'integer', groupid)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.companion_n0Xa079Ff7Cfb9Ac8Bd = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xA079FF7CFB9AC8BD, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.companion_n0X61Bda07407754A5C = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x61BDA07407754A5C, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.companion_n0Xd55A871E1Ce3481B = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xD55A871E1CE3481B, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
natives.companion_n0X0C6A00Dae896614C = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x0C6A00DAE896614C, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.companion_n0X8Fb98B719Aa0075A = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x8FB98B719AA0075A, 'void', p0, p1, p2, p3, p4)
end

--- @param p0 userdata
natives.companion_n0X9C902084F48D2E6C = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x9C902084F48D2E6C, 'void', p0)
end

--- @param p0 userdata
natives.companion_n0Xd747979C053Efa7A = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xD747979C053EFA7A, 'void', p0)
end

--- @param volume integer
--- @param p1 integer
--- @param p2 integer
natives.companion_n0X3Caad93Fa5B9579A = function(volume, p1, p2)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x3CAAD93FA5B9579A, 'void', volume, p1, p2)
end

--- @param p0 userdata
natives.companion_n0X7274F84B1501B523 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x7274F84B1501B523, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @return any
natives.companion_n0X722Fbe08Ef5B87Bd = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x722FBE08EF5B87BD, 'any', p0, p1, p2, p3, p4)
    return call
end

--- @param groupid integer
natives.companion_activateCompanionAnalysis = function(groupid)
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')

    local call = natives.invoke(0xCBD9EC60495C728C, 'void', groupid)
end

--- @param groupid integer
natives.companion_deactivateCompanionAnalysis = function(groupid)
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')

    local call = natives.invoke(0x72B7F65F11FC8896, 'void', groupid)
end

-- Only used in R* SP Scripts, category = GANGS
-- _COMPENDIUM_GET_*
--- @param category integer
--- @return number
natives.compendium_n0X725D52F21A5E9E22 = function(category)
    assert(type(category) == 'integer', 'Argument category must be of type integer.')

    local call = natives.invoke(0x725D52F21A5E9E22, 'float', category)
    return call
end

--- @param category integer
--- @return number
natives.compendium_compendiumGetNumOfEntriesInCategory = function(category)
    assert(type(category) == 'integer', 'Argument category must be of type integer.')

    local call = natives.invoke(0x729D52F61A5A9E22, 'int', category)
    return call
end

-- Only used in R* SP Scripts, category = GANGS
-- _COMPENDIUM_GET_NUM_OF_ENTRIES_IN_*
--- @param category integer
--- @return number
natives.compendium_n0X729D52461Aea9E22 = function(category)
    assert(type(category) == 'integer', 'Argument category must be of type integer.')

    local call = natives.invoke(0x729D52461AEA9E22, 'int', category)
    return call
end

--- @param ped integer
--- @return number
natives.compendium_compendiumGetShortDescriptionFromPed = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x6C5E5D48E48B4C65, 'integer', ped)
    return call
end

--- @param category integer
--- @param ped integer
--- @return number
natives.compendium_compendiumGetSubcategoryPedIsIn = function(category, ped)
    assert(type(category) == 'integer', 'Argument category must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x9B657550DF55EC96, 'integer', category, ped)
    return call
end

--- @param category integer
--- @param animaltype integer
--- @return number
natives.compendium_compendiumGetSubcategoryHashFromAnimalType = function(category, animaltype)
    assert(type(category) == 'integer', 'Argument category must be of type integer.')
    assert(type(animaltype) == 'integer', 'Argument animaltype must be of type integer.')

    local call = natives.invoke(0xCD278B6BFBDBDC22, 'integer', category, animaltype)
    return call
end

--- @param category integer
--- @param subcategory integer
--- @return number
natives.compendium_compendiumGetNumEntriesInSubcategory = function(category, subcategory)
    assert(type(category) == 'integer', 'Argument category must be of type integer.')
    assert(type(subcategory) == 'integer', 'Argument subcategory must be of type integer.')

    local call = natives.invoke(0xF58A0C0E086E8E36, 'int', category, subcategory)
    return call
end

--- @param category integer
--- @param subcategory integer
--- @param count integer
--- @return number
natives.compendium_compendiumGetEntryByIndexInSubcategory = function(category, subcategory, count)
    assert(type(category) == 'integer', 'Argument category must be of type integer.')
    assert(type(subcategory) == 'integer', 'Argument subcategory must be of type integer.')
    assert(type(count) == 'integer', 'Argument count must be of type integer.')

    local call = natives.invoke(0x5CEB63B2E3D9895F, 'int', category, subcategory, count)
    return call
end

--- @param category integer
--- @param ped integer
--- @return number
natives.compendium_compendiumGetEntryByPedIndex = function(category, ped)
    assert(type(category) == 'integer', 'Argument category must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x1CFA0219D8E1CF25, 'int', category, ped)
    return call
end

--- @param category integer
--- @param animaltype integer
--- @return number
natives.compendium_compendiumGetEntryByStatItem = function(category, animaltype)
    assert(type(category) == 'integer', 'Argument category must be of type integer.')
    assert(type(animaltype) == 'integer', 'Argument animaltype must be of type integer.')

    local call = natives.invoke(0x66EC938394D76C85, 'int', category, animaltype)
    return call
end

--- @param category integer
--- @param subcategory integer
--- @return any
natives.compendium_compendiumGetSubcategoryToastAppId = function(category, subcategory)
    assert(type(category) == 'integer', 'Argument category must be of type integer.')
    assert(type(subcategory) == 'integer', 'Argument subcategory must be of type integer.')

    local call = natives.invoke(0x2BF30D9D4D680112, 'any', category, subcategory)
    return call
end

--- @param animalstatitem integer
--- @param x number
--- @param y number
--- @param z number
--- @return number
natives.compendium_compendiumGetMapDiscoverableFromStatItem = function(animalstatitem, x, y, z)
    assert(type(animalstatitem) == 'integer', 'Argument animalstatitem must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0x729D54121A5E9E20, 'integer', animalstatitem, x, y, z)
    return call
end

--- @param animaltype integer
--- @param disablecompendiumtoast boolean
natives.compendium_compendiumAnimalObservedByStatName = function(animaltype, disablecompendiumtoast)
    assert(type(animaltype) == 'integer', 'Argument animaltype must be of type integer.')
    assert(type(disablecompendiumtoast) == 'boolean', 'Argument disablecompendiumtoast must be of type boolean.')

    local call = natives.invoke(0x725D52F26A5E9E10, 'void', animaltype, disablecompendiumtoast)
end

--- @param ped integer
--- @return boolean
natives.compendium_compendiumWasAnimalObserved = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x23B5E9C5160BC04F, 'bool', ped)
    return call
end

--- @param compendiumentry integer
natives.compendium_compendiumAnimalSetDiscovered = function(compendiumentry)
    assert(type(compendiumentry) == 'integer', 'Argument compendiumentry must be of type integer.')

    local call = natives.invoke(0x67F35C7C9F2BDCFE, 'void', compendiumentry)
end

--- @param ped integer
--- @return any
natives.compendium_compendiumGetStudyAwardId = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x9F678782720349E4, 'any', ped)
    return call
end

--- @param compendiumentry integer
--- @return any
natives.compendium_compendiumAnimalGetSampleInventoryItem = function(compendiumentry)
    assert(type(compendiumentry) == 'integer', 'Argument compendiumentry must be of type integer.')

    local call = natives.invoke(0x4E4ACAE1C671A9DA, 'any', compendiumentry)
    return call
end

--- @param compendiumentry integer
--- @return boolean
natives.compendium_compendiumAnimalHasSample = function(compendiumentry)
    assert(type(compendiumentry) == 'integer', 'Argument compendiumentry must be of type integer.')

    local call = natives.invoke(0x6FC24625E4FCAC27, 'bool', compendiumentry)
    return call
end

--- @param compendiumentry integer
--- @return boolean
natives.compendium_compendiumAnimalHasStamp = function(compendiumentry)
    assert(type(compendiumentry) == 'integer', 'Argument compendiumentry must be of type integer.')

    local call = natives.invoke(0xBCF569FC32FFF456, 'bool', compendiumentry)
    return call
end

--- @param category integer
--- @param subcategory integer
--- @return string
natives.compendium_compendiumGetSubcategorySampleToastTitle = function(category, subcategory)
    assert(type(category) == 'integer', 'Argument category must be of type integer.')
    assert(type(subcategory) == 'integer', 'Argument subcategory must be of type integer.')

    local call = natives.invoke(0x5E50C67EB60951E6, 'string', category, subcategory)
    return call
end

--- @param category integer
--- @param subcategory integer
--- @return string
natives.compendium_compendiumGetSubcategorySampleToastDescProgress = function(category, subcategory)
    assert(type(category) == 'integer', 'Argument category must be of type integer.')
    assert(type(subcategory) == 'integer', 'Argument subcategory must be of type integer.')

    local call = natives.invoke(0x82BFB5B367957699, 'string', category, subcategory)
    return call
end

--- @param category integer
--- @param subcategory integer
--- @return string
natives.compendium_compendiumGetSubcategorySampleToastDescComplete = function(category, subcategory)
    assert(type(category) == 'integer', 'Argument category must be of type integer.')
    assert(type(subcategory) == 'integer', 'Argument subcategory must be of type integer.')

    local call = natives.invoke(0x59D4D68CDB82427C, 'string', category, subcategory)
    return call
end

--- @param ped integer
--- @param category integer
natives.compendium_compendiumFishCaught = function(ped, category)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(category) == 'integer', 'Argument category must be of type integer.')

    local call = natives.invoke(0x725D52F21A5E9E00, 'void', ped, category)
end

--- @param animaltype integer
--- @param baittype integer
--- @return number
natives.compendium_compendiumFishGetLureSuitabilityByStatItem = function(animaltype, baittype)
    assert(type(animaltype) == 'integer', 'Argument animaltype must be of type integer.')
    assert(type(baittype) == 'integer', 'Argument baittype must be of type integer.')

    local call = natives.invoke(0x725D52F21A5E9E81, 'int', animaltype, baittype)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.compendium_compendiumGangCampFound = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x725D52F21A5E9E03, 'void', p0, p1)
end

--- @param p0 userdata
natives.compendium_compendiumGangAmbushSurvived = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x725D52F21A5E9E04, 'void', p0)
end

--- @param p0 userdata
natives.compendium_compendiumGangEncountered = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x725D52F21A5E9E05, 'void', p0)
end

--- @param p0 userdata
natives.compendium_compendiumGangBountyCaptured = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x725D52F21A5E9E06, 'void', p0)
end

--- @param p0 userdata
natives.compendium_compendiumGangMemberKilled = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x725D52F21A5E9E07, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
natives.compendium_compendiumGangHideoutFound = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x725D52F21A5E9E08, 'void', p0, p1)
end

-- herbType: https:--alloc8or.re/rdr3/doc/enums/eHerbType.txt
-- Vector3: Player Location
--- @param herbtype integer
--- @param x number
--- @param y number
--- @param z number
natives.compendium_compendiumHerbPicked = function(herbtype, x, y, z)
    assert(type(herbtype) == 'integer', 'Argument herbtype must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0x725D52F21A5E9E09, 'void', herbtype, x, y, z)
end

--- @param ped integer
--- @param bondinglevel integer
natives.compendium_compendiumHorseBonding = function(ped, bondinglevel)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(bondinglevel) == 'integer', 'Argument bondinglevel must be of type integer.')

    local call = natives.invoke(0x725D52F21A5E9E50, 'void', ped, bondinglevel)
end

-- NET_PLAYER_HORSE_PROCESS_EVENT_HORSE_BREAKING
--- @param ped integer
natives.compendium_compendiumHorseWildBroken = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x725852D21A2E9E50, 'void', ped)
end

-- Only gets called if bSetObserved is true and animalType is matching
--- @param ped integer
--- @param disablecompendiumtoast boolean
natives.compendium_compendiumHorseObserved = function(ped, disablecompendiumtoast)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(disablecompendiumtoast) == 'boolean', 'Argument disablecompendiumtoast must be of type boolean.')

    local call = natives.invoke(0x725D58F2125E5E50, 'void', ped, disablecompendiumtoast)
end

--- @param p0 string
natives.crashlog_n0X0Fd3Ecf9D0C8655F = function(p0)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')

    local call = natives.invoke(0x0FD3ECF9D0C8655F, 'void', p0)
end

--- @param p0 string
natives.crashlog_n0Xca0Bac376C541978 = function(p0)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')

    local call = natives.invoke(0xCA0BAC376C541978, 'void', p0)
end

--- @param p0 string
--- @return boolean
natives.crashlog_n0X3A66F1963B223F61 = function(p0)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')

    local call = natives.invoke(0x3A66F1963B223F61, 'bool', p0)
    return call
end

--- @return boolean
natives.crashlog_n0X7C680Ff55617F82F = function()

    local call = natives.invoke(0x7C680FF55617F82F, 'bool')
    return call
end

--- @param p0 string
--- @return boolean
natives.crashlog_n0Xd8E3D22Aa4F0E0A5 = function(p0)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')

    local call = natives.invoke(0xD8E3D22AA4F0E0A5, 'bool', p0)
    return call
end

--- @param p0 boolean
--- @return boolean
natives.crashlog_n0Xa67F0B039D9Cd513 = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0xA67F0B039D9CD513, 'bool', p0)
    return call
end

--- @param p0 integer
--- @return boolean
natives.crashlog_n0Xe72E234B30Da7B7A = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0xE72E234B30DA7B7A, 'bool', p0)
    return call
end

--- @param p0 number
--- @return boolean
natives.crashlog_n0X87F005C969Ef1563 = function(p0)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')

    local call = natives.invoke(0x87F005C969EF1563, 'bool', p0)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @return boolean
natives.crashlog_n0X23Ccab8F40B9Cbee = function(x, y, z)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0x23CCAB8F40B9CBEE, 'bool', x, y, z)
    return call
end

--- @return boolean
natives.crashlog_n0Xf0D545C1Eead614A = function()

    local call = natives.invoke(0xF0D545C1EEAD614A, 'bool')
    return call
end

--- @param p0 string
--- @return boolean
natives.crashlog_n0X33C1D63E55Fa4284 = function(p0)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')

    local call = natives.invoke(0x33C1D63E55FA4284, 'bool', p0)
    return call
end

natives.crashlog_n0X4E42Ca5Bcd45444A = function()

    local call = natives.invoke(0x4E42CA5BCD45444A, 'void')
end

-- unused = true
--- @param p0 string
--- @param p1 string
natives.crashlog_n0Xda05310Ea94Dc8C6 = function(p0, p1)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')

    local call = natives.invoke(0xDA05310EA94DC8C6, 'void', p0, p1)
end

--- @param crewid integer
--- @return boolean
natives.crew_networkFindGamersInCrew = function(crewid)
    assert(type(crewid) == 'integer', 'Argument crewid must be of type integer.')

    local call = natives.invoke(0xE532D6811B3A4D2A, 'bool', crewid)
    return call
end

--- @return boolean
natives.crew_networkClanServiceIsValid = function()

    local call = natives.invoke(0x579CCED0265D4896, 'bool')
    return call
end

--- @param gamerhandle userdata
--- @return boolean
natives.crew_networkClanPlayerIsActive = function(gamerhandle)
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')

    local call = natives.invoke(0xB124B57F571D8F18, 'bool', gamerhandle)
    return call
end

--- @param clandesc userdata
--- @param buffersize integer
--- @param gamerhandle userdata
--- @return boolean
natives.crew_networkClanPlayerGetDesc = function(clandesc, buffersize, gamerhandle)
    assert(type(clandesc) == 'userdata', 'Argument clandesc must be of type userdata.')
    assert(type(buffersize) == 'integer', 'Argument buffersize must be of type integer.')
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')

    local call = natives.invoke(0xEEE6EACBE8874FBA, 'bool', clandesc, buffersize, gamerhandle)
    return call
end

--- @return number
natives.crew_networkClanGetLocalMembershipsCount = function()

    local call = natives.invoke(0x1F471B79ACC90BEF, 'int')
    return call
end

--- @param memberdesc userdata
--- @param p1 integer
--- @return boolean
natives.crew_networkClanGetMembershipDesc = function(memberdesc, p1)
    assert(type(memberdesc) == 'userdata', 'Argument memberdesc must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x48DE78AF2C8885B8, 'bool', memberdesc, p1)
    return call
end

--- @param p0 userdata
--- @return boolean
natives.crew_n0X58D378Af2C8765B7 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x58D378AF2C8765B7, 'bool', p0)
    return call
end

--- @param p0 userdata
--- @return boolean
natives.crew_networkClanInvitePlayer = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xC685B014CE3D988B, 'bool', p0)
    return call
end

--- @param crewinviteindex integer
--- @return boolean
natives.crew_networkAcceptClanInvite = function(crewinviteindex)
    assert(type(crewinviteindex) == 'integer', 'Argument crewinviteindex must be of type integer.')

    local call = natives.invoke(0x8E2143144B8E188D, 'bool', crewinviteindex)
    return call
end

--- @param p0 userdata
--- @return boolean
natives.crew_networkClanRequestEmblem = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x13518FF1C6B28938, 'bool', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return boolean
natives.crew_networkClanIsEmblemReady = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xA134777FF7F33331, 'bool', p0, p1)
    return call
end

--- @param p0 userdata
natives.crew_networkClanReleaseEmblem = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x113E6E3E50E286B0, 'void', p0)
end

--- @return any
natives.crew_networkGetPrimaryClanDataClear = function()

    local call = natives.invoke(0x9AA46BADAD0E27ED, 'any')
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return boolean
natives.crew_networkGetPrimaryClanDataStart = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xCE86D8191B762107, 'bool', p0, p1)
    return call
end

--- @return any
natives.crew_networkGetPrimaryClanDataPending = function()

    local call = natives.invoke(0xB5074DB804E28CE7, 'any')
    return call
end

--- @return any
natives.crew_networkGetPrimaryClanDataSuccess = function()

    local call = natives.invoke(0x5B4F04F19376A0BA, 'any')
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return boolean
natives.crew_networkGetPrimaryClanDataNew = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xC080FF658B2E41DA, 'bool', p0, p1)
    return call
end

--- @param p0 userdata
--- @return any
natives.crew_networkClanSetActive = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xC080FF658B2E51DA, 'any', p0)
    return call
end

--- @param p0 string
--- @return any
natives.databinding_databindingGetDataContainerFromPath = function(p0)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')

    local call = natives.invoke(0x0C827D175F1292F2, 'any', p0)
    return call
end

--- @param entryid integer
--- @param p1 integer
--- @return any
natives.databinding_databindingGetDataContainerFromChildIndex = function(entryid, p1)
    assert(type(entryid) == 'integer', 'Argument entryid must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x0C827D175F1292F3, 'any', entryid, p1)
    return call
end

--- @param p0 string
--- @param p1 integer
--- @return any
natives.databinding_n0Xd7Db94Ab78E8Ebe4 = function(p0, p1)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xD7DB94AB78E8EBE4, 'any', p0, p1)
    return call
end

--- @param p0 string
--- @param p1 string
--- @return any
natives.databinding_databindingAddDataContainerFromPath = function(p0, p1)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')

    local call = natives.invoke(0x0C827D175F1292F4, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 integer
--- @return any
natives.databinding_databindingAddDataContainerByHash = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x98BB14345BB68257, 'any', p0, p1)
    return call
end

-- Returns entryId Hash
--- @param entryid integer
--- @param p1 string
--- @return number
natives.databinding_databindingAddDataContainer = function(entryid, p1)
    assert(type(entryid) == 'integer', 'Argument entryid must be of type integer.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')

    local call = natives.invoke(0xEB4F9A3537EEABCD, 'integer', entryid, p1)
    return call
end

--- @param p0 string
--- @param p1 string
--- @param p2 boolean
--- @return any
natives.databinding_databindingAddDataBoolFromPath = function(p0, p1, p2)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x37BB86A751148A6A, 'any', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 integer
--- @param p2 boolean
--- @return any
natives.databinding_databindingAddDataBoolByHash = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xBC95D3AE2ECA70D6, 'any', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 string
--- @param p2 boolean
--- @return any
natives.databinding_databindingAddDataBool = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x58BAA5F635DA2FF4, 'any', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 integer
--- @param p2 integer
--- @return any
natives.databinding_databindingAddDataIntByHash = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x267F9527F4350ADE, 'any', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 string
--- @param p2 integer
--- @return any
natives.databinding_databindingAddDataInt = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x307A3247C5457BDE, 'any', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 string
--- @param p2 number
--- @return any
natives.databinding_databindingAddDataFloat = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')

    local call = natives.invoke(0x5154228273ADB9A6, 'any', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 integer
--- @param p2 integer
--- @return any
natives.databinding_databindingAddDataHashByHash = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x8E173DFB041993C6, 'any', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 string
--- @param p2 integer
--- @return any
natives.databinding_databindingAddDataHash = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x8538F1205D60ECA6, 'any', p0, p1, p2)
    return call
end

--- @param p0 string
--- @param p1 string
--- @param p2 string
--- @return any
natives.databinding_databindingAddDataStringFromPath = function(p0, p1, p2)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')
    assert(type(p2) == 'string', 'Argument p2 must be of type string.')

    local call = natives.invoke(0xA381DE86EE170C4A, 'any', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 integer
--- @param p2 string
--- @return any
natives.databinding_databindingAddDataStringByHash = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'string', 'Argument p2 must be of type string.')

    local call = natives.invoke(0xEAD09E76E22630C3, 'any', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 string
--- @param p2 string
--- @return any
natives.databinding_databindingAddDataString = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')
    assert(type(p2) == 'string', 'Argument p2 must be of type string.')

    local call = natives.invoke(0x617FCA1C5652BBAD, 'any', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 string
--- @param gangid userdata
--- @return any
natives.databinding_databindingAddDataGangId = function(p0, p1, gangid)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')
    assert(type(gangid) == 'userdata', 'Argument gangid must be of type userdata.')

    local call = natives.invoke(0x7D0F2014DB28DD00, 'any', p0, p1, gangid)
    return call
end

--- @param p0 userdata
--- @param p1 string
--- @param posseid userdata
--- @return any
natives.databinding_databindingAddDataPosseId = function(p0, p1, posseid)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')
    assert(type(posseid) == 'userdata', 'Argument posseid must be of type userdata.')

    local call = natives.invoke(0x7D0F2014DB28DD01, 'any', p0, p1, posseid)
    return call
end

--- @param p0 userdata
--- @param p1 string
--- @param p2 userdata
--- @return any
natives.databinding_n0X294Af5323F44B053 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x294AF5323F44B053, 'any', p0, p1, p2)
    return call
end

--- @param p0 string
--- @param p1 string
--- @return any
natives.databinding_databindingAddUiItemListFromPath = function(p0, p1)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')

    local call = natives.invoke(0xDB5B9A474148F699, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 integer
--- @return any
natives.databinding_databindingAddUiItemListByHash = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x3C7799283325181B, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 string
--- @return any
natives.databinding_databindingAddUiItemList = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')

    local call = natives.invoke(0xFE74FA57E0CE6824, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param index integer
--- @param p2 string
--- @param p3 userdata
natives.databinding_databindingInsertUiItemToListFromContextStringAlias = function(p0, index, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')
    assert(type(p2) == 'string', 'Argument p2 must be of type string.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x5859E970794D92F3, 'void', p0, index, p2, p3)
end

--- @param p0 userdata
--- @param index integer
--- @param p2 integer
--- @param p3 userdata
natives.databinding_databindingInsertUiItemToListFromContextHashAlias = function(p0, index, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xEE97A05C05F16E41, 'void', p0, index, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 string
--- @param p3 userdata
natives.databinding_databindingInsertUiItemToListFromPathStringAlias = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'string', 'Argument p2 must be of type string.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x5740774F608E4FC8, 'void', p0, p1, p2, p3)
end

--- @param entryid integer
--- @param index integer
natives.databinding_n0X6318Fb3Be37E11B3 = function(entryid, index)
    assert(type(entryid) == 'integer', 'Argument entryid must be of type integer.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0x6318FB3BE37E11B3, 'void', entryid, index)
end

--- @param p0 userdata
--- @param entryid integer
natives.databinding_databindingRemoveBindingArrayItemByDataContextId = function(p0, entryid)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(entryid) == 'integer', 'Argument entryid must be of type integer.')

    local call = natives.invoke(0xF68B1726EAF7B285, 'void', p0, entryid)
end

--- @param entryid integer
natives.databinding_databindingClearBindingArray = function(entryid)
    assert(type(entryid) == 'integer', 'Argument entryid must be of type integer.')

    local call = natives.invoke(0xA1F15C1D03DF802D, 'void', entryid)
end

--- @param p0 userdata
--- @param index integer
--- @return any
natives.databinding_databindingGetItemContextByIndex = function(p0, index)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0xE96D7F9FEFCC105F, 'any', p0, index)
    return call
end

--- @param p0 userdata
--- @param p1 integer
natives.databinding_databindingSetTemplatedUiItemListSize = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xFE74FA57E0CE6825, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 integer
--- @param p2 integer
natives.databinding_databindingSetTemplatedUiItemHashAlias = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x0AE7138D0541F2DE, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 string
--- @return any
natives.databinding_n0Xd48993A61938C64D = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')

    local call = natives.invoke(0xD48993A61938C64D, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 string
--- @return any
natives.databinding_databindingAddHashArray = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')

    local call = natives.invoke(0x52F5F08278EA5D75, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 string
--- @return any
natives.databinding_databindingAddStringArray = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')

    local call = natives.invoke(0x1B23E0627BDBFE85, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 integer
--- @param p2 integer
natives.databinding_n0X1919D59E60Fd516E = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x1919D59E60FD516E, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 integer
--- @param p2 integer
natives.databinding_n0X7Fc60C94C83C5Cd7 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x7FC60C94C83C5CD7, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 string
--- @param p2 integer
natives.databinding_n0Xc900Cec8A172375B = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0xC900CEC8A172375B, 'void', p0, p1, p2)
end

--- @param entryid integer
--- @param p1 integer
--- @return any
natives.databinding_n0X02B21B6Beedd83Cc = function(entryid, p1)
    assert(type(entryid) == 'integer', 'Argument entryid must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x02B21B6BEEDD83CC, 'any', entryid, p1)
    return call
end

--- @param p0 userdata
--- @param p1 integer
--- @return any
natives.databinding_n0Xf47E33F8D2523825 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xF47E33F8D2523825, 'any', p0, p1)
    return call
end

--- @param entryid integer
natives.databinding_n0X3Bf0767Cf33Fcc88 = function(entryid)
    assert(type(entryid) == 'integer', 'Argument entryid must be of type integer.')

    local call = natives.invoke(0x3BF0767CF33FCC88, 'void', entryid)
end

--- @param entryid integer
--- @return any
natives.databinding_databindingGetArrayCount = function(entryid)
    assert(type(entryid) == 'integer', 'Argument entryid must be of type integer.')

    local call = natives.invoke(0xD23F5DE04FE717E2, 'any', entryid)
    return call
end

--- @param p0 integer
--- @param p1 integer
--- @param ... userdata
natives.databinding_databindingWriteDataScriptVariables = function(p0, p1, ...)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(...) == 'userdata', 'Argument ... must be of type userdata.')

    local call = natives.invoke(0xAB888B4B91046771, 'void', p0, p1, ...)
end

--- @param p0 userdata
--- @param p1 boolean
natives.databinding_databindingWriteDataBool = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xAB888B4B91046770, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 string
--- @param p2 boolean
natives.databinding_databindingWriteDataBoolFromParent = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xBDFE546E4C2D0E21, 'void', p0, p1, p2)
end

-- _DATABINDING_WRITE_DATA_*
--- @param p0 userdata
--- @param p1 integer
--- @param p2 userdata
natives.databinding_n0Xbfc83Da249Befcc9 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xBFC83DA249BEFCC9, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 integer
natives.databinding_databindingWriteDataInt = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x335C3F6B3766B8D9, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 string
--- @param p2 integer
natives.databinding_databindingWriteDataIntFromParent = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x9EFA98238BA08FC4, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 integer
--- @param p2 userdata
natives.databinding_databindingWriteDataIntFromParentByHash = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x9D6E10A41D6ED6EC, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 number
natives.databinding_databindingWriteDataFloat = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0xDF504BECEB15DA93, 'void', p0, p1)
end

-- _DATABINDING_WRITE_DATA_*
--- @param p0 userdata
--- @param p1 string
--- @param p2 number
natives.databinding_n0X05Ac9E1E02975Afb = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')

    local call = natives.invoke(0x05AC9E1E02975AFB, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 integer
natives.databinding_databindingWriteDataHashString = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xACDEF586BD71B1FD, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 string
--- @param p2 integer
natives.databinding_databindingWriteDataHashStringFromParent = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x0971F04E1EAA7AE8, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 integer
--- @param p2 userdata
natives.databinding_databindingWriteDataHashStringFromParentByHash = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x20209529689E0953, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 string
natives.databinding_databindingWriteDataString = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')

    local call = natives.invoke(0xE1BD342F2872AEE9, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 string
--- @param p2 string
natives.databinding_databindingWriteStringFromParent = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')
    assert(type(p2) == 'string', 'Argument p2 must be of type string.')

    local call = natives.invoke(0x4FF713B2F17A391E, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 integer
--- @param p2 string
natives.databinding_databindingWriteStringFromHash = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'string', 'Argument p2 must be of type string.')

    local call = natives.invoke(0xA3BD6FF95E713EE5, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 string
--- @param gangid userdata
natives.databinding_databindingWriteDataGangId = function(p0, p1, gangid)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')
    assert(type(gangid) == 'userdata', 'Argument gangid must be of type userdata.')

    local call = natives.invoke(0xC70041408E16BE2D, 'void', p0, p1, gangid)
end

--- @param p0 userdata
--- @param p1 string
--- @param posseid userdata
natives.databinding_databindingWriteDataPosseId = function(p0, p1, posseid)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')
    assert(type(posseid) == 'userdata', 'Argument posseid must be of type userdata.')

    local call = natives.invoke(0xC70041408E16BE2E, 'void', p0, p1, posseid)
end

--- @param p0 userdata
--- @param gamerhandle userdata
natives.databinding_n0X422179C7F6Ad9304 = function(p0, gamerhandle)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')

    local call = natives.invoke(0x422179C7F6AD9304, 'void', p0, gamerhandle)
end

--- @param p0 userdata
--- @return any
natives.databinding_databindingReadDataBool = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x5EEFBD4B6D7CD6EB, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 string
--- @return any
natives.databinding_databindingReadDataBoolFromParent = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')

    local call = natives.invoke(0xA8EDE09FE07BD77F, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 integer
--- @return any
natives.databinding_databindingReadDataBoolFromParentByHash = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x4CDC3FDDFAE07EB3, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @return number
natives.databinding_databindingReadInt = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x570784D782597512, 'int', p0)
    return call
end

--- @param p0 userdata
--- @param p1 string
--- @return any
natives.databinding_databindingReadDataIntFromParent = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')

    local call = natives.invoke(0xFFC566A4801F6B40, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 integer
--- @return any
natives.databinding_databindingReadDataIntFromParentByHash = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xB5F668B648EC0970, 'any', p0, p1)
    return call
end

--- @param entryid integer
--- @return number
natives.databinding_databindingReadFloat = function(entryid)
    assert(type(entryid) == 'integer', 'Argument entryid must be of type integer.')

    local call = natives.invoke(0x5FE444EB67C70AD4, 'float', entryid)
    return call
end

--- @param entryid integer
--- @return number
natives.databinding_databindingReadHash = function(entryid)
    assert(type(entryid) == 'integer', 'Argument entryid must be of type integer.')

    local call = natives.invoke(0x81D7183E7A8ECA72, 'integer', entryid)
    return call
end

--- @param p0 userdata
--- @param p1 string
--- @return any
natives.databinding_databindingReadDataHashStringFromParent = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')

    local call = natives.invoke(0x9B535990B01B62DE, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 integer
--- @return any
natives.databinding_databindingReadDataHashStringFromParentByHash = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x1F43BC25A119B252, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @return any
natives.databinding_databindingReadDataString = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x3D290B5FFA7C5151, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 string
--- @return any
natives.databinding_databindingReadDataStringFromParent = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')

    local call = natives.invoke(0x6323AD277C4A2AFB, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 integer
--- @return any
natives.databinding_n0X6329C34Bee5Bff4B = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x6329C34BEE5BFF4B, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 string
--- @return any
natives.databinding_n0Xe6Aab897120492D6 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')

    local call = natives.invoke(0xE6AAB897120492D6, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 string
--- @param p2 userdata
natives.databinding_n0Xe6Aab897120492D7 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xE6AAB897120492D7, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 string
--- @param p2 userdata
natives.databinding_n0Xb138Ca787F3Dd858 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xB138CA787F3DD858, 'void', p0, p1, p2)
end

--- @param entryid integer
--- @return boolean
natives.databinding_databindingIsEntryValid = function(entryid)
    assert(type(entryid) == 'integer', 'Argument entryid must be of type integer.')

    local call = natives.invoke(0x1E7130793AAAAB8D, 'bool', entryid)
    return call
end

--- @param entryid integer
natives.databinding_databindingRemoveDataEntry = function(entryid)
    assert(type(entryid) == 'integer', 'Argument entryid must be of type integer.')

    local call = natives.invoke(0x0AE9938D0541F2DA, 'void', entryid)
end

--- @param p0 userdata
--- @param size integer
natives.databinding_virtualCollectionSetSize = function(p0, size)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(size) == 'integer', 'Argument size must be of type integer.')

    local call = natives.invoke(0x9DCE9B01A93B58BC, 'void', p0, size)
end

--- @param p0 userdata
--- @param interestindex integer
natives.databinding_virtualCollectionSetInterestIndex = function(p0, interestindex)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(interestindex) == 'integer', 'Argument interestindex must be of type integer.')

    local call = natives.invoke(0x49A8447533308BCF, 'void', p0, interestindex)
end

--- @param p0 userdata
--- @param index integer
--- @param p2 integer
--- @param p3 userdata
natives.databinding_virtualCollectionItemAdd = function(p0, index, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x6DCBF187221CF73D, 'void', p0, index, p2, p3)
end

--- @param p0 userdata
natives.databinding_virtualCollectionReset = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x09D95666ED2B5F60, 'void', p0)
end

--- @param p0 userdata
--- @return any
natives.databinding_virtualCollectionExists = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x37963B56755BFB35, 'any', p0)
    return call
end

-- Adds the given request ID to the watch list.
--- @param id integer
natives.datafile_datafileWatchRequestId = function(id)
    assert(type(id) == 'integer', 'Argument id must be of type integer.')

    local call = natives.invoke(0xA5834834CA8FD7FC, 'void', id)
end

--- @param p0 userdata
--- @return boolean
natives.datafile_datafileHasLoadedFileData = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x17279C820464CEE0, 'bool', p0)
    return call
end

--- @param p0 userdata
--- @return boolean
natives.datafile_datafileHasValidFileData = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xE60100389E50EADE, 'bool', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return boolean
natives.datafile_datafileSelectActiveFile = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x46102A0989AD80B5, 'bool', p0, p1)
    return call
end

--- @param p0 userdata
--- @return boolean
natives.datafile_datafileDeleteRequestedFile = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x604B8ED1A482F9DF, 'bool', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @return any
natives.datafile_ugc2SetPlayerData = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xE79C70E77E0973C7, 'any', p0, p1, p2, p3)
    return call
end

-- Reloops value returned by UGC_QUERY_GET_CONTENT_NUM
--- @param ugcrequestid userdata
--- @param index integer
--- @param p2 userdata
--- @return any
natives.datafile_datafileUgcSelectData = function(ugcrequestid, index, p2)
    assert(type(ugcrequestid) == 'userdata', 'Argument ugcrequestid must be of type userdata.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x790EC421078F5C4E, 'any', ugcrequestid, index, p2)
    return call
end

--- @param index integer
natives.datafile_datafileCreate = function(index)
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0x56B7291FB953DD51, 'void', index)
end

--- @param index integer
natives.datafile_datafileDelete = function(index)
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0x9FB90EEDEA9F2D5C, 'void', index)
end

--- @param index integer
--- @return any
natives.datafile_datafileGetFileDict = function(index)
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0xBBD8CF823CAE557C, 'any', index)
    return call
end

--- @param filedict userdata
--- @return boolean
natives.datafile_datadictIsDictValid = function(filedict)
    assert(type(filedict) == 'userdata', 'Argument filedict must be of type userdata.')

    local call = natives.invoke(0x4607D57C5F7D332A, 'bool', filedict)
    return call
end

--- @param filedict userdata
--- @return boolean
natives.datafile_datadictIsArrayValid = function(filedict)
    assert(type(filedict) == 'userdata', 'Argument filedict must be of type userdata.')

    local call = natives.invoke(0xB04B69CF277D15C0, 'bool', filedict)
    return call
end

--- @param objectdata userdata
--- @param key string
--- @param value integer
natives.datafile_datadictSetInt = function(objectdata, key, value)
    assert(type(objectdata) == 'userdata', 'Argument objectdata must be of type userdata.')
    assert(type(key) == 'string', 'Argument key must be of type string.')
    assert(type(value) == 'integer', 'Argument value must be of type integer.')

    local call = natives.invoke(0x26FDF5E99AA2F3E9, 'void', objectdata, key, value)
end

--- @param objectdata userdata
--- @param key string
--- @return boolean
natives.datafile_datadictGetBool = function(objectdata, key)
    assert(type(objectdata) == 'userdata', 'Argument objectdata must be of type userdata.')
    assert(type(key) == 'string', 'Argument key must be of type string.')

    local call = natives.invoke(0x175E915A486EE548, 'bool', objectdata, key)
    return call
end

--- @param objectdata userdata
--- @param key string
--- @return number
natives.datafile_datadictGetInt = function(objectdata, key)
    assert(type(objectdata) == 'userdata', 'Argument objectdata must be of type userdata.')
    assert(type(key) == 'string', 'Argument key must be of type string.')

    local call = natives.invoke(0x9D896A3B87D96E2B, 'int', objectdata, key)
    return call
end

--- @param objectdata userdata
--- @param key string
--- @return number
natives.datafile_datadictGetFloat = function(objectdata, key)
    assert(type(objectdata) == 'userdata', 'Argument objectdata must be of type userdata.')
    assert(type(key) == 'string', 'Argument key must be of type string.')

    local call = natives.invoke(0x814643ECA258ADF5, 'float', objectdata, key)
    return call
end

--- @param objectdata userdata
--- @param key string
--- @return string
natives.datafile_datadictGetString = function(objectdata, key)
    assert(type(objectdata) == 'userdata', 'Argument objectdata must be of type userdata.')
    assert(type(key) == 'string', 'Argument key must be of type string.')

    local call = natives.invoke(0xE37B38C0B4E95DFA, 'string', objectdata, key)
    return call
end

--- @param objectdata userdata
--- @param key string
--- @return number, number, number
natives.datafile_datadictGetVector = function(objectdata, key)
    assert(type(objectdata) == 'userdata', 'Argument objectdata must be of type userdata.')
    assert(type(key) == 'string', 'Argument key must be of type string.')

    local call = natives.invoke(0xE459C941431E0FFA, 'vector3', objectdata, key)
    return call.x, call.y, call.z
end

--- @param objectdata userdata
--- @param key string
--- @return any
natives.datafile_datadictGetDict = function(objectdata, key)
    assert(type(objectdata) == 'userdata', 'Argument objectdata must be of type userdata.')
    assert(type(key) == 'string', 'Argument key must be of type string.')

    local call = natives.invoke(0x4D7A30130F46AC9C, 'any', objectdata, key)
    return call
end

--- @param objectdata userdata
--- @param key string
--- @return any
natives.datafile_datadictGetArray = function(objectdata, key)
    assert(type(objectdata) == 'userdata', 'Argument objectdata must be of type userdata.')
    assert(type(key) == 'string', 'Argument key must be of type string.')

    local call = natives.invoke(0x1B5447CF18544B18, 'any', objectdata, key)
    return call
end

-- Types:
-- 1 = Boolean
-- 2 = Integer
-- 3 = Float
-- 4 = String
-- 5 = Vector3
-- 6 = Object
-- 7 = Array
--- @param objectdata userdata
--- @param key string
--- @return number
natives.datafile_datadictGetType = function(objectdata, key)
    assert(type(objectdata) == 'userdata', 'Argument objectdata must be of type userdata.')
    assert(type(key) == 'string', 'Argument key must be of type string.')

    local call = natives.invoke(0x92E11E3CA4C7CDF0, 'int', objectdata, key)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.datafile_n0Xbc0Df006A4952C68 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xBC0DF006A4952C68, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.datafile_n0X9F130129Ebc31B34 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x9F130129EBC31B34, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.datafile_n0X277251C161B4C3F4 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x277251C161B4C3F4, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.datafile_n0X1C65Cc931C0F946F = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x1C65CC931C0F946F, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.datafile_n0X7681B677400C7071 = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x7681B677400C7071, 'void', p0, p1, p2, p3, p4)
end

--- @param arraydata userdata
--- @param arrayindex integer
--- @return boolean
natives.datafile_dataarrayGetBool = function(arraydata, arrayindex)
    assert(type(arraydata) == 'userdata', 'Argument arraydata must be of type userdata.')
    assert(type(arrayindex) == 'integer', 'Argument arrayindex must be of type integer.')

    local call = natives.invoke(0xAB1231D2DE52F2D3, 'bool', arraydata, arrayindex)
    return call
end

--- @param arraydata userdata
--- @param arrayindex integer
--- @return number
natives.datafile_dataarrayGetInt = function(arraydata, arrayindex)
    assert(type(arraydata) == 'userdata', 'Argument arraydata must be of type userdata.')
    assert(type(arrayindex) == 'integer', 'Argument arrayindex must be of type integer.')

    local call = natives.invoke(0x96DEA500B6EBBE53, 'int', arraydata, arrayindex)
    return call
end

--- @param arraydata userdata
--- @param arrayindex integer
--- @return number
natives.datafile_dataarrayGetFloat = function(arraydata, arrayindex)
    assert(type(arraydata) == 'userdata', 'Argument arraydata must be of type userdata.')
    assert(type(arrayindex) == 'integer', 'Argument arrayindex must be of type integer.')

    local call = natives.invoke(0xA9D003CF419CB81E, 'float', arraydata, arrayindex)
    return call
end

--- @param arraydata userdata
--- @param arrayindex integer
--- @return string
natives.datafile_dataarrayGetString = function(arraydata, arrayindex)
    assert(type(arraydata) == 'userdata', 'Argument arraydata must be of type userdata.')
    assert(type(arrayindex) == 'integer', 'Argument arrayindex must be of type integer.')

    local call = natives.invoke(0xB6790A8FF80F889F, 'string', arraydata, arrayindex)
    return call
end

--- @param arraydata userdata
--- @param arrayindex integer
--- @return number, number, number
natives.datafile_dataarrayGetVector = function(arraydata, arrayindex)
    assert(type(arraydata) == 'userdata', 'Argument arraydata must be of type userdata.')
    assert(type(arrayindex) == 'integer', 'Argument arrayindex must be of type integer.')

    local call = natives.invoke(0x850DA2750DA14E9A, 'vector3', arraydata, arrayindex)
    return call.x, call.y, call.z
end

--- @param arraydata userdata
--- @param arrayindex integer
--- @return any
natives.datafile_dataarrayGetDict = function(arraydata, arrayindex)
    assert(type(arraydata) == 'userdata', 'Argument arraydata must be of type userdata.')
    assert(type(arrayindex) == 'integer', 'Argument arrayindex must be of type integer.')

    local call = natives.invoke(0xA010655985853485, 'any', arraydata, arrayindex)
    return call
end

--- @param arraydata userdata
--- @return number
natives.datafile_dataarrayGetCount = function(arraydata)
    assert(type(arraydata) == 'userdata', 'Argument arraydata must be of type userdata.')

    local call = natives.invoke(0x6A885BF69239E539, 'int', arraydata)
    return call
end

-- Types:
-- 1 = Boolean
-- 2 = Integer
-- 3 = Float
-- 4 = String
-- 5 = Vector3
-- 6 = Object
-- 7 = Array
--- @param arraydata userdata
--- @param arrayindex integer
--- @return number
natives.datafile_dataarrayGetType = function(arraydata, arrayindex)
    assert(type(arraydata) == 'userdata', 'Argument arraydata must be of type userdata.')
    assert(type(arrayindex) == 'integer', 'Argument arrayindex must be of type integer.')

    local call = natives.invoke(0x151DAFE6B3B9888F, 'int', arraydata, arrayindex)
    return call
end

--- @param p0 userdata
--- @return any
natives.datafile_n0X4F9E3Ed7617123Ac = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x4F9E3ED7617123AC, 'any', p0)
    return call
end

--- @param p0 userdata
--- @return any
natives.datafile_n0Xca56Dd6Ab7A39F64 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xCA56DD6AB7A39F64, 'any', p0)
    return call
end

-- LOAD_PARSEDDATA_FILE_FAILSAFE_HASH
-- Returns parseddata script fileHandle
--- @param p0 integer
--- @return number
natives.datafile_parseddataLoadFileHash = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0xD97D8D905F1562F2, 'int', p0)
    return call
end

--- @param filehandle integer
natives.datafile_parseddataUnloadFile = function(filehandle)
    assert(type(filehandle) == 'integer', 'Argument filehandle must be of type integer.')

    local call = natives.invoke(0x129567F0C05F81B9, 'void', filehandle)
end

--- @param filehandle integer
--- @return boolean
natives.datafile_parseddataIsFileValid = function(filehandle)
    assert(type(filehandle) == 'integer', 'Argument filehandle must be of type integer.')

    local call = natives.invoke(0x7907969497EA92F5, 'bool', filehandle)
    return call
end

--- @param filehandle integer
--- @return boolean
natives.datafile_parseddataIsFileLoaded = function(filehandle)
    assert(type(filehandle) == 'integer', 'Argument filehandle must be of type integer.')

    local call = natives.invoke(0x603AC35FD4602C76, 'bool', filehandle)
    return call
end

-- nullsub, doesn't do anything
natives.datafile_n0X3168Ba5D6Dece323 = function()

    local call = natives.invoke(0x3168BA5D6DECE323, 'void')
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.datafile_parseddataRegisterQuery = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xAE156A747C39A741, 'any', p0, p1, p2)
    return call
end

-- Old name: _DATAFILE_GET_DATA_NODE_INDEX
--- @param p0 integer
--- @param p1 userdata
--- @return boolean
natives.datafile_parseddataRqFilloutNode = function(p0, p1)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x83C3ED532B6E5D07, 'bool', p0, p1)
    return call
end

--- @param p0 userdata
--- @return any
natives.datafile_parseddataRqGetNumNodes = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xDF01B1F7A886B42D, 'any', p0)
    return call
end

--- @param p0 integer
--- @param p1 integer
--- @return number
natives.datafile_n0Xe13634Bb6Baf0734 = function(p0, p1)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xE13634BB6BAF0734, 'int', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.datafile_parseddataGetNumChildren = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x6BEB168D5195E7AB, 'any', p0, p1)
    return call
end

-- Old name: _DATAFILE_GET_HASH
--- @param p0 integer
--- @param p1 userdata
--- @return boolean
natives.datafile_parseddataRqFilloutHash = function(p0, p1)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xFBFF3FF2F5E80C0B, 'bool', p0, p1)
    return call
end

-- Old name: _DATAFILE_GET_STRING
--- @param p0 integer
--- @param p1 userdata
--- @return boolean
natives.datafile_parseddataRqFilloutString63 = function(p0, p1)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x08EAF8E9F2EB7B2E, 'bool', p0, p1)
    return call
end

--- @param p0 integer
--- @param p1 userdata
--- @return boolean
natives.datafile_parseddataRqFilloutString127 = function(p0, p1)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x951327435DC5164B, 'bool', p0, p1)
    return call
end

-- Old name: _DATAFILE_GET_VECTOR
--- @param p0 integer
--- @param p1 userdata
--- @return boolean
natives.datafile_parseddataRqFilloutVector = function(p0, p1)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x06FBF89B12DA279C, 'bool', p0, p1)
    return call
end

-- Old name: _DATAFILE_GET_FLOAT
--- @param p0 integer
--- @param p1 userdata
--- @return boolean
natives.datafile_parseddataRqFilloutFloat = function(p0, p1)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x7F034FC3E891B57A, 'bool', p0, p1)
    return call
end

-- Old name: _DATAFILE_GET_INT
--- @param p0 integer
--- @param p1 userdata
--- @return boolean
natives.datafile_parseddataRqFilloutInt = function(p0, p1)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xEF44ACC657352A35, 'bool', p0, p1)
    return call
end

-- Old name: _DATAFILE_GET_BOOL
--- @param p0 integer
--- @param p1 userdata
--- @return boolean
natives.datafile_parseddataRqFilloutBool = function(p0, p1)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x0D9138F3F8261DF7, 'bool', p0, p1)
    return call
end

-- Opens file.
--- @param p0 userdata
natives.datafile_parseddataGetFile = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x91DED5DD64BB2691, 'void', p0)
end

-- Returns false when there are no entries.
--- @param p0 userdata
--- @return boolean
natives.datafile_parseddataGetEntries = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xED4413CEE1BF142C, 'bool', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 integer
--- @return boolean
natives.datafile_parseddataGetFloat = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0xB2B42607F7867576, 'bool', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 integer
--- @return boolean
natives.datafile_parseddataGetInt = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x52FC26D2D2FC2987, 'bool', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param section integer
--- @return boolean
natives.datafile_parseddataGetSection = function(p0, p1, section)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(section) == 'integer', 'Argument section must be of type integer.')

    local call = natives.invoke(0x44B3A36933AC009C, 'bool', p0, p1, section)
    return call
end

--- @param p0 integer
--- @param p1 userdata
--- @param p2 integer
--- @return boolean
natives.datafile_parseddataGetBool = function(p0, p1, p2)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0xA63CD20F19B961AB, 'bool', p0, p1, p2)
    return call
end

-- nullsub, doesn't do anything
--- @return any
natives.debug_n0Xacf9Cb705Befa8Cb = function()

    local call = natives.invoke(0xACF9CB705BEFA8CB, 'any')
    return call
end

-- nullsub, doesn't do anything
--- @return any
natives.debug_n0Xa8D970D8A72640A6 = function()

    local call = natives.invoke(0xA8D970D8A72640A6, 'any')
    return call
end

-- Return example: 1207.69_dev_pc, 1436.28_dev_live_tu
-- 
-- Old name: _GET_GAME_BUILD_STRING
--- @return string
natives.debug_getGameVersionName = function()

    local call = natives.invoke(0x05A5F662AD35C573, 'string')
    return call
end

-- This function sets metadata of type bool to specified entity.
-- 
--- @param entity integer
--- @param propertyname string
--- @param value boolean
--- @return boolean
natives.decorator_decorSetBool = function(entity, propertyname, value)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(propertyname) == 'string', 'Argument propertyname must be of type string.')
    assert(type(value) == 'boolean', 'Argument value must be of type boolean.')

    local call = natives.invoke(0xFE26E4609B1C3772, 'bool', entity, propertyname, value)
    return call
end

--- @param entity integer
--- @param propertyname string
--- @param value number
--- @return boolean
natives.decorator_decorSetFloat = function(entity, propertyname, value)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(propertyname) == 'string', 'Argument propertyname must be of type string.')
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0x238F8B0C1C7FE834, 'bool', entity, propertyname, value)
    return call
end

-- Sets property to int.
--- @param entity integer
--- @param propertyname string
--- @param value integer
--- @return boolean
natives.decorator_decorSetInt = function(entity, propertyname, value)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(propertyname) == 'string', 'Argument propertyname must be of type string.')
    assert(type(value) == 'integer', 'Argument value must be of type integer.')

    local call = natives.invoke(0xE88F4D7F52A6090F, 'bool', entity, propertyname, value)
    return call
end

--- @param entity integer
--- @param propertyname string
--- @param value integer
--- @return boolean
natives.decorator_decorSetUint8 = function(entity, propertyname, value)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(propertyname) == 'string', 'Argument propertyname must be of type string.')
    assert(type(value) == 'integer', 'Argument value must be of type integer.')

    local call = natives.invoke(0x4BDC83150D43772D, 'bool', entity, propertyname, value)
    return call
end

--- @param entity integer
--- @param propertyname string
--- @param value string
--- @return boolean
natives.decorator_decorSetString = function(entity, propertyname, value)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(propertyname) == 'string', 'Argument propertyname must be of type string.')
    assert(type(value) == 'string', 'Argument value must be of type string.')

    local call = natives.invoke(0x0671C1A3FF7AFDFC, 'bool', entity, propertyname, value)
    return call
end

--- @param entity integer
--- @param propertyname string
--- @return boolean
natives.decorator_decorGetBool = function(entity, propertyname)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(propertyname) == 'string', 'Argument propertyname must be of type string.')

    local call = natives.invoke(0xDEF3F1B071ABB197, 'bool', entity, propertyname)
    return call
end

--- @param entity integer
--- @param propertyname string
--- @return number
natives.decorator_decorGetFloat = function(entity, propertyname)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(propertyname) == 'string', 'Argument propertyname must be of type string.')

    local call = natives.invoke(0xE5FF70CD842CA9D4, 'float', entity, propertyname)
    return call
end

--- @param entity integer
--- @param propertyname string
--- @return number
natives.decorator_decorGetInt = function(entity, propertyname)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(propertyname) == 'string', 'Argument propertyname must be of type string.')

    local call = natives.invoke(0x44DB62727762FD9B, 'int', entity, propertyname)
    return call
end

--- @param entity integer
--- @param propertyname string
--- @return number
natives.decorator_decorGetUint8 = function(entity, propertyname)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(propertyname) == 'string', 'Argument propertyname must be of type string.')

    local call = natives.invoke(0xB1682B2443F0540B, 'int', entity, propertyname)
    return call
end

-- Returns whether or not the specified property is set for the entity.
--- @param entity integer
--- @param propertyname string
--- @return boolean
natives.decorator_decorExistOn = function(entity, propertyname)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(propertyname) == 'string', 'Argument propertyname must be of type string.')

    local call = natives.invoke(0xD9D1CDBF3464DCDF, 'bool', entity, propertyname)
    return call
end

--- @param entity integer
--- @param propertyname string
--- @return boolean
natives.decorator_decorRemove = function(entity, propertyname)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(propertyname) == 'string', 'Argument propertyname must be of type string.')

    local call = natives.invoke(0x2BA7F5877A088A1D, 'bool', entity, propertyname)
    return call
end

--- @param entity integer
--- @return boolean
natives.decorator_decorRemoveAll = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x88942780E0ADEA42, 'bool', entity)
    return call
end

--- @param propertyname string
--- @param type integer
natives.decorator_decorRegister = function(propertyname, type)
    assert(type(propertyname) == 'string', 'Argument propertyname must be of type string.')
    assert(type(type) == 'integer', 'Argument type must be of type integer.')

    local call = natives.invoke(0x0B253D644E3C36B3, 'void', propertyname, type)
end

--- @param propertyname string
--- @param type integer
--- @param p2 boolean
natives.decorator_decorRegister2 = function(propertyname, type, p2)
    assert(type(propertyname) == 'string', 'Argument propertyname must be of type string.')
    assert(type(type) == 'integer', 'Argument type must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x4587374F88B7F6C2, 'void', propertyname, type, p2)
end

-- type: see DECOR_REGISTER
--- @param propertyname string
--- @param type integer
--- @return boolean
natives.decorator_decorIsRegisteredAsType = function(propertyname, type)
    assert(type(propertyname) == 'string', 'Argument propertyname must be of type string.')
    assert(type(type) == 'integer', 'Argument type must be of type integer.')

    local call = natives.invoke(0x72355278C069F272, 'bool', propertyname, type)
    return call
end

--- @param dlchash integer
--- @return boolean
natives.dlc_isDlcPresent = function(dlchash)
    assert(type(dlchash) == 'integer', 'Argument dlchash must be of type integer.')

    local call = natives.invoke(0x2763DC12BBE2BB6F, 'bool', dlchash)
    return call
end

--- @return boolean
natives.dlc_getIsLoadingScreenActive = function()

    local call = natives.invoke(0x71D4BF5890659B0C, 'bool')
    return call
end

--- @return boolean
natives.dlc_getSpecialEditionCoreStatsBonusEnabled = function()

    local call = natives.invoke(0xA16B4FBA7887D7BA, 'bool')
    return call
end

--- @return boolean
natives.dlc_getSpecialEditionCashCampBonusEnabled = function()

    local call = natives.invoke(0x1DB9D61E505AE3FC, 'bool')
    return call
end

-- Checks if the Entity exists
--- @param entity integer
--- @return boolean
natives.entity_doesEntityExist = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xD42BD6EB2E0F1677, 'bool', entity)
    return call
end

--- @param entity integer
--- @param p1 boolean
--- @return boolean
natives.entity_doesEntityBelongToThisScript = function(entity, p1)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x622B1980CBE13332, 'bool', entity, p1)
    return call
end

--- @param entity integer
--- @return boolean
natives.entity_doesEntityHaveDrawable = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x20487F0DA9AF164A, 'bool', entity)
    return call
end

--- @param entity integer
--- @return boolean
natives.entity_doesEntityHavePhysics = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xA512B3F1B2A0B51C, 'bool', entity)
    return call
end

--- @param entity integer
--- @return boolean
natives.entity_hasEntityBeenDamagedByAnyObject = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x73BB763880CD23A6, 'bool', entity)
    return call
end

--- @param entity integer
--- @return boolean
natives.entity_hasEntityBeenDamagedByAnyPed = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x9934E9C42D52D87E, 'bool', entity)
    return call
end

--- @param entity integer
--- @return boolean
natives.entity_hasEntityBeenDamagedByAnyVehicle = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x695D7C26DE65C423, 'bool', entity)
    return call
end

--- @param entity1 integer
--- @param entity2 integer
--- @param p2 boolean
--- @param p3 boolean
--- @return boolean
natives.entity_hasEntityBeenDamagedByEntity = function(entity1, entity2, p2, p3)
    assert(type(entity1) == 'integer', 'Argument entity1 must be of type integer.')
    assert(type(entity2) == 'integer', 'Argument entity2 must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0x7B6E7BEC1143AC86, 'bool', entity1, entity2, p2, p3)
    return call
end

-- Used in Script Function DUELING_DID_PLAYER_DISARM_OPPONENT
--- @param entity1 integer
--- @param entity2 integer
--- @param p2 userdata
--- @param p3 userdata
--- @return boolean
natives.entity_n0X3Ec28Da1Ffac9Ddd = function(entity1, entity2, p2, p3)
    assert(type(entity1) == 'integer', 'Argument entity1 must be of type integer.')
    assert(type(entity2) == 'integer', 'Argument entity2 must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x3EC28DA1FFAC9DDD, 'bool', entity1, entity2, p2, p3)
    return call
end

--- @param entity integer
--- @return number
natives.entity_n0Xaf72Ec7E1B54539B = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xAF72EC7E1B54539B, 'int', entity)
    return call
end

--- @param entity1 integer
--- @param entity2 integer
--- @param tracetype integer
--- @return boolean
natives.entity_hasEntityClearLosToEntity = function(entity1, entity2, tracetype)
    assert(type(entity1) == 'integer', 'Argument entity1 must be of type integer.')
    assert(type(entity2) == 'integer', 'Argument entity2 must be of type integer.')
    assert(type(tracetype) == 'integer', 'Argument tracetype must be of type integer.')

    local call = natives.invoke(0xFCDFF7B72D23A1AC, 'bool', entity1, entity2, tracetype)
    return call
end

--- @param entity integer
--- @param x number
--- @param y number
--- @param z number
--- @param flags integer
--- @return boolean
natives.entity_hasEntityClearLosToCoord = function(entity, x, y, z, flags)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')

    local call = natives.invoke(0x0C9DBF48C6BA6E4C, 'bool', entity, x, y, z, flags)
    return call
end

-- Has the entity1 got a clear line of sight to the other entity2 from the direction entity1 is facing.
--- @param entity1 integer
--- @param entity2 integer
--- @param tracetype integer
--- @return boolean
natives.entity_hasEntityClearLosToEntityInFront = function(entity1, entity2, tracetype)
    assert(type(entity1) == 'integer', 'Argument entity1 must be of type integer.')
    assert(type(entity2) == 'integer', 'Argument entity2 must be of type integer.')
    assert(type(tracetype) == 'integer', 'Argument tracetype must be of type integer.')

    local call = natives.invoke(0xE88F19660651D566, 'bool', entity1, entity2, tracetype)
    return call
end

--- @param entity integer
--- @return boolean
natives.entity_hasEntityCollidedWithAnything = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xDF18751EC74F90FF, 'bool', entity)
    return call
end

--- @param vehicle integer
--- @return number
natives.entity_n0X6D58167F62238284 = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x6D58167F62238284, 'float', vehicle)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return number
natives.entity_n0Xdfc2B226D56D85F6 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xDFC2B226D56D85F6, 'float', p0, p1)
    return call
end

--- @param animdict string
--- @param animname string
--- @return number
natives.entity_getAnimDuration = function(animdict, animname)
    assert(type(animdict) == 'string', 'Argument animdict must be of type string.')
    assert(type(animname) == 'string', 'Argument animname must be of type string.')

    local call = natives.invoke(0x9FFAF4940A54CC09, 'float', animdict, animname)
    return call
end

--- @param entity integer
--- @return number
natives.entity_getEntityAttachedTo = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x56D713888A566481, 'int', entity)
    return call
end

-- Gets the current coordinates for a specified entity.
-- `entity` = The entity to get the coordinates from.
-- `alive` = Unused by the game, potentially used by debug builds in order to assert whether or not an entity was alive.
-- 
-- If entity is a ped and it's in a vehicle or on a mount the coords of that entity are returned. Set 'realCoords' to true when you need the true ped coords.
--- @param entity integer
--- @param alive boolean
--- @param realcoords boolean
--- @return number, number, number
natives.entity_getEntityCoords = function(entity, alive, realcoords)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(alive) == 'boolean', 'Argument alive must be of type boolean.')
    assert(type(realcoords) == 'boolean', 'Argument realcoords must be of type boolean.')

    local call = natives.invoke(0xA86D5F069399F44D, 'vector3', entity, alive, realcoords)
    return call.x, call.y, call.z
end

-- Gets the entity's forward vector in XY(Z) eulers.
--- @param entity integer
--- @return number, number, number
natives.entity_getEntityForwardVector = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x2412D9C05BB09B97, 'vector3', entity)
    return call.x, call.y, call.z
end

-- Gets the X-component of the entity's forward vector.
--- @param entity integer
--- @return number
natives.entity_getEntityForwardX = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xDB0954E9960F6457, 'float', entity)
    return call
end

-- Gets the Y-component of the entity's forward vector.
--- @param entity integer
--- @return number
natives.entity_getEntityForwardY = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x9A5C073ECBDA7EE7, 'float', entity)
    return call
end

-- Gets the entity's forward vector in YX(Z) eulers. Similar to GET_ENTITY_FORWARD_VECTOR
--- @param entity integer
--- @return number, number, number
natives.entity_getEntityForwardVectorYx = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x935A30AA88FB1014, 'vector3', entity)
    return call.x, call.y, call.z
end

-- Returns the heading of the entity in degrees. Also know as the "Yaw" of an entity.
--- @param entity integer
--- @return number
natives.entity_getEntityHeading = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xC230DD956E2F5507, 'float', entity)
    return call
end

--- @param entity integer
--- @return number
natives.entity_getEntityHealth = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x82368787EA73C0F7, 'int', entity)
    return call
end

-- Returns (CUR_HEALTH / MAX_HEALTH)
--- @param entity integer
--- @return number
natives.entity_getEntityHealthFloat = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x96C638784DB4C815, 'float', entity)
    return call
end

-- Alters entity's health by 'amount'. Can be negative (to drain health).
-- In the scripts entity2 and weaponHash are unused (zero).
--- @param entity integer
--- @param amount number
--- @param entity2 integer
--- @param weaponhash integer
--- @return boolean
natives.entity_changeEntityHealth = function(entity, amount, entity2, weaponhash)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(amount) == 'number', 'Argument amount must be of type number.')
    assert(type(entity2) == 'integer', 'Argument entity2 must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0x835F131E7DC8F97A, 'bool', entity, amount, entity2, weaponhash)
    return call
end

--- @param entity integer
--- @param p1 boolean
--- @return number
natives.entity_getEntityMaxHealth = function(entity, p1)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x15D757606D170C3C, 'int', entity, p1)
    return call
end

--- @param entity integer
--- @param value integer
natives.entity_setEntityMaxHealth = function(entity, value)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(value) == 'integer', 'Argument value must be of type integer.')

    local call = natives.invoke(0x166E7CF68597D8B5, 'void', entity, value)
end

--- @param entity integer
--- @param x number
--- @param y number
--- @param z number
--- @param attop boolean
--- @param inworldcoords boolean
--- @return number
natives.entity_getEntityHeight = function(entity, x, y, z, attop, inworldcoords)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(attop) == 'boolean', 'Argument attop must be of type boolean.')
    assert(type(inworldcoords) == 'boolean', 'Argument inworldcoords must be of type boolean.')

    local call = natives.invoke(0x296DEBC84474B375, 'float', entity, x, y, z, attop, inworldcoords)
    return call
end

--- @param entity integer
--- @return number
natives.entity_getEntityHeightAboveGround = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x0D3B5BAEA08F63E9, 'float', entity)
    return call
end

--- @param entity integer
--- @param minimum integer
--- @param maximum integer
natives.entity_getEntityWorldPositionOfDimensions = function(entity, minimum, maximum)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(minimum) == 'integer', 'Argument minimum must be of type integer.')
    assert(type(maximum) == 'integer', 'Argument maximum must be of type integer.')

    local call = natives.invoke(0xF3FDA9A617A15145, 'void', entity, minimum, maximum)
end

--- @param entity integer
--- @param rightvector integer
--- @param forwardvector integer
--- @param upvector integer
--- @param position integer
natives.entity_getEntityMatrix = function(entity, rightvector, forwardvector, upvector, position)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(rightvector) == 'integer', 'Argument rightvector must be of type integer.')
    assert(type(forwardvector) == 'integer', 'Argument forwardvector must be of type integer.')
    assert(type(upvector) == 'integer', 'Argument upvector must be of type integer.')
    assert(type(position) == 'integer', 'Argument position must be of type integer.')

    local call = natives.invoke(0x3A9B1120AF13FBF2, 'void', entity, rightvector, forwardvector, upvector, position)
end

-- Returns the model hash from the entity
--- @param entity integer
--- @return number
natives.entity_getEntityModel = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xDA76A9F39210D365, 'integer', entity)
    return call
end

-- Returns the ped's animal type hash: https:--alloc8or.re/rdr3/doc/enums/eAnimalType.txt
-- Combine this with GET_STRING_FROM_HASH_KEY to display localized entity names
--- @param ped integer
--- @return number
natives.entity_getPedAnimalType = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x964000D355219FC0, 'integer', ped)
    return call
end

--- @param entity integer
--- @return boolean
natives.entity_getIsAnimal = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x9A100F1CF4546629, 'bool', entity)
    return call
end

--- @param entity integer
--- @return boolean
natives.entity_getIsBird = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xC346A546612C49A9, 'bool', entity)
    return call
end

--- @param entity integer
--- @return boolean
natives.entity_getIsPredator = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x5594AFE9DE0C01B7, 'bool', entity)
    return call
end

--- @param entity integer
--- @param posx number
--- @param posy number
--- @param posz number
--- @return number, number, number
natives.entity_getOffsetFromEntityGivenWorldCoords = function(entity, posx, posy, posz)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(posx) == 'number', 'Argument posx must be of type number.')
    assert(type(posy) == 'number', 'Argument posy must be of type number.')
    assert(type(posz) == 'number', 'Argument posz must be of type number.')

    local call = natives.invoke(0x497C6B1A2C9AE69C, 'vector3', entity, posx, posy, posz)
    return call.x, call.y, call.z
end

-- Offset values are relative to the entity.
-- 
-- x = left/right
-- y = forward/backward
-- z = up/down
--- @param entity integer
--- @param offsetx number
--- @param offsety number
--- @param offsetz number
--- @return number, number, number
natives.entity_getOffsetFromEntityInWorldCoords = function(entity, offsetx, offsety, offsetz)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(offsetx) == 'number', 'Argument offsetx must be of type number.')
    assert(type(offsety) == 'number', 'Argument offsety must be of type number.')
    assert(type(offsetz) == 'number', 'Argument offsetz must be of type number.')

    local call = natives.invoke(0x1899F328B0E12848, 'vector3', entity, offsetx, offsety, offsetz)
    return call.x, call.y, call.z
end

--- @param entity integer
--- @return number
natives.entity_getEntityPitch = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xEF355ABEFF7F5005, 'float', entity)
    return call
end

-- Displays the current ROLL axis of the entity [-180.0000/180.0000+]
-- (Sideways Roll) such as a vehicle tipped on its side
--- @param entity integer
--- @return number
natives.entity_getEntityRoll = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xBF966536FA8B6879, 'float', entity)
    return call
end

--- @param entity integer
--- @param rotationorder integer
--- @return number, number, number
natives.entity_getEntityRotation = function(entity, rotationorder)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(rotationorder) == 'integer', 'Argument rotationorder must be of type integer.')

    local call = natives.invoke(0xE09CAF86C32CB48F, 'vector3', entity, rotationorder)
    return call.x, call.y, call.z
end

--- @param entity integer
--- @param argstruct userdata
--- @return number
natives.entity_getEntityScript = function(entity, argstruct)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(argstruct) == 'userdata', 'Argument argstruct must be of type userdata.')

    local call = natives.invoke(0x2A08A32B6D49906F, 'integer', entity, argstruct)
    return call
end

-- Result is in meters per second (m/s)
--- @param entity integer
--- @return number
natives.entity_getEntitySpeed = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xFB6BA510A533DF81, 'float', entity)
    return call
end

--- @param entity integer
--- @param relative boolean
--- @return number, number, number
natives.entity_getEntitySpeedVector = function(entity, relative)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(relative) == 'boolean', 'Argument relative must be of type boolean.')

    local call = natives.invoke(0xF2DB09816A419DC5, 'vector3', entity, relative)
    return call.x, call.y, call.z
end

--- @param entity integer
--- @return number
natives.entity_getEntityUprightValue = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x56398BE65160C3BE, 'float', entity)
    return call
end

--- @param entity integer
--- @param p1 integer
--- @return number, number, number
natives.entity_getEntityVelocity = function(entity, p1)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x4805D2B1D8CF94A9, 'vector3', entity, p1)
    return call.x, call.y, call.z
end

-- Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
--- @param entity integer
--- @return number
natives.entity_getObjectIndexFromEntityIndex = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x280BBE5601EAA983, 'integer', entity)
    return call
end

-- Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
--- @param entity integer
--- @return number
natives.entity_getPedIndexFromEntityIndex = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x0F16D042BD640EA3, 'int', entity)
    return call
end

-- Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
--- @param entity integer
--- @return number
natives.entity_getVehicleIndexFromEntityIndex = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xDF1E5AAC561AFC59, 'int', entity)
    return call
end

-- Returns the coordinates of an entity-bone.
-- https:--github.com/femga/rdr3_discoveries/tree/master/boneNames
--- @param entity integer
--- @param boneindex integer
--- @return number, number, number
natives.entity_getWorldPositionOfEntityBone = function(entity, boneindex)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(boneindex) == 'integer', 'Argument boneindex must be of type integer.')

    local call = natives.invoke(0x82CFA50E34681CA5, 'vector3', entity, boneindex)
    return call.x, call.y, call.z
end

-- Attaches scenario to bone with an offset
-- _GET_I* - _GET_M*
--- @param entity integer
--- @param boneindex integer
--- @return number, number, number
natives.entity_n0X5E214112806591Ea = function(entity, boneindex)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(boneindex) == 'integer', 'Argument boneindex must be of type integer.')

    local call = natives.invoke(0x5E214112806591EA, 'vector3', entity, boneindex)
    return call.x, call.y, call.z
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @return number, number, number
natives.entity_n0X3Ab3A77672F6473F = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x3AB3A77672F6473F, 'vector3', p0, p1, p2, p3)
    return call.x, call.y, call.z
end

--- @param entity integer
--- @param playerpedtoignore integer
--- @param flags integer
--- @return number
natives.entity_getNearestPlayerToEntity = function(entity, playerpedtoignore, flags)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(playerpedtoignore) == 'integer', 'Argument playerpedtoignore must be of type integer.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')

    local call = natives.invoke(0x990E294FC387FB88, 'int', entity, playerpedtoignore, flags)
    return call
end

--- @param entity integer
--- @param team integer
--- @param playerpedtoignore integer
--- @param flags integer
--- @return number
natives.entity_getNearestPlayerToEntityOnTeam = function(entity, team, playerpedtoignore, flags)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(team) == 'integer', 'Argument team must be of type integer.')
    assert(type(playerpedtoignore) == 'integer', 'Argument playerpedtoignore must be of type integer.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')

    local call = natives.invoke(0xB2C30C3B4AFF718C, 'int', entity, team, playerpedtoignore, flags)
    return call
end

--- @param entity integer
--- @return number
natives.entity_getNearestParticipantToEntity = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x6888A43C35A5F630, 'int', entity)
    return call
end

--- @param entity integer
--- @param p1 boolean
--- @return boolean
natives.entity_placeEntityOnGroundProperly = function(entity, p1)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x9587913B9E772D29, 'bool', entity, p1)
    return call
end

-- Returns entityType: https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eEntityType
--- @param entity integer
--- @return number
natives.entity_getEntityType = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x97F696ACA466B4E0, 'int', entity)
    return call
end

--- @param entity integer
--- @return number
natives.entity_getEntityPopulationType = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xADE28862B6D7B85B, 'int', entity)
    return call
end

--- @param handle integer
--- @return boolean
natives.entity_isAnEntity = function(handle)
    assert(type(handle) == 'integer', 'Argument handle must be of type integer.')

    local call = natives.invoke(0x27CFF3E5A286D3DF, 'bool', handle)
    return call
end

--- @param entity integer
--- @return boolean
natives.entity_isEntityAPed = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xCF8176912DDA4EA5, 'bool', entity)
    return call
end

--- @param entity integer
--- @return boolean
natives.entity_isEntityAMissionEntity = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x138190F64DB4BBD1, 'bool', entity)
    return call
end

--- @param entity integer
--- @return boolean
natives.entity_isEntityAVehicle = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xC3D96AF45FCCEC4C, 'bool', entity)
    return call
end

--- @param entity integer
--- @return boolean
natives.entity_isEntityAnObject = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x0A27A546A375FDEF, 'bool', entity)
    return call
end

-- Checks if entity is within x/y/zSize distance of x/y/z. 
-- 
-- Last three are unknown ints, almost always p7 = 0, p8 = 1, p9 = 0
--- @param entity integer
--- @param xpos number
--- @param ypos number
--- @param zpos number
--- @param xsize number
--- @param ysize number
--- @param zsize number
--- @param p7 boolean
--- @param p8 boolean
--- @param p9 integer
--- @return boolean
natives.entity_isEntityAtCoord = function(entity, xpos, ypos, zpos, xsize, ysize, zsize, p7, p8, p9)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(xpos) == 'number', 'Argument xpos must be of type number.')
    assert(type(ypos) == 'number', 'Argument ypos must be of type number.')
    assert(type(zpos) == 'number', 'Argument zpos must be of type number.')
    assert(type(xsize) == 'number', 'Argument xsize must be of type number.')
    assert(type(ysize) == 'number', 'Argument ysize must be of type number.')
    assert(type(zsize) == 'number', 'Argument zsize must be of type number.')
    assert(type(p7) == 'boolean', 'Argument p7 must be of type boolean.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')
    assert(type(p9) == 'integer', 'Argument p9 must be of type integer.')

    local call = natives.invoke(0x5E58342602E94718, 'bool', entity, xpos, ypos, zpos, xsize, ysize, zsize, p7, p8, p9)
    return call
end

-- Checks if entity1 is within the box defined by x/y/zSize of entity2.
-- 
-- Last three parameters are almost always p5 = 0, p6 = 1, p7 = 0
--- @param entity1 integer
--- @param entity2 integer
--- @param xsize number
--- @param ysize number
--- @param zsize number
--- @param p5 boolean
--- @param p6 boolean
--- @param p7 integer
--- @return boolean
natives.entity_isEntityAtEntity = function(entity1, entity2, xsize, ysize, zsize, p5, p6, p7)
    assert(type(entity1) == 'integer', 'Argument entity1 must be of type integer.')
    assert(type(entity2) == 'integer', 'Argument entity2 must be of type integer.')
    assert(type(xsize) == 'number', 'Argument xsize must be of type number.')
    assert(type(ysize) == 'number', 'Argument ysize must be of type number.')
    assert(type(zsize) == 'number', 'Argument zsize must be of type number.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')
    assert(type(p7) == 'integer', 'Argument p7 must be of type integer.')

    local call = natives.invoke(0xC057F02B837A27F6, 'bool', entity1, entity2, xsize, ysize, zsize, p5, p6, p7)
    return call
end

--- @param entity integer
--- @return boolean
natives.entity_isEntityAttached = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xEE6AD63ABF59C0B7, 'bool', entity)
    return call
end

--- @param entity integer
--- @return boolean
natives.entity_isEntityAttachedToAnyObject = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x306C1F6178F01AB3, 'bool', entity)
    return call
end

--- @param entity integer
--- @return boolean
natives.entity_isEntityAttachedToAnyPed = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xC841153DED2CA89A, 'bool', entity)
    return call
end

--- @param entity integer
--- @return boolean
natives.entity_isEntityAttachedToAnyVehicle = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x12DF6E0D2E736749, 'bool', entity)
    return call
end

--- @param from integer
--- @param to integer
--- @return boolean
natives.entity_isEntityAttachedToEntity = function(from, to)
    assert(type(from) == 'integer', 'Argument from must be of type integer.')
    assert(type(to) == 'integer', 'Argument to must be of type integer.')

    local call = natives.invoke(0x154A3C529497053E, 'bool', from, to)
    return call
end

--- @param entity integer
--- @return boolean
natives.entity_isEntityOwnedByPersistenceSystem = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xA7E51B53309EAC97, 'bool', entity)
    return call
end

--- @param entity integer
--- @return boolean
natives.entity_isEntityDead = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x7D5B1F88E7504BBA, 'bool', entity)
    return call
end

--- @param entity integer
--- @param p1 userdata
--- @return boolean
natives.entity_isEntityInAir = function(entity, p1)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x886E37EC497200B6, 'bool', entity, p1)
    return call
end

-- Creates a spherical cone at origin that extends to surface with the angle specified. Then returns true if the entity is inside the spherical cone
-- 
-- Angle is measured in degrees.
--- @param entity integer
--- @param originx number
--- @param originy number
--- @param originz number
--- @param edgex number
--- @param edgey number
--- @param edgez number
--- @param angle number
--- @param p8 boolean
--- @param p9 boolean
--- @param p10 userdata
--- @return boolean
natives.entity_isEntityInAngledArea = function(entity, originx, originy, originz, edgex, edgey, edgez, angle, p8, p9, p10)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(originx) == 'number', 'Argument originx must be of type number.')
    assert(type(originy) == 'number', 'Argument originy must be of type number.')
    assert(type(originz) == 'number', 'Argument originz must be of type number.')
    assert(type(edgex) == 'number', 'Argument edgex must be of type number.')
    assert(type(edgey) == 'number', 'Argument edgey must be of type number.')
    assert(type(edgez) == 'number', 'Argument edgez must be of type number.')
    assert(type(angle) == 'number', 'Argument angle must be of type number.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')
    assert(type(p9) == 'boolean', 'Argument p9 must be of type boolean.')
    assert(type(p10) == 'userdata', 'Argument p10 must be of type userdata.')

    local call = natives.invoke(0xD3151E53134595E5, 'bool', entity, originx, originy, originz, edgex, edgey, edgez, angle, p8, p9, p10)
    return call
end

--- @param entity integer
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param p7 boolean
--- @param p8 boolean
--- @param p9 userdata
--- @return boolean
natives.entity_isEntityInArea = function(entity, x1, y1, z1, x2, y2, z2, p7, p8, p9)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(x1) == 'number', 'Argument x1 must be of type number.')
    assert(type(y1) == 'number', 'Argument y1 must be of type number.')
    assert(type(z1) == 'number', 'Argument z1 must be of type number.')
    assert(type(x2) == 'number', 'Argument x2 must be of type number.')
    assert(type(y2) == 'number', 'Argument y2 must be of type number.')
    assert(type(z2) == 'number', 'Argument z2 must be of type number.')
    assert(type(p7) == 'boolean', 'Argument p7 must be of type boolean.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')

    local call = natives.invoke(0x0C2634C40A16193E, 'bool', entity, x1, y1, z1, x2, y2, z2, p7, p8, p9)
    return call
end

--- @param entity integer
--- @param volume integer
--- @param p2 boolean
--- @param p3 integer
--- @return boolean
natives.entity_isEntityInVolume = function(entity, volume, p2, p3)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')

    local call = natives.invoke(0x5A5526BC09C06623, 'bool', entity, volume, p2, p3)
    return call
end

--- @param entity integer
--- @return boolean
natives.entity_isEntityInWater = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xDDE5C125AC446723, 'bool', entity)
    return call
end

--- @param entity integer
--- @param p1 boolean
--- @return boolean
natives.entity_isEntityUnderwater = function(entity, p1)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xD4E5C1E93C466127, 'bool', entity, p1)
    return call
end

-- Get how much of the entity is submerged.  1.0f is whole entity.
--- @param entity integer
--- @return number
natives.entity_getEntitySubmergedLevel = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x4A77C3F73FD9E831, 'float', entity)
    return call
end

--- @param entity integer
--- @param toggle boolean
natives.entity_setEntityRequiresMoreExpensiveRiverCheck = function(entity, toggle)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x850C940EE3E7B8B5, 'void', entity, toggle)
end

--- @param p0 userdata
--- @param p1 userdata
natives.entity_n0X7A49D40De437Bc8D = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x7A49D40DE437BC8D, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.entity_n0X978Aa2323Ed32209 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x978AA2323ED32209, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.entity_n0X002Aac783Ed323Ed = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x002AAC783ED323ED, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.entity_n0X007Aac783Ed323Ed = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x007AAC783ED323ED, 'void', p0, p1, p2)
end

--- @param entity integer
--- @return boolean
natives.entity_isEntityOnScreen = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x613C15D5D8DB781F, 'bool', entity)
    return call
end

--- @param entity integer
--- @param animdict string
--- @param animname string
--- @param animtype integer
--- @return boolean
natives.entity_isEntityPlayingAnim = function(entity, animdict, animname, animtype)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(animdict) == 'string', 'Argument animdict must be of type string.')
    assert(type(animname) == 'string', 'Argument animname must be of type string.')
    assert(type(animtype) == 'integer', 'Argument animtype must be of type integer.')

    local call = natives.invoke(0xDEE49D5CA6C49148, 'bool', entity, animdict, animname, animtype)
    return call
end

-- Params: p1 (probably animType) = 1, 0
--- @param entity integer
--- @param p1 integer
--- @return boolean
natives.entity_isEntityPlayingAnyAnim = function(entity, p1)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x0B7CB1300CBFE19C, 'bool', entity, p1)
    return call
end

--- @param entity integer
--- @return boolean
natives.entity_isEntityStatic = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x86468ADFA0F6B861, 'bool', entity)
    return call
end

--- @param entity integer
--- @param targetentity integer
--- @return boolean
natives.entity_isEntityTouchingEntity = function(entity, targetentity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(targetentity) == 'integer', 'Argument targetentity must be of type integer.')

    local call = natives.invoke(0x9A2304A64C3C8423, 'bool', entity, targetentity)
    return call
end

--- @param entity integer
--- @param modelhash integer
--- @return boolean
natives.entity_isEntityTouchingModel = function(entity, modelhash)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(modelhash) == 'integer', 'Argument modelhash must be of type integer.')

    local call = natives.invoke(0x2AE3EBC8DEB9768B, 'bool', entity, modelhash)
    return call
end

--- @param entity integer
--- @param angle number
--- @return boolean
natives.entity_isEntityUpright = function(entity, angle)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(angle) == 'number', 'Argument angle must be of type number.')

    local call = natives.invoke(0xF6F6AFD8D4FB2658, 'bool', entity, angle)
    return call
end

--- @param entity integer
--- @return boolean
natives.entity_isEntityUpsidedown = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x109DE3DA41AAD94A, 'bool', entity)
    return call
end

--- @param entity integer
--- @return boolean
natives.entity_isEntityVisible = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xFFC96ECB7FA404CA, 'bool', entity)
    return call
end

-- SET_ENTITY_LO*
--- @param entity integer
--- @param toggle boolean
natives.entity_n0Xff9965C47Fa404Da = function(entity, toggle)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xFF9965C47FA404DA, 'void', entity, toggle)
end

--- @param entity integer
--- @return boolean
natives.entity_isEntityVisibleToScript = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xF213C724E77F321A, 'bool', entity)
    return call
end

--- @param p0 userdata
natives.entity_n0X3F08C6163A4Ab1D6 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x3F08C6163A4AB1D6, 'void', p0)
end

--- @param p0 userdata
natives.entity_n0X0Db41D59E0F1502B = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x0DB41D59E0F1502B, 'void', p0)
end

--- @param entity integer
--- @return boolean
natives.entity_isTrackedEntityVisible = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xC8CCDB712FBCBA92, 'bool', entity)
    return call
end

--- @param entity integer
--- @return boolean
natives.entity_isEntityOccluded = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x140188E884645624, 'bool', entity)
    return call
end

--- @param entitymodelhash integer
--- @param x number
--- @param y number
--- @param z number
--- @param p4 boolean
--- @return boolean
natives.entity_wouldEntityBeOccluded = function(entitymodelhash, x, y, z, p4)
    assert(type(entitymodelhash) == 'integer', 'Argument entitymodelhash must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')

    local call = natives.invoke(0x3546FAB293FF2981, 'bool', entitymodelhash, x, y, z, p4)
    return call
end

--- @param entity integer
--- @return boolean
natives.entity_isEntityWaitingForWorldCollision = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x5E1CC2E8DC3111DD, 'bool', entity)
    return call
end

--- @param entity integer
--- @return boolean
natives.entity_isEntityOnTrainTrack = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x857ACB0AB4BD0D55, 'bool', entity)
    return call
end

--- @param entity integer
--- @param p1 integer
natives.entity_n0Xcdb682Bb47C02F0A = function(entity, p1)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xCDB682BB47C02F0A, 'void', entity, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.entity_n0Xe19035Eb65Ab2932 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xE19035EB65AB2932, 'void', p0, p1)
end

-- Sets the loot table an entity will carry. Returns true if loot table has been successfully set. Returns false if entity is not a ped or object.
-- https:--github.com/femga/rdr3_discoveries/blob/master/AI/EVENTS/loot_rewards.lua
--- @param entity integer
--- @param loottable integer
--- @return boolean
natives.entity_scriptOverrideEntityLootTablePermanent = function(entity, loottable)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(loottable) == 'integer', 'Argument loottable must be of type integer.')

    local call = natives.invoke(0x8C03CD6B5E0E85E8, 'bool', entity, loottable)
    return call
end

-- Returns false if entity is not a ped or object.
--- @param entity integer
--- @param loottable integer
--- @return boolean
natives.entity_getScriptOverrideEntityLootTablePermanent = function(entity, loottable)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(loottable) == 'integer', 'Argument loottable must be of type integer.')

    local call = natives.invoke(0x1E804EA9B12030A4, 'bool', entity, loottable)
    return call
end

--- @param mount integer
--- @param argstruct userdata
--- @param visiblelootslotrequesttype integer
--- @param flag integer
--- @param p4 integer
--- @param p5 boolean
--- @return boolean
natives.entity_requestEntityLootList = function(mount, argstruct, visiblelootslotrequesttype, flag, p4, p5)
    assert(type(mount) == 'integer', 'Argument mount must be of type integer.')
    assert(type(argstruct) == 'userdata', 'Argument argstruct must be of type userdata.')
    assert(type(visiblelootslotrequesttype) == 'integer', 'Argument visiblelootslotrequesttype must be of type integer.')
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')

    local call = natives.invoke(0xA88E215CEB0435C0, 'bool', mount, argstruct, visiblelootslotrequesttype, flag, p4, p5)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.entity_n0Xe31Fc20319874Cb3 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xE31FC20319874CB3, 'any', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.entity_n0X582F73Acfe969571 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x582F73ACFE969571, 'any', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @return any
natives.entity_n0Xba2A089E60Ed1163 = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0xBA2A089E60ED1163, 'any', p0, p1, p2, p3, p4)
    return call
end

-- enum eCarriableState
-- {
-- 	CARRIABLE_STATE_NONE,
-- 	CARRIABLE_STATE_TRANSITIONING_TO_HOGTIED,
-- 	CARRIABLE_STATE_CARRIABLE_INTRO,
-- 	CARRIABLE_STATE_CARRIABLE,
-- 	CARRIABLE_STATE_BEING_PICKED_UP_FROM_GROUND,
-- 	CARRIABLE_STATE_CARRIED_BY_HUMAN,
-- 	CARRIABLE_STATE_BEING_PLACED_ON_GROUND,
-- 	CARRIABLE_STATE_CARRIED_BY_MOUNT,
-- 	CARRIABLE_STATE_BEING_PLACED_ON_MOUNT,
-- 	CARRIABLE_STATE_BEING_PICKED_UP_FROM_MOUNT,
-- 	CARRIABLE_STATE_BEING_CUT_FREE,
-- 	CARRIABLE_STATE_BEING_PLACED_ON_GROUND_ESCAPE,
-- 	CARRIABLE_STATE_BEING_PLACED_IN_VEHICLE
-- };
--- @param entity integer
--- @return number
natives.entity_getCarriableEntityState = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x61914209C36EFDDB, 'int', entity)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @return any
natives.entity_n0Xd46Bf94C4C66Fab0 = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xD46BF94C4C66FAB0, 'any', p0, p1, p2, p3)
    return call
end

-- Valid indices: 0 - 3
-- Index 1 always returns a `hogtied` config, doesn't matter the entity.
-- It's for humans only and the ped must be resurrected first if it's dead.
--- @param entity integer
--- @param index integer
--- @return number
natives.entity_getOptimalCarryConfig = function(entity, index)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0x34F008A7E48C496B, 'integer', entity, index)
    return call
end

--- @param p0 userdata
--- @return any
natives.entity_n0Xd21C7418C590Bb40 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xD21C7418C590BB40, 'any', p0)
    return call
end

-- Returns zero if the entity is not a carriable
--- @param entity integer
--- @return number
natives.entity_getEntityCarryConfig = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x0FD25587BB306C86, 'integer', entity)
    return call
end

--- @param model integer
--- @return boolean
natives.entity_isCarriableModel = function(model)
    assert(type(model) == 'integer', 'Argument model must be of type integer.')

    local call = natives.invoke(0x5AFFA9DDC87846F8, 'bool', model)
    return call
end

-- Returns a hash of an entity's name. (Alternative Name: _GET_ENTITY_PROMPT_NAME_HASH)
--- @param entity integer
--- @return number
natives.entity_getCarriableFromEntity = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x31FEF6A20F00B963, 'integer', entity)
    return call
end

-- Changes type and quality of skins
-- type hashes: https:--pastebin.com/C1WvQjCy
--- @param entity integer
--- @param type integer
natives.entity_setEntityCarcassType = function(entity, type)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(type) == 'integer', 'Argument type must be of type integer.')

    local call = natives.invoke(0x399657ED871B3A6C, 'void', entity, type)
end

--- @param p0 userdata
--- @return any
natives.entity_n0X2A77Ef9Bec8518F4 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x2A77EF9BEC8518F4, 'any', p0)
    return call
end

--- @param entity integer
natives.entity_deleteCarriable = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x0D0DB2B6AF19A987, 'void', entity)
end

--- @param entity integer
--- @return boolean
natives.entity_isEntityFullyLooted = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x8DE41E9902E85756, 'bool', entity)
    return call
end

--- @param entity integer
--- @param looted boolean
natives.entity_setEntityFullyLooted = function(entity, looted)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(looted) == 'boolean', 'Argument looted must be of type boolean.')

    local call = natives.invoke(0x6BCF5F3D8FFE988D, 'void', entity, looted)
end

--- @param ped integer
--- @return number
natives.entity_n0Xef2D9Ed7Ce684F08 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xEF2D9ED7CE684F08, 'int', ped)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @return any
natives.entity_n0X0Ccefc6C2C95Da2A = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x0CCEFC6C2C95DA2A, 'any', p0, p1, p2, p3)
    return call
end

-- Used when checking if ped is in water
--- @param p0 integer
--- @param entity integer
--- @param p2 integer
--- @param ped integer
--- @param p4 userdata
--- @param p5 integer
--- @return boolean
natives.entity_n0X383F64263F946E45 = function(p0, entity, p2, ped, p4, p5)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'integer', 'Argument p5 must be of type integer.')

    local call = natives.invoke(0x383F64263F946E45, 'bool', p0, entity, p2, ped, p4, p5)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @return any
natives.entity_n0X8E10Df0Ffa63Fb65 = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x8E10DF0FFA63FB65, 'any', p0, p1, p2, p3, p4)
    return call
end

-- flagId: see _SET_ENTITY_CARRYING_FLAG
--- @param entity integer
--- @param flagid integer
--- @return boolean
natives.entity_getEntityCarryingFlag = function(entity, flagid)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(flagid) == 'integer', 'Argument flagid must be of type integer.')

    local call = natives.invoke(0x808077647856DE62, 'bool', entity, flagid)
    return call
end

-- flagId: https:--github.com/femga/rdr3_discoveries/tree/master/AI/CARRYING_FLAGS
-- https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/CCarryingFlags__Flags
-- 
-- enum eCarryingFlag
-- {
-- 	CARRYING_FLAG_CAN_BE_CUT_FREE = 1,
-- 	CARRYING_FLAG_CAN_BE_CARRIED_ON_FOOT = 2,
-- 	CARRYING_FLAG_CAN_BE_DROPPED = 4,
-- 	CARRYING_FLAG_CAN_BE_CARRIED_WHEN_DEAD = 7,
-- 	CARRYING_FLAG_CAN_CARRY_ANYTHING = 9,
-- 	CARRYING_FLAG_DISABLE_PROMPT_LOS_CHECKS = 19,
-- 	CARRYING_FLAG_FORCE_ALLOW_WARP_TO_SAFE_GROUND_LOCATION = 23,
-- 	CARRYING_FLAG_PICKUPS_IGNORE_HEIGHT_RESTRICTIONS = 26,
-- 	CARRYING_FLAG_CLEAN_UP_WHEN_NOT_CARRIED = 27,
-- 	CARRYING_FLAG_BLOCK_KNOCK_OFF_PED_VARIATIONS_FROM_CARRIABLE_INTERACTIONS = 29,
-- 	CARRYING_FLAG_HIT_WHEN_CARRIABLE = 31,
-- 	CARRYING_FLAG_DISABLE_CARRIABLE_INTERACTIONS_ON_THIS_MOUNT = 34,
-- 	CARRYING_FLAG_FORCE_HIDE_PROMPT_GROUP = 37,
-- };
--- @param entity integer
--- @param flagid integer
--- @param value boolean
natives.entity_setEntityCarryingFlag = function(entity, flagid, value)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(flagid) == 'integer', 'Argument flagid must be of type integer.')
    assert(type(value) == 'boolean', 'Argument value must be of type boolean.')

    local call = natives.invoke(0x18FF3110CF47115D, 'void', entity, flagid, value)
end

-- Returns BOOL in ida
--- @param ped integer
--- @param p1 integer
--- @param p2 boolean
natives.entity_n0Xc3Abcfbc7D74Afa5 = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xC3ABCFBC7D74AFA5, 'void', ped, p1, p2)
end

-- Called if entity is in water and submerged level is larger than 1f. If CARRYING_FLAG_FORCE_ALLOW_WARP_TO_SAFE_GROUND_LOCATION is true, it gets disabled as well.
--- @param entity integer
natives.entity_n0X371D179701D9C082 = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x371D179701D9C082, 'void', entity)
end

--- @param entity integer
--- @param p1 boolean
natives.entity_n0Xa48E4801Debdf7E4 = function(entity, p1)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xA48E4801DEBDF7E4, 'void', entity, p1)
end

--- @param entity integer
--- @return boolean
natives.entity_getIsCarriablePelt = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x255B6DB4E3AD3C3E, 'bool', entity)
    return call
end

--- @param p0 userdata
--- @return any
natives.entity_n0Xf59Fde7B4D31A630 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xF59FDE7B4D31A630, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.entity_n0X120376C23F019C6C = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x120376C23F019C6C, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @return any
natives.entity_n0X5744562E973E33Cd = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x5744562E973E33CD, 'any', p0, p1, p2, p3, p4)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.entity_n0Xdd03Fc2089Ad093C = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xDD03FC2089AD093C, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
--- @return any
natives.entity_n0Xb16C780C51E51E2B = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xB16C780C51E51E2B, 'any', p0)
    return call
end

--- @param entity integer
--- @param p1 userdata
natives.entity_n0Xef259Aa1E097E0Ad = function(entity, p1)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xEF259AA1E097E0AD, 'void', entity, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
natives.entity_n0Xbd94Cecfb2D65119 = function(p0, p1, p2, p3, p4, p5)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0xBD94CECFB2D65119, 'void', p0, p1, p2, p3, p4, p5)
end

--- @param entity integer
--- @param radius number
natives.entity_setEntityCustomPickupRadius = function(entity, radius)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')

    local call = natives.invoke(0x482D17E45665DA44, 'void', entity, radius)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
natives.entity_n0Xe75Eea8Db59A9F39 = function(p0, p1, p2, p3, p4, p5)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0xE75EEA8DB59A9F39, 'void', p0, p1, p2, p3, p4, p5)
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.entity_n0X188736456D1Dede6 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x188736456D1DEDE6, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.entity_n0Xc6A1A3D63F122De7 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xC6A1A3D63F122DE7, 'void', p0, p1)
end

-- p6/relative - makes the xyz force not relative to world coords, but to something else
-- p7/highForce - setting false will make the force really low
--- @param entity integer
--- @param forcetype integer
--- @param x number
--- @param y number
--- @param z number
--- @param component integer
--- @param isdirectionrel boolean
--- @param isforcerel boolean
--- @param p8 boolean
natives.entity_applyForceToEntityCenterOfMass = function(entity, forcetype, x, y, z, component, isdirectionrel, isforcerel, p8)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(forcetype) == 'integer', 'Argument forcetype must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(component) == 'integer', 'Argument component must be of type integer.')
    assert(type(isdirectionrel) == 'boolean', 'Argument isdirectionrel must be of type boolean.')
    assert(type(isforcerel) == 'boolean', 'Argument isforcerel must be of type boolean.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')

    local call = natives.invoke(0x31DA7CEC5334DB37, 'void', entity, forcetype, x, y, z, component, isdirectionrel, isforcerel, p8)
end

--- @param entity integer
--- @param forceflags integer
--- @param x number
--- @param y number
--- @param z number
--- @param offx number
--- @param offy number
--- @param offz number
--- @param boneindex integer
--- @param isdirectionrel boolean
--- @param ignoreupvec boolean
--- @param isforcerel boolean
--- @param p12 boolean
--- @param p13 boolean
natives.entity_applyForceToEntity = function(entity, forceflags, x, y, z, offx, offy, offz, boneindex, isdirectionrel, ignoreupvec, isforcerel, p12, p13)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(forceflags) == 'integer', 'Argument forceflags must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(offx) == 'number', 'Argument offx must be of type number.')
    assert(type(offy) == 'number', 'Argument offy must be of type number.')
    assert(type(offz) == 'number', 'Argument offz must be of type number.')
    assert(type(boneindex) == 'integer', 'Argument boneindex must be of type integer.')
    assert(type(isdirectionrel) == 'boolean', 'Argument isdirectionrel must be of type boolean.')
    assert(type(ignoreupvec) == 'boolean', 'Argument ignoreupvec must be of type boolean.')
    assert(type(isforcerel) == 'boolean', 'Argument isforcerel must be of type boolean.')
    assert(type(p12) == 'boolean', 'Argument p12 must be of type boolean.')
    assert(type(p13) == 'boolean', 'Argument p13 must be of type boolean.')

    local call = natives.invoke(0xF15E8F5D333F09C4, 'void', entity, forceflags, x, y, z, offx, offy, offz, boneindex, isdirectionrel, ignoreupvec, isforcerel, p12, p13)
end

-- Attaches entity1 to bone (boneIndex) of entity2.
-- 
-- boneIndex - this is different to boneID, use GET_PED_BONE_INDEX to get the index from the ID. use the index for attaching to specific bones. entity1 will be attached to entity2's centre if bone index given doesn't correspond to bone indexes for that entity type.
-- https:--github.com/femga/rdr3_discoveries/tree/master/boneNames
-- 
-- useSoftPinning - if set to false attached entity will not detach when fixed
-- collision - controls collision between the two entities (FALSE disables collision).
-- isPed - pitch doesn't work when false and roll will only work on negative numbers (only peds)
-- vertexIndex - position of vertex
-- fixedRot - if false it ignores entity vector
--- @param entity1 integer
--- @param entity2 integer
--- @param boneindex integer
--- @param xpos number
--- @param ypos number
--- @param zpos number
--- @param xrot number
--- @param yrot number
--- @param zrot number
--- @param p9 boolean
--- @param usesoftpinning boolean
--- @param collision boolean
--- @param isped boolean
--- @param vertexindex integer
--- @param fixedrot boolean
--- @param p15 boolean
--- @param p16 boolean
natives.entity_attachEntityToEntity = function(entity1, entity2, boneindex, xpos, ypos, zpos, xrot, yrot, zrot, p9, usesoftpinning, collision, isped, vertexindex, fixedrot, p15, p16)
    assert(type(entity1) == 'integer', 'Argument entity1 must be of type integer.')
    assert(type(entity2) == 'integer', 'Argument entity2 must be of type integer.')
    assert(type(boneindex) == 'integer', 'Argument boneindex must be of type integer.')
    assert(type(xpos) == 'number', 'Argument xpos must be of type number.')
    assert(type(ypos) == 'number', 'Argument ypos must be of type number.')
    assert(type(zpos) == 'number', 'Argument zpos must be of type number.')
    assert(type(xrot) == 'number', 'Argument xrot must be of type number.')
    assert(type(yrot) == 'number', 'Argument yrot must be of type number.')
    assert(type(zrot) == 'number', 'Argument zrot must be of type number.')
    assert(type(p9) == 'boolean', 'Argument p9 must be of type boolean.')
    assert(type(usesoftpinning) == 'boolean', 'Argument usesoftpinning must be of type boolean.')
    assert(type(collision) == 'boolean', 'Argument collision must be of type boolean.')
    assert(type(isped) == 'boolean', 'Argument isped must be of type boolean.')
    assert(type(vertexindex) == 'integer', 'Argument vertexindex must be of type integer.')
    assert(type(fixedrot) == 'boolean', 'Argument fixedrot must be of type boolean.')
    assert(type(p15) == 'boolean', 'Argument p15 must be of type boolean.')
    assert(type(p16) == 'boolean', 'Argument p16 must be of type boolean.')

    local call = natives.invoke(0x6B9BBD38AB0796DF, 'void', entity1, entity2, boneindex, xpos, ypos, zpos, xrot, yrot, zrot, p9, usesoftpinning, collision, isped, vertexindex, fixedrot, p15, p16)
end

--- @param entity1 integer
--- @param entity2 integer
--- @param p2 integer
--- @param boneindex integer
--- @param offsetx number
--- @param offsety number
--- @param offsetz number
--- @param p7 number
--- @param p8 number
--- @param p9 number
--- @param p10 number
--- @param p11 number
--- @param p12 number
--- @param p13 number
--- @param p14 boolean
--- @param p15 boolean
--- @param p16 boolean
--- @param p17 boolean
--- @param p18 integer
--- @param p19 boolean
--- @param p20 number
--- @param p21 number
natives.entity_attachEntityToEntityPhysically = function(entity1, entity2, p2, boneindex, offsetx, offsety, offsetz, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21)
    assert(type(entity1) == 'integer', 'Argument entity1 must be of type integer.')
    assert(type(entity2) == 'integer', 'Argument entity2 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(boneindex) == 'integer', 'Argument boneindex must be of type integer.')
    assert(type(offsetx) == 'number', 'Argument offsetx must be of type number.')
    assert(type(offsety) == 'number', 'Argument offsety must be of type number.')
    assert(type(offsetz) == 'number', 'Argument offsetz must be of type number.')
    assert(type(p7) == 'number', 'Argument p7 must be of type number.')
    assert(type(p8) == 'number', 'Argument p8 must be of type number.')
    assert(type(p9) == 'number', 'Argument p9 must be of type number.')
    assert(type(p10) == 'number', 'Argument p10 must be of type number.')
    assert(type(p11) == 'number', 'Argument p11 must be of type number.')
    assert(type(p12) == 'number', 'Argument p12 must be of type number.')
    assert(type(p13) == 'number', 'Argument p13 must be of type number.')
    assert(type(p14) == 'boolean', 'Argument p14 must be of type boolean.')
    assert(type(p15) == 'boolean', 'Argument p15 must be of type boolean.')
    assert(type(p16) == 'boolean', 'Argument p16 must be of type boolean.')
    assert(type(p17) == 'boolean', 'Argument p17 must be of type boolean.')
    assert(type(p18) == 'integer', 'Argument p18 must be of type integer.')
    assert(type(p19) == 'boolean', 'Argument p19 must be of type boolean.')
    assert(type(p20) == 'number', 'Argument p20 must be of type number.')
    assert(type(p21) == 'number', 'Argument p21 must be of type number.')

    local call = natives.invoke(0xB629A43CA1643481, 'void', entity1, entity2, p2, boneindex, offsetx, offsety, offsetz, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
--- @param p9 userdata
--- @param p10 userdata
--- @param p11 userdata
--- @param p12 userdata
--- @param p13 userdata
--- @param p14 userdata
--- @param p15 userdata
natives.entity_n0X445D7D8Ea66E373E = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')
    assert(type(p10) == 'userdata', 'Argument p10 must be of type userdata.')
    assert(type(p11) == 'userdata', 'Argument p11 must be of type userdata.')
    assert(type(p12) == 'userdata', 'Argument p12 must be of type userdata.')
    assert(type(p13) == 'userdata', 'Argument p13 must be of type userdata.')
    assert(type(p14) == 'userdata', 'Argument p14 must be of type userdata.')
    assert(type(p15) == 'userdata', 'Argument p15 must be of type userdata.')

    local call = natives.invoke(0x445D7D8EA66E373E, 'void', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.entity_n0X16908E859C3Ab698 = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x16908E859C3AB698, 'void', p0, p1, p2, p3, p4)
end

--- @param entity integer
--- @param bonename string
--- @return number
natives.entity_getEntityBoneIndexByName = function(entity, bonename)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(bonename) == 'string', 'Argument bonename must be of type string.')

    local call = natives.invoke(0xBACA8FE9C76C124E, 'int', entity, bonename)
    return call
end

--- @param entity integer
natives.entity_clearEntityLastDamageEntity = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xBB19AC7D4DCEFD0F, 'void', entity)
end

-- Deletes the specified entity, then sets the handle pointed to by the pointer to NULL.
--- @param entity integer
natives.entity_deleteEntity = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x4CD38C78BD19A497, 'void', entity)
end

-- Must be called from a background script, otherwise it will do nothing.
--- @param entity integer
natives.entity_deleteEntity2 = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x5E94EA09E7207C16, 'void', entity)
end

--- @param entity integer
--- @param p1 boolean
--- @param collision boolean
natives.entity_detachEntity = function(entity, p1, collision)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(collision) == 'boolean', 'Argument collision must be of type boolean.')

    local call = natives.invoke(0x64CDE9D6BF8ECAD3, 'void', entity, p1, collision)
end

-- Getter for FREEZE_ENTITY_POSITION
--- @param entity integer
--- @return boolean
natives.entity_isEntityFrozen = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x083D497D57B7400F, 'bool', entity)
    return call
end

--- @param entity integer
--- @param toggle boolean
natives.entity_freezeEntityPosition = function(entity, toggle)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x7D9EFB7AD6B19754, 'void', entity, toggle)
end

-- Old name: _SET_ENTITY_CLEANUP_BY_ENGINE
--- @param entity integer
--- @param toggle boolean
natives.entity_setEntityShouldFreezeWaitingOnCollision = function(entity, toggle)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x740CB4F3F602C9F4, 'void', entity, toggle)
end

-- Makes the specified entity (ped, vehicle or object) persistent. Persistent entities will not automatically be removed by the engine.
--- @param entity integer
--- @param p1 boolean
--- @param p2 boolean
natives.entity_setEntityAsMissionEntity = function(entity, p1, p2)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xDC19C288082E586E, 'void', entity, p1, p2)
end

-- Marks the specified entity (ped, vehicle or object) as no longer needed.
-- Entities marked as no longer needed, will be deleted as the engine sees fit.
--- @param entity integer
natives.entity_setEntityAsNoLongerNeeded = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x4971D2F8162B9674, 'void', entity)
end

-- This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
--- @param ped integer
natives.entity_setPedAsNoLongerNeeded = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x2595DD4236549CE3, 'void', ped)
end

-- This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
--- @param vehicle integer
natives.entity_setVehicleAsNoLongerNeeded = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x629BFA74418D6239, 'void', vehicle)
end

-- This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
--- @param object integer
natives.entity_setObjectAsNoLongerNeeded = function(object)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')

    local call = natives.invoke(0x3AE22DEB5BA5A3E6, 'void', object)
end

natives.entity_n0X20Faee47427A4497 = function()

    local call = natives.invoke(0x20FAEE47427A4497, 'void')
end

-- Returns true if calling script owns specified entity
--- @param entity integer
--- @return boolean
natives.entity_doesThreadOwnThisEntity = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x88AD6CC10D8D35B2, 'bool', entity)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.entity_n0X56E0735D6273B227 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x56E0735D6273B227, 'void', p0, p1)
end

-- SET_ENTITY_A*
--- @param entity integer
--- @param p1 number
natives.entity_n0Xc0Edef16D90661Ee = function(entity, p1)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0xC0EDEF16D90661EE, 'void', entity, p1)
end

--- @param p0 userdata
natives.entity_n0X0Fd7D7C232876E72 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x0FD7D7C232876E72, 'void', p0)
end

natives.entity_n0X0939E773925C4719 = function()

    local call = natives.invoke(0x0939E773925C4719, 'void')
end

--- @param entity integer
--- @param toggle boolean
natives.entity_setEntityCanBeDamaged = function(entity, toggle)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x0D06D522B90E861F, 'void', entity, toggle)
end

--- @param entity integer
--- @return boolean
natives.entity_getEntityCanBeDamaged = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x75DF9E73F2F005FD, 'bool', entity)
    return call
end

--- @param entity integer
--- @param bcanbedamaged boolean
--- @param relgroup integer
natives.entity_setEntityCanBeDamagedByRelationshipGroup = function(entity, bcanbedamaged, relgroup)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(bcanbedamaged) == 'boolean', 'Argument bcanbedamaged must be of type boolean.')
    assert(type(relgroup) == 'integer', 'Argument relgroup must be of type integer.')

    local call = natives.invoke(0x0EF1AFB18649E015, 'void', entity, bcanbedamaged, relgroup)
end

--- @param p0 userdata
--- @param p1 userdata
natives.entity_n0Xff83Af534156B399 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xFF83AF534156B399, 'void', p0, p1)
end

-- Sets whether the entity can be targeted without being in line-of-sight.
--- @param entity integer
--- @param toggle boolean
natives.entity_setEntityCanBeTargetedWithoutLos = function(entity, toggle)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x6D09F32E284D0FB7, 'void', entity, toggle)
end

--- @param entity integer
--- @return boolean
natives.entity_getEntityCollisionDisabled = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xAA2FADD30F45A9DA, 'bool', entity)
    return call
end

--- @param entity integer
--- @param toggle boolean
--- @param keepphysics boolean
natives.entity_setEntityCollision = function(entity, toggle, keepphysics)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')
    assert(type(keepphysics) == 'boolean', 'Argument keepphysics must be of type boolean.')

    local call = natives.invoke(0xF66F820909453B8C, 'void', entity, toggle, keepphysics)
end

--- @param entity integer
--- @param toggle boolean
--- @param keepphysics boolean
natives.entity_setEntityCompletelyDisableCollision = function(entity, toggle, keepphysics)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')
    assert(type(keepphysics) == 'boolean', 'Argument keepphysics must be of type boolean.')

    local call = natives.invoke(0xE0580EC84813875A, 'void', entity, toggle, keepphysics)
end

--- @param entity integer
--- @param xpos number
--- @param ypos number
--- @param zpos number
--- @param xaxis boolean
--- @param yaxis boolean
--- @param zaxis boolean
--- @param cleararea boolean
natives.entity_setEntityCoords = function(entity, xpos, ypos, zpos, xaxis, yaxis, zaxis, cleararea)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(xpos) == 'number', 'Argument xpos must be of type number.')
    assert(type(ypos) == 'number', 'Argument ypos must be of type number.')
    assert(type(zpos) == 'number', 'Argument zpos must be of type number.')
    assert(type(xaxis) == 'boolean', 'Argument xaxis must be of type boolean.')
    assert(type(yaxis) == 'boolean', 'Argument yaxis must be of type boolean.')
    assert(type(zaxis) == 'boolean', 'Argument zaxis must be of type boolean.')
    assert(type(cleararea) == 'boolean', 'Argument cleararea must be of type boolean.')

    local call = natives.invoke(0x06843DA7060A026B, 'void', entity, xpos, ypos, zpos, xaxis, yaxis, zaxis, cleararea)
end

-- Axis - Invert Axis Flags
--- @param entity integer
--- @param xpos number
--- @param ypos number
--- @param zpos number
--- @param xaxis boolean
--- @param yaxis boolean
--- @param zaxis boolean
natives.entity_setEntityCoordsNoOffset = function(entity, xpos, ypos, zpos, xaxis, yaxis, zaxis)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(xpos) == 'number', 'Argument xpos must be of type number.')
    assert(type(ypos) == 'number', 'Argument ypos must be of type number.')
    assert(type(zpos) == 'number', 'Argument zpos must be of type number.')
    assert(type(xaxis) == 'boolean', 'Argument xaxis must be of type boolean.')
    assert(type(yaxis) == 'boolean', 'Argument yaxis must be of type boolean.')
    assert(type(zaxis) == 'boolean', 'Argument zaxis must be of type boolean.')

    local call = natives.invoke(0x239A3351AC1DA385, 'void', entity, xpos, ypos, zpos, xaxis, yaxis, zaxis)
end

--- @param entity integer
--- @param toggle boolean
natives.entity_setEntityDynamic = function(entity, toggle)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xFBFC4473F66CE344, 'void', entity, toggle)
end

--- @param entity integer
--- @param heading number
natives.entity_setEntityHeading = function(entity, heading)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(heading) == 'number', 'Argument heading must be of type number.')

    local call = natives.invoke(0xCF2B9C0645C4651B, 'void', entity, heading)
end

--- @param entity integer
--- @param xpos number
--- @param ypos number
--- @param zpos number
--- @param heading number
--- @param xaxis boolean
--- @param yaxis boolean
--- @param zaxis boolean
natives.entity_setEntityCoordsAndHeading = function(entity, xpos, ypos, zpos, heading, xaxis, yaxis, zaxis)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(xpos) == 'number', 'Argument xpos must be of type number.')
    assert(type(ypos) == 'number', 'Argument ypos must be of type number.')
    assert(type(zpos) == 'number', 'Argument zpos must be of type number.')
    assert(type(heading) == 'number', 'Argument heading must be of type number.')
    assert(type(xaxis) == 'boolean', 'Argument xaxis must be of type boolean.')
    assert(type(yaxis) == 'boolean', 'Argument yaxis must be of type boolean.')
    assert(type(zaxis) == 'boolean', 'Argument zaxis must be of type boolean.')

    local call = natives.invoke(0x203BEFFDBE12E96A, 'void', entity, xpos, ypos, zpos, heading, xaxis, yaxis, zaxis)
end

--- @param entity integer
--- @param xpos number
--- @param ypos number
--- @param zpos number
--- @param heading number
--- @param p5 boolean
--- @param p6 boolean
natives.entity_setEntityCoordsAndHeadingNoOffset = function(entity, xpos, ypos, zpos, heading, p5, p6)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(xpos) == 'number', 'Argument xpos must be of type number.')
    assert(type(ypos) == 'number', 'Argument ypos must be of type number.')
    assert(type(zpos) == 'number', 'Argument zpos must be of type number.')
    assert(type(heading) == 'number', 'Argument heading must be of type number.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')

    local call = natives.invoke(0x0918E3565C20F03C, 'void', entity, xpos, ypos, zpos, heading, p5, p6)
end

-- Sets the entity's health. healthAmount sets the health value to that, and sets the maximum health core value. Setting healthAmount to 0 will kill the entity. entityKilledBy parameter can also be 0
--- @param entity integer
--- @param healthamount integer
--- @param entitykilledby integer
natives.entity_setEntityHealth = function(entity, healthamount, entitykilledby)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(healthamount) == 'integer', 'Argument healthamount must be of type integer.')
    assert(type(entitykilledby) == 'integer', 'Argument entitykilledby must be of type integer.')

    local call = natives.invoke(0xAC2767ED8BDFAB15, 'void', entity, healthamount, entitykilledby)
end

-- Sets a ped or an object totally invincible. It doesn't take any kind of damage. Peds will not ragdoll on explosions.
--- @param entity integer
--- @param toggle boolean
natives.entity_setEntityInvincible = function(entity, toggle)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xA5C38736C426FCB8, 'void', entity, toggle)
end

-- SET_ENTITY_LO*
--- @param entity integer
--- @param p1 number
--- @param p2 number
--- @param p3 number
natives.entity_n0Xaf7F3099B9Feb535 = function(entity, p1, p2, p3)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')

    local call = natives.invoke(0xAF7F3099B9FEB535, 'void', entity, p1, p2, p3)
end

--- @param entity integer
--- @param p1 boolean
--- @param p2 number
natives.entity_setEntityIsTargetPriority = function(entity, p1, p2)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')

    local call = natives.invoke(0x0A5D170C44CB2189, 'void', entity, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.entity_n0Xb38A29Ccd5447783 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xB38A29CCD5447783, 'void', p0, p1, p2)
end

-- tier: https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eEntityThreatTier
--- @param entity integer
--- @param tier integer
--- @param p2 boolean
natives.entity_setEntityThreatTier = function(entity, tier, p2)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(tier) == 'integer', 'Argument tier must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x4B436BAC8CBE9B07, 'void', entity, tier, p2)
end

--- @param entity integer
--- @return number
natives.entity_getEntityThreatTier = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xE12F56CB25D9CE23, 'int', entity)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.entity_n0X2D40Bcbfe9305Dea = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x2D40BCBFE9305DEA, 'void', p0, p1)
end

--- @param entity integer
--- @param enabled boolean
natives.entity_setEntityLightsEnabled = function(entity, enabled)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(enabled) == 'boolean', 'Argument enabled must be of type boolean.')

    local call = natives.invoke(0xEBDC12861D079ABA, 'void', entity, enabled)
end

--- @param entity integer
--- @param toggle boolean
natives.entity_setEntityLoadCollisionFlag = function(entity, toggle)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x9B9EE31AED48072E, 'void', entity, toggle)
end

--- @param entity integer
--- @return boolean
natives.entity_hasCollisionLoadedAroundEntity = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xBEB1600952B9CF5C, 'bool', entity)
    return call
end

-- Old name: _HAS_COLLISION_LOADED_AT_COORDS
--- @param xpos number
--- @param ypos number
--- @param zpos number
--- @return boolean
natives.entity_hasCollisionLoadedAroundPosition = function(xpos, ypos, zpos)
    assert(type(xpos) == 'number', 'Argument xpos must be of type number.')
    assert(type(ypos) == 'number', 'Argument ypos must be of type number.')
    assert(type(zpos) == 'number', 'Argument zpos must be of type number.')

    local call = natives.invoke(0x6BFBDC46139C45AB, 'bool', xpos, ypos, zpos)
    return call
end

--- @param entity integer
--- @param toggle boolean
natives.entity_setEntityOnlyDamagedByPlayer = function(entity, toggle)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x473598683095D430, 'void', entity, toggle)
end

--- @param entity integer
--- @param p1 boolean
--- @param relationshipgroup integer
natives.entity_setEntityOnlyDamagedByRelationshipGroup = function(entity, p1, relationshipgroup)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(relationshipgroup) == 'integer', 'Argument relationshipgroup must be of type integer.')

    local call = natives.invoke(0x6C1F6AA2F0ADD104, 'void', entity, p1, relationshipgroup)
end

-- https:--github.com/femga/rdr3_discoveries/tree/master/AI/ENTITY_PROOFS
-- BOOL p2: handles an additional special proofs flag, so it simply indicates whether it should be enabled or disabled, not sure what exactly it proofs the entity from though
--- @param entity integer
--- @param proofsbitset integer
--- @param specialflag boolean
natives.entity_setEntityProofs = function(entity, proofsbitset, specialflag)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(proofsbitset) == 'integer', 'Argument proofsbitset must be of type integer.')
    assert(type(specialflag) == 'boolean', 'Argument specialflag must be of type boolean.')

    local call = natives.invoke(0xFAEE099C6F890BB8, 'void', entity, proofsbitset, specialflag)
end

-- Note: this native was removed in 1232 but added back in 1311
--- @param entity integer
--- @return number
natives.entity_getEntityProofs = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x6CF0DAD7FA1088EA, 'int', entity)
    return call
end

--- @param entity integer
--- @param x number
--- @param y number
--- @param z number
--- @param w number
natives.entity_setEntityQuaternion = function(entity, x, y, z, w)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(w) == 'number', 'Argument w must be of type number.')

    local call = natives.invoke(0x100E7007D13E3687, 'void', entity, x, y, z, w)
end

--- @param entity integer
--- @param pitch number
--- @param roll number
--- @param yaw number
--- @param rotationorder integer
--- @param p5 boolean
natives.entity_setEntityRotation = function(entity, pitch, roll, yaw, rotationorder, p5)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(pitch) == 'number', 'Argument pitch must be of type number.')
    assert(type(roll) == 'number', 'Argument roll must be of type number.')
    assert(type(yaw) == 'number', 'Argument yaw must be of type number.')
    assert(type(rotationorder) == 'integer', 'Argument rotationorder must be of type integer.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')

    local call = natives.invoke(0x9CC8314DFEDE441E, 'void', entity, pitch, roll, yaw, rotationorder, p5)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
natives.entity_n0Xd45Bb89B53Fc0Cfd = function(p0, p1, p2, p3, p4, p5, p6, p7)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')

    local call = natives.invoke(0xD45BB89B53FC0CFD, 'void', p0, p1, p2, p3, p4, p5, p6, p7)
end

--- @param entity integer
--- @param toggle boolean
natives.entity_setEntityVisible = function(entity, toggle)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x1794B4FCC84D812F, 'void', entity, toggle)
end

--- @param entity integer
--- @param p1 boolean
natives.entity_n0X80Fdeb3A9E9Aa578 = function(entity, p1)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x80FDEB3A9E9AA578, 'void', entity, p1)
end

--- @param entity integer
natives.entity_n0X9C6906Ef8Cb20C5F = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x9C6906EF8CB20C5F, 'void', entity)
end

-- Note that the third parameter(denoted as z) is "up and down" with positive numbers encouraging upwards movement.
--- @param entity integer
--- @param x number
--- @param y number
--- @param z number
natives.entity_setEntityVelocity = function(entity, x, y, z)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0x1C99BB7B6E96D16F, 'void', entity, x, y, z)
end

--- @param entity integer
--- @param toggle boolean
natives.entity_setEntityHasGravity = function(entity, toggle)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x0CEDB728A1083FA7, 'void', entity, toggle)
end

-- LOD distance can be 0 to 0xFFFF (higher values will result in 0xFFFF) as it is actually stored as a 16-bit value (aka uint16_t).
--- @param entity integer
--- @param value integer
natives.entity_setEntityLodDist = function(entity, value)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(value) == 'integer', 'Argument value must be of type integer.')

    local call = natives.invoke(0x5FB407F0A7C877BF, 'void', entity, value)
end

-- Returns the LOD distance of an entity.
--- @param entity integer
--- @return number
natives.entity_getEntityLodDist = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xDF240D0C2A948683, 'int', entity)
    return call
end

-- skin - everything alpha except skin
-- Set entity alpha level. Ranging from 0 to 255 but changes occur after every 20 percent (after every 51).
--- @param entity integer
--- @param alphalevel integer
--- @param skin boolean
natives.entity_setEntityAlpha = function(entity, alphalevel, skin)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(alphalevel) == 'integer', 'Argument alphalevel must be of type integer.')
    assert(type(skin) == 'boolean', 'Argument skin must be of type boolean.')

    local call = natives.invoke(0x0DF7692B1D9E7BA7, 'void', entity, alphalevel, skin)
end

--- @param entity integer
--- @return number
natives.entity_getEntityAlpha = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x1BB501624FAF2BEA, 'int', entity)
    return call
end

--- @param entity integer
natives.entity_resetEntityAlpha = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x744B9EF44779D9AB, 'void', entity)
end

--- @param entity integer
natives.entity_setEntityFadeIn = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xA91E6CF94404E8C9, 'void', entity)
end

--- @param entity integer
--- @param toggle boolean
natives.entity_setEntityAlwaysPrerender = function(entity, toggle)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xACAD101E1FB66689, 'void', entity, toggle)
end

--- @param entity integer
--- @param toggle boolean
natives.entity_setEntityRenderScorched = function(entity, toggle)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x85B8A7534E44BC23, 'void', entity, toggle)
end

-- Seems to return true if entity is burned / scorched
-- _GET_ENTITY_*
--- @param entity integer
--- @return any
natives.entity_n0X37B01666Bae8F7Ef = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x37B01666BAE8F7EF, 'any', entity)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.entity_n0Xa9E6D8F2Ddfc4Db9 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xA9E6D8F2DDFC4DB9, 'void', p0, p1)
end

-- Only works with objects!
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param originalmodel integer
--- @param newmodel integer
--- @param p6 boolean
natives.entity_createModelSwap = function(x, y, z, radius, originalmodel, newmodel, p6)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(originalmodel) == 'integer', 'Argument originalmodel must be of type integer.')
    assert(type(newmodel) == 'integer', 'Argument newmodel must be of type integer.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')

    local call = natives.invoke(0x10B2218320B6F5AC, 'void', x, y, z, radius, originalmodel, newmodel, p6)
end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param originalmodel integer
--- @param newmodel integer
--- @param p6 boolean
natives.entity_removeModelSwap = function(x, y, z, radius, originalmodel, newmodel, p6)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(originalmodel) == 'integer', 'Argument originalmodel must be of type integer.')
    assert(type(newmodel) == 'integer', 'Argument newmodel must be of type integer.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')

    local call = natives.invoke(0x824E1C26A14CB817, 'void', x, y, z, radius, originalmodel, newmodel, p6)
end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param model integer
--- @param p5 boolean
natives.entity_createModelHide = function(x, y, z, radius, model, p5)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(model) == 'integer', 'Argument model must be of type integer.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')

    local call = natives.invoke(0x069848B3FB3C4426, 'void', x, y, z, radius, model, p5)
end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param model integer
--- @param p5 boolean
natives.entity_createModelHideExcludingScriptObjects = function(x, y, z, radius, model, p5)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(model) == 'integer', 'Argument model must be of type integer.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')

    local call = natives.invoke(0xD136090A9AAAB17D, 'void', x, y, z, radius, model, p5)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
natives.entity_removeModelHide = function(p0, p1, p2, p3, p4, p5)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0x3F38A98576F6213A, 'void', p0, p1, p2, p3, p4, p5)
end

--- @param p0 userdata
--- @return any
natives.entity_n0Xd4636C2Edb0Dea8A = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xD4636C2EDB0DEA8A, 'any', p0)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @param p3 userdata
--- @param modelhash integer
--- @param p5 boolean
natives.entity_createForcedObject = function(x, y, z, p3, modelhash, p5)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(modelhash) == 'integer', 'Argument modelhash must be of type integer.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')

    local call = natives.invoke(0x0961A905AFBC34C7, 'void', x, y, z, p3, modelhash, p5)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.entity_removeForcedObject = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x553FA683F2BCD814, 'void', p0, p1, p2, p3, p4)
end

--- @param entity1 integer
--- @param entity2 integer
--- @param thisframeonly boolean
natives.entity_setEntityNoCollisionEntity = function(entity1, entity2, thisframeonly)
    assert(type(entity1) == 'integer', 'Argument entity1 must be of type integer.')
    assert(type(entity2) == 'integer', 'Argument entity2 must be of type integer.')
    assert(type(thisframeonly) == 'boolean', 'Argument thisframeonly must be of type boolean.')

    local call = natives.invoke(0xE037BF068223C38D, 'void', entity1, entity2, thisframeonly)
end

--- @param entity integer
--- @param toggle boolean
natives.entity_setEntityMotionBlur = function(entity, toggle)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x516C6ABD18322B63, 'void', entity, toggle)
end

--- @param entity integer
--- @param toggle boolean
natives.entity_setCanAutoVaultOnEntity = function(entity, toggle)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x80646744FA88F9D7, 'void', entity, toggle)
end

--- @param entity integer
--- @param toggle boolean
natives.entity_setCanClimbOnEntity = function(entity, toggle)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x24AED2A608F93C4C, 'void', entity, toggle)
end

-- Old name: _SET_ENTITY_DECALS_DISABLED
--- @param entity integer
--- @param toggle boolean
natives.entity_setEntityNoweapondecals = function(entity, toggle)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xC64E597783BE9A1D, 'void', entity, toggle)
end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param itemset integer
--- @param p5 integer
--- @return number
natives.entity_getEntitiesNearPoint = function(x, y, z, radius, itemset, p5)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(itemset) == 'integer', 'Argument itemset must be of type integer.')
    assert(type(p5) == 'integer', 'Argument p5 must be of type integer.')

    local call = natives.invoke(0x59B57C4B06531E1E, 'int', x, y, z, radius, itemset, p5)
    return call
end

--- @param volume integer
--- @param itemset integer
--- @param entitytype integer
--- @param p3 userdata
--- @param p4 integer
--- @param p5 string
--- @return number
natives.entity_getMatchingEntities = function(volume, itemset, entitytype, p3, p4, p5)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(itemset) == 'integer', 'Argument itemset must be of type integer.')
    assert(type(entitytype) == 'integer', 'Argument entitytype must be of type integer.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')
    assert(type(p5) == 'string', 'Argument p5 must be of type string.')

    local call = natives.invoke(0x84CCF9A12942C83D, 'int', volume, itemset, entitytype, p3, p4, p5)
    return call
end

--- @param volume integer
--- @param itemset integer
--- @param entitytype integer
--- @return number
natives.entity_getEntitiesInVolume = function(volume, itemset, entitytype)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(itemset) == 'integer', 'Argument itemset must be of type integer.')
    assert(type(entitytype) == 'integer', 'Argument entitytype must be of type integer.')

    local call = natives.invoke(0x886171A12F400B89, 'int', volume, itemset, entitytype)
    return call
end

-- Alternative Name: _GET_ENTITY_FROM_MAP_OBJECT; You can get existing objects and manipulate them using this native.
--- @param modelhash integer
--- @return number
natives.entity_searchBuildingPoolForEntityWithThisModel = function(modelhash)
    assert(type(modelhash) == 'integer', 'Argument modelhash must be of type integer.')

    local call = natives.invoke(0x66B2B83B94B22458, 'int', modelhash)
    return call
end

--- @param p0 userdata
--- @return any
natives.entity_n0Xc2E71D7E0A7B4C89 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xC2E71D7E0A7B4C89, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.entity_n0X6C31B06E91518269 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x6C31B06E91518269, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.entity_n0X119A5714578F4E05 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x119A5714578F4E05, 'void', p0, p1)
end

-- Params: p1 = 0 in R* Scripts (GET_DOOR_ENTITY_FROM_ID)
-- https:--github.com/femga/rdr3_discoveries/blob/master/doorHashes/doorhashes.lua
--- @param doorhash integer
--- @param p1 integer
--- @return number
natives.entity_getEntityByDoorhash = function(doorhash, p1)
    assert(type(doorhash) == 'integer', 'Argument doorhash must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xF7424890E4A094C0, 'int', doorhash, p1)
    return call
end

--- @param animdictionary string
--- @param animname string
--- @param p2 string
--- @param p3 userdata
--- @param p4 userdata
--- @return boolean
natives.entity_findAnimEventPhase = function(animdictionary, animname, p2, p3, p4)
    assert(type(animdictionary) == 'string', 'Argument animdictionary must be of type string.')
    assert(type(animname) == 'string', 'Argument animname must be of type string.')
    assert(type(p2) == 'string', 'Argument p2 must be of type string.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x42718CC559BD7776, 'bool', animdictionary, animname, p2, p3, p4)
    return call
end

--- @param entity integer
--- @param p1 boolean
natives.entity_forceEntityAiAndAnimationUpdate = function(entity, p1)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x4C9E96473D4F1A88, 'void', entity, p1)
end

--- @param entity integer
--- @param animdict string
--- @param animname string
--- @return number
natives.entity_getEntityAnimCurrentTime = function(entity, animdict, animname)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(animdict) == 'string', 'Argument animdict must be of type string.')
    assert(type(animname) == 'string', 'Argument animname must be of type string.')

    local call = natives.invoke(0x627520389E288A73, 'float', entity, animdict, animname)
    return call
end

-- Used in Script Function GENERIC_ITEM_HAS_ANIM_COMPLETED
-- _GET_ENTITY_*
--- @param entity integer
--- @param animdict string
--- @param animclip string
--- @return number
natives.entity_n0X8E46E18Aa828334F = function(entity, animdict, animclip)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(animdict) == 'string', 'Argument animdict must be of type string.')
    assert(type(animclip) == 'string', 'Argument animclip must be of type string.')

    local call = natives.invoke(0x8E46E18AA828334F, 'float', entity, animdict, animclip)
    return call
end

-- Hardcoded to return zero/false.
--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.entity_n0Xdf8E49Ea89A01Db1 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xDF8E49EA89A01DB1, 'any', p0, p1, p2)
    return call
end

--- @param entity integer
--- @param actionhash integer
--- @return boolean
natives.entity_hasAnimEventFired = function(entity, actionhash)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(actionhash) == 'integer', 'Argument actionhash must be of type integer.')

    local call = natives.invoke(0x5851CC48405F4A07, 'bool', entity, actionhash)
    return call
end

--- @param entity integer
--- @param animdict string
--- @param animname string
--- @param p3 integer
--- @return boolean
natives.entity_hasEntityAnimFinished = function(entity, animdict, animname, p3)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(animdict) == 'string', 'Argument animdict must be of type string.')
    assert(type(animname) == 'string', 'Argument animname must be of type string.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')

    local call = natives.invoke(0xAEB40615337EF1E3, 'bool', entity, animdict, animname, p3)
    return call
end

-- https:--github.com/femga/rdr3_discoveries/tree/master/animations
--- @param entity integer
--- @param animname string
--- @param animdict string
--- @param p3 number
--- @param loop boolean
--- @param stayinanim boolean
--- @param p6 boolean
--- @param delta number
--- @param bitset userdata
--- @return boolean
natives.entity_playEntityAnim = function(entity, animname, animdict, p3, loop, stayinanim, p6, delta, bitset)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(animname) == 'string', 'Argument animname must be of type string.')
    assert(type(animdict) == 'string', 'Argument animdict must be of type string.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(loop) == 'boolean', 'Argument loop must be of type boolean.')
    assert(type(stayinanim) == 'boolean', 'Argument stayinanim must be of type boolean.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')
    assert(type(delta) == 'number', 'Argument delta must be of type number.')
    assert(type(bitset) == 'userdata', 'Argument bitset must be of type userdata.')

    local call = natives.invoke(0xDC6D22FAB76D4874, 'bool', entity, animname, animdict, p3, loop, stayinanim, p6, delta, bitset)
    return call
end

-- https:--gfycat.com/amazingmiserlyamericanquarterhorse
--- @param entity integer
--- @param animdict string
--- @param animname string
--- @param time number
natives.entity_setEntityAnimCurrentTime = function(entity, animdict, animname, time)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(animdict) == 'string', 'Argument animdict must be of type string.')
    assert(type(animname) == 'string', 'Argument animname must be of type string.')
    assert(type(time) == 'number', 'Argument time must be of type number.')

    local call = natives.invoke(0x11CDABDC7783B2BC, 'void', entity, animdict, animname, time)
end

--- @param entity integer
--- @param animdict string
--- @param animname string
--- @param speedmultiplier number
natives.entity_setEntityAnimSpeed = function(entity, animdict, animname, speedmultiplier)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(animdict) == 'string', 'Argument animdict must be of type string.')
    assert(type(animname) == 'string', 'Argument animname must be of type string.')
    assert(type(speedmultiplier) == 'number', 'Argument speedmultiplier must be of type number.')

    local call = natives.invoke(0xEAA885BA3CEA4E4A, 'void', entity, animdict, animname, speedmultiplier)
end

--- @param entity integer
--- @param animation string
--- @param animgroup string
--- @param p3 number
--- @return any
natives.entity_stopEntityAnim = function(entity, animation, animgroup, p3)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(animation) == 'string', 'Argument animation must be of type string.')
    assert(type(animgroup) == 'string', 'Argument animgroup must be of type string.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')

    local call = natives.invoke(0x786591D986DE9159, 'any', entity, animation, animgroup, p3)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.entity_n0X669655Ffb29Ef1A9 = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x669655FFB29EF1A9, 'void', p0, p1, p2, p3)
end

--- @param entity integer
natives.entity_addEntityTrackingTrails = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x1AD922AB5038DEF3, 'void', entity)
end

-- _REMOVE_DECALS_* - _REMOVE_FORCED*
--- @param entity integer
natives.entity_n0X5826Efd6D73C4De5 = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x5826EFD6D73C4DE5, 'void', entity)
end

--- @param entity integer
--- @param pause boolean
natives.entity_pauseEntityTracking = function(entity, pause)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(pause) == 'boolean', 'Argument pause must be of type boolean.')

    local call = natives.invoke(0x36EB4D34D4A092C5, 'void', entity, pause)
end

--- @param p0 userdata
--- @param waypointrecord string
--- @param busesnowoffset boolean
--- @param p3 number
--- @param p4 number
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
--- @param p9 userdata
--- @param p10 userdata
--- @param binit boolean
--- @return any
natives.entity_createFootpathTrail = function(p0, waypointrecord, busesnowoffset, p3, p4, p5, p6, p7, p8, p9, p10, binit)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(waypointrecord) == 'string', 'Argument waypointrecord must be of type string.')
    assert(type(busesnowoffset) == 'boolean', 'Argument busesnowoffset must be of type boolean.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')
    assert(type(p10) == 'userdata', 'Argument p10 must be of type userdata.')
    assert(type(binit) == 'boolean', 'Argument binit must be of type boolean.')

    local call = natives.invoke(0x29BA9F78321E5A6C, 'any', p0, waypointrecord, busesnowoffset, p3, p4, p5, p6, p7, p8, p9, p10, binit)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.entity_n0Xc76E94A78127412B = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xC76E94A78127412B, 'void', p0, p1, p2)
end

--- @param p0 userdata
natives.entity_n0X7F20092547B4Ddea = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x7F20092547B4DDEA, 'void', p0)
end

--- @param p0 userdata
natives.entity_n0Xf41E2979D5Bc5370 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xF41E2979D5BC5370, 'void', p0)
end

--- @param p0 userdata
--- @return any
natives.entity_n0Xaaacb74442C1Bed3 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xAAACB74442C1BED3, 'any', p0)
    return call
end

--- @param modelhash integer
--- @param x number
--- @param y number
--- @param z number
--- @param flags integer
--- @return any
natives.entity_pinClosestMapEntity = function(modelhash, x, y, z, flags)
    assert(type(modelhash) == 'integer', 'Argument modelhash must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')

    local call = natives.invoke(0x6F3068258A499E52, 'any', modelhash, x, y, z, flags)
    return call
end

--- @param entity integer
natives.entity_unpinMapEntity = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xD2B9C78537ED5759, 'void', entity)
end

--- @param p0 userdata
--- @return boolean
natives.entity_isMapEntityPinned = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x1FF441D7954F8709, 'bool', p0)
    return call
end

--- @param p0 userdata
--- @return number
natives.entity_getPinnedMapEntity = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x4735E2A4BB83D9DA, 'int', p0)
    return call
end

--- @param p0 userdata
natives.entity_n0Xeab3D91D30A344F1 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xEAB3D91D30A344F1, 'void', p0)
end

--- @param p0 userdata
natives.entity_n0X37Ceb637Ba3B1A47 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x37CEB637BA3B1A47, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.entity_n0X350E9211074955Af = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x350E9211074955AF, 'any', p0, p1)
    return call
end

--- @param ped integer
natives.entity_n0X898586729Db5221D = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x898586729DB5221D, 'void', ped)
end

--- @param p0 userdata
--- @param p1 userdata
natives.entity_n0Xe9E7A0Bac7F57746 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xE9E7A0BAC7F57746, 'void', p0, p1)
end

--- @param ped integer
--- @param name integer
natives.event_setDecisionMaker = function(ped, name)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(name) == 'integer', 'Argument name must be of type integer.')

    local call = natives.invoke(0x8AE2F981CDDB8FA4, 'void', ped, name)
end

--- @param ped integer
natives.event_setDecisionMakerToDefault = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x6B9C5C38838FB6E6, 'void', ped)
end

--- @param args userdata
--- @return number
natives.event_createShockingEvent = function(args)
    assert(type(args) == 'userdata', 'Argument args must be of type userdata.')

    local call = natives.invoke(0xCA1315C33B9A2847, 'int', args)
    return call
end

-- eventType: https:--alloc8or.re/rdr3/doc/enums/eEventType.txt
-- https:--github.com/femga/rdr3_discoveries/blob/master/AI/EVENTS
--- @param eventtype integer
--- @param x number
--- @param y number
--- @param z number
--- @param p4 number
--- @param p5 number
--- @param p6 number
--- @param p7 number
--- @param p8 number
--- @param p9 integer
--- @param p10 integer
--- @return number
natives.event_addShockingEventAtPosition = function(eventtype, x, y, z, p4, p5, p6, p7, p8, p9, p10)
    assert(type(eventtype) == 'integer', 'Argument eventtype must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'number', 'Argument p6 must be of type number.')
    assert(type(p7) == 'number', 'Argument p7 must be of type number.')
    assert(type(p8) == 'number', 'Argument p8 must be of type number.')
    assert(type(p9) == 'integer', 'Argument p9 must be of type integer.')
    assert(type(p10) == 'integer', 'Argument p10 must be of type integer.')

    local call = natives.invoke(0xD9F8455409B525E9, 'int', eventtype, x, y, z, p4, p5, p6, p7, p8, p9, p10)
    return call
end

-- eventType: https:--alloc8or.re/rdr3/doc/enums/eEventType.txt
--- @param eventtype integer
--- @param entity integer
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 number
--- @param p7 number
--- @param p8 boolean
--- @param p9 boolean
--- @param p10 integer
--- @param p11 integer
--- @return number
natives.event_addShockingEventForEntity = function(eventtype, entity, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11)
    assert(type(eventtype) == 'integer', 'Argument eventtype must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'number', 'Argument p6 must be of type number.')
    assert(type(p7) == 'number', 'Argument p7 must be of type number.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')
    assert(type(p9) == 'boolean', 'Argument p9 must be of type boolean.')
    assert(type(p10) == 'integer', 'Argument p10 must be of type integer.')
    assert(type(p11) == 'integer', 'Argument p11 must be of type integer.')

    local call = natives.invoke(0x7FD8F3BE76F89422, 'int', eventtype, entity, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11)
    return call
end

-- eventType: https:--alloc8or.re/rdr3/doc/enums/eEventType.txt
--- @param eventtype integer
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @return boolean
natives.event_isShockingEventInSphere = function(eventtype, x, y, z, radius)
    assert(type(eventtype) == 'integer', 'Argument eventtype must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')

    local call = natives.invoke(0x9DB47E16060D6354, 'bool', eventtype, x, y, z, radius)
    return call
end

--- @param event integer
--- @return boolean
natives.event_removeShockingEvent = function(event)
    assert(type(event) == 'integer', 'Argument event must be of type integer.')

    local call = natives.invoke(0xE8BB3CC253A34559, 'bool', event)
    return call
end

--- @param p0 boolean
natives.event_removeAllShockingEvents = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0xD47A168C2AB90DC4, 'void', p0)
end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param p4 boolean
natives.event_removeAllShockingEventsInArea = function(x, y, z, radius, p4)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')

    local call = natives.invoke(0xB4C71BA9CAB097BD, 'void', x, y, z, radius, p4)
end

-- eventType: https:--alloc8or.re/rdr3/doc/enums/eEventType.txt
--- @param eventtype integer
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param p5 boolean
natives.event_removeAllShockingEventsOfTypeInArea = function(eventtype, x, y, z, radius, p5)
    assert(type(eventtype) == 'integer', 'Argument eventtype must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')

    local call = natives.invoke(0x6A648D42BF271DC7, 'void', eventtype, x, y, z, radius, p5)
end

-- eventType: https:--alloc8or.re/rdr3/doc/enums/eEventType.txt
--- @param eventtype integer
--- @param p1 boolean
natives.event_removeAllShockingEventsOfType = function(eventtype, p1)
    assert(type(eventtype) == 'integer', 'Argument eventtype must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x118873DD538490B4, 'void', eventtype, p1)
end

natives.event_removeShockingEventSpawnBlockingAreas = function()

    local call = natives.invoke(0xDB249021652420C5, 'void')
end

-- _ADD* (_ADD_SHOCKING_EVENT_* ?)
--- @param entity integer
--- @param p1 integer
--- @return any
natives.event_n0X36D0F2Ba2C0D9Bde = function(entity, p1)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x36D0F2BA2C0D9BDE, 'any', entity, p1)
    return call
end

-- Only used in R* SP Scripts
-- Hash only used in R* Script mob3.ysc: ROBBERY
-- _ADD_PED*
--- @param ped1 integer
--- @param ped2 integer
--- @param p2 integer
--- @param p3 integer
natives.event_n0X7C511E91738A0828 = function(ped1, ped2, p2, p3)
    assert(type(ped1) == 'integer', 'Argument ped1 must be of type integer.')
    assert(type(ped2) == 'integer', 'Argument ped2 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')

    local call = natives.invoke(0x7C511E91738A0828, 'void', ped1, ped2, p2, p3)
end

natives.event_suppressShockingEventsNextFrame = function()

    local call = natives.invoke(0x84994FAD4E4E4E69, 'void')
end

-- _S* (_SUPPRESS_EVENTS_NEXT_FRAME?)
natives.event_n0Xb6F4825153920582 = function()

    local call = natives.invoke(0xB6F4825153920582, 'void')
end

-- Only used in R* SP Script coachrobberies
-- _SET_S*
--- @param p0 number
natives.event_n0X4B2B1A891D437Ca7 = function(p0)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')

    local call = natives.invoke(0x4B2B1A891D437CA7, 'void', p0)
end

-- _SET_P*
--- @param ped integer
--- @param p1 boolean
natives.event_n0X9520175B35E2268D = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x9520175B35E2268D, 'void', ped, p1)
end

-- Only used in R* SP Script beat_rat_infestation and homeinvasion
--- @param volume integer
--- @param p1 boolean
--- @param p2 boolean
--- @return any
natives.event_n0X18E93Ebfc1Fcfa48 = function(volume, p1, p2)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x18E93EBFC1FCFA48, 'any', volume, p1, p2)
    return call
end

-- Only used in R* SP Script beat_rat_infestation
-- Params: p0 = value returned by 0x18E93EBFC1FCFA48
--- @param p0 userdata
natives.event_n0X56B3410626A473E7 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x56B3410626A473E7, 'void', p0)
end

-- Models used in the scripts: P_REGISTER05X, P_REGISTER06X, P_REGISTER03X, PLAYER_ZERO, PLAYER_THREE, A_C_HORSE_MORGAN_FLAXENCHESTNUT
--- @param model integer
--- @param p1 boolean
--- @param p2 boolean
natives.event_addModelToEventMonitor = function(model, p1, p2)
    assert(type(model) == 'integer', 'Argument model must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x608AD36A644A97FE, 'void', model, p1, p2)
end

--- @param model integer
natives.event_n0X4465C3D1475Bd3Fd = function(model)
    assert(type(model) == 'integer', 'Argument model must be of type integer.')

    local call = natives.invoke(0x4465C3D1475BD3FD, 'void', model)
end

--- @param object integer
--- @param p1 boolean
--- @param p2 boolean
--- @return any
natives.event_n0X2Dd42Fad06E6F19E = function(object, p1, p2)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x2DD42FAD06E6F19E, 'any', object, p1, p2)
    return call
end

--- @param object integer
natives.event_n0Xa86B0Ee9B39D15D6 = function(object)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')

    local call = natives.invoke(0xA86B0EE9B39D15D6, 'void', object)
end

--- @param object integer
--- @return boolean
natives.event_n0X26054Eb81Ac0893B = function(object)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')

    local call = natives.invoke(0x26054EB81AC0893B, 'bool', object)
    return call
end

--- @param ped integer
--- @param eventname string
--- @param p2 integer
natives.event_setEventTrackerForPed = function(ped, eventname, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(eventname) == 'string', 'Argument eventname must be of type string.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0xBB1E41DD3D3C6250, 'void', ped, eventname, p2)
end

-- Might return time since some (?) event.
--- @param entity integer
--- @param p1 integer
--- @param p2 integer
--- @return number
natives.event_n0Xad17A18215Dd23D6 = function(entity, p1, p2)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0xAD17A18215DD23D6, 'int', entity, p1, p2)
    return call
end

--- @param entity integer
--- @param eventtype integer
--- @param p2 integer
--- @param p3 integer
--- @return number
natives.event_eventGetTimeSinceEvent = function(entity, eventtype, p2, p3)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(eventtype) == 'integer', 'Argument eventtype must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')

    local call = natives.invoke(0xC6A7DC546E94FED5, 'int', entity, eventtype, p2, p3)
    return call
end

-- Returns eventType
--- @param entity integer
--- @param p1 integer
--- @param p2 integer
--- @return number
natives.event_eventGetRecentEvent = function(entity, p1, p2)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x796EECFF0C6D39BE, 'integer', entity, p1, p2)
    return call
end

--- @param eventname string
--- @param shockingevent integer
--- @return boolean
natives.event_isEventTrackerActive = function(eventname, shockingevent)
    assert(type(eventname) == 'string', 'Argument eventname must be of type string.')
    assert(type(shockingevent) == 'integer', 'Argument shockingevent must be of type integer.')

    local call = natives.invoke(0x797B3D4D92E56094, 'bool', eventname, shockingevent)
    return call
end

--- @param entity integer
--- @param eventtype integer
--- @param p2 integer
--- @param p3 integer
--- @return number
natives.event_eventGetSourceEntityFromEvent = function(entity, eventtype, p2, p3)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(eventtype) == 'integer', 'Argument eventtype must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')

    local call = natives.invoke(0x822A001BCEA5BD81, 'int', entity, eventtype, p2, p3)
    return call
end

--- @param entity integer
--- @param eventtype integer
--- @param p2 integer
--- @param p3 integer
--- @return number
natives.event_eventGetTargetEntityFromEvent = function(entity, eventtype, p2, p3)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(eventtype) == 'integer', 'Argument eventtype must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')

    local call = natives.invoke(0x38497F139981C5C9, 'int', entity, eventtype, p2, p3)
    return call
end

-- _GET*
--- @param ped integer
--- @return any
natives.event_n0X1D1B448D719415Ab = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x1D1B448D719415AB, 'any', ped)
    return call
end

-- _GET*
--- @param entity integer
--- @param p1 integer
--- @return any
natives.event_n0X83D43F0Fd5276E4D = function(entity, p1)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x83D43F0FD5276E4D, 'any', entity, p1)
    return call
end

-- HAS_ACTOR_RECEIVED_TRACKED_EVENT_THAT_SHOULD_ALERT - iTimeSinceEvent >= iTimeLimitMS
--- @param entity integer
--- @param eventtype integer
--- @param p2 integer
natives.event_n0Xe28D7Fc9Fd32Abeb = function(entity, eventtype, p2)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(eventtype) == 'integer', 'Argument eventtype must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0xE28D7FC9FD32ABEB, 'void', entity, eventtype, p2)
end

-- AGGRO_CHECK_PROPERTY_DAMAGE: Property damage found with event
--- @param ped integer
--- @param p1 integer
natives.event_n0X1A5C5D350068A673 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x1A5C5D350068A673, 'void', ped, p1)
end

--- @param ped integer
natives.event_eventFlushAllEventTrackers = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xAD8F2424C6E1E3A8, 'void', ped)
end

natives.event_n0Xe2C2Fbb7825Ffc66 = function()

    local call = natives.invoke(0xE2C2FBB7825FFC66, 'void')
end

-- Starts a fire:
-- 
-- xyz: Location of fire
-- maxChildren: The max amount of times a fire can spread to other objects. Must be 25 or less, or the function will do nothing.
-- isGasFire: Whether or not the fire is powered by gasoline.
--- @param x number
--- @param y number
--- @param z number
--- @param p3 integer
--- @param p4 number
--- @param p5 boolean
--- @param soundsetname string
--- @param p7 number
--- @param p8 integer
--- @return number
natives.fire_startScriptFire = function(x, y, z, p3, p4, p5, soundsetname, p7, p8)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')
    assert(type(soundsetname) == 'string', 'Argument soundsetname must be of type string.')
    assert(type(p7) == 'number', 'Argument p7 must be of type number.')
    assert(type(p8) == 'integer', 'Argument p8 must be of type integer.')

    local call = natives.invoke(0x6B83617E04503888, 'int', x, y, z, p3, p4, p5, soundsetname, p7, p8)
    return call
end

--- @param firehandle integer
natives.fire_removeScriptFire = function(firehandle)
    assert(type(firehandle) == 'integer', 'Argument firehandle must be of type integer.')

    local call = natives.invoke(0x790125C36E194069, 'void', firehandle)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.fire_startEntityFire = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xC4DC7418A44D6822, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
natives.fire_stopEntityFire = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x8390751DC40C1E98, 'void', p0, p1)
end

--- @param entity integer
--- @return boolean
natives.fire_isEntityOnFire = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x1BD7C371CE257C3E, 'bool', entity)
    return call
end

--- @param p0 userdata
natives.fire_n0X754937C28271Bc65 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x754937C28271BC65, 'void', p0)
end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @return number
natives.fire_getNumberOfFiresInRange = function(x, y, z, radius)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')

    local call = natives.invoke(0xF9617BC6FAE61E08, 'int', x, y, z, radius)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
natives.fire_stopFireInRange = function(x, y, z, radius)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')

    local call = natives.invoke(0xDB38F247BD421708, 'void', x, y, z, radius)
end

--- @param posx number
--- @param posy number
--- @param posz number
--- @param rotx number
--- @param roty number
--- @param rotz number
--- @param scalex number
--- @param scaley number
--- @param scalez number
natives.fire_stopFireInBox = function(posx, posy, posz, rotx, roty, rotz, scalex, scaley, scalez)
    assert(type(posx) == 'number', 'Argument posx must be of type number.')
    assert(type(posy) == 'number', 'Argument posy must be of type number.')
    assert(type(posz) == 'number', 'Argument posz must be of type number.')
    assert(type(rotx) == 'number', 'Argument rotx must be of type number.')
    assert(type(roty) == 'number', 'Argument roty must be of type number.')
    assert(type(rotz) == 'number', 'Argument rotz must be of type number.')
    assert(type(scalex) == 'number', 'Argument scalex must be of type number.')
    assert(type(scaley) == 'number', 'Argument scaley must be of type number.')
    assert(type(scalez) == 'number', 'Argument scalez must be of type number.')

    local call = natives.invoke(0xB7C7BDC375AEA9A4, 'void', posx, posy, posz, rotx, roty, rotz, scalex, scaley, scalez)
end

--- @param outposition integer
--- @param x number
--- @param y number
--- @param z number
--- @return boolean
natives.fire_getClosestFirePos = function(outposition, x, y, z)
    assert(type(outposition) == 'integer', 'Argument outposition must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0xB646FB657F448261, 'bool', outposition, x, y, z)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
--- @param p9 userdata
--- @return any
natives.fire_n0X559Fc1D310813031 = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')

    local call = natives.invoke(0x559FC1D310813031, 'any', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
--- @param p9 userdata
--- @return any
natives.fire_n0X41B87A6495Ee13Dd = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')

    local call = natives.invoke(0x41B87A6495EE13DD, 'any', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)
    return call
end

--- @param p0 userdata
--- @return any
natives.fire_n0Xa4454592Dcf7C992 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xA4454592DCF7C992, 'any', p0)
    return call
end

--- @param entity integer
--- @return boolean
natives.fire_isEntityConsumedByFire = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xCDC25355C0D65963, 'bool', entity)
    return call
end

-- https:--github.com/femga/rdr3_discoveries/tree/master/graphics/explosions
-- 
-- explosionType:
-- enum eExplosionTag
-- {
-- 	EXP_TAG_DONTCARE = -1,
-- 	EXP_TAG_GRENADE,
-- 	EXP_TAG_STICKYBOMB,
-- 	EXP_TAG_MOLOTOV,
-- 	EXP_TAG_MOLOTOV_VOLATILE,
-- 	EXP_TAG_HI_OCTANE,
-- 	EXP_TAG_CAR,
-- 	EXP_TAG_PLANE,
-- 	EXP_TAG_PETROL_PUMP,
-- 	EXP_TAG_DIR_STEAM,
-- 	EXP_TAG_DIR_FLAME,
-- 	EXP_TAG_DIR_WATER_HYDRANT,
-- 	EXP_TAG_BOAT,
-- 	EXP_TAG_BULLET,
-- 	EXP_TAG_SMOKEGRENADE,
-- 	EXP_TAG_BZGAS,
-- 	EXP_TAG_GAS_CANISTER,
-- 	EXP_TAG_EXTINGUISHER,
-- 	EXP_TAG_TRAIN,
-- 	EXP_TAG_DIR_FLAME_EXPLODE,
-- 	EXP_TAG_VEHICLE_BULLET,
-- 	EXP_TAG_BIRD_CRAP,
-- 	EXP_TAG_FIREWORK,
-- 	EXP_TAG_TORPEDO,
-- 	EXP_TAG_TORPEDO_UNDERWATER,
-- 	EXP_TAG_LANTERN,
-- 	EXP_TAG_DYNAMITE,
-- 	EXP_TAG_DYNAMITESTACK,
-- 	EXP_TAG_DYNAMITE_VOLATILE,
-- 	EXP_TAG_RIVER_BLAST,
-- 	EXP_TAG_PLACED_DYNAMITE,
-- 	EXP_TAG_FIRE_ARROW,
-- 	EXP_TAG_DYNAMITE_ARROW,
-- 	EXP_TAG_PHOSPHOROUS_BULLET,
-- 	EXP_TAG_LIGHTNING_STRIKE,
-- 	EXP_TAG_TRACKING_ARROW,
-- 	EXP_TAG_POISON_BOTTLE
-- };
--- @param x number
--- @param y number
--- @param z number
--- @param explosiontype integer
--- @param damagescale number
--- @param isaudible boolean
--- @param isinvisible boolean
--- @param camerashake number
natives.fire_addExplosion = function(x, y, z, explosiontype, damagescale, isaudible, isinvisible, camerashake)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(explosiontype) == 'integer', 'Argument explosiontype must be of type integer.')
    assert(type(damagescale) == 'number', 'Argument damagescale must be of type number.')
    assert(type(isaudible) == 'boolean', 'Argument isaudible must be of type boolean.')
    assert(type(isinvisible) == 'boolean', 'Argument isinvisible must be of type boolean.')
    assert(type(camerashake) == 'number', 'Argument camerashake must be of type number.')

    local call = natives.invoke(0x7D6F58F69DA92530, 'void', x, y, z, explosiontype, damagescale, isaudible, isinvisible, camerashake)
end

-- explosionType: see ADD_EXPLOSION
--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param explosiontype integer
--- @param damagescale number
--- @param isaudible boolean
--- @param isinvisible boolean
--- @param camerashake number
natives.fire_addOwnedExplosion = function(ped, x, y, z, explosiontype, damagescale, isaudible, isinvisible, camerashake)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(explosiontype) == 'integer', 'Argument explosiontype must be of type integer.')
    assert(type(damagescale) == 'number', 'Argument damagescale must be of type number.')
    assert(type(isaudible) == 'boolean', 'Argument isaudible must be of type boolean.')
    assert(type(isinvisible) == 'boolean', 'Argument isinvisible must be of type boolean.')
    assert(type(camerashake) == 'number', 'Argument camerashake must be of type number.')

    local call = natives.invoke(0xD84A917A64D4D016, 'void', ped, x, y, z, explosiontype, damagescale, isaudible, isinvisible, camerashake)
end

-- _ADD_EXPLOSION_*(ON ENTITY?)
--- @param entity integer
--- @param p1 integer
--- @param x number
--- @param y number
--- @param z number
--- @param explosiontype integer
--- @param damagescale number
--- @param isaudible boolean
--- @param isinvisible boolean
--- @param camerashake number
natives.fire_n0Xb7Df150605Eedc9B = function(entity, p1, x, y, z, explosiontype, damagescale, isaudible, isinvisible, camerashake)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(explosiontype) == 'integer', 'Argument explosiontype must be of type integer.')
    assert(type(damagescale) == 'number', 'Argument damagescale must be of type number.')
    assert(type(isaudible) == 'boolean', 'Argument isaudible must be of type boolean.')
    assert(type(isinvisible) == 'boolean', 'Argument isinvisible must be of type boolean.')
    assert(type(camerashake) == 'number', 'Argument camerashake must be of type number.')

    local call = natives.invoke(0xB7DF150605EEDC9B, 'void', entity, p1, x, y, z, explosiontype, damagescale, isaudible, isinvisible, camerashake)
end

-- explosionType: see ADD_EXPLOSION
-- Change explosionFx (Visual Effect) for specified explosionType
--- @param x number
--- @param y number
--- @param z number
--- @param explosiontype integer
--- @param explosionfx integer
--- @param damagescale number
--- @param isaudible boolean
--- @param isinvisible boolean
--- @param camerashake number
natives.fire_addExplosionWithUserVfx = function(x, y, z, explosiontype, explosionfx, damagescale, isaudible, isinvisible, camerashake)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(explosiontype) == 'integer', 'Argument explosiontype must be of type integer.')
    assert(type(explosionfx) == 'integer', 'Argument explosionfx must be of type integer.')
    assert(type(damagescale) == 'number', 'Argument damagescale must be of type number.')
    assert(type(isaudible) == 'boolean', 'Argument isaudible must be of type boolean.')
    assert(type(isinvisible) == 'boolean', 'Argument isinvisible must be of type boolean.')
    assert(type(camerashake) == 'number', 'Argument camerashake must be of type number.')

    local call = natives.invoke(0x53BA259F3A67A99E, 'void', x, y, z, explosiontype, explosionfx, damagescale, isaudible, isinvisible, camerashake)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
--- @param p9 userdata
--- @param p10 userdata
natives.fire_n0X34Ae85C7Ca4857Aa = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')
    assert(type(p10) == 'userdata', 'Argument p10 must be of type userdata.')

    local call = natives.invoke(0x34AE85C7CA4857AA, 'void', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)
end

-- explosionType: see ADD_EXPLOSION
--- @param explosiontype integer
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @return boolean
natives.fire_isExplosionInArea = function(explosiontype, x1, y1, z1, x2, y2, z2)
    assert(type(explosiontype) == 'integer', 'Argument explosiontype must be of type integer.')
    assert(type(x1) == 'number', 'Argument x1 must be of type number.')
    assert(type(y1) == 'number', 'Argument y1 must be of type number.')
    assert(type(z1) == 'number', 'Argument z1 must be of type number.')
    assert(type(x2) == 'number', 'Argument x2 must be of type number.')
    assert(type(y2) == 'number', 'Argument y2 must be of type number.')
    assert(type(z2) == 'number', 'Argument z2 must be of type number.')

    local call = natives.invoke(0x8391BA4313A25AD3, 'bool', explosiontype, x1, y1, z1, x2, y2, z2)
    return call
end

-- explosionType: see ADD_EXPLOSION
--- @param explosiontype integer
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @return boolean
natives.fire_isExplosionActiveInArea = function(explosiontype, x1, y1, z1, x2, y2, z2)
    assert(type(explosiontype) == 'integer', 'Argument explosiontype must be of type integer.')
    assert(type(x1) == 'number', 'Argument x1 must be of type number.')
    assert(type(y1) == 'number', 'Argument y1 must be of type number.')
    assert(type(z1) == 'number', 'Argument z1 must be of type number.')
    assert(type(x2) == 'number', 'Argument x2 must be of type number.')
    assert(type(y2) == 'number', 'Argument y2 must be of type number.')
    assert(type(z2) == 'number', 'Argument z2 must be of type number.')

    local call = natives.invoke(0xD96E82AEBFFAAFF0, 'bool', explosiontype, x1, y1, z1, x2, y2, z2)
    return call
end

-- explosionType: see ADD_EXPLOSION
--- @param explosiontype integer
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @return boolean
natives.fire_isExplosionInSphere = function(explosiontype, x, y, z, radius)
    assert(type(explosiontype) == 'integer', 'Argument explosiontype must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')

    local call = natives.invoke(0xD62DD846D82CBB90, 'bool', explosiontype, x, y, z, radius)
    return call
end

-- explosionType: see ADD_EXPLOSION
--- @param explosiontype integer
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param angle number
--- @return boolean
natives.fire_isExplosionInAngledArea = function(explosiontype, x1, y1, z1, x2, y2, z2, angle)
    assert(type(explosiontype) == 'integer', 'Argument explosiontype must be of type integer.')
    assert(type(x1) == 'number', 'Argument x1 must be of type number.')
    assert(type(y1) == 'number', 'Argument y1 must be of type number.')
    assert(type(z1) == 'number', 'Argument z1 must be of type number.')
    assert(type(x2) == 'number', 'Argument x2 must be of type number.')
    assert(type(y2) == 'number', 'Argument y2 must be of type number.')
    assert(type(z2) == 'number', 'Argument z2 must be of type number.')
    assert(type(angle) == 'number', 'Argument angle must be of type number.')

    local call = natives.invoke(0x5AE661ECD18524C9, 'bool', explosiontype, x1, y1, z1, x2, y2, z2, angle)
    return call
end

-- explosionType: see ADD_EXPLOSION
--- @param explosiontype integer
--- @param volume integer
--- @return boolean
natives.fire_isExplosionInVolume = function(explosiontype, volume)
    assert(type(explosiontype) == 'integer', 'Argument explosiontype must be of type integer.')
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')

    local call = natives.invoke(0xE24822A4CFC9107A, 'bool', explosiontype, volume)
    return call
end

-- explosionType: see ADD_EXPLOSION
--- @param explosiontype integer
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param radius number
--- @return number
natives.fire_getOwnerOfExplosionInAngledArea = function(explosiontype, x1, y1, z1, x2, y2, z2, radius)
    assert(type(explosiontype) == 'integer', 'Argument explosiontype must be of type integer.')
    assert(type(x1) == 'number', 'Argument x1 must be of type number.')
    assert(type(y1) == 'number', 'Argument y1 must be of type number.')
    assert(type(z1) == 'number', 'Argument z1 must be of type number.')
    assert(type(x2) == 'number', 'Argument x2 must be of type number.')
    assert(type(y2) == 'number', 'Argument y2 must be of type number.')
    assert(type(z2) == 'number', 'Argument z2 must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')

    local call = natives.invoke(0x8002DDAB58594D78, 'int', explosiontype, x1, y1, z1, x2, y2, z2, radius)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @param p3 number
natives.fire_n0X68F6A75Fdf5A70D6 = function(x, y, z, p3)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')

    local call = natives.invoke(0x68F6A75FDF5A70D6, 'void', x, y, z, p3)
end

-- Only used in R* SP Related Camp Scripts
--- @param p0 number
natives.fire_n0X24Db6B9F2B719043 = function(p0)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')

    local call = natives.invoke(0x24DB6B9F2B719043, 'void', p0)
end

-- Tested with fire & dynamite. Only returns true using value p1 = 1 and when the ped is affected by fire.
--- @param ped integer
--- @param p1 integer
--- @return boolean
natives.fire_isPedShockingEventActive = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xAB7993BA61A4674F, 'bool', ped, p1)
    return call
end

--- @param p0 integer
--- @param p1 integer
--- @param p2 integer
--- @return number
natives.flock_getSpeciesTuningFloatParam = function(p0, p1, p2)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0xE108489621422F91, 'float', p0, p1, p2)
    return call
end

--- @param p0 integer
--- @param p1 integer
--- @param p2 integer
--- @param p3 number
natives.flock_setSpeciesTuningFloatParam = function(p0, p1, p2, p3)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')

    local call = natives.invoke(0x963240B6C252BA49, 'void', p0, p1, p2, p3)
end

--- @param p0 integer
--- @param p1 integer
--- @param p2 integer
--- @param p3 boolean
natives.flock_setSpeciesTuningBoolParam = function(p0, p1, p2, p3)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0x6D1D94C2459B42EE, 'void', p0, p1, p2, p3)
end

-- index: https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eAnimalTuningFloats
-- https:--github.com/femga/rdr3_discoveries/tree/master/AI/ANIMAL_TUNING_FLOAT_PARAMS
--- @param animal integer
--- @param index integer
--- @return number
natives.flock_getAnimalTuningFloatParam = function(animal, index)
    assert(type(animal) == 'integer', 'Argument animal must be of type integer.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0x4BC3ECFDA0297E27, 'float', animal, index)
    return call
end

--- @param animal integer
--- @param index integer
--- @param value number
natives.flock_setAnimalTuningFloatParam = function(animal, index, value)
    assert(type(animal) == 'integer', 'Argument animal must be of type integer.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0xCBDA22C87977244F, 'void', animal, index, value)
end

--- @param animal integer
--- @param index integer
natives.flock_resetAnimalTuningFloatParam = function(animal, index)
    assert(type(animal) == 'integer', 'Argument animal must be of type integer.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0xE776A195488FC520, 'void', animal, index)
end

-- index: https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eAnimalTuningBools
-- https:--github.com/femga/rdr3_discoveries/tree/master/AI/ANIMAL_TUNING_BOOL_PARAMS
--- @param animal integer
--- @param index integer
--- @return boolean
natives.flock_getAnimalTuningBoolParam = function(animal, index)
    assert(type(animal) == 'integer', 'Argument animal must be of type integer.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0x1C1993824A396603, 'bool', animal, index)
    return call
end

--- @param animal integer
--- @param index integer
--- @param value boolean
natives.flock_setAnimalTuningBoolParam = function(animal, index, value)
    assert(type(animal) == 'integer', 'Argument animal must be of type integer.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')
    assert(type(value) == 'boolean', 'Argument value must be of type boolean.')

    local call = natives.invoke(0x9FF1E042FA597187, 'void', animal, index, value)
end

--- @param animal integer
--- @param index integer
natives.flock_resetAnimalTuningBoolParam = function(animal, index)
    assert(type(animal) == 'integer', 'Argument animal must be of type integer.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0x96AA1304D30E6BC3, 'void', animal, index)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @return any
natives.flock_n0X8049B17Bec937662 = function(p0, p1, p2, p3, p4, p5, p6)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0x8049B17BEC937662, 'any', p0, p1, p2, p3, p4, p5, p6)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
--- @return any
natives.flock_n0Xe93415B3307208E5 = function(p0, p1, p2, p3, p4, p5, p6, p7, p8)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')

    local call = natives.invoke(0xE93415B3307208E5, 'any', p0, p1, p2, p3, p4, p5, p6, p7, p8)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.flock_n0X19870C40C7Ee15Be = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x19870C40C7EE15BE, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.flock_n0X0816C31480764Ab0 = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x0816C31480764AB0, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
natives.flock_n0Xc3D581A34Bc0A1F0 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xC3D581A34BC0A1F0, 'void', p0, p1)
end

-- species: SPECIES_BIRD_CROW
--- @param species integer
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param x3 number
--- @param y3 number
--- @param z3 number
--- @param p10 number
--- @param p11 number
--- @param p12 number
--- @param p13 number
natives.flock_n0Xf2Cca7B68Cfab2B9 = function(species, x1, y1, z1, x2, y2, z2, x3, y3, z3, p10, p11, p12, p13)
    assert(type(species) == 'integer', 'Argument species must be of type integer.')
    assert(type(x1) == 'number', 'Argument x1 must be of type number.')
    assert(type(y1) == 'number', 'Argument y1 must be of type number.')
    assert(type(z1) == 'number', 'Argument z1 must be of type number.')
    assert(type(x2) == 'number', 'Argument x2 must be of type number.')
    assert(type(y2) == 'number', 'Argument y2 must be of type number.')
    assert(type(z2) == 'number', 'Argument z2 must be of type number.')
    assert(type(x3) == 'number', 'Argument x3 must be of type number.')
    assert(type(y3) == 'number', 'Argument y3 must be of type number.')
    assert(type(z3) == 'number', 'Argument z3 must be of type number.')
    assert(type(p10) == 'number', 'Argument p10 must be of type number.')
    assert(type(p11) == 'number', 'Argument p11 must be of type number.')
    assert(type(p12) == 'number', 'Argument p12 must be of type number.')
    assert(type(p13) == 'number', 'Argument p13 must be of type number.')

    local call = natives.invoke(0xF2CCA7B68CFAB2B9, 'void', species, x1, y1, z1, x2, y2, z2, x3, y3, z3, p10, p11, p12, p13)
end

--- @param p0 userdata
natives.flock_n0Xfb16F08F47B83B4C = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xFB16F08F47B83B4C, 'void', p0)
end

-- Ped (horse) will run away from players and mounting will trigger them to buck until disabled.
-- Used for: REL_DOMESTICATED_ANIMAL
--- @param ped integer
--- @return boolean
natives.flock_getAnimalIsWild = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x3B005FF0538ED2A9, 'bool', ped)
    return call
end

--- @param ped integer
--- @param toggle boolean
natives.flock_setAnimalIsWild = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xAEB97D84CDF3C00B, 'void', ped, toggle)
end

-- enum eAnimalRarityLevel
-- {
-- 	ARL_COMMON,
-- 	ARL_RARE,
-- 	ARL_LEGENDARY,
-- 	ARL_NUMRARITYLEVELS
-- };
--- @param ped integer
--- @return number
natives.flock_getAnimalRarity = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xF8B48A361DC388AE, 'int', ped)
    return call
end

-- rarityLevel: see _GET_ANIMAL_RARITY
--- @param ped integer
--- @param raritylevel integer
natives.flock_setAnimalRarity = function(ped, raritylevel)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(raritylevel) == 'integer', 'Argument raritylevel must be of type integer.')

    local call = natives.invoke(0x8B6F0F59B1B99801, 'void', ped, raritylevel)
end

--- @param p0 userdata
--- @param p1 userdata
natives.flock_n0Xff1E339Ce40Eaaaf = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xFF1E339CE40EAAAF, 'void', p0, p1)
end

--- @param herdhandle integer
--- @return boolean
natives.flock_isHerdValid = function(herdhandle)
    assert(type(herdhandle) == 'integer', 'Argument herdhandle must be of type integer.')

    local call = natives.invoke(0x8D913E493BAFE0A3, 'bool', herdhandle)
    return call
end

--- @return number
natives.flock_createHerd = function()

    local call = natives.invoke(0xCB4EF7EDAE2E16F1, 'int')
    return call
end

--- @param p0 userdata
natives.flock_n0Xe0961Aed72642B80 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xE0961AED72642B80, 'void', p0)
end

--- @param p0 userdata
--- @param ped integer
natives.flock_addPedToFlock = function(p0, ped)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x933E5D31A7D13069, 'void', p0, ped)
end

--- @param p0 userdata
--- @param p1 userdata
natives.flock_n0X408D1149C5E39C1E = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x408D1149C5E39C1E, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.flock_n0X9E13Acc38Ba8F9C3 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x9E13ACC38BA8F9C3, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @return any
natives.flock_n0X34B9C4D86Df2C2F3 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x34B9C4D86DF2C2F3, 'any', p0)
    return call
end

--- @param p0 userdata
--- @return number, number, number
natives.flock_n0X1Da6Cb02071055D5 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x1DA6CB02071055D5, 'vector3', p0)
    return call.x, call.y, call.z
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.flock_n0Xc95611869E14F8Af = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xC95611869E14F8AF, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @return any
natives.flock_n0X09Ee00B8F858E0Be = function(p0, p1, p2, p3, p4, p5, p6)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0x09EE00B8F858E0BE, 'any', p0, p1, p2, p3, p4, p5, p6)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
natives.flock_n0Xe36D2Cb540597Ef7 = function(p0, p1, p2, p3, p4, p5, p6, p7)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')

    local call = natives.invoke(0xE36D2CB540597EF7, 'void', p0, p1, p2, p3, p4, p5, p6, p7)
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.flock_n0Xd95F04A4E73Be85E = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xD95F04A4E73BE85E, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.flock_n0X17E3E5C46Eccd308 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x17E3E5C46ECCD308, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.flock_n0Xc72Ce37081Dae625 = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xC72CE37081DAE625, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
natives.flock_n0X67A43Ea3F6Fe0076 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x67A43EA3F6FE0076, 'void', p0)
end

--- @param p0 userdata
--- @return any
natives.flock_n0X36486Af7Da93A464 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x36486AF7DA93A464, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.flock_n0X6C57Bea886A20C6B = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x6C57BEA886A20C6B, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.flock_n0X1520626Ffafffa8F = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x1520626FFAFFFA8F, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.flock_n0Xfa821997794F48E7 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xFA821997794F48E7, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.flock_n0Xcc6B5Aafc87Bfc7B = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xCC6B5AAFC87BFC7B, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.flock_n0Xfdb008B3Bcf5992F = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xFDB008B3BCF5992F, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
natives.flock_n0X2Df3D457D86F8E57 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x2DF3D457D86F8E57, 'void', p0, p1)
end

--- @param p0 userdata
natives.flock_n0X706B434Fefad6A24 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x706B434FEFAD6A24, 'void', p0)
end

--- @param p0 userdata
natives.flock_n0Xa881F5C77A560906 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xA881F5C77A560906, 'void', p0)
end

--- @param p0 userdata
--- @return any
natives.flock_n0X53187E563F938E76 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x53187E563F938E76, 'any', p0)
    return call
end

natives.graphics_freeMemoryForMissionCreatorPhoto = function()

    local call = natives.invoke(0x7DFF8F94937D2659, 'void')
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @return boolean
natives.graphics_loadMissionCreatorPhoto = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x84F0BA7462FF8D58, 'bool', p0, p1, p2, p3)
    return call
end

-- contentId: returned by NETWORK::_UGC_QUERY_GET_CREATOR_PHOTO(uVar0, 0, sParam3)
--- @param contentid string
--- @return number
natives.graphics_getStatusOfLoadMissionCreatorPhoto = function(contentid)
    assert(type(contentid) == 'string', 'Argument contentid must be of type string.')

    local call = natives.invoke(0xC71B50AE58D07369, 'int', contentid)
    return call
end

--- @return boolean
natives.graphics_beginTakeHighQualityPhoto = function()

    local call = natives.invoke(0xA15BFFC0A01B34E1, 'bool')
    return call
end

--- @return number
natives.graphics_getStatusOfTakeHighQualityPhoto = function()

    local call = natives.invoke(0x4A3DA74C3CCB1725, 'int')
    return call
end

natives.graphics_freeMemoryForHighQualityPhoto = function()

    local call = natives.invoke(0xD45547D8396F002A, 'void')
end

--- @param p0 boolean
natives.graphics_setPhotoSelfStat = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x2705D18C11B61046, 'void', p0)
end

--- @param p0 integer
natives.graphics_setPhotoStudioStat = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x8E6AFF353C09652E, 'void', p0)
end

--- @param posseid userdata
natives.graphics_setPosseIdForPhoto = function(posseid)
    assert(type(posseid) == 'userdata', 'Argument posseid must be of type userdata.')

    local call = natives.invoke(0x564837D4A9EDE296, 'void', posseid)
end

--- @param p0 boolean
--- @param p1 boolean
natives.graphics_n0X9F6D859C80708B26 = function(p0, p1)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x9F6D859C80708B26, 'void', p0, p1)
end

--- @return boolean
natives.graphics_isPhotoFrame = function()

    local call = natives.invoke(0x86076AE35CBBE55F, 'bool')
    return call
end

--- @param p0 boolean
natives.graphics_setPhotoInPhotomodeStat = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0xFA91736933AB3D93, 'void', p0)
end

--- @param p0 integer
natives.graphics_setPhotoOverlayEffectStat = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x8B3296278328B5EB, 'void', p0)
end

-- Gets set to 1 when GET_STATUS_OF_TAKE_HIGH_QUALITY_PHOTO = PHOTO_OPERATION_SUCCEEDED
--- @param p0 userdata
natives.graphics_n0X0D5B19C34068Fee7 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x0D5B19C34068FEE7, 'void', p0)
end

--- @param player integer
natives.graphics_setPlayerAppearInPhoto = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x75D568607909333E, 'void', player)
end

--- @param p0 string
natives.graphics_setRegionPhotoTakenStat = function(p0)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')

    local call = natives.invoke(0xD1031B83AC093BC7, 'void', p0)
end

--- @param p0 string
natives.graphics_setDistrictPhotoTakenStat = function(p0)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')

    local call = natives.invoke(0x9937FACBBF267244, 'void', p0)
end

--- @param p0 string
natives.graphics_setStatePhotoTakenStat = function(p0)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')

    local call = natives.invoke(0x8952E857696B8A79, 'void', p0)
end

--- @param unused integer
--- @return boolean
natives.graphics_saveHighQualityPhoto = function(unused)
    assert(type(unused) == 'integer', 'Argument unused must be of type integer.')

    local call = natives.invoke(0x57639FD876B68A91, 'bool', unused)
    return call
end

-- 0 = succeeded
-- 1 = getting status
-- 2 = failed
--- @return number
natives.graphics_getStatusOfSaveHighQualityPhoto = function()

    local call = natives.invoke(0xD6663EC374092383, 'int')
    return call
end

-- Called together with FREE_MEMORY_FOR_LOW_QUALITY_PHOTO
--- @param p0 integer
--- @return boolean
natives.graphics_beginCreateLowQualityCopyOfPhoto = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x494A9874F17A7D50, 'bool', p0)
    return call
end

-- Old name: _GET_STATUS_OF_DRAW_LOW_QUALITY_PHOTO
--- @param p0 userdata
--- @return number
natives.graphics_getStatusOfCreateLowQualityCopyOfPhoto = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x13430D3D5A45F14B, 'int', p0)
    return call
end

natives.graphics_freeMemoryForLowQualityPhoto = function()

    local call = natives.invoke(0x614682E715ADBAAC, 'void')
end

-- nullsub, doesn't do anything (GTA5 leftover, there is no phone in RDR3)
--- @param p0 boolean
--- @param photorotation integer
natives.graphics_drawLowQualityPhotoToPhone = function(p0, photorotation)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')
    assert(type(photorotation) == 'integer', 'Argument photorotation must be of type integer.')

    local call = natives.invoke(0xF1142E5D64B47802, 'void', p0, photorotation)
end

-- Always returns 200.
--- @return number
natives.graphics_getMaxNumberOfLocalPhotos = function()

    local call = natives.invoke(0x8E587FCD30E05592, 'int')
    return call
end

--- @return number
natives.graphics_getCurrentNumberOfLocalPhotos = function()

    local call = natives.invoke(0x78C56B8A7B1D000C, 'int')
    return call
end

--- @return any
natives.graphics_queueOperationToCreateSortedListOfPhotos = function()

    local call = natives.invoke(0xA42EDF1E88734A7E, 'any')
    return call
end

-- 0 = succeeded
-- 1 = getting status
-- 2 = failed
--- @return number
natives.graphics_getStatusOfSortedListOperation = function()

    local call = natives.invoke(0xB28894CD7408BD0C, 'int')
    return call
end

--- @param posx number
--- @param posy number
--- @param posz number
--- @param colorr integer
--- @param colorg integer
--- @param colorb integer
--- @param range number
--- @param intensity number
natives.graphics_drawLightWithRange = function(posx, posy, posz, colorr, colorg, colorb, range, intensity)
    assert(type(posx) == 'number', 'Argument posx must be of type number.')
    assert(type(posy) == 'number', 'Argument posy must be of type number.')
    assert(type(posz) == 'number', 'Argument posz must be of type number.')
    assert(type(colorr) == 'integer', 'Argument colorr must be of type integer.')
    assert(type(colorg) == 'integer', 'Argument colorg must be of type integer.')
    assert(type(colorb) == 'integer', 'Argument colorb must be of type integer.')
    assert(type(range) == 'number', 'Argument range must be of type number.')
    assert(type(intensity) == 'number', 'Argument intensity must be of type number.')

    local call = natives.invoke(0xD2D9E04C0DF927F4, 'void', posx, posy, posz, colorr, colorg, colorb, range, intensity)
end

--- @param entity integer
natives.graphics_updateLightsOnEntity = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xBDBACB52A03CC760, 'void', entity)
end

-- https:--gfycat.com/meagerfaireyra
--- @param entity integer
--- @param red integer
--- @param green integer
--- @param blue integer
natives.graphics_setLightsColorForEntity = function(entity, red, green, blue)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(red) == 'integer', 'Argument red must be of type integer.')
    assert(type(green) == 'integer', 'Argument green must be of type integer.')
    assert(type(blue) == 'integer', 'Argument blue must be of type integer.')

    local call = natives.invoke(0x6EC2A67962296F49, 'void', entity, red, green, blue)
end

--- @param entity integer
--- @param intensity number
natives.graphics_setLightsIntensityForEntity = function(entity, intensity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(intensity) == 'number', 'Argument intensity must be of type number.')

    local call = natives.invoke(0x07C0F87AAC57F2E4, 'void', entity, intensity)
end

-- type must be less than or equal to 20
--- @param entity integer
--- @param type integer
natives.graphics_setLightsTypeForEntity = function(entity, type)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(type) == 'integer', 'Argument type must be of type integer.')

    local call = natives.invoke(0xAB72C67163DC4DB4, 'void', entity, type)
end

-- https:--github.com/femga/rdr3_discoveries/blob/master/graphics/markers/marker_types.lua
--- @param type integer
--- @param posx number
--- @param posy number
--- @param posz number
--- @param dirx number
--- @param diry number
--- @param dirz number
--- @param rotx number
--- @param roty number
--- @param rotz number
--- @param scalex number
--- @param scaley number
--- @param scalez number
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
--- @param bobupanddown boolean
--- @param facecamera boolean
--- @param p19 integer
--- @param rotate boolean
--- @param texturedict string
--- @param texturename string
--- @param drawonents boolean
natives.graphics_drawMarker = function(type, posx, posy, posz, dirx, diry, dirz, rotx, roty, rotz, scalex, scaley, scalez, red, green, blue, alpha, bobupanddown, facecamera, p19, rotate, texturedict, texturename, drawonents)
    assert(type(type) == 'integer', 'Argument type must be of type integer.')
    assert(type(posx) == 'number', 'Argument posx must be of type number.')
    assert(type(posy) == 'number', 'Argument posy must be of type number.')
    assert(type(posz) == 'number', 'Argument posz must be of type number.')
    assert(type(dirx) == 'number', 'Argument dirx must be of type number.')
    assert(type(diry) == 'number', 'Argument diry must be of type number.')
    assert(type(dirz) == 'number', 'Argument dirz must be of type number.')
    assert(type(rotx) == 'number', 'Argument rotx must be of type number.')
    assert(type(roty) == 'number', 'Argument roty must be of type number.')
    assert(type(rotz) == 'number', 'Argument rotz must be of type number.')
    assert(type(scalex) == 'number', 'Argument scalex must be of type number.')
    assert(type(scaley) == 'number', 'Argument scaley must be of type number.')
    assert(type(scalez) == 'number', 'Argument scalez must be of type number.')
    assert(type(red) == 'integer', 'Argument red must be of type integer.')
    assert(type(green) == 'integer', 'Argument green must be of type integer.')
    assert(type(blue) == 'integer', 'Argument blue must be of type integer.')
    assert(type(alpha) == 'integer', 'Argument alpha must be of type integer.')
    assert(type(bobupanddown) == 'boolean', 'Argument bobupanddown must be of type boolean.')
    assert(type(facecamera) == 'boolean', 'Argument facecamera must be of type boolean.')
    assert(type(p19) == 'integer', 'Argument p19 must be of type integer.')
    assert(type(rotate) == 'boolean', 'Argument rotate must be of type boolean.')
    assert(type(texturedict) == 'string', 'Argument texturedict must be of type string.')
    assert(type(texturename) == 'string', 'Argument texturename must be of type string.')
    assert(type(drawonents) == 'boolean', 'Argument drawonents must be of type boolean.')

    local call = natives.invoke(0x2A32FAA57B937173, 'void', type, posx, posy, posz, dirx, diry, dirz, rotx, roty, rotz, scalex, scaley, scalez, red, green, blue, alpha, bobupanddown, facecamera, p19, rotate, texturedict, texturename, drawonents)
end

--- @param typehash integer
--- @param posx1 number
--- @param posy1 number
--- @param posz1 number
--- @param posx2 number
--- @param posy2 number
--- @param posz2 number
--- @param radius number
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
--- @param reserved integer
--- @return number
natives.graphics_createCheckpointWithNamehash = function(typehash, posx1, posy1, posz1, posx2, posy2, posz2, radius, red, green, blue, alpha, reserved)
    assert(type(typehash) == 'integer', 'Argument typehash must be of type integer.')
    assert(type(posx1) == 'number', 'Argument posx1 must be of type number.')
    assert(type(posy1) == 'number', 'Argument posy1 must be of type number.')
    assert(type(posz1) == 'number', 'Argument posz1 must be of type number.')
    assert(type(posx2) == 'number', 'Argument posx2 must be of type number.')
    assert(type(posy2) == 'number', 'Argument posy2 must be of type number.')
    assert(type(posz2) == 'number', 'Argument posz2 must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(red) == 'integer', 'Argument red must be of type integer.')
    assert(type(green) == 'integer', 'Argument green must be of type integer.')
    assert(type(blue) == 'integer', 'Argument blue must be of type integer.')
    assert(type(alpha) == 'integer', 'Argument alpha must be of type integer.')
    assert(type(reserved) == 'integer', 'Argument reserved must be of type integer.')

    local call = natives.invoke(0x175668836B44CBB0, 'int', typehash, posx1, posy1, posz1, posx2, posy2, posz2, radius, red, green, blue, alpha, reserved)
    return call
end

--- @param checkpoint integer
--- @return boolean
natives.graphics_doesCheckpointHaveFx = function(checkpoint)
    assert(type(checkpoint) == 'integer', 'Argument checkpoint must be of type integer.')

    local call = natives.invoke(0x4C11CCACB7C02B6E, 'bool', checkpoint)
    return call
end

-- Sets the checkpoint color.
--- @param checkpoint integer
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
natives.graphics_setCheckpointRgba = function(checkpoint, red, green, blue, alpha)
    assert(type(checkpoint) == 'integer', 'Argument checkpoint must be of type integer.')
    assert(type(red) == 'integer', 'Argument red must be of type integer.')
    assert(type(green) == 'integer', 'Argument green must be of type integer.')
    assert(type(blue) == 'integer', 'Argument blue must be of type integer.')
    assert(type(alpha) == 'integer', 'Argument alpha must be of type integer.')

    local call = natives.invoke(0xCAAFC225E33B1D15, 'void', checkpoint, red, green, blue, alpha)
end

-- Sets the checkpoint icon color.
--- @param checkpoint integer
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
natives.graphics_setCheckpointRgba2 = function(checkpoint, red, green, blue, alpha)
    assert(type(checkpoint) == 'integer', 'Argument checkpoint must be of type integer.')
    assert(type(red) == 'integer', 'Argument red must be of type integer.')
    assert(type(green) == 'integer', 'Argument green must be of type integer.')
    assert(type(blue) == 'integer', 'Argument blue must be of type integer.')
    assert(type(alpha) == 'integer', 'Argument alpha must be of type integer.')

    local call = natives.invoke(0x99AFF17222D4DEB4, 'void', checkpoint, red, green, blue, alpha)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.graphics_n0Xcc3B787E73E64160 = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0xCC3B787E73E64160, 'void', p0, p1, p2, p3, p4)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.graphics_n0X171C18E994C1A395 = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x171C18E994C1A395, 'void', p0, p1, p2, p3, p4)
end

--- @param checkpoint integer
natives.graphics_deleteCheckpoint = function(checkpoint)
    assert(type(checkpoint) == 'integer', 'Argument checkpoint must be of type integer.')

    local call = natives.invoke(0x0DED5B0C8EBAAE12, 'void', checkpoint)
end

-- Draws a rectangle on the screen.
-- 
-- -x: The relative X point of the center of the rectangle. (0.0-1.0, 0.0 is the left edge of the screen, 1.0 is the right edge of the screen)
-- 
-- -y: The relative Y point of the center of the rectangle. (0.0-1.0, 0.0 is the top edge of the screen, 1.0 is the bottom edge of the screen)
-- 
-- -width: The relative width of the rectangle. (0.0-1.0, 1.0 means the whole screen width)
-- 
-- -height: The relative height of the rectangle. (0.0-1.0, 1.0 means the whole screen height)
-- 
-- -R: Red part of the color. (0-255)
-- 
-- -G: Green part of the color. (0-255)
-- 
-- -B: Blue part of the color. (0-255)
-- 
-- -A: Alpha part of the color. (0-255, 0 means totally transparent, 255 means totally opaque)
--- @param x number
--- @param y number
--- @param width number
--- @param height number
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
--- @param p8 boolean
--- @param p9 boolean
natives.graphics_drawRect = function(x, y, width, height, red, green, blue, alpha, p8, p9)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(width) == 'number', 'Argument width must be of type number.')
    assert(type(height) == 'number', 'Argument height must be of type number.')
    assert(type(red) == 'integer', 'Argument red must be of type integer.')
    assert(type(green) == 'integer', 'Argument green must be of type integer.')
    assert(type(blue) == 'integer', 'Argument blue must be of type integer.')
    assert(type(alpha) == 'integer', 'Argument alpha must be of type integer.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')
    assert(type(p9) == 'boolean', 'Argument p9 must be of type boolean.')

    local call = natives.invoke(0x405224591DF02025, 'void', x, y, width, height, red, green, blue, alpha, p8, p9)
end

-- Sets a flag defining whether or not script draw commands should continue being drawn behind the pause menu. This is usually used for draw commands that are used with a world render target.
--- @param toggle boolean
natives.graphics_setScriptGfxDrawBehindPausemenu = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x906B86E6D7896B9E, 'void', toggle)
end

-- Sets the draw order for script draw commands.
--- @param draworder integer
natives.graphics_setScriptGfxDrawOrder = function(draworder)
    assert(type(draworder) == 'integer', 'Argument draworder must be of type integer.')

    local call = natives.invoke(0xCFCC78391C8B3814, 'void', draworder)
end

-- Draws a 2D sprite on the screen.
-- 
-- Parameters:
-- textureDict - Name of texture dictionary to load texture from
-- 
-- textureName - Name of texture to load from texture dictionary
-- 
-- screenX/Y - Screen offset (0.5 = center)
-- scaleX/Y - Texture scaling. Negative values can be used to flip the texture on that axis. (0.5 = half)
-- 
-- heading - Texture rotation in degrees (default = 0.0) positive is clockwise, measured in degrees
-- 
-- red,green,blue - Sprite color (default = 255/255/255)
-- 
-- alpha - opacity level
-- 
-- https:--github.com/femga/rdr3_discoveries/tree/master/useful_info_from_rpfs/textures
--- @param texturedict string
--- @param texturename string
--- @param screenx number
--- @param screeny number
--- @param width number
--- @param height number
--- @param heading number
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
--- @param p11 boolean
natives.graphics_drawSprite = function(texturedict, texturename, screenx, screeny, width, height, heading, red, green, blue, alpha, p11)
    assert(type(texturedict) == 'string', 'Argument texturedict must be of type string.')
    assert(type(texturename) == 'string', 'Argument texturename must be of type string.')
    assert(type(screenx) == 'number', 'Argument screenx must be of type number.')
    assert(type(screeny) == 'number', 'Argument screeny must be of type number.')
    assert(type(width) == 'number', 'Argument width must be of type number.')
    assert(type(height) == 'number', 'Argument height must be of type number.')
    assert(type(heading) == 'number', 'Argument heading must be of type number.')
    assert(type(red) == 'integer', 'Argument red must be of type integer.')
    assert(type(green) == 'integer', 'Argument green must be of type integer.')
    assert(type(blue) == 'integer', 'Argument blue must be of type integer.')
    assert(type(alpha) == 'integer', 'Argument alpha must be of type integer.')
    assert(type(p11) == 'boolean', 'Argument p11 must be of type boolean.')

    local call = natives.invoke(0xC9884ECADE94CB34, 'void', texturedict, texturename, screenx, screeny, width, height, heading, red, green, blue, alpha, p11)
end

--- @param entity integer
natives.graphics_attachTvAudioToEntity = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x40866A418EB8EFDE, 'void', entity)
end

-- Probably changes tvs from being a 3d audio to being "global" audio
--- @param toggle boolean
natives.graphics_setTvAudioFrontend = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x64437C98FCC5F291, 'void', toggle)
end

-- Hardcoded to always set x to 1280 and y to 720.
--- @param x integer
--- @param y integer
natives.graphics_getScreenResolution = function(x, y)
    assert(type(x) == 'integer', 'Argument x must be of type integer.')
    assert(type(y) == 'integer', 'Argument y must be of type integer.')

    local call = natives.invoke(0x66773C92835D0909, 'void', x, y)
end

--- @param p0 userdata
--- @param p1 userdata
natives.graphics_n0Xa04Ef43030593Abc = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xA04EF43030593ABC, 'void', p0, p1)
end

natives.graphics_n0Xa21Af60C9F99Ccc5 = function()

    local call = natives.invoke(0xA21AF60C9F99CCC5, 'void')
end

--- @return any
natives.graphics_n0Xc28F62Ac9774Fc1B = function()

    local call = natives.invoke(0xC28F62AC9774FC1B, 'any')
    return call
end

--- @param p0 userdata
natives.graphics_n0Xeb48Ce48Eec41Fd4 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xEB48CE48EEC41FD4, 'void', p0)
end

--- @param worldx number
--- @param worldy number
--- @param worldz number
--- @param screenx integer
--- @param screeny integer
--- @return boolean
natives.graphics_getScreenCoordFromWorldCoord = function(worldx, worldy, worldz, screenx, screeny)
    assert(type(worldx) == 'number', 'Argument worldx must be of type number.')
    assert(type(worldy) == 'number', 'Argument worldy must be of type number.')
    assert(type(worldz) == 'number', 'Argument worldz must be of type number.')
    assert(type(screenx) == 'integer', 'Argument screenx must be of type integer.')
    assert(type(screeny) == 'integer', 'Argument screeny must be of type integer.')

    local call = natives.invoke(0xCB50D7AFCC8B0EC6, 'bool', worldx, worldy, worldz, screenx, screeny)
    return call
end

--- @param txdhash integer
--- @param dict integer
--- @return boolean
natives.graphics_isTextureInDict = function(txdhash, dict)
    assert(type(txdhash) == 'integer', 'Argument txdhash must be of type integer.')
    assert(type(dict) == 'integer', 'Argument dict must be of type integer.')

    local call = natives.invoke(0xA2A51869BDED733B, 'bool', txdhash, dict)
    return call
end

-- Does not affect weapons, particles, fire/explosions, flashlights or the sun.
-- When set to true, all emissive textures (including ped components that have light effects), street lights, building lights, vehicle lights, etc will all be turned off.
-- 
-- state: True turns off all artificial light sources in the map: buildings, street lights, car lights, etc. False turns them back on.
--- @param state boolean
natives.graphics_setArtificialLightsState = function(state)
    assert(type(state) == 'boolean', 'Argument state must be of type boolean.')

    local call = natives.invoke(0xB2797619A7C7747B, 'void', state)
end

natives.graphics_disableHdtexThisFrame = function()

    local call = natives.invoke(0x98A7CD5EA379A854, 'void')
end

-- Used in shop scripts for CATALOG_BOOK
-- false = Normal -> [CATALOG_BOOK_SHUTDOWN]
-- true = Trees flickering? -> [CATALOG_BOOK_OPEN]
--- @param p0 boolean
natives.graphics_n0X1A9F09Ab458D49C6 = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x1A9F09AB458D49C6, 'void', p0)
end

-- Creates a tracked point, useful for checking the visibility of a 3D point on screen.
--- @return number
natives.graphics_createTrackedPoint = function()

    local call = natives.invoke(0xFB405CB357C69CB9, 'int')
    return call
end

--- @param point integer
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
natives.graphics_setTrackedPointInfo = function(point, x, y, z, radius)
    assert(type(point) == 'integer', 'Argument point must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')

    local call = natives.invoke(0xF6FDA3D4404D4F2C, 'void', point, x, y, z, radius)
end

--- @param point integer
--- @return boolean
natives.graphics_isTrackedPointVisible = function(point)
    assert(type(point) == 'integer', 'Argument point must be of type integer.')

    local call = natives.invoke(0xCBB056BA159FB48D, 'bool', point)
    return call
end

-- Returns iNumPixels, iPixelsVisible
--- @param itrackedpoint integer
--- @return number
natives.graphics_n0Xdfe332A5Da6Fe7C9 = function(itrackedpoint)
    assert(type(itrackedpoint) == 'integer', 'Argument itrackedpoint must be of type integer.')

    local call = natives.invoke(0xDFE332A5DA6FE7C9, 'int', itrackedpoint)
    return call
end

--- @param point integer
natives.graphics_destroyTrackedPoint = function(point)
    assert(type(point) == 'integer', 'Argument point must be of type integer.')

    local call = natives.invoke(0x37A59922109F8F1C, 'void', point)
end

--- @param point integer
--- @return boolean
natives.graphics_isTrackedPointValid = function(point)
    assert(type(point) == 'integer', 'Argument point must be of type integer.')

    local call = natives.invoke(0xF2FDDCC8C6BAE1B3, 'bool', point)
    return call
end

-- Returns handle to be used with REMOVE_GRASS_CULL_SPHERE
--- @param x number
--- @param y number
--- @param z number
--- @param p3 number
--- @param p4 integer
--- @return number
natives.graphics_setGrassCullSphere = function(x, y, z, p3, p4)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')

    local call = natives.invoke(0x27219300C36A8D40, 'int', x, y, z, p3, p4)
    return call
end

--- @param handle integer
natives.graphics_removeGrassCullSphere = function(handle)
    assert(type(handle) == 'integer', 'Argument handle must be of type integer.')

    local call = natives.invoke(0xAE7BF7CA9E4BA48D, 'void', handle)
end

-- Adds Vegetation Blocking Zone, Added Snow Flattening veg mod Zone
-- Returns veg modifier handle
--- @param volume integer
--- @param p1 integer
--- @param flags integer
--- @param p3 integer
--- @return number
natives.graphics_addVegModifierZone = function(volume, p1, flags, p3)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')

    local call = natives.invoke(0xBD3324281E8B9933, 'int', volume, p1, flags, p3)
    return call
end

-- Returns veg modifier handle
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param modtype integer
--- @param flags integer
--- @param p6 integer
--- @return number
natives.graphics_addVegModifierSphere = function(x, y, z, radius, modtype, flags, p6)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(modtype) == 'integer', 'Argument modtype must be of type integer.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')
    assert(type(p6) == 'integer', 'Argument p6 must be of type integer.')

    local call = natives.invoke(0xFA50F79257745E74, 'int', x, y, z, radius, modtype, flags, p6)
    return call
end

--- @param vegmodifierhandle integer
--- @param p1 integer
natives.graphics_removeVegModifierSphere = function(vegmodifierhandle, p1)
    assert(type(vegmodifierhandle) == 'integer', 'Argument vegmodifierhandle must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x9CF1836C03FB67A2, 'void', vegmodifierhandle, p1)
end

--- @param p0 integer
natives.graphics_enableStaticVegModifier = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0xDFEA23EC90113657, 'void', p0)
end

--- @param p0 integer
natives.graphics_disableStaticVegModifier = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0xDD0BC0EDCB2162F6, 'void', p0)
end

--- @param p0 integer
--- @return boolean
natives.graphics_isStaticVegModifierEnabled = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0xDE9BAD3292AA6D5E, 'bool', p0)
    return call
end

natives.graphics_n0Xec3F7F24Eeeb3Ba3 = function()

    local call = natives.invoke(0xEC3F7F24EEEB3BA3, 'void')
end

--- @param p0 userdata
natives.graphics_n0X9F158A49B0D84C3C = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x9F158A49B0D84C3C, 'void', p0)
end

natives.graphics_n0X910E260Aead855De = function()

    local call = natives.invoke(0x910E260AEAD855DE, 'void')
end

--- @param slots integer
--- @return boolean
natives.graphics_createSwatchTextureDict = function(slots)
    assert(type(slots) == 'integer', 'Argument slots must be of type integer.')

    local call = natives.invoke(0x3D084D5568FB4028, 'bool', slots)
    return call
end

natives.graphics_destroySwatchTextureDict = function()

    local call = natives.invoke(0xDAD7FB8402651654, 'void')
end

-- Example: https:--pastebin.com/tTgpER9A
--- @param slot integer
--- @param p1 userdata
natives.graphics_generateSwatchTextureDirectly = function(slot, p1)
    assert(type(slot) == 'integer', 'Argument slot must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x646ED1A1D28487DF, 'void', slot, p1)
end

-- Example:
-- local hash = GetHashKey("CLOTHING_ITEM_M_EYES_001_TINT_001")
-- _GENERATE_SWATCH_TEXTURE(0, hash, 0, true)
-- metapedType: see 0xEC9A1261BF0CE510
--- @param slotid integer
--- @param componenthash integer
--- @param metapedtype integer
--- @param p3 boolean
natives.graphics_generateSwatchTexture = function(slotid, componenthash, metapedtype, p3)
    assert(type(slotid) == 'integer', 'Argument slotid must be of type integer.')
    assert(type(componenthash) == 'integer', 'Argument componenthash must be of type integer.')
    assert(type(metapedtype) == 'integer', 'Argument metapedtype must be of type integer.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0x160921255327C591, 'void', slotid, componenthash, metapedtype, p3)
end

--- @param p0 userdata
--- @param p1 boolean
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 boolean
--- @param p7 number
natives.graphics_cascadeShadowsSetCascadeBounds = function(p0, p1, p2, p3, p4, p5, p6, p7)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')
    assert(type(p7) == 'number', 'Argument p7 must be of type number.')

    local call = natives.invoke(0xD9EDB2E4512D563E, 'void', p0, p1, p2, p3, p4, p5, p6, p7)
end

-- When this is set to ON, shadows only draw as you get nearer.
-- 
-- When OFF, they draw from a further distance.
--- @param toggle boolean
natives.graphics_cascadeShadowsEnableEntityTracker = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x8FBFD2AEB196B369, 'void', toggle)
end

-- Possible values:
-- "CSM_ST_POINT"
-- "CSM_ST_LINEAR"
-- "CSM_ST_BOX3x3"
-- "CSM_ST_BOX4x4"
-- "CSM_ST_DITHER2_LINEAR"
-- "CSM_ST_CUBIC"
-- "CSM_ST_POISSON16"
-- "CSM_ST_SOFT8"
-- "CSM_ST_SOFT16"
-- "CSM_ST_SOFT32"
-- "CSM_ST_DITHER16_RPDB"
-- "CSM_ST_POISSON16_RPDB_GNORM"
-- "CSM_ST_HIGHRES_BOX4x4"
-- "CSM_ST_ESM"
--- @param type string
natives.graphics_cascadeShadowsSetShadowSampleType = function(type)
    assert(type(type) == 'string', 'Argument type must be of type string.')

    local call = natives.invoke(0xCE4774E0F9AD48D1, 'void', type)
end

natives.graphics_cascadeShadowsClearShadowSampleType = function()

    local call = natives.invoke(0xF7C29D7C12C36F03, 'void')
end

--- @param p0 userdata
natives.graphics_n0X503941F65Dba24Ec = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x503941F65DBA24EC, 'void', p0)
end

natives.graphics_n0X815653A42C5Abe76 = function()

    local call = natives.invoke(0x815653A42C5ABE76, 'void')
end

--- @param p0 userdata
natives.graphics_n0Xff8018C778349234 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xFF8018C778349234, 'void', p0)
end

-- Sets an unknown value related to timecycles.
--- @param unk integer
natives.graphics_resetAdaptation = function(unk)
    assert(type(unk) == 'integer', 'Argument unk must be of type integer.')

    local call = natives.invoke(0x297B72E2AF094742, 'void', unk)
end

--- @param toggle boolean
natives.graphics_togglePausedRenderphases = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xEF9E1C45732F55FA, 'void', toggle)
end

--- @return boolean
natives.graphics_getTogglePausedRenderphasesStatus = function()

    local call = natives.invoke(0x86ED21BDB2791CE8, 'bool')
    return call
end

natives.graphics_resetPausedRenderphases = function()

    local call = natives.invoke(0xCCD9AAD85E1B559E, 'void')
end

-- Old name: _SET_HIDOF_ENV_BLUR_PARAMS
--- @param p0 boolean
--- @param p1 boolean
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
natives.graphics_setHidofOverride = function(p0, p1, p2, p3, p4, p5)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')

    local call = natives.invoke(0xCC23AA1A7CBFE840, 'void', p0, p1, p2, p3, p4, p5)
end

-- Params: component - used in odriscolls1 and sean1 R* SP Script: COMPONENT_BINOCULARS_SCOPE01
-- Triggers the binocular scaleform
--- @param component string
natives.graphics_n0X21F00E08Cbb5F37B = function(component)
    assert(type(component) == 'string', 'Argument component must be of type string.')

    local call = natives.invoke(0x21F00E08CBB5F37B, 'void', component)
end

-- Closes the the binocular scaleform
natives.graphics_n0X5Ac6E0Fa028369De = function()

    local call = natives.invoke(0x5AC6E0FA028369DE, 'void')
end

--- @param p0 boolean
--- @return boolean
natives.graphics_n0Xec3D8C228Fe553D7 = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0xEC3D8C228FE553D7, 'bool', p0)
    return call
end

--- @param p0 userdata
natives.graphics_n0Xf5793Bb386E1Ff9C = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xF5793BB386E1FF9C, 'void', p0)
end

--- @param p0 userdata
natives.graphics_n0X5Cd6A2Cce5087161 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x5CD6A2CCE5087161, 'void', p0)
end

--- @param p0 userdata
natives.graphics_n0Xc8D0611D9A0Cf5D3 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xC8D0611D9A0CF5D3, 'void', p0)
end

--- @return number
natives.graphics_getPhotoModeExposure = function()

    local call = natives.invoke(0x06C0D8BB6B04A709, 'float')
    return call
end

--- @param p0 userdata
natives.graphics_n0X62B9F9A1272Aed80 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x62B9F9A1272AED80, 'void', p0)
end

--- @return number
natives.graphics_getPhotoModeContrast = function()

    local call = natives.invoke(0x98F4154989B81EC6, 'float')
    return call
end

natives.graphics_n0X9229Ed770975Bd9E = function()

    local call = natives.invoke(0x9229ED770975BD9E, 'void')
end

-- https:--github.com/femga/rdr3_discoveries/blob/master/graphics/ptfx/ptfx_assets_non_looped.lua
--- @param effectname string
--- @param xpos number
--- @param ypos number
--- @param zpos number
--- @param xrot number
--- @param yrot number
--- @param zrot number
--- @param scale number
--- @param xaxis boolean
--- @param yaxis boolean
--- @param zaxis boolean
--- @return boolean
natives.graphics_startParticleFxNonLoopedAtCoord = function(effectname, xpos, ypos, zpos, xrot, yrot, zrot, scale, xaxis, yaxis, zaxis)
    assert(type(effectname) == 'string', 'Argument effectname must be of type string.')
    assert(type(xpos) == 'number', 'Argument xpos must be of type number.')
    assert(type(ypos) == 'number', 'Argument ypos must be of type number.')
    assert(type(zpos) == 'number', 'Argument zpos must be of type number.')
    assert(type(xrot) == 'number', 'Argument xrot must be of type number.')
    assert(type(yrot) == 'number', 'Argument yrot must be of type number.')
    assert(type(zrot) == 'number', 'Argument zrot must be of type number.')
    assert(type(scale) == 'number', 'Argument scale must be of type number.')
    assert(type(xaxis) == 'boolean', 'Argument xaxis must be of type boolean.')
    assert(type(yaxis) == 'boolean', 'Argument yaxis must be of type boolean.')
    assert(type(zaxis) == 'boolean', 'Argument zaxis must be of type boolean.')

    local call = natives.invoke(0x2E80BF72EF7C87AC, 'bool', effectname, xpos, ypos, zpos, xrot, yrot, zrot, scale, xaxis, yaxis, zaxis)
    return call
end

--- @param effectname string
--- @param xpos number
--- @param ypos number
--- @param zpos number
--- @param xrot number
--- @param yrot number
--- @param zrot number
--- @param scale number
--- @param xaxis boolean
--- @param yaxis boolean
--- @param zaxis boolean
--- @return boolean
natives.graphics_startNetworkedParticleFxNonLoopedAtCoord = function(effectname, xpos, ypos, zpos, xrot, yrot, zrot, scale, xaxis, yaxis, zaxis)
    assert(type(effectname) == 'string', 'Argument effectname must be of type string.')
    assert(type(xpos) == 'number', 'Argument xpos must be of type number.')
    assert(type(ypos) == 'number', 'Argument ypos must be of type number.')
    assert(type(zpos) == 'number', 'Argument zpos must be of type number.')
    assert(type(xrot) == 'number', 'Argument xrot must be of type number.')
    assert(type(yrot) == 'number', 'Argument yrot must be of type number.')
    assert(type(zrot) == 'number', 'Argument zrot must be of type number.')
    assert(type(scale) == 'number', 'Argument scale must be of type number.')
    assert(type(xaxis) == 'boolean', 'Argument xaxis must be of type boolean.')
    assert(type(yaxis) == 'boolean', 'Argument yaxis must be of type boolean.')
    assert(type(zaxis) == 'boolean', 'Argument zaxis must be of type boolean.')

    local call = natives.invoke(0xFB97618457994A62, 'bool', effectname, xpos, ypos, zpos, xrot, yrot, zrot, scale, xaxis, yaxis, zaxis)
    return call
end

--- @param effectname string
--- @param ped integer
--- @param offsetx number
--- @param offsety number
--- @param offsetz number
--- @param rotx number
--- @param roty number
--- @param rotz number
--- @param boneindex integer
--- @param scale number
--- @param axisx boolean
--- @param axisy boolean
--- @param axisz boolean
--- @return boolean
natives.graphics_startParticleFxNonLoopedOnPedBone = function(effectname, ped, offsetx, offsety, offsetz, rotx, roty, rotz, boneindex, scale, axisx, axisy, axisz)
    assert(type(effectname) == 'string', 'Argument effectname must be of type string.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(offsetx) == 'number', 'Argument offsetx must be of type number.')
    assert(type(offsety) == 'number', 'Argument offsety must be of type number.')
    assert(type(offsetz) == 'number', 'Argument offsetz must be of type number.')
    assert(type(rotx) == 'number', 'Argument rotx must be of type number.')
    assert(type(roty) == 'number', 'Argument roty must be of type number.')
    assert(type(rotz) == 'number', 'Argument rotz must be of type number.')
    assert(type(boneindex) == 'integer', 'Argument boneindex must be of type integer.')
    assert(type(scale) == 'number', 'Argument scale must be of type number.')
    assert(type(axisx) == 'boolean', 'Argument axisx must be of type boolean.')
    assert(type(axisy) == 'boolean', 'Argument axisy must be of type boolean.')
    assert(type(axisz) == 'boolean', 'Argument axisz must be of type boolean.')

    local call = natives.invoke(0x3FAA72BD940C3AC0, 'bool', effectname, ped, offsetx, offsety, offsetz, rotx, roty, rotz, boneindex, scale, axisx, axisy, axisz)
    return call
end

--- @param effectname string
--- @param entity integer
--- @param offsetx number
--- @param offsety number
--- @param offsetz number
--- @param rotx number
--- @param roty number
--- @param rotz number
--- @param scale number
--- @param axisx boolean
--- @param axisy boolean
--- @param axisz boolean
--- @return boolean
natives.graphics_startParticleFxNonLoopedOnEntity = function(effectname, entity, offsetx, offsety, offsetz, rotx, roty, rotz, scale, axisx, axisy, axisz)
    assert(type(effectname) == 'string', 'Argument effectname must be of type string.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(offsetx) == 'number', 'Argument offsetx must be of type number.')
    assert(type(offsety) == 'number', 'Argument offsety must be of type number.')
    assert(type(offsetz) == 'number', 'Argument offsetz must be of type number.')
    assert(type(rotx) == 'number', 'Argument rotx must be of type number.')
    assert(type(roty) == 'number', 'Argument roty must be of type number.')
    assert(type(rotz) == 'number', 'Argument rotz must be of type number.')
    assert(type(scale) == 'number', 'Argument scale must be of type number.')
    assert(type(axisx) == 'boolean', 'Argument axisx must be of type boolean.')
    assert(type(axisy) == 'boolean', 'Argument axisy must be of type boolean.')
    assert(type(axisz) == 'boolean', 'Argument axisz must be of type boolean.')

    local call = natives.invoke(0xFF4C64C513388C12, 'bool', effectname, entity, offsetx, offsety, offsetz, rotx, roty, rotz, scale, axisx, axisy, axisz)
    return call
end

--- @param effectname string
--- @param entity integer
--- @param offsetx number
--- @param offsety number
--- @param offsetz number
--- @param rotx number
--- @param roty number
--- @param rotz number
--- @param scale number
--- @param axisx boolean
--- @param axisy boolean
--- @param axisz boolean
--- @return boolean
natives.graphics_startNetworkedParticleFxNonLoopedOnEntity = function(effectname, entity, offsetx, offsety, offsetz, rotx, roty, rotz, scale, axisx, axisy, axisz)
    assert(type(effectname) == 'string', 'Argument effectname must be of type string.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(offsetx) == 'number', 'Argument offsetx must be of type number.')
    assert(type(offsety) == 'number', 'Argument offsety must be of type number.')
    assert(type(offsetz) == 'number', 'Argument offsetz must be of type number.')
    assert(type(rotx) == 'number', 'Argument rotx must be of type number.')
    assert(type(roty) == 'number', 'Argument roty must be of type number.')
    assert(type(rotz) == 'number', 'Argument rotz must be of type number.')
    assert(type(scale) == 'number', 'Argument scale must be of type number.')
    assert(type(axisx) == 'boolean', 'Argument axisx must be of type boolean.')
    assert(type(axisy) == 'boolean', 'Argument axisy must be of type boolean.')
    assert(type(axisz) == 'boolean', 'Argument axisz must be of type boolean.')

    local call = natives.invoke(0xE6CFE43937061143, 'bool', effectname, entity, offsetx, offsety, offsetz, rotx, roty, rotz, scale, axisx, axisy, axisz)
    return call
end

--- @param effectname string
--- @param ped integer
--- @param offsetx number
--- @param offsety number
--- @param offsetz number
--- @param rotx number
--- @param roty number
--- @param rotz number
--- @param boneindex integer
--- @param scale number
--- @param axisx boolean
--- @param axisy boolean
--- @param axisz boolean
--- @return boolean
natives.graphics_startParticleFxNonLoopedOnPedBone2 = function(effectname, ped, offsetx, offsety, offsetz, rotx, roty, rotz, boneindex, scale, axisx, axisy, axisz)
    assert(type(effectname) == 'string', 'Argument effectname must be of type string.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(offsetx) == 'number', 'Argument offsetx must be of type number.')
    assert(type(offsety) == 'number', 'Argument offsety must be of type number.')
    assert(type(offsetz) == 'number', 'Argument offsetz must be of type number.')
    assert(type(rotx) == 'number', 'Argument rotx must be of type number.')
    assert(type(roty) == 'number', 'Argument roty must be of type number.')
    assert(type(rotz) == 'number', 'Argument rotz must be of type number.')
    assert(type(boneindex) == 'integer', 'Argument boneindex must be of type integer.')
    assert(type(scale) == 'number', 'Argument scale must be of type number.')
    assert(type(axisx) == 'boolean', 'Argument axisx must be of type boolean.')
    assert(type(axisy) == 'boolean', 'Argument axisy must be of type boolean.')
    assert(type(axisz) == 'boolean', 'Argument axisz must be of type boolean.')

    local call = natives.invoke(0xC695870B8A149B96, 'bool', effectname, ped, offsetx, offsety, offsetz, rotx, roty, rotz, boneindex, scale, axisx, axisy, axisz)
    return call
end

--- @param r number
--- @param g number
--- @param b number
natives.graphics_setParticleFxNonLoopedColour = function(r, g, b)
    assert(type(r) == 'number', 'Argument r must be of type number.')
    assert(type(g) == 'number', 'Argument g must be of type number.')
    assert(type(b) == 'number', 'Argument b must be of type number.')

    local call = natives.invoke(0x60B85BED6577A35B, 'void', r, g, b)
end

--- @param alpha number
natives.graphics_setParticleFxNonLoopedAlpha = function(alpha)
    assert(type(alpha) == 'number', 'Argument alpha must be of type number.')

    local call = natives.invoke(0xE8A35938A7026CEA, 'void', alpha)
end

--- @param p0 number
--- @param p1 number
--- @param p2 number
natives.graphics_setParticleFxNonLoopedEmitterScale = function(p0, p1, p2)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')

    local call = natives.invoke(0x56C392C2BD78B024, 'void', p0, p1, p2)
end

-- https:--github.com/femga/rdr3_discoveries/blob/master/graphics/ptfx/ptfx_assets_looped.lua
--- @param effectname string
--- @param x number
--- @param y number
--- @param z number
--- @param xrot number
--- @param yrot number
--- @param zrot number
--- @param scale number
--- @param xaxis boolean
--- @param yaxis boolean
--- @param zaxis boolean
--- @param p11 boolean
--- @return number
natives.graphics_startParticleFxLoopedAtCoord = function(effectname, x, y, z, xrot, yrot, zrot, scale, xaxis, yaxis, zaxis, p11)
    assert(type(effectname) == 'string', 'Argument effectname must be of type string.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(xrot) == 'number', 'Argument xrot must be of type number.')
    assert(type(yrot) == 'number', 'Argument yrot must be of type number.')
    assert(type(zrot) == 'number', 'Argument zrot must be of type number.')
    assert(type(scale) == 'number', 'Argument scale must be of type number.')
    assert(type(xaxis) == 'boolean', 'Argument xaxis must be of type boolean.')
    assert(type(yaxis) == 'boolean', 'Argument yaxis must be of type boolean.')
    assert(type(zaxis) == 'boolean', 'Argument zaxis must be of type boolean.')
    assert(type(p11) == 'boolean', 'Argument p11 must be of type boolean.')

    local call = natives.invoke(0xBA32867E86125D3A, 'int', effectname, x, y, z, xrot, yrot, zrot, scale, xaxis, yaxis, zaxis, p11)
    return call
end

--- @param effectname string
--- @param ped integer
--- @param xoffset number
--- @param yoffset number
--- @param zoffset number
--- @param xrot number
--- @param yrot number
--- @param zrot number
--- @param boneindex integer
--- @param scale number
--- @param xaxis boolean
--- @param yaxis boolean
--- @param zaxis boolean
--- @return number
natives.graphics_startParticleFxLoopedOnPedBone = function(effectname, ped, xoffset, yoffset, zoffset, xrot, yrot, zrot, boneindex, scale, xaxis, yaxis, zaxis)
    assert(type(effectname) == 'string', 'Argument effectname must be of type string.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(xoffset) == 'number', 'Argument xoffset must be of type number.')
    assert(type(yoffset) == 'number', 'Argument yoffset must be of type number.')
    assert(type(zoffset) == 'number', 'Argument zoffset must be of type number.')
    assert(type(xrot) == 'number', 'Argument xrot must be of type number.')
    assert(type(yrot) == 'number', 'Argument yrot must be of type number.')
    assert(type(zrot) == 'number', 'Argument zrot must be of type number.')
    assert(type(boneindex) == 'integer', 'Argument boneindex must be of type integer.')
    assert(type(scale) == 'number', 'Argument scale must be of type number.')
    assert(type(xaxis) == 'boolean', 'Argument xaxis must be of type boolean.')
    assert(type(yaxis) == 'boolean', 'Argument yaxis must be of type boolean.')
    assert(type(zaxis) == 'boolean', 'Argument zaxis must be of type boolean.')

    local call = natives.invoke(0xE689C1B1432BB8AF, 'int', effectname, ped, xoffset, yoffset, zoffset, xrot, yrot, zrot, boneindex, scale, xaxis, yaxis, zaxis)
    return call
end

--- @param effectname string
--- @param entity integer
--- @param xoffset number
--- @param yoffset number
--- @param zoffset number
--- @param xrot number
--- @param yrot number
--- @param zrot number
--- @param scale number
--- @param xaxis boolean
--- @param yaxis boolean
--- @param zaxis boolean
--- @return number
natives.graphics_startParticleFxLoopedOnEntity = function(effectname, entity, xoffset, yoffset, zoffset, xrot, yrot, zrot, scale, xaxis, yaxis, zaxis)
    assert(type(effectname) == 'string', 'Argument effectname must be of type string.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(xoffset) == 'number', 'Argument xoffset must be of type number.')
    assert(type(yoffset) == 'number', 'Argument yoffset must be of type number.')
    assert(type(zoffset) == 'number', 'Argument zoffset must be of type number.')
    assert(type(xrot) == 'number', 'Argument xrot must be of type number.')
    assert(type(yrot) == 'number', 'Argument yrot must be of type number.')
    assert(type(zrot) == 'number', 'Argument zrot must be of type number.')
    assert(type(scale) == 'number', 'Argument scale must be of type number.')
    assert(type(xaxis) == 'boolean', 'Argument xaxis must be of type boolean.')
    assert(type(yaxis) == 'boolean', 'Argument yaxis must be of type boolean.')
    assert(type(zaxis) == 'boolean', 'Argument zaxis must be of type boolean.')

    local call = natives.invoke(0xBD41E1440CE39800, 'int', effectname, entity, xoffset, yoffset, zoffset, xrot, yrot, zrot, scale, xaxis, yaxis, zaxis)
    return call
end

--- @param effectname string
--- @param entity integer
--- @param xoffset number
--- @param yoffset number
--- @param zoffset number
--- @param xrot number
--- @param yrot number
--- @param zrot number
--- @param boneindex integer
--- @param scale number
--- @param xaxis boolean
--- @param yaxis boolean
--- @param zaxis boolean
--- @return number
natives.graphics_startParticleFxLoopedOnEntityBone = function(effectname, entity, xoffset, yoffset, zoffset, xrot, yrot, zrot, boneindex, scale, xaxis, yaxis, zaxis)
    assert(type(effectname) == 'string', 'Argument effectname must be of type string.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(xoffset) == 'number', 'Argument xoffset must be of type number.')
    assert(type(yoffset) == 'number', 'Argument yoffset must be of type number.')
    assert(type(zoffset) == 'number', 'Argument zoffset must be of type number.')
    assert(type(xrot) == 'number', 'Argument xrot must be of type number.')
    assert(type(yrot) == 'number', 'Argument yrot must be of type number.')
    assert(type(zrot) == 'number', 'Argument zrot must be of type number.')
    assert(type(boneindex) == 'integer', 'Argument boneindex must be of type integer.')
    assert(type(scale) == 'number', 'Argument scale must be of type number.')
    assert(type(xaxis) == 'boolean', 'Argument xaxis must be of type boolean.')
    assert(type(yaxis) == 'boolean', 'Argument yaxis must be of type boolean.')
    assert(type(zaxis) == 'boolean', 'Argument zaxis must be of type boolean.')

    local call = natives.invoke(0xD3BA6EC7F2FBD5E9, 'int', effectname, entity, xoffset, yoffset, zoffset, xrot, yrot, zrot, boneindex, scale, xaxis, yaxis, zaxis)
    return call
end

--- @param effectname string
--- @param entity integer
--- @param xoffset number
--- @param yoffset number
--- @param zoffset number
--- @param xrot number
--- @param yrot number
--- @param zrot number
--- @param scale number
--- @param xaxis boolean
--- @param yaxis boolean
--- @param zaxis boolean
--- @return number
natives.graphics_startNetworkedParticleFxLoopedOnEntity = function(effectname, entity, xoffset, yoffset, zoffset, xrot, yrot, zrot, scale, xaxis, yaxis, zaxis)
    assert(type(effectname) == 'string', 'Argument effectname must be of type string.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(xoffset) == 'number', 'Argument xoffset must be of type number.')
    assert(type(yoffset) == 'number', 'Argument yoffset must be of type number.')
    assert(type(zoffset) == 'number', 'Argument zoffset must be of type number.')
    assert(type(xrot) == 'number', 'Argument xrot must be of type number.')
    assert(type(yrot) == 'number', 'Argument yrot must be of type number.')
    assert(type(zrot) == 'number', 'Argument zrot must be of type number.')
    assert(type(scale) == 'number', 'Argument scale must be of type number.')
    assert(type(xaxis) == 'boolean', 'Argument xaxis must be of type boolean.')
    assert(type(yaxis) == 'boolean', 'Argument yaxis must be of type boolean.')
    assert(type(zaxis) == 'boolean', 'Argument zaxis must be of type boolean.')

    local call = natives.invoke(0x8F90AB32E1944BDE, 'int', effectname, entity, xoffset, yoffset, zoffset, xrot, yrot, zrot, scale, xaxis, yaxis, zaxis)
    return call
end

--- @param effectname string
--- @param entity integer
--- @param xoffset number
--- @param yoffset number
--- @param zoffset number
--- @param xrot number
--- @param yrot number
--- @param zrot number
--- @param boneindex integer
--- @param scale number
--- @param xaxis boolean
--- @param yaxis boolean
--- @param zaxis boolean
--- @return number
natives.graphics_startNetworkedParticleFxLoopedOnEntityBone = function(effectname, entity, xoffset, yoffset, zoffset, xrot, yrot, zrot, boneindex, scale, xaxis, yaxis, zaxis)
    assert(type(effectname) == 'string', 'Argument effectname must be of type string.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(xoffset) == 'number', 'Argument xoffset must be of type number.')
    assert(type(yoffset) == 'number', 'Argument yoffset must be of type number.')
    assert(type(zoffset) == 'number', 'Argument zoffset must be of type number.')
    assert(type(xrot) == 'number', 'Argument xrot must be of type number.')
    assert(type(yrot) == 'number', 'Argument yrot must be of type number.')
    assert(type(zrot) == 'number', 'Argument zrot must be of type number.')
    assert(type(boneindex) == 'integer', 'Argument boneindex must be of type integer.')
    assert(type(scale) == 'number', 'Argument scale must be of type number.')
    assert(type(xaxis) == 'boolean', 'Argument xaxis must be of type boolean.')
    assert(type(yaxis) == 'boolean', 'Argument yaxis must be of type boolean.')
    assert(type(zaxis) == 'boolean', 'Argument zaxis must be of type boolean.')

    local call = natives.invoke(0x9C56621462FFE7A6, 'int', effectname, entity, xoffset, yoffset, zoffset, xrot, yrot, zrot, boneindex, scale, xaxis, yaxis, zaxis)
    return call
end

--- @param ptfxhandle integer
--- @param p1 boolean
natives.graphics_stopParticleFxLooped = function(ptfxhandle, p1)
    assert(type(ptfxhandle) == 'integer', 'Argument ptfxhandle must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x22970F3A088B133B, 'void', ptfxhandle, p1)
end

--- @param ptfxhandle integer
--- @return boolean
natives.graphics_doesParticleFxLoopedExist = function(ptfxhandle)
    assert(type(ptfxhandle) == 'integer', 'Argument ptfxhandle must be of type integer.')

    local call = natives.invoke(0x9DD5AFF561E88F2A, 'bool', ptfxhandle)
    return call
end

--- @param ptfxhandle integer
--- @param x number
--- @param y number
--- @param z number
--- @param rotx number
--- @param roty number
--- @param rotz number
natives.graphics_setParticleFxLoopedOffsets = function(ptfxhandle, x, y, z, rotx, roty, rotz)
    assert(type(ptfxhandle) == 'integer', 'Argument ptfxhandle must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(rotx) == 'number', 'Argument rotx must be of type number.')
    assert(type(roty) == 'number', 'Argument roty must be of type number.')
    assert(type(rotz) == 'number', 'Argument rotz must be of type number.')

    local call = natives.invoke(0xD3A4A95FC94FE83B, 'void', ptfxhandle, x, y, z, rotx, roty, rotz)
end

--- @param ptfxhandle integer
--- @param propertyname string
--- @param amount number
--- @param nonetwork boolean
natives.graphics_setParticleFxLoopedEvolution = function(ptfxhandle, propertyname, amount, nonetwork)
    assert(type(ptfxhandle) == 'integer', 'Argument ptfxhandle must be of type integer.')
    assert(type(propertyname) == 'string', 'Argument propertyname must be of type string.')
    assert(type(amount) == 'number', 'Argument amount must be of type number.')
    assert(type(nonetwork) == 'boolean', 'Argument nonetwork must be of type boolean.')

    local call = natives.invoke(0x3674F389B0FACD80, 'void', ptfxhandle, propertyname, amount, nonetwork)
end

--- @param ptfxhandle integer
--- @param r number
--- @param g number
--- @param b number
--- @param p4 boolean
natives.graphics_setParticleFxLoopedColour = function(ptfxhandle, r, g, b, p4)
    assert(type(ptfxhandle) == 'integer', 'Argument ptfxhandle must be of type integer.')
    assert(type(r) == 'number', 'Argument r must be of type number.')
    assert(type(g) == 'number', 'Argument g must be of type number.')
    assert(type(b) == 'number', 'Argument b must be of type number.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')

    local call = natives.invoke(0x239879FC61C610CC, 'void', ptfxhandle, r, g, b, p4)
end

--- @param ptfxhandle integer
--- @param alpha number
natives.graphics_setParticleFxLoopedAlpha = function(ptfxhandle, alpha)
    assert(type(ptfxhandle) == 'integer', 'Argument ptfxhandle must be of type integer.')
    assert(type(alpha) == 'number', 'Argument alpha must be of type number.')

    local call = natives.invoke(0x88786E76234F7054, 'void', ptfxhandle, alpha)
end

--- @param ptfxhandle integer
--- @param scale number
natives.graphics_setParticleFxLoopedScale = function(ptfxhandle, scale)
    assert(type(ptfxhandle) == 'integer', 'Argument ptfxhandle must be of type integer.')
    assert(type(scale) == 'number', 'Argument scale must be of type number.')

    local call = natives.invoke(0x1A9E1C0D98D093B7, 'void', ptfxhandle, scale)
end

--- @param ptfxhandle integer
--- @param range number
natives.graphics_setParticleFxLoopedFarClipDist = function(ptfxhandle, range)
    assert(type(ptfxhandle) == 'integer', 'Argument ptfxhandle must be of type integer.')
    assert(type(range) == 'number', 'Argument range must be of type number.')

    local call = natives.invoke(0x9B04D471DA0AD7AA, 'void', ptfxhandle, range)
end

-- _SET_PARTICLE_FX_LOOPED_FA* - _SET_PARTICLE_FX_LOOPED_OF*
--- @param ptfxhandle integer
--- @param scalar number
natives.graphics_setParticleFxLoopedUpdateDistantSmoke = function(ptfxhandle, scalar)
    assert(type(ptfxhandle) == 'integer', 'Argument ptfxhandle must be of type integer.')
    assert(type(scalar) == 'number', 'Argument scalar must be of type number.')

    local call = natives.invoke(0x9DDC222D85D5AF2A, 'void', ptfxhandle, scalar)
end

--- @param ptfxhandle integer
--- @param p1 boolean
natives.graphics_removeParticleFx = function(ptfxhandle, p1)
    assert(type(ptfxhandle) == 'integer', 'Argument ptfxhandle must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x459598F579C98929, 'void', ptfxhandle, p1)
end

--- @param entity integer
natives.graphics_removeParticleFxFromEntity = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x92884B4A49D81325, 'void', entity)
end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
natives.graphics_removeParticleFxInRange = function(x, y, z, radius)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')

    local call = natives.invoke(0x87B5905ECA623B68, 'void', x, y, z, radius)
end

-- fxName: see data_0/data/effects/ptfx/fxlists/
--- @param fxname string
natives.graphics_useParticleFxAsset = function(fxname)
    assert(type(fxname) == 'string', 'Argument fxname must be of type string.')

    local call = natives.invoke(0xA10DB07FC234DD12, 'void', fxname)
end

--- @param oldasset string
--- @param newasset string
natives.graphics_setParticleFxOverride = function(oldasset, newasset)
    assert(type(oldasset) == 'string', 'Argument oldasset must be of type string.')
    assert(type(newasset) == 'string', 'Argument newasset must be of type string.')

    local call = natives.invoke(0xBE711A169E9C7E95, 'void', oldasset, newasset)
end

-- Resets the effect of SET_PARTICLE_FX_OVERRIDE
--- @param name string
natives.graphics_resetParticleFxOverride = function(name)
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0x274B3DABF7E72DEF, 'void', name)
end

-- p1: AMB_ANN_COAL_CHUTE_DIVE, AMB_ANN_COAL_CHUTE
-- p2: EMIT
-- p3: either 0.0f or 1.0f
--- @param entity integer
--- @param p1 string
--- @param p2 string
--- @param p3 number
natives.graphics_n0X4Fb67D172C4476F3 = function(entity, p1, p2, p3)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')
    assert(type(p2) == 'string', 'Argument p2 must be of type string.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')

    local call = natives.invoke(0x4FB67D172C4476F3, 'void', entity, p1, p2, p3)
end

-- Related to Campfires.
-- p1: AMB_BONFIRE_MP, AMB_CAMPFIRE_LRG_MP
--- @param entity integer
--- @param p1 string
--- @param r number
--- @param g number
--- @param b number
natives.graphics_setParticleFxAmbientColour = function(entity, p1, r, g, b)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')
    assert(type(r) == 'number', 'Argument r must be of type number.')
    assert(type(g) == 'number', 'Argument g must be of type number.')
    assert(type(b) == 'number', 'Argument b must be of type number.')

    local call = natives.invoke(0x3C61B52B00848C26, 'void', entity, p1, r, g, b)
end

-- Only used in R* Script nb_stalking_hunter
--- @param p0 number
natives.graphics_n0Xd1472Aff30C103D6 = function(p0)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')

    local call = natives.invoke(0xD1472AFF30C103D6, 'void', p0)
end

--- @param scale number
natives.graphics_setParticleFxBulletImpactScale = function(scale)
    assert(type(scale) == 'number', 'Argument scale must be of type number.')

    local call = natives.invoke(0xA53C8D7D0F8C74D0, 'void', scale)
end

--- @param p0 number
natives.graphics_setParticleFxBulletImpactLodrangeScale = function(p0)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')

    local call = natives.invoke(0x8DCCC98DC0DBF9E4, 'void', p0)
end

--- @param enabled boolean
natives.graphics_setSniperGlintsEnabled = function(enabled)
    assert(type(enabled) == 'boolean', 'Argument enabled must be of type boolean.')

    local call = natives.invoke(0x6E8EB45A4F4460EB, 'void', enabled)
end

--- @param p0 number
natives.graphics_setParticleFxFootLodrangeScale = function(p0)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')

    local call = natives.invoke(0x2A1625858887D4E6, 'void', p0)
end

-- _DISABLE_*
natives.graphics_n0X4046493D2Eeaca0E = function()

    local call = natives.invoke(0x4046493D2EEACA0E, 'void')
end

-- https:--imgur.com/a/I2swSDJ
-- 
-- Old name: _SET_PICKUP_OBJECT_GLOW_ENABLED
--- @param object integer
--- @param toggle boolean
natives.graphics_setPickupLight = function(object, toggle)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x7DFB49BCDB73089A, 'void', object, toggle)
end

--- @param pickupobject integer
--- @param toggle boolean
natives.graphics_blockPickupObjectLight = function(pickupobject, toggle)
    assert(type(pickupobject) == 'integer', 'Argument pickupobject must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x50C14328119E1DD1, 'void', pickupobject, toggle)
end

--- @param pickup integer
--- @param toggle boolean
natives.graphics_blockPickupPlacementLight = function(pickup, toggle)
    assert(type(pickup) == 'integer', 'Argument pickup must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x0552AA3FFC5B87AA, 'void', pickup, toggle)
end

--- @param pickupobject integer
--- @param allow boolean
natives.graphics_allowPickupLightSync = function(pickupobject, allow)
    assert(type(pickupobject) == 'integer', 'Argument pickupobject must be of type integer.')
    assert(type(allow) == 'boolean', 'Argument allow must be of type boolean.')

    local call = natives.invoke(0x7C348310A6E2FB91, 'void', pickupobject, allow)
end

-- Enables/disables a kind of 'shiny' effect on metals.
--- @param object integer
--- @param toggle boolean
natives.graphics_setPearlescentFxEnabled = function(object, toggle)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x72E30372E7CC4415, 'void', object, toggle)
end

-- Removes all decals in range from a position, it includes the bullet holes, blood pools, petrol...
--- @param x number
--- @param y number
--- @param z number
--- @param range number
natives.graphics_removeDecalsInRange = function(x, y, z, range)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(range) == 'number', 'Argument range must be of type number.')

    local call = natives.invoke(0x86DE59FA02902B40, 'void', x, y, z, range)
end

--- @param obj integer
natives.graphics_removeDecalsFromObject = function(obj)
    assert(type(obj) == 'integer', 'Argument obj must be of type integer.')

    local call = natives.invoke(0xFB8972BAE0013140, 'void', obj)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
--- @param p9 userdata
--- @param p10 userdata
--- @param p11 userdata
--- @param p12 userdata
--- @param p13 userdata
--- @param p14 userdata
--- @param p15 userdata
--- @param p16 userdata
--- @param p17 userdata
--- @param p18 userdata
--- @param p19 userdata
--- @param p20 userdata
--- @param p21 userdata
--- @return number
natives.graphics_addDecal = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')
    assert(type(p10) == 'userdata', 'Argument p10 must be of type userdata.')
    assert(type(p11) == 'userdata', 'Argument p11 must be of type userdata.')
    assert(type(p12) == 'userdata', 'Argument p12 must be of type userdata.')
    assert(type(p13) == 'userdata', 'Argument p13 must be of type userdata.')
    assert(type(p14) == 'userdata', 'Argument p14 must be of type userdata.')
    assert(type(p15) == 'userdata', 'Argument p15 must be of type userdata.')
    assert(type(p16) == 'userdata', 'Argument p16 must be of type userdata.')
    assert(type(p17) == 'userdata', 'Argument p17 must be of type userdata.')
    assert(type(p18) == 'userdata', 'Argument p18 must be of type userdata.')
    assert(type(p19) == 'userdata', 'Argument p19 must be of type userdata.')
    assert(type(p20) == 'userdata', 'Argument p20 must be of type userdata.')
    assert(type(p21) == 'userdata', 'Argument p21 must be of type userdata.')

    local call = natives.invoke(0x57CB267624EF85C0, 'int', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21)
    return call
end

-- https:--i.imgur.com/ULQU9US.jpg
-- More rounded and small puddle
--- @param x number
--- @param y number
--- @param z number
--- @param unused boolean
natives.graphics_addBloodPool = function(x, y, z, unused)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(unused) == 'boolean', 'Argument unused must be of type boolean.')

    local call = natives.invoke(0xFA2ECC78A6014D4F, 'void', x, y, z, unused)
end

-- https:--i.imgur.com/rPITUCV.jpg
-- More customizable and more like quadrants
--- @param x number
--- @param y number
--- @param z number
--- @param p3 number
--- @param size number
--- @param p5 number
--- @param permanent boolean
--- @param p7 number
--- @param p8 boolean
natives.graphics_addBloodPool2 = function(x, y, z, p3, size, p5, permanent, p7, p8)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(size) == 'number', 'Argument size must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(permanent) == 'boolean', 'Argument permanent must be of type boolean.')
    assert(type(p7) == 'number', 'Argument p7 must be of type number.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')

    local call = natives.invoke(0xF708298675ABDC6A, 'void', x, y, z, p3, size, p5, permanent, p7, p8)
end

-- Creates blood pools for the given ped in some interval for a few seconds.
--- @param ped integer
natives.graphics_addBloodPoolsForPed = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xDFCE8CE9F3EBE93F, 'void', ped)
end

--- @param ped integer
--- @param p1 number
--- @param size number
--- @param p3 number
natives.graphics_addBloodPoolsForPedWithParams = function(ped, p1, size, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(size) == 'number', 'Argument size must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')

    local call = natives.invoke(0xC349EE1E6EFA494B, 'void', ped, p1, size, p3)
end

--- @param p0 userdata
--- @param p1 userdata
natives.graphics_startPetrolTrailDecals = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x46F246D6504F0031, 'void', p0, p1)
end

--- @param x number
--- @param y number
--- @param z number
--- @param p3 number
natives.graphics_addPetrolTrailDecalInfo = function(x, y, z, p3)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')

    local call = natives.invoke(0x73354FB6D03D2E8A, 'void', x, y, z, p3)
end

natives.graphics_endPetrolTrailDecals = function()

    local call = natives.invoke(0x0E126AAE933F3B56, 'void')
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @return any
natives.graphics_n0Xe63D68F455Ca0B47 = function(p0, p1, p2, p3, p4, p5, p6)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0xE63D68F455CA0B47, 'any', p0, p1, p2, p3, p4, p5, p6)
    return call
end

--- @param decal integer
natives.graphics_removeDecal = function(decal)
    assert(type(decal) == 'integer', 'Argument decal must be of type integer.')

    local call = natives.invoke(0x49A720552EB0BB88, 'void', decal)
end

--- @param decal integer
--- @return boolean
natives.graphics_isDecalAlive = function(decal)
    assert(type(decal) == 'integer', 'Argument decal must be of type integer.')

    local call = natives.invoke(0x3E4B4E5CF5D3EEB5, 'bool', decal)
    return call
end

natives.graphics_setDisablePetrolDecalsIgnitingThisFrame = function()

    local call = natives.invoke(0x53ED07BF368EDA59, 'void')
end

-- _SET_D* or _SET_E*
natives.graphics_n0Xb032C085D9A03907 = function()

    local call = natives.invoke(0xB032C085D9A03907, 'void')
end

-- _DISABLE_*
--- @param p0 boolean
natives.graphics_n0Xfb680A9B33D0Edbe = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0xFB680A9B33D0EDBE, 'void', p0)
end

-- Used in CREATE_BEZIER_BLOOD_TRAIL_OF_TYPE
--- @param p0 number
natives.graphics_n0X41F88A85A579A61D = function(p0)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')

    local call = natives.invoke(0x41F88A85A579A61D, 'void', p0)
end

-- p1: 0.3f in R* Scripts
--- @param waypointrecording string
--- @param p1 number
natives.graphics_bloodTrailForWaypoint = function(waypointrecording, p1)
    assert(type(waypointrecording) == 'string', 'Argument waypointrecording must be of type string.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0xB9C92616929CC25D, 'void', waypointrecording, p1)
end

--- @param x number
--- @param y number
--- @param z number
natives.graphics_addBloodTrailPoint = function(x, y, z)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0xDD9DC1AB63D513CE, 'void', x, y, z)
end

-- Used in CREATE_BEZIER_BLOOD_TRAIL_OF_TYPE
-- _ENABLE_*
natives.graphics_n0X812C1563185C6Fb2 = function()

    local call = natives.invoke(0x812C1563185C6FB2, 'void')
end

-- Used in CREATE_BEZIER_BLOOD_TRAIL_OF_TYPE
--- @param p0 string
natives.graphics_n0X4Bd66B4E3427689B = function(p0)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')

    local call = natives.invoke(0x4BD66B4E3427689B, 'void', p0)
end

--- @param x number
--- @param y number
--- @param z number
natives.graphics_addBloodTrailSplat = function(x, y, z)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0xF5E45CB1CF965D2D, 'void', x, y, z)
end

natives.graphics_n0Xf2F543D48F319A3A = function()

    local call = natives.invoke(0xF2F543D48F319A3A, 'void')
end

-- _RESET_*
natives.graphics_n0X1460B644397453Eb = function()

    local call = natives.invoke(0x1460B644397453EB, 'void')
end

-- Only used in guama1 R* Script
-- Disables lod/distant lights when BOOL is set to true
--- @param disable boolean
natives.graphics_disableFarArtificialLights = function(disable)
    assert(type(disable) == 'boolean', 'Argument disable must be of type boolean.')

    local call = natives.invoke(0xCD284E2F6AC27EE9, 'void', disable)
end

--- @param p0 boolean
natives.graphics_n0X453D16D41Fc51D3E = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x453D16D41FC51D3E, 'void', p0)
end

-- Used in NET_CAMP_SPIRIT_ANIMAL_CLEAR_ANIMAL_VISIBILITY
--- @param entity integer
natives.graphics_n0Xc06F2F45A73Eabcd = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xC06F2F45A73EABCD, 'void', entity)
end

-- https:--github.com/femga/rdr3_discoveries/blob/master/graphics/timecycles
--- @param modifiername string
natives.graphics_setTimecycleModifier = function(modifiername)
    assert(type(modifiername) == 'string', 'Argument modifiername must be of type string.')

    local call = natives.invoke(0xFA08722A5EA82DA7, 'void', modifiername)
end

--- @param strength number
natives.graphics_setTimecycleModifierStrength = function(strength)
    assert(type(strength) == 'number', 'Argument strength must be of type number.')

    local call = natives.invoke(0xFDB74C9CC54C3F37, 'void', strength)
end

--- @param modifiername string
--- @param transitionblend number
natives.graphics_setTransitionTimecycleModifier = function(modifiername, transitionblend)
    assert(type(modifiername) == 'string', 'Argument modifiername must be of type string.')
    assert(type(transitionblend) == 'number', 'Argument transitionblend must be of type number.')

    local call = natives.invoke(0xFF927A09F481D80C, 'void', modifiername, transitionblend)
end

--- @param strength number
natives.graphics_setTransitionOutOfTimecycleModifier = function(strength)
    assert(type(strength) == 'number', 'Argument strength must be of type number.')

    local call = natives.invoke(0xBB6C707F20D955D4, 'void', strength)
end

natives.graphics_clearTimecycleModifier = function()

    local call = natives.invoke(0x0E3F4AF2D63491FB, 'void')
end

--- @return number
natives.graphics_getTimecycleModifierIndex = function()

    local call = natives.invoke(0xA705394293E2B3D3, 'int')
    return call
end

--- @return number
natives.graphics_getTimecycleTransitionModifierIndex = function()

    local call = natives.invoke(0x2DA67BA3C8A6755D, 'int')
    return call
end

--- @param p0 userdata
natives.graphics_n0X67B0778C62E74423 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x67B0778C62E74423, 'void', p0)
end

--- @param p0 userdata
natives.graphics_n0X6C03118E9E5C1A14 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x6C03118E9E5C1A14, 'void', p0)
end

-- _GET_C* - _GET_E*
--- @return number
natives.graphics_getModifiedVisibilityDistance = function()

    local call = natives.invoke(0x25CA89B2A39DCC69, 'float')
    return call
end

-- Old name: _ENABLE_EXTRA_TIMECYCLE_MODIFIER_STRENGTH
--- @param strength number
natives.graphics_enableMoonCycleOverride = function(strength)
    assert(type(strength) == 'number', 'Argument strength must be of type number.')

    local call = natives.invoke(0x6FE93BCC7BF12B63, 'void', strength)
end

--- @param channel integer
natives.graphics_setTvChannel = function(channel)
    assert(type(channel) == 'integer', 'Argument channel must be of type integer.')

    local call = natives.invoke(0x593FAF7FC9401A56, 'void', channel)
end

--- @return number
natives.graphics_getTvChannel = function()

    local call = natives.invoke(0xF90FBFD68F3C59AE, 'int')
    return call
end

--- @param volume number
natives.graphics_setTvVolume = function(volume)
    assert(type(volume) == 'number', 'Argument volume must be of type number.')

    local call = natives.invoke(0x73A97068787D7231, 'void', volume)
end

--- @param xpos number
--- @param ypos number
--- @param xscale number
--- @param yscale number
--- @param rotation number
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
natives.graphics_drawTvChannel = function(xpos, ypos, xscale, yscale, rotation, red, green, blue, alpha)
    assert(type(xpos) == 'number', 'Argument xpos must be of type number.')
    assert(type(ypos) == 'number', 'Argument ypos must be of type number.')
    assert(type(xscale) == 'number', 'Argument xscale must be of type number.')
    assert(type(yscale) == 'number', 'Argument yscale must be of type number.')
    assert(type(rotation) == 'number', 'Argument rotation must be of type number.')
    assert(type(red) == 'integer', 'Argument red must be of type integer.')
    assert(type(green) == 'integer', 'Argument green must be of type integer.')
    assert(type(blue) == 'integer', 'Argument blue must be of type integer.')
    assert(type(alpha) == 'integer', 'Argument alpha must be of type integer.')

    local call = natives.invoke(0xC0A145540254A840, 'void', xpos, ypos, xscale, yscale, rotation, red, green, blue, alpha)
end

--- @param tvchannel integer
--- @param playlistname string
--- @param restart boolean
natives.graphics_setTvChannelPlaylist = function(tvchannel, playlistname, restart)
    assert(type(tvchannel) == 'integer', 'Argument tvchannel must be of type integer.')
    assert(type(playlistname) == 'string', 'Argument playlistname must be of type string.')
    assert(type(restart) == 'boolean', 'Argument restart must be of type boolean.')

    local call = natives.invoke(0xDEC6B25F5DC8925B, 'void', tvchannel, playlistname, restart)
end

-- Old name: _IS_TV_PLAYLIST_ITEM_PLAYING
--- @param videocliphash integer
--- @return boolean
natives.graphics_isTvshowCurrentlyPlaying = function(videocliphash)
    assert(type(videocliphash) == 'integer', 'Argument videocliphash must be of type integer.')

    local call = natives.invoke(0x4D562223E0EB65F3, 'bool', videocliphash)
    return call
end

--- @return any
natives.graphics_n0X5C674Eb487891F6B = function()

    local call = natives.invoke(0x5C674EB487891F6B, 'any')
    return call
end

-- nullsub, doesn't do anything
--- @param toggle boolean
natives.graphics_enableMovieSubtitles = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x6FC9B065229C0787, 'void', toggle)
end

natives.graphics_n0X32De2Bffda43E62A = function()

    local call = natives.invoke(0x32DE2BFFDA43E62A, 'void')
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.graphics_n0Xd543487A1F12828F = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xD543487A1F12828F, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
natives.graphics_n0Xd9Bc98B55Bcfaa9B = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xD9BC98B55BCFAA9B, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
natives.graphics_n0X48Fe0Db54045B975 = function(p0, p1, p2, p3, p4, p5, p6)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0x48FE0DB54045B975, 'void', p0, p1, p2, p3, p4, p5, p6)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.graphics_n0X735762E8D7573E42 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x735762E8D7573E42, 'void', p0, p1, p2)
end

natives.graphics_n0X981C7D863980Fa51 = function()

    local call = natives.invoke(0x981C7D863980FA51, 'void')
end

--- @param effectname string
natives.graphics_animpostfxPreloadPostfx = function(effectname)
    assert(type(effectname) == 'string', 'Argument effectname must be of type string.')

    local call = natives.invoke(0x5199405EABFBD7F0, 'void', effectname)
end

--- @param effectname string
--- @return boolean
natives.graphics_animpostfxHasLoaded = function(effectname)
    assert(type(effectname) == 'string', 'Argument effectname must be of type string.')

    local call = natives.invoke(0xBF2DD155B2ADCD0A, 'bool', effectname)
    return call
end

--- @param effectname string
natives.graphics_animpostfxSetToUnload = function(effectname)
    assert(type(effectname) == 'string', 'Argument effectname must be of type string.')

    local call = natives.invoke(0x37D7BDBA89F13959, 'void', effectname)
end

-- https:--github.com/femga/rdr3_discoveries/blob/master/graphics/animpostfx
--- @param effectname string
natives.graphics_animpostfxPlay = function(effectname)
    assert(type(effectname) == 'string', 'Argument effectname must be of type string.')

    local call = natives.invoke(0x4102732DF6B4005F, 'void', effectname)
end

--- @param effectname string
--- @param duration integer
natives.graphics_animpostfxPlayTimed = function(effectname, duration)
    assert(type(effectname) == 'string', 'Argument effectname must be of type string.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')

    local call = natives.invoke(0x3A9A281FF71249E9, 'void', effectname, duration)
end

--- @param effectname string
natives.graphics_animpostfxStop = function(effectname)
    assert(type(effectname) == 'string', 'Argument effectname must be of type string.')

    local call = natives.invoke(0xB4FD7446BAB2F394, 'void', effectname)
end

-- effectName2, p2 and p3 are unused
-- 
-- ANIMPOSTFX_*
--- @param effectname string
--- @param effectname2 string
--- @param p2 userdata
--- @param p3 userdata
natives.graphics_n0X26Dd2Fb0A88Cc412 = function(effectname, effectname2, p2, p3)
    assert(type(effectname) == 'string', 'Argument effectname must be of type string.')
    assert(type(effectname2) == 'string', 'Argument effectname2 must be of type string.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x26DD2FB0A88CC412, 'void', effectname, effectname2, p2, p3)
end

--- @param effectname string
natives.graphics_animpostfxClearEffect = function(effectname)
    assert(type(effectname) == 'string', 'Argument effectname must be of type string.')

    local call = natives.invoke(0xC5CB91D65852ED7E, 'void', effectname)
end

--- @param effectname string
--- @return boolean
natives.graphics_animpostfxIsRunning = function(effectname)
    assert(type(effectname) == 'string', 'Argument effectname must be of type string.')

    local call = natives.invoke(0x4A123E85D7C4CA0B, 'bool', effectname)
    return call
end

--- @param effectname string
--- @return boolean
natives.graphics_animpostfxIsTagPlaying = function(effectname)
    assert(type(effectname) == 'string', 'Argument effectname must be of type string.')

    local call = natives.invoke(0x2D4F9C852CE8A253, 'bool', effectname)
    return call
end

natives.graphics_animpostfxStopAll = function()

    local call = natives.invoke(0x66560A0D4C64FD21, 'void')
end

--- @param effectname string
natives.graphics_animpostfxStopTag = function(effectname)
    assert(type(effectname) == 'string', 'Argument effectname must be of type string.')

    local call = natives.invoke(0xAD74C22A541AB987, 'void', effectname)
end

-- must be called after ANIMPOSTFX_PLAY, strength 0.0f - 1.0f
--- @param effectname string
--- @param strength number
natives.graphics_animpostfxSetStrength = function(effectname, strength)
    assert(type(effectname) == 'string', 'Argument effectname must be of type string.')
    assert(type(strength) == 'number', 'Argument strength must be of type number.')

    local call = natives.invoke(0xCAB4DD2D5B2B7246, 'void', effectname, strength)
end

-- Health Core Effect Filter Potency: p1 = 1
-- Stamina Core Effect Filter Potency: p1 = 2
-- Multiple Core Effect Filter Potency: p1 = 3
--- @param effectname string
--- @param p1 integer
--- @param potency number
natives.graphics_animpostfxSetPotency = function(effectname, p1, potency)
    assert(type(effectname) == 'string', 'Argument effectname must be of type string.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(potency) == 'number', 'Argument potency must be of type number.')

    local call = natives.invoke(0xF972F0AB16DC5260, 'void', effectname, p1, potency)
end

--- @param effectname string
--- @param p1 integer
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
natives.graphics_animpostfxSetPostfxColor = function(effectname, p1, red, green, blue, alpha)
    assert(type(effectname) == 'string', 'Argument effectname must be of type string.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(red) == 'integer', 'Argument red must be of type integer.')
    assert(type(green) == 'integer', 'Argument green must be of type integer.')
    assert(type(blue) == 'integer', 'Argument blue must be of type integer.')
    assert(type(alpha) == 'integer', 'Argument alpha must be of type integer.')

    local call = natives.invoke(0x63011D0C7C6519E0, 'void', effectname, p1, red, green, blue, alpha)
end

-- ANIMPOSTFX_*
--- @param effectname string
--- @return boolean
natives.graphics_n0Xb958D97A0Dfaa0C2 = function(effectname)
    assert(type(effectname) == 'string', 'Argument effectname must be of type string.')

    local call = natives.invoke(0xB958D97A0DFAA0C2, 'bool', effectname)
    return call
end

-- ANIMPOSTFX_*
--- @param effectname string
natives.graphics_n0Xa201A3D0Ac087C37 = function(effectname)
    assert(type(effectname) == 'string', 'Argument effectname must be of type string.')

    local call = natives.invoke(0xA201A3D0AC087C37, 'void', effectname)
end

-- ANIMPOSTFX_*
--- @param effectname string
--- @param p1 integer
--- @param p2 boolean
--- @param p3 integer
--- @return boolean
natives.graphics_n0Xfbf161Fcfec8589E = function(effectname, p1, p2, p3)
    assert(type(effectname) == 'string', 'Argument effectname must be of type string.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')

    local call = natives.invoke(0xFBF161FCFEC8589E, 'bool', effectname, p1, p2, p3)
    return call
end

-- Known effects: MP_Trans_SceneToPhoto
-- MP_Trans_WinLose
-- SpectateFilter
-- MP_CharacterCreatorPhoto
-- MP_Trans_PhotoToScene
-- InterrogationHit
--- @param effectname string
--- @return number
natives.graphics_animpostfxGetStackhash = function(effectname)
    assert(type(effectname) == 'string', 'Argument effectname must be of type string.')

    local call = natives.invoke(0x842CCC9491FFCD9B, 'integer', effectname)
    return call
end

--- @param effectnamehash integer
natives.graphics_animpostfxPreloadPostfxByStackhash = function(effectnamehash)
    assert(type(effectnamehash) == 'integer', 'Argument effectnamehash must be of type integer.')

    local call = natives.invoke(0xF3E039322BFBD4D8, 'void', effectnamehash)
end

--- @param effectnamehash integer
--- @return boolean
natives.graphics_animpostfxIsPreloadingByStackhash = function(effectnamehash)
    assert(type(effectnamehash) == 'integer', 'Argument effectnamehash must be of type integer.')

    local call = natives.invoke(0x59EA80079B86D8C7, 'bool', effectnamehash)
    return call
end

-- ANIMPOSTFX_*
--- @param effectnamehash integer
natives.graphics_n0X38D9D50F2085E9B3 = function(effectnamehash)
    assert(type(effectnamehash) == 'integer', 'Argument effectnamehash must be of type integer.')

    local call = natives.invoke(0x38D9D50F2085E9B3, 'void', effectnamehash)
end

--- @param effectnamehash integer
natives.graphics_animpostfxPlayTag = function(effectnamehash)
    assert(type(effectnamehash) == 'integer', 'Argument effectnamehash must be of type integer.')

    local call = natives.invoke(0x9B8D5D4CB8AF58B3, 'void', effectnamehash)
end

-- ANIMPOSTFX_*
--- @param effectnamehash integer
natives.graphics_n0Xc76Fc4C2Fc5F4405 = function(effectnamehash)
    assert(type(effectnamehash) == 'integer', 'Argument effectnamehash must be of type integer.')

    local call = natives.invoke(0xC76FC4C2FC5F4405, 'void', effectnamehash)
end

--- @param effectnamehash integer
natives.graphics_animpostfxStopStackhashPostfx = function(effectnamehash)
    assert(type(effectnamehash) == 'integer', 'Argument effectnamehash must be of type integer.')

    local call = natives.invoke(0xEDA5CBECF56E1386, 'void', effectnamehash)
end

--- @param effectnamehash integer
--- @return boolean
natives.graphics_animpostfxIsStackhashPlaying = function(effectnamehash)
    assert(type(effectnamehash) == 'integer', 'Argument effectnamehash must be of type integer.')

    local call = natives.invoke(0xEEF83A759AE06A27, 'bool', effectnamehash)
    return call
end

-- ANIMPOSTFX_*
--- @param effectnamehash integer
--- @return boolean
natives.graphics_n0Xe75Cddebf618C8Ff = function(effectnamehash)
    assert(type(effectnamehash) == 'integer', 'Argument effectnamehash must be of type integer.')

    local call = natives.invoke(0xE75CDDEBF618C8FF, 'bool', effectnamehash)
    return call
end

-- ANIMPOSTFX_*
--- @param effectnamehash integer
natives.graphics_n0X71845905Bccde781 = function(effectnamehash)
    assert(type(effectnamehash) == 'integer', 'Argument effectnamehash must be of type integer.')

    local call = natives.invoke(0x71845905BCCDE781, 'void', effectnamehash)
end

--- @param effectnamehash integer
--- @param p1 integer
--- @param p2 boolean
--- @param p3 integer
--- @return boolean
natives.graphics_animpostfxHasEventTriggeredByStackhash = function(effectnamehash, p1, p2, p3)
    assert(type(effectnamehash) == 'integer', 'Argument effectnamehash must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')

    local call = natives.invoke(0x9AB192A9EF980EED, 'bool', effectnamehash, p1, p2, p3)
    return call
end

-- Returns whether the 'killFX' setting is enabled.
-- 
-- ANIMPOSTFX_*
--- @return boolean
natives.graphics_n0Xff584F097C17Fa8F = function()

    local call = natives.invoke(0xFF584F097C17FA8F, 'bool')
    return call
end

-- ANIMPOSTFX_*
--- @return boolean
natives.graphics_n0X3Da7A10583A4Bec0 = function()

    local call = natives.invoke(0x3DA7A10583A4BEC0, 'bool')
    return call
end

-- Doesn't actually return anything.
-- 
-- ANIMPOSTFX_*
--- @return any
natives.graphics_n0Xc37792A3F9C90771 = function()

    local call = natives.invoke(0xC37792A3F9C90771, 'any')
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.graphics_n0Xa0F4D12D6042F6D5 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xA0F4D12D6042F6D5, 'void', p0, p1)
end

--- @param p0 userdata
natives.graphics_n0X8996Fa6Ad9Fe4E90 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x8996FA6AD9FE4E90, 'void', p0)
end

-- Only used in guama1 R* SP Script while spawning the ship
-- _SET_ENTITY_QUATERNION_* - SET_ENTITY_RENDER_*
--- @param vehicle integer
--- @param toggle boolean
natives.graphics_setEntityRenderGuarmaShip = function(vehicle, toggle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xC38B4952B728397A, 'void', vehicle, toggle)
end

--- @return boolean
natives.graphics_pedshotIsAvailable = function()

    local call = natives.invoke(0xAF6E67D073D2DCE2, 'bool')
    return call
end

-- R* Script spd_agnesdow1: p0 = SPD_AGNES_DOWD_01
--- @param p0 string
--- @return boolean
natives.graphics_n0Xfd05B1Dde83749Fa = function(p0)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')

    local call = natives.invoke(0xFD05B1DDE83749FA, 'bool', p0)
    return call
end

natives.graphics_pedshotFinishCleanupData = function()

    local call = natives.invoke(0xC2B8164C3BE871A4, 'void')
end

natives.graphics_pedshotPreviousPersonaPhotoDataCleanup = function()

    local call = natives.invoke(0x3E2FDDBE435A8787, 'void')
end

natives.graphics_pedshotInitCleanupData = function()

    local call = natives.invoke(0x55285F885F662169, 'void')
end

--- @param texture string
--- @param ped integer
--- @param playerslot integer
--- @return boolean
natives.graphics_pedshotGeneratePersonaPhoto = function(texture, ped, playerslot)
    assert(type(texture) == 'string', 'Argument texture must be of type string.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(playerslot) == 'integer', 'Argument playerslot must be of type integer.')

    local call = natives.invoke(0xD9C24F53631F2372, 'bool', texture, ped, playerslot)
    return call
end

--- @param personaphotolocalcachetype integer
natives.graphics_pedshotSetPersonaPhotoType = function(personaphotolocalcachetype)
    assert(type(personaphotolocalcachetype) == 'integer', 'Argument personaphotolocalcachetype must be of type integer.')

    local call = natives.invoke(0x196D3ACBEBA4A44B, 'void', personaphotolocalcachetype)
end

--- @param personaphotolocalcachetype integer
natives.graphics_n0Xa1A86055792Fb249 = function(personaphotolocalcachetype)
    assert(type(personaphotolocalcachetype) == 'integer', 'Argument personaphotolocalcachetype must be of type integer.')

    local call = natives.invoke(0xA1A86055792FB249, 'void', personaphotolocalcachetype)
end

-- Only used in R* SP Script spd_agnesdown1
--- @param p0 userdata
--- @param x number
--- @param y number
--- @param z number
--- @param p4 number
--- @param p5 number
--- @param heading number
--- @return boolean
natives.graphics_n0X402E1A61D2587Fcd = function(p0, x, y, z, p4, p5, heading)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(heading) == 'number', 'Argument heading must be of type number.')

    local call = natives.invoke(0x402E1A61D2587FCD, 'bool', p0, x, y, z, p4, p5, heading)
    return call
end

-- Only used in R* SP Script spd_agnesdown1
--- @param p0 userdata
--- @return any
natives.graphics_n0X5C9C3A466B3296A8 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x5C9C3A466B3296A8, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @return any
natives.graphics_n0Xa15Ccab8Ad038291 = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xA15CCAB8AD038291, 'any', p0, p1, p2, p3)
    return call
end

--- @return any
natives.graphics_n0X285438C26C732F9D = function()

    local call = natives.invoke(0x285438C26C732F9D, 'any')
    return call
end

-- state: false disables artificial interior light sources for specific proxyInteriorIndex
--- @param proxyinteriorindex integer
--- @param state boolean
natives.graphics_setProxyInteriorIndexArtificialLightsState = function(proxyinteriorindex, state)
    assert(type(proxyinteriorindex) == 'integer', 'Argument proxyinteriorindex must be of type integer.')
    assert(type(state) == 'boolean', 'Argument state must be of type boolean.')

    local call = natives.invoke(0xBFCB17895BB99E4E, 'void', proxyinteriorindex, state)
end

--- @param proxyinteriorindex integer
--- @return boolean
natives.graphics_isProxyInteriorIndexArtificialLightsEnabled = function(proxyinteriorindex)
    assert(type(proxyinteriorindex) == 'integer', 'Argument proxyinteriorindex must be of type integer.')

    local call = natives.invoke(0x113857D66A9CABE6, 'bool', proxyinteriorindex)
    return call
end

-- Returns proxyInteriorIndex
--- @param interiorid integer
--- @return number
natives.graphics_getProxyInteriorIndex = function(interiorid)
    assert(type(interiorid) == 'integer', 'Argument interiorid must be of type integer.')

    local call = natives.invoke(0x5D1C5D8E62E8EE1C, 'int', interiorid)
    return call
end

natives.graphics_n0X9D1B0B5066205692 = function()

    local call = natives.invoke(0x9D1B0B5066205692, 'void')
end

--- @param p0 userdata
--- @param p1 userdata
natives.graphics_n0Xc489Fe31Ac726512 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xC489FE31AC726512, 'void', p0, p1)
end

--- @param x number
--- @param y number
--- @param p2 integer
natives.graphics_setCloudLayer = function(x, y, p2)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0xB8C984C0D47F4F07, 'void', x, y, p2)
end

--- @param x number
--- @param y number
--- @param z number
natives.graphics_setCloudNoise = function(x, y, z)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0xFE7966DF01452F32, 'void', x, y, z)
end

-- Only used in finale2, smuggler2, winter4
-- _SET_CLOUD_A* - _SET_CLOUD_H*
--- @param x number
--- @param y number
--- @param z number
natives.graphics_setCloudPosition = function(x, y, z)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0x10C1767B93257480, 'void', x, y, z)
end

--- @param height number
natives.graphics_setCloudHeight = function(height)
    assert(type(height) == 'number', 'Argument height must be of type number.')

    local call = natives.invoke(0xC332C91388F5580B, 'void', height)
end

--- @param p0 userdata
--- @param p1 userdata
natives.graphics_n0X085C5B61A0114F32 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x085C5B61A0114F32, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.graphics_n0X1Ff8731Be1Dfc0C0 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x1FF8731BE1DFC0C0, 'void', p0, p1)
end

--- @return any
natives.graphics_n0Xfc9B53C072F418E0 = function()

    local call = natives.invoke(0xFC9B53C072F418E0, 'any')
    return call
end

-- nullsub, doesn't do anything
--- @param p0 userdata
natives.graphics_n0X94B261F1F35293E1 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x94B261F1F35293E1, 'void', p0)
end

natives.graphics_enableEntitymask = function()

    local call = natives.invoke(0xFAAD23DE7A54FC14, 'void')
end

natives.graphics_disableEntitymask = function()

    local call = natives.invoke(0x5C9978A2A3DC3D0D, 'void')
end

--- @param entity integer
--- @param mask integer
natives.graphics_addEntityToEntityMask = function(entity, mask)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(mask) == 'integer', 'Argument mask must be of type integer.')

    local call = natives.invoke(0xC6F81FCD15350323, 'void', entity, mask)
end

--- @param entity integer
--- @param mask integer
--- @param intensity number
natives.graphics_addEntityToEntityMaskWithIntensity = function(entity, mask, intensity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(mask) == 'integer', 'Argument mask must be of type integer.')
    assert(type(intensity) == 'number', 'Argument intensity must be of type number.')

    local call = natives.invoke(0x958DEBD9353C0935, 'void', entity, mask, intensity)
end

--- @param entity integer
natives.graphics_removeEntityFromEntityMask = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x56A786E87FF53478, 'void', entity)
end

--- @param entity integer
--- @param layer0 integer
--- @param layer1 integer
--- @param layer2 integer
--- @param layer3 integer
--- @return boolean
natives.graphics_getEntityMaskLayers = function(entity, layer0, layer1, layer2, layer3)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(layer0) == 'integer', 'Argument layer0 must be of type integer.')
    assert(type(layer1) == 'integer', 'Argument layer1 must be of type integer.')
    assert(type(layer2) == 'integer', 'Argument layer2 must be of type integer.')
    assert(type(layer3) == 'integer', 'Argument layer3 must be of type integer.')

    local call = natives.invoke(0xE8A8378BF651079C, 'bool', entity, layer0, layer1, layer2, layer3)
    return call
end

--- @param entity integer
--- @param layer0 integer
--- @param layer1 integer
--- @param layer2 integer
--- @param layer3 integer
natives.graphics_setEntityMaskLayers = function(entity, layer0, layer1, layer2, layer3)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(layer0) == 'integer', 'Argument layer0 must be of type integer.')
    assert(type(layer1) == 'integer', 'Argument layer1 must be of type integer.')
    assert(type(layer2) == 'integer', 'Argument layer2 must be of type integer.')
    assert(type(layer3) == 'integer', 'Argument layer3 must be of type integer.')

    local call = natives.invoke(0xE92012611461A42A, 'void', entity, layer0, layer1, layer2, layer3)
end

-- Used for script function RPG_GLOBAL_STATS__PRIVATE__ACTIVATE_STAT_FLAG - Quite and Inspiration Aura equip
-- Params: 0f, 2f, 2f
--- @param p0 number
--- @param p1 number
--- @param p2 number
natives.graphics_setEntityAura = function(p0, p1, p2)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')

    local call = natives.invoke(0x249CD6B7285536F2, 'void', p0, p1, p2)
end

-- Used for script function RPG_GLOBAL_STATS__PRIVATE__DEACTIVATE_STAT_FLAG - Inspiration Aura unequip
natives.graphics_resetEntityAura = function()

    local call = natives.invoke(0xAF4D239B8903FCBE, 'void')
end

-- enum class eSnowCoverageType
-- {
-- 	Primary,
-- 	Secondary,
-- 	Xmas,
-- 	XmasSecondary -- since b1232
-- };
--- @param type integer
natives.graphics_setSnowCoverageType = function(type)
    assert(type(type) == 'integer', 'Argument type must be of type integer.')

    local call = natives.invoke(0xF02A9C330BBFC5C7, 'void', type)
end

--- @param p0 userdata
natives.graphics_n0X519928Df02Eb5101 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x519928DF02EB5101, 'void', p0)
end

natives.graphics_n0X1C6306E5Bc25C29C = function()

    local call = natives.invoke(0x1C6306E5BC25C29C, 'void')
end

--- @param gangid userdata
--- @return boolean
natives.gang_networkIsGangIdValid = function(gangid)
    assert(type(gangid) == 'userdata', 'Argument gangid must be of type userdata.')

    local call = natives.invoke(0xD6F6ACF4392187FB, 'bool', gangid)
    return call
end

--- @param gangid userdata
--- @return boolean
natives.gang_networkIsGangInSession = function(gangid)
    assert(type(gangid) == 'userdata', 'Argument gangid must be of type userdata.')

    local call = natives.invoke(0x93A91A351A07360E, 'bool', gangid)
    return call
end

--- @param gangid userdata
--- @return boolean
natives.gang_networkIsGangActive = function(gangid)
    assert(type(gangid) == 'userdata', 'Argument gangid must be of type userdata.')

    local call = natives.invoke(0x0F99F6436528A089, 'bool', gangid)
    return call
end

--- @param gangid userdata
--- @return boolean
natives.gang_networkIsGangOpen = function(gangid)
    assert(type(gangid) == 'userdata', 'Argument gangid must be of type userdata.')

    local call = natives.invoke(0xFCF96CCBD81B24C8, 'bool', gangid)
    return call
end

--- @return number
natives.gang_networkGetGangPrivacy = function()

    local call = natives.invoke(0x9970AE8C3D706139, 'int')
    return call
end

-- openStatus = true -> sets privacyType = 2 (PUBLIC_ADVERTISED)
-- openStatus = false -> sets privacyType = 1 (INVITE_ONLY)
-- 
-- campSize: NET_CAMP_SIZE_SMALLEST = 4, NET_CAMP_SIZE_LARGEST = 7
--- @param openstatus boolean
--- @param campsize integer
natives.gang_networkStartGang = function(openstatus, campsize)
    assert(type(openstatus) == 'boolean', 'Argument openstatus must be of type boolean.')
    assert(type(campsize) == 'integer', 'Argument campsize must be of type integer.')

    local call = natives.invoke(0xD1A226F2E05E58FC, 'void', openstatus, campsize)
end

--- @param privacytype integer
--- @return boolean
natives.gang_networkSetGangPrivacy = function(privacytype)
    assert(type(privacytype) == 'integer', 'Argument privacytype must be of type integer.')

    local call = natives.invoke(0xC5BF29F4035277C2, 'bool', privacytype)
    return call
end

--- @param disband boolean
natives.gang_networkLeaveGang = function(disband)
    assert(type(disband) == 'boolean', 'Argument disband must be of type boolean.')

    local call = natives.invoke(0x0A04A07BC3074EDB, 'void', disband)
end

-- banTimeSeconds is 120 in R* Scripts
--- @param player integer
--- @param bantimeseconds integer
natives.gang_networkKickGangMember = function(player, bantimeseconds)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(bantimeseconds) == 'integer', 'Argument bantimeseconds must be of type integer.')

    local call = natives.invoke(0xCD9E2D9BC52FD80F, 'void', player, bantimeseconds)
end

-- Returns true if join succeeded, false if failed.
--- @param gangid userdata
--- @return boolean
natives.gang_networkRequestGangJoin = function(gangid)
    assert(type(gangid) == 'userdata', 'Argument gangid must be of type userdata.')

    local call = natives.invoke(0xC0474C8BCF6787AD, 'bool', gangid)
    return call
end

--- @param player integer
--- @return boolean
natives.gang_networkIsGangLeader = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x424B17A7DC5C90BC, 'bool', player)
    return call
end

--- @param gangid userdata
--- @param player integer
--- @return boolean
natives.gang_networkIsGangMember = function(gangid, player)
    assert(type(gangid) == 'userdata', 'Argument gangid must be of type userdata.')
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x9BE7DCB22D32CCBE, 'bool', gangid, player)
    return call
end

--- @param player1 integer
--- @param player2 integer
--- @return boolean
natives.gang_networkIsInSameGang = function(player1, player2)
    assert(type(player1) == 'integer', 'Argument player1 must be of type integer.')
    assert(type(player2) == 'integer', 'Argument player2 must be of type integer.')

    local call = natives.invoke(0x3F59FE6F37869576, 'bool', player1, player2)
    return call
end

--- @param player integer
--- @return boolean
natives.gang_networkIsInMyGang = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x81FB74C83C2ED69F, 'bool', player)
    return call
end

--- @param gangid userdata
--- @return number
natives.gang_networkGetNumGangMembers = function(gangid)
    assert(type(gangid) == 'userdata', 'Argument gangid must be of type userdata.')

    local call = natives.invoke(0x149A2751AB66AC02, 'int', gangid)
    return call
end

--- @param gangid userdata
--- @return number
natives.gang_networkGetGangSize = function(gangid)
    assert(type(gangid) == 'userdata', 'Argument gangid must be of type userdata.')

    local call = natives.invoke(0x853B0FA4D8732C57, 'int', gangid)
    return call
end

--- @param size integer
--- @return boolean
natives.gang_networkSetGangSize = function(size)
    assert(type(size) == 'integer', 'Argument size must be of type integer.')

    local call = natives.invoke(0x833D8268D51B4522, 'bool', size)
    return call
end

--- @param player integer
--- @return any
natives.gang_networkGetGangId = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x901E0DC25080C8B9, 'any', player)
    return call
end

--- @param gangid userdata
--- @param memberhandles userdata
--- @return number
natives.gang_networkGetGangMembers = function(gangid, memberhandles)
    assert(type(gangid) == 'userdata', 'Argument gangid must be of type userdata.')
    assert(type(memberhandles) == 'userdata', 'Argument memberhandles must be of type userdata.')

    local call = natives.invoke(0xD1BF325C8252A982, 'int', gangid, memberhandles)
    return call
end

-- _NETWORK_GET_* or _NETWORK_IS_*
--- @param player integer
--- @return boolean
natives.gang_n0Xda801F7F6A5278D3 = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xDA801F7F6A5278D3, 'bool', player)
    return call
end

--- @param p0 userdata
--- @return any
natives.gang_n0X2F7Eb8B6F6Afe79C = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x2F7EB8B6F6AFE79C, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.gang_n0X53A94294Fddcf98C = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x53A94294FDDCF98C, 'any', p0, p1)
    return call
end

--- @param gangid userdata
--- @return number
natives.gang_networkGetGangLeader = function(gangid)
    assert(type(gangid) == 'userdata', 'Argument gangid must be of type userdata.')

    local call = natives.invoke(0x4BE6C13A45CCA8EC, 'int', gangid)
    return call
end

--- @param gangid userdata
--- @param gamerhandle userdata
--- @return boolean
natives.gang_networkGetGangLeaderHandle = function(gangid, gamerhandle)
    assert(type(gangid) == 'userdata', 'Argument gangid must be of type userdata.')
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')

    local call = natives.invoke(0xCE88A261DCBBA0D9, 'bool', gangid, gamerhandle)
    return call
end

--- @param player integer
--- @return boolean
natives.gang_n0X6102830F764B3De1 = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x6102830F764B3DE1, 'bool', player)
    return call
end

natives.gang_n0Xb38C256498748413 = function()

    local call = natives.invoke(0xB38C256498748413, 'void')
end

--- @param p0 integer
--- @return any
natives.gang_n0Xe4C64Cd37Cb176Aa = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0xE4C64CD37CB176AA, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.gang_n0X7Baa30C9Bbe8Aee7 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x7BAA30C9BBE8AEE7, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @return any
natives.gang_n0X0E5C9Fb9Ed5Dff1C = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x0E5C9FB9ED5DFF1C, 'any', p0)
    return call
end

--- @param p0 userdata
natives.gang_n0Xb22B1D9F74095382 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xB22B1D9F74095382, 'void', p0)
end

natives.gang_n0Xee4F20004D0288B7 = function()

    local call = natives.invoke(0xEE4F20004D0288B7, 'void')
end

--- @param p0 userdata
natives.gang_n0Xad22Ab64Fa428Df3 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xAD22AB64FA428DF3, 'void', p0)
end

--- @param p0 userdata
--- @return any
natives.gang_n0X48D82C83987E18E4 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x48D82C83987E18E4, 'any', p0)
    return call
end

--- @param p0 userdata
natives.gang_n0Xa9Ceae8D6637Fbad = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xA9CEAE8D6637FBAD, 'void', p0)
end

--- @return any
natives.gang_n0X51C5Ef47086Aa0D7 = function()

    local call = natives.invoke(0x51C5EF47086AA0D7, 'any')
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.gang_n0X644E02F24F9D4E98 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x644E02F24F9D4E98, 'any', p0, p1)
    return call
end

--- @return any
natives.gang_n0X3Adc71A66356D706 = function()

    local call = natives.invoke(0x3ADC71A66356D706, 'any')
    return call
end

--- @return any
natives.gang_n0Xfa7C5B7E087A4Ceb = function()

    local call = natives.invoke(0xFA7C5B7E087A4CEB, 'any')
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.gang_n0X1F11702Ddbd915C6 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x1F11702DDBD915C6, 'any', p0, p1)
    return call
end

--- @param player integer
--- @return any
natives.gang_n0X7933754F260B428A = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x7933754F260B428A, 'any', player)
    return call
end

--- @return any
natives.gang_n0Xafd3599A3Cc5637D = function()

    local call = natives.invoke(0xAFD3599A3CC5637D, 'any')
    return call
end

--- @param p0 userdata
natives.gang_n0Xc81A9E2C8Efd28D5 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xC81A9E2C8EFD28D5, 'void', p0)
end

--- @param pagename string
natives.google_analytics_googleAnalyticsPushPage = function(pagename)
    assert(type(pagename) == 'string', 'Argument pagename must be of type string.')

    local call = natives.invoke(0xD43A616AE3AC4EF6, 'void', pagename)
end

--- @param pagename string
natives.google_analytics_googleAnalyticsPopPage = function(pagename)
    assert(type(pagename) == 'string', 'Argument pagename must be of type string.')

    local call = natives.invoke(0xC6DE040378364798, 'void', pagename)
end

--- @param eventcategory string
--- @param eventaction string
--- @param eventlabel string
--- @param eventvalue integer
--- @return boolean
natives.google_analytics_googleAnalyticsStartEvent = function(eventcategory, eventaction, eventlabel, eventvalue)
    assert(type(eventcategory) == 'string', 'Argument eventcategory must be of type string.')
    assert(type(eventaction) == 'string', 'Argument eventaction must be of type string.')
    assert(type(eventlabel) == 'string', 'Argument eventlabel must be of type string.')
    assert(type(eventvalue) == 'integer', 'Argument eventvalue must be of type integer.')

    local call = natives.invoke(0x1C54F031D7C0F7AC, 'bool', eventcategory, eventaction, eventlabel, eventvalue)
    return call
end

--- @return boolean
natives.google_analytics_googleAnalyticsEndEvent = function()

    local call = natives.invoke(0x87BBCC4360A9BDE3, 'bool')
    return call
end

-- Enables reduced time scale while menus such as weapon wheel and satchel are open.
natives.hud_enableReducedMenuTimeScale = function()

    local call = natives.invoke(0x26F6BBEA2CE3E3DC, 'void')
end

-- Disables reduced time scale while menus such as weapon wheel and satchel are open.
natives.hud_disableReducedMenuTimeScale = function()

    local call = natives.invoke(0xC5C7A2F6567FCCBC, 'void')
end

--- @param component integer
natives.hud_enableHudContextThisFrame = function(component)
    assert(type(component) == 'integer', 'Argument component must be of type integer.')

    local call = natives.invoke(0xC9CAEAEEC1256E54, 'void', component)
end

-- https:--github.com/femga/rdr3_discoveries/tree/master/graphics/HUD/hud_presets
-- Old name: _HIDE_HUD_COMPONENT
--- @param component integer
natives.hud_enableHudContext = function(component)
    assert(type(component) == 'integer', 'Argument component must be of type integer.')

    local call = natives.invoke(0x4CC5F2FC1332577F, 'void', component)
end

-- Old name: _DISPLAY_HUD_COMPONENT
--- @param component integer
natives.hud_disableHudContext = function(component)
    assert(type(component) == 'integer', 'Argument component must be of type integer.')

    local call = natives.invoke(0x8BC7C1F929D07BF3, 'void', component)
end

--- @param p0 integer
--- @return number
natives.hud_n0X7Ec0D68233E391Ac = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x7EC0D68233E391AC, 'int', p0)
    return call
end

--- @param text string
natives.hud_busyspinnerSetText = function(text)
    assert(type(text) == 'string', 'Argument text must be of type string.')

    local call = natives.invoke(0x7F78CD75CC4539E4, 'void', text)
end

-- Removes the loading prompt at the bottom right of the screen.
natives.hud_busyspinnerOff = function()

    local call = natives.invoke(0x58F441B90EA84D06, 'void')
end

--- @return boolean
natives.hud_busyspinnerIsOn = function()

    local call = natives.invoke(0x823BF7B1DF613A21, 'bool')
    return call
end

-- Note: you must use VAR_STRING. Byte code very similar to TEXT_COMMAND_DISPLAY_TEXT in V
-- Old name: _GET_TEXT_SUBSTRING
--- @param text string
--- @param position integer
--- @param length integer
--- @return string
natives.hud_getCharacterFromAudioConversationFilename = function(text, position, length)
    assert(type(text) == 'string', 'Argument text must be of type string.')
    assert(type(position) == 'integer', 'Argument position must be of type integer.')
    assert(type(length) == 'integer', 'Argument length must be of type integer.')

    local call = natives.invoke(0x9D7E12EC6A1EE4E5, 'string', text, position, length)
    return call
end

-- Gets a string literal from a label name.
-- 
-- Old name: _GET_LABEL_TEXT
--- @param labelname string
--- @return string
natives.hud_getFilenameForAudioConversation = function(labelname)
    assert(type(labelname) == 'string', 'Argument labelname must be of type string.')

    local call = natives.invoke(0xCFEDCCAD3C5BA90D, 'string', labelname)
    return call
end

natives.hud_clearAllHelpMessages = function()

    local call = natives.invoke(0x916ED8321F087059, 'void')
end

--- @param textblock string
--- @return boolean
natives.hud_textBlockIsLoaded = function(textblock)
    assert(type(textblock) == 'string', 'Argument textblock must be of type string.')

    local call = natives.invoke(0xD0976CC34002DB57, 'bool', textblock)
    return call
end

--- @param textblock string
--- @return boolean
natives.hud_textBlockIsStreamed = function(textblock)
    assert(type(textblock) == 'string', 'Argument textblock must be of type string.')

    local call = natives.invoke(0x3CF96E16265B7DC8, 'bool', textblock)
    return call
end

--- @param textblock string
natives.hud_textBlockRequest = function(textblock)
    assert(type(textblock) == 'string', 'Argument textblock must be of type string.')

    local call = natives.invoke(0xF66090013DE648D5, 'void', textblock)
end

--- @param textblock string
natives.hud_textBlockDelete = function(textblock)
    assert(type(textblock) == 'string', 'Argument textblock must be of type string.')

    local call = natives.invoke(0xAA03F130A637D923, 'void', textblock)
end

--- @param textdatabase string
--- @return boolean
natives.hud_doesTextBlockExist = function(textdatabase)
    assert(type(textdatabase) == 'string', 'Argument textdatabase must be of type string.')

    local call = natives.invoke(0x2C729F2B94CEA911, 'bool', textdatabase)
    return call
end

-- Checks if the passed gxt name exists in the game files.
--- @param label string
--- @return boolean
natives.hud_doesTextLabelExist = function(label)
    assert(type(label) == 'string', 'Argument label must be of type string.')

    local call = natives.invoke(0x73C258C68D6F55B6, 'bool', label)
    return call
end

--- @param label string
--- @return string
natives.hud_getLabelText2 = function(label)
    assert(type(label) == 'string', 'Argument label must be of type string.')

    local call = natives.invoke(0x3429670F9B9EF2D3, 'string', label)
    return call
end

-- Similar to 0x9D7E12EC6A1EE4E5(GET_TEXT_SUBSTRING) but starts at the beginning of the string
--- @param text string
--- @param length integer
--- @return string
natives.hud_getTextSubstring2 = function(text, length)
    assert(type(text) == 'string', 'Argument text must be of type string.')
    assert(type(length) == 'integer', 'Argument length must be of type integer.')

    local call = natives.invoke(0xD8402B858F4DDD88, 'string', text, length)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.hud_n0X806862E5D266Cf38 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x806862E5D266CF38, 'any', p0, p1, p2)
    return call
end

-- Returns the length of the string passed (much like strlen).
--- @param string string
--- @return number
natives.hud_getLengthOfLiteralString = function(string)
    assert(type(string) == 'string', 'Argument string must be of type string.')

    local call = natives.invoke(0x481FBF588B0B76DB, 'int', string)
    return call
end

--- @param string string
--- @return number
natives.hud_getLengthOfLiteralStringInBytes = function(string)
    assert(type(string) == 'string', 'Argument string must be of type string.')

    local call = natives.invoke(0xDC5AD6B7AB8184F5, 'int', string)
    return call
end

-- Returns the label text given the hash.
-- 
-- Old name: _GET_LABEL_TEXT_BY_HASH
--- @param labelhash integer
--- @return string
natives.hud_getStringFromHashKey = function(labelhash)
    assert(type(labelhash) == 'integer', 'Argument labelhash must be of type integer.')

    local call = natives.invoke(0xBD5DD5EAE2B6CE14, 'string', labelhash)
    return call
end

--- @return boolean
natives.hud_isRadarPreferenceSwitchedOn = function()

    local call = natives.invoke(0x81E47F0EE1F2B21E, 'bool')
    return call
end

--- @return boolean
natives.hud_isSubtitlePreferenceSwitchedOn = function()

    local call = natives.invoke(0x7C4AC9573587F2DF, 'bool')
    return call
end

-- If Hud should be displayed
--- @param toggle boolean
natives.hud_displayHud = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xD63FE3AF9FB3D53F, 'void', toggle)
end

--- @return boolean
natives.hud_isHudHidden = function()

    local call = natives.invoke(0x71B72B478F8189DC, 'bool')
    return call
end

--- @return boolean
natives.hud_isRadarHidden = function()

    local call = natives.invoke(0x1B82FD5FFA4D666E, 'bool')
    return call
end

--- @return boolean
natives.hud_isRadarHiddenByScript = function()

    local call = natives.invoke(0x66F35DD9D2B58579, 'bool')
    return call
end

-- colorNameHash: https:--alloc8or.re/rdr3/doc/enums/eColor.txt
--- @param colornamehash integer
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
natives.hud_getColorFromName = function(colornamehash, red, green, blue, alpha)
    assert(type(colornamehash) == 'integer', 'Argument colornamehash must be of type integer.')
    assert(type(red) == 'integer', 'Argument red must be of type integer.')
    assert(type(green) == 'integer', 'Argument green must be of type integer.')
    assert(type(blue) == 'integer', 'Argument blue must be of type integer.')
    assert(type(alpha) == 'integer', 'Argument alpha must be of type integer.')

    local call = natives.invoke(0xB981DD2DFAF9B1C9, 'void', colornamehash, red, green, blue, alpha)
end

-- nullsub, this native does nothing since build 1436, use _BG_DISPLAY_TEXT (0x16794E044C9EFB58) instead.
--- @param text string
--- @param xpos number
--- @param ypos number
natives.hud_displayText = function(text, xpos, ypos)
    assert(type(text) == 'string', 'Argument text must be of type string.')
    assert(type(xpos) == 'number', 'Argument xpos must be of type number.')
    assert(type(ypos) == 'number', 'Argument ypos must be of type number.')

    local call = natives.invoke(0xD79334A4BB99BAD1, 'void', text, xpos, ypos)
end

-- This native does nothing since build 1436, use _BG_SET_TEXT_COLOR (0x16FA5CE47F184F1E) instead.
--- @param r integer
--- @param g integer
--- @param b integer
--- @param a integer
natives.hud_setTextColor = function(r, g, b, a)
    assert(type(r) == 'integer', 'Argument r must be of type integer.')
    assert(type(g) == 'integer', 'Argument g must be of type integer.')
    assert(type(b) == 'integer', 'Argument b must be of type integer.')
    assert(type(a) == 'integer', 'Argument a must be of type integer.')

    local call = natives.invoke(0x50A41AD966910F03, 'void', r, g, b, a)
end

--- @param renderid integer
natives.hud_setTextRenderId = function(renderid)
    assert(type(renderid) == 'integer', 'Argument renderid must be of type integer.')

    local call = natives.invoke(0xE550CDE128D56757, 'void', renderid)
end

--- @param name string
--- @param p1 boolean
--- @return boolean
natives.hud_registerNamedRendertarget = function(name, p1)
    assert(type(name) == 'string', 'Argument name must be of type string.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x98AF2BB6F62BD588, 'bool', name, p1)
    return call
end

--- @param name string
--- @return boolean
natives.hud_isNamedRendertargetRegistered = function(name)
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0x3EE32F7964C40FE6, 'bool', name)
    return call
end

--- @param name string
--- @return boolean
natives.hud_releaseNamedRendertarget = function(name)
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0x0E692EE61761361F, 'bool', name)
    return call
end

--- @param modelhash integer
natives.hud_linkNamedRendertarget = function(modelhash)
    assert(type(modelhash) == 'integer', 'Argument modelhash must be of type integer.')

    local call = natives.invoke(0x2F506B8556242DDB, 'void', modelhash)
end

--- @param name string
--- @return number
natives.hud_getNamedRendertargetRenderId = function(name)
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0xB6762A85EE29AA60, 'int', name)
    return call
end

--- @param modelhash integer
--- @return boolean
natives.hud_isNamedRendertargetLinked = function(modelhash)
    assert(type(modelhash) == 'integer', 'Argument modelhash must be of type integer.')

    local call = natives.invoke(0x707032835FF09AE7, 'bool', modelhash)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.hud_n0X9D37Eb5003E0F2Cf = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x9D37EB5003E0F2CF, 'void', p0, p1)
end

natives.hud_hideLoadingOnFadeThisFrame = function()

    local call = natives.invoke(0xEA600AABAF4B9084, 'void')
end

--- @param p0 userdata
--- @param p1 userdata
natives.hud_n0X052D4Ac0922Af91A = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x052D4AC0922AF91A, 'void', p0, p1)
end

natives.hud_hideHudAndRadarThisFrame = function()

    local call = natives.invoke(0x36CDD81627A6FCD2, 'void')
end

--- @param p0 userdata
--- @param p1 userdata
natives.hud_n0X8A59D44189Af2Bc5 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x8A59D44189AF2BC5, 'void', p0, p1)
end

natives.hud_n0X160825Dadf1B04B3 = function()

    local call = natives.invoke(0x160825DADF1B04B3, 'void')
end

--- @return any
natives.hud_n0X9C409Bbc492Cb5B1 = function()

    local call = natives.invoke(0x9C409BBC492CB5B1, 'any')
    return call
end

--- @param p0 userdata
--- @return any
natives.hud_n0X0501D52D24Ea8934 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x0501D52D24EA8934, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.hud_n0X100157D6D7Fe32Ca = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x100157D6D7FE32CA, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @return any
natives.hud_n0X28Ae29D909C8Fdce = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x28AE29D909C8FDCE, 'any', p0)
    return call
end

-- nullsub, doesn't do anything
natives.hud_n0X2F7Bb105144Acf30 = function()

    local call = natives.invoke(0x2F7BB105144ACF30, 'void')
end

-- nullsub, doesn't do anything
natives.hud_n0Xbfff81E12A745A5F = function()

    local call = natives.invoke(0xBFFF81E12A745A5F, 'void')
end

--- @param p0 boolean
--- @param name string
natives.hud_setMissionName = function(p0, name)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0x402669A4BDAA72DA, 'void', p0, name)
end

--- @param p0 boolean
--- @param name string
natives.hud_setMissionNameForUgcMission = function(p0, name)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0xD98630CE73C61E98, 'void', p0, name)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.hud_n0Xce0D2F5586627Cce = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0xCE0D2F5586627CCE, 'void', p0, p1, p2, p3, p4)
end

--- @param worldx number
--- @param worldy number
--- @param worldz number
--- @param screenx integer
--- @param screeny integer
--- @return number
natives.hud_getHudScreenPositionFromWorldPosition = function(worldx, worldy, worldz, screenx, screeny)
    assert(type(worldx) == 'number', 'Argument worldx must be of type number.')
    assert(type(worldy) == 'number', 'Argument worldy must be of type number.')
    assert(type(worldz) == 'number', 'Argument worldz must be of type number.')
    assert(type(screenx) == 'integer', 'Argument screenx must be of type integer.')
    assert(type(screeny) == 'integer', 'Argument screeny must be of type integer.')

    local call = natives.invoke(0xB39C81628EF10B42, 'int', worldx, worldy, worldz, screenx, screeny)
    return call
end

natives.hud_hideHudThisFrame = function()

    local call = natives.invoke(0xBF4F34A85CA2970D, 'void')
end

natives.hud_disableFrontendThisFrame = function()

    local call = natives.invoke(0x56CE42A528156A67, 'void')
end

natives.hud_n0X5651516D947Abc53 = function()

    local call = natives.invoke(0x5651516D947ABC53, 'void')
end

-- Old name: _ALLOW_PAUSE_MENU_WHEN_DEAD_THIS_FRAME
natives.hud_allowPauseWhenNotInStateOfPlayThisFrame = function()

    local call = natives.invoke(0x30996422DF1EE561, 'void')
end

--- @param active boolean
natives.hud_setFrontendActive = function(active)
    assert(type(active) == 'boolean', 'Argument active must be of type boolean.')

    local call = natives.invoke(0xCE47C21C0687EBC2, 'void', active)
end

-- Returns true when either Pause Menu, a Frontend Menu, Online Policies menu or Social Club menu is active.
--- @return boolean
natives.hud_isPauseMenuActive = function()

    local call = natives.invoke(0x535384D6067BA42E, 'bool')
    return call
end

--- @param state boolean
natives.hud_showPlayerCores = function(state)
    assert(type(state) == 'boolean', 'Argument state must be of type boolean.')

    local call = natives.invoke(0x50C803A4CD5932C5, 'void', state)
end

--- @param state boolean
natives.hud_showHorseCores = function(state)
    assert(type(state) == 'boolean', 'Argument state must be of type boolean.')

    local call = natives.invoke(0xD4EE21B7CC7FD350, 'void', state)
end

--- @param p0 userdata
natives.hud_n0X3Fe4Fb41Ef7D2196 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x3FE4FB41EF7D2196, 'void', p0)
end

--- @param p0 userdata
natives.hud_journalWriteEntry = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x6DFDD665E416B093, 'void', p0)
end

--- @param p0 userdata
--- @return any
natives.hud_journalCanWriteEntry = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xCF782691D91F270E, 'any', p0)
    return call
end

--- @return any
natives.hud_journalGetEntryCount = function()

    local call = natives.invoke(0xE65B5DE53351BE22, 'any')
    return call
end

--- @param p0 userdata
--- @return any
natives.hud_journalGetEntryAtIndex = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x3D16ABD7A1FD8C96, 'any', p0)
    return call
end

--- @param p0 userdata
--- @return any
natives.hud_journalGetGrimeAtIndex = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xCB5945E1B855852F, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.hud_journalGetEntryInfo = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x5514C3E60673530F, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.hud_journalGetTextureWithLayout = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x62CC549B3B8EA2AA, 'any', p0, p1, p2)
    return call
end

--- @param p0 userdata
natives.hud_journalMarkRead = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xE4509BABE59BD24E, 'void', p0)
end

natives.hud_journalClearAllProgress = function()

    local call = natives.invoke(0xF402978DE6F88D6E, 'void')
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.hud_uiRequestScene = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xB6857100F8FD433C, 'any', p0, p1)
    return call
end

--- @param uiscene integer
natives.hud_n0Xf1E6979C0B779985 = function(uiscene)
    assert(type(uiscene) == 'integer', 'Argument uiscene must be of type integer.')

    local call = natives.invoke(0xF1E6979C0B779985, 'void', uiscene)
end

--- @param p0 userdata
--- @return any
natives.hud_uiGetSceneUiobject = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xBE1067CD1C9570F6, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.hud_uiMovieviewSetRenderTarget = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x51DE09A2196BD951, 'void', p0, p1)
end

--- @param inputhash integer
--- @param labelname string
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 integer
--- @return number
natives.hud_uiPromptCreate = function(inputhash, labelname, p2, p3, p4, p5)
    assert(type(inputhash) == 'integer', 'Argument inputhash must be of type integer.')
    assert(type(labelname) == 'string', 'Argument labelname must be of type string.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'integer', 'Argument p5 must be of type integer.')

    local call = natives.invoke(0x29FA7910726C3889, 'integer', inputhash, labelname, p2, p3, p4, p5)
    return call
end

--- @return number
natives.hud_uiPromptRegisterBegin = function()

    local call = natives.invoke(0x04F97DE45A519419, 'integer')
    return call
end

--- @param prompt integer
natives.hud_uiPromptRegisterEnd = function(prompt)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')

    local call = natives.invoke(0xF7AA2696A22AD8B9, 'void', prompt)
end

-- priority: https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/ePromptPriority
--- @param prompt integer
--- @param priority integer
natives.hud_uiPromptSetPriority = function(prompt, priority)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(priority) == 'integer', 'Argument priority must be of type integer.')

    local call = natives.invoke(0xCA24F528D0D16289, 'void', prompt, priority)
end

--- @param prompt integer
--- @param action integer
--- @return any
natives.hud_uiPromptSetControlAction = function(prompt, action)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(action) == 'integer', 'Argument action must be of type integer.')

    local call = natives.invoke(0xB5352B7494A08258, 'any', prompt, action)
    return call
end

--- @param prompt integer
--- @param action integer
natives.hud_uiPromptSetAllowedAction = function(prompt, action)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(action) == 'integer', 'Argument action must be of type integer.')

    local call = natives.invoke(0x565C1CE183CB0EAF, 'void', prompt, action)
end

--- @param prompt integer
--- @param releasemode boolean
natives.hud_uiPromptSetStandardMode = function(prompt, releasemode)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(releasemode) == 'boolean', 'Argument releasemode must be of type boolean.')

    local call = natives.invoke(0xCC6656799977741B, 'void', prompt, releasemode)
end

-- Params: p1 is 0
--- @param prompt integer
--- @param p1 integer
--- @return boolean
natives.hud_uiPromptHasStandardModeCompleted = function(prompt, p1)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xC92AC953F0A982AE, 'bool', prompt, p1)
    return call
end

--- @param prompt integer
--- @param depletiontimems integer
natives.hud_uiPromptSetPressedTimedMode = function(prompt, depletiontimems)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(depletiontimems) == 'integer', 'Argument depletiontimems must be of type integer.')

    local call = natives.invoke(0x1473D3AF51D54276, 'void', prompt, depletiontimems)
end

--- @param prompt integer
--- @return boolean
natives.hud_uiPromptHasPressedTimedModeCompleted = function(prompt)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')

    local call = natives.invoke(0x3CE854D250A88DAF, 'bool', prompt)
    return call
end

--- @param prompt integer
--- @return boolean
natives.hud_uiPromptHasPressedTimedModeFailed = function(prompt)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')

    local call = natives.invoke(0x1A17B9ECFF617562, 'bool', prompt)
    return call
end

-- Params: p2 is 304000 in R* SP Script coachrobberies
--- @param prompt integer
--- @param holdtimems integer
natives.hud_uiPromptSetHoldMode = function(prompt, holdtimems)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(holdtimems) == 'integer', 'Argument holdtimems must be of type integer.')

    local call = natives.invoke(0x94073D5CA3F16B7B, 'void', prompt, holdtimems)
end

-- Hashes: SHORT_TIMED_EVENT_MP, SHORT_TIMED_EVENT, MEDIUM_TIMED_EVENT, LONG_TIMED_EVENT, RUSTLING_CALM_TIMING, PLAYER_FOCUS_TIMING, PLAYER_REACTION_TIMING
--- @param prompt integer
--- @param timedeventhash integer
natives.hud_uiPromptSetStandardizedHoldMode = function(prompt, timedeventhash)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(timedeventhash) == 'integer', 'Argument timedeventhash must be of type integer.')

    local call = natives.invoke(0x74C7D7B72ED0D3CF, 'void', prompt, timedeventhash)
end

--- @param prompt integer
natives.hud_uiPromptSetHoldIndefinitelyMode = function(prompt)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')

    local call = natives.invoke(0xEA5CCF4EEB2F82D1, 'void', prompt)
end

--- @param prompt integer
--- @param autofilltimems integer
--- @param holdtimems integer
natives.hud_uiPromptSetHoldAutoFillMode = function(prompt, autofilltimems, holdtimems)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(autofilltimems) == 'integer', 'Argument autofilltimems must be of type integer.')
    assert(type(holdtimems) == 'integer', 'Argument holdtimems must be of type integer.')

    local call = natives.invoke(0x3CE932E737C145D6, 'void', prompt, autofilltimems, holdtimems)
end

--- @param prompt integer
--- @param autofilltimems integer
--- @param holdtimems integer
natives.hud_uiPromptSetHoldAutoFillWithDecayMode = function(prompt, autofilltimems, holdtimems)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(autofilltimems) == 'integer', 'Argument autofilltimems must be of type integer.')
    assert(type(holdtimems) == 'integer', 'Argument holdtimems must be of type integer.')

    local call = natives.invoke(0xA3F2149AA24F3D8E, 'void', prompt, autofilltimems, holdtimems)
end

--- @param prompt integer
--- @return boolean
natives.hud_uiPromptHasHoldAutoFillMode = function(prompt)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')

    local call = natives.invoke(0x8010BEBD0D5ED5BC, 'bool', prompt)
    return call
end

--- @param prompt integer
--- @return boolean
natives.hud_uiPromptHasHoldMode = function(prompt)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')

    local call = natives.invoke(0xB60C9F9ED47ABB76, 'bool', prompt)
    return call
end

--- @param prompt integer
--- @return boolean
natives.hud_uiPromptIsHoldModeRunning = function(prompt)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')

    local call = natives.invoke(0xC7D70EAEF92EFF48, 'bool', prompt)
    return call
end

--- @param prompt integer
--- @return boolean
natives.hud_uiPromptHasHoldModeCompleted = function(prompt)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')

    local call = natives.invoke(0xE0F65F0640EF0617, 'bool', prompt)
    return call
end

--- @param prompt integer
--- @return number
natives.hud_uiPromptGetProgress = function(prompt)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')

    local call = natives.invoke(0x81801291806DBC50, 'float', prompt)
    return call
end

--- @param prompt integer
--- @param mashes integer
natives.hud_uiPromptSetMashMode = function(prompt, mashes)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(mashes) == 'integer', 'Argument mashes must be of type integer.')

    local call = natives.invoke(0xDF6423BF071C7F71, 'void', prompt, mashes)
end

--- @param prompt integer
natives.hud_uiPromptSetMashIndefinitelyMode = function(prompt)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')

    local call = natives.invoke(0x7B66E89312727274, 'void', prompt)
end

--- @param prompt integer
--- @param mashes integer
--- @param p2 number
--- @param p3 number
natives.hud_uiPromptSetMashWithResistanceMode = function(prompt, mashes, p2, p3)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(mashes) == 'integer', 'Argument mashes must be of type integer.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')

    local call = natives.invoke(0xCD1BDFF15EFA79F5, 'void', prompt, mashes, p2, p3)
end

--- @param prompt integer
--- @param mashes integer
--- @param p2 number
--- @param p3 number
natives.hud_uiPromptSetMashWithResistanceCanFailMode = function(prompt, mashes, p2, p3)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(mashes) == 'integer', 'Argument mashes must be of type integer.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')

    local call = natives.invoke(0xDC0CB602DEADBA53, 'void', prompt, mashes, p2, p3)
end

--- @param prompt integer
--- @param autofilltimems integer
--- @param mashes integer
natives.hud_uiPromptSetMashAutoFillMode = function(prompt, autofilltimems, mashes)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(autofilltimems) == 'integer', 'Argument autofilltimems must be of type integer.')
    assert(type(mashes) == 'integer', 'Argument mashes must be of type integer.')

    local call = natives.invoke(0x6C39587D7CC66801, 'void', prompt, autofilltimems, mashes)
end

--- @param prompt integer
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 userdata
natives.hud_uiPromptSetMashManualMode = function(prompt, p1, p2, p3, p4)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x32DF729D8BD3C1C6, 'void', prompt, p1, p2, p3, p4)
end

--- @param prompt integer
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 userdata
natives.hud_uiPromptSetMashManualCanFailMode = function(prompt, p1, p2, p3, p4)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x179DCF71F705DA20, 'void', prompt, p1, p2, p3, p4)
end

--- @param prompt integer
--- @return boolean
natives.hud_uiPromptHasManualMashMode = function(prompt)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')

    local call = natives.invoke(0xA6C6A4ADB3BAC409, 'bool', prompt)
    return call
end

--- @param prompt integer
--- @return boolean
natives.hud_uiPromptHasMashMode = function(prompt)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')

    local call = natives.invoke(0xCD072523791DDC1B, 'bool', prompt)
    return call
end

--- @param p0 userdata
--- @return any
natives.hud_n0Xb0E8599243B3F568 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xB0E8599243B3F568, 'any', p0)
    return call
end

--- @param prompt integer
--- @return boolean
natives.hud_uiPromptHasMashModeCompleted = function(prompt)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')

    local call = natives.invoke(0x845CE958416DC473, 'bool', prompt)
    return call
end

--- @param prompt integer
--- @return boolean
natives.hud_uiPromptHasMashModeFailed = function(prompt)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')

    local call = natives.invoke(0x25B18E530CF39D6F, 'bool', prompt)
    return call
end

--- @param prompt integer
--- @return number
natives.hud_uiPromptGetMashModeProgress = function(prompt)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')

    local call = natives.invoke(0x8A9585293863B8A5, 'float', prompt)
    return call
end

-- standard (prompt not held) rate: (1f / 128f)
-- fast (prompt held) rate: (1f / 64f)
-- punitive (been hit) rate: (1f / 128f)
--- @param prompt integer
--- @param rate number
natives.hud_uiPromptSetMashManualModeIncreasePerPress = function(prompt, rate)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(rate) == 'number', 'Argument rate must be of type number.')

    local call = natives.invoke(0xA0D1D79C6036A855, 'void', prompt, rate)
end

-- standard (prompt not held) rate: 0.035f
-- fast (prompt held) rate: 0.015f
-- punitive (been hit) rate: 0.14f
--- @param prompt integer
--- @param speed number
natives.hud_uiPromptSetMashManualModeDecaySpeed = function(prompt, speed)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(speed) == 'number', 'Argument speed must be of type number.')

    local call = natives.invoke(0x7D393C247FB9B431, 'void', prompt, speed)
end

--- @param prompt integer
--- @param speed number
natives.hud_uiPromptSetMashManualModePressedGrowthSpeed = function(prompt, speed)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(speed) == 'number', 'Argument speed must be of type number.')

    local call = natives.invoke(0x56DBB26F98582C29, 'void', prompt, speed)
end

-- Used for controllers
--- @param prompt integer
--- @param p1 number
--- @param counterclockwise boolean
natives.hud_uiPromptSetRotateMode = function(prompt, p1, counterclockwise)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(counterclockwise) == 'boolean', 'Argument counterclockwise must be of type boolean.')

    local call = natives.invoke(0x7ABE7095FB3D2581, 'void', prompt, p1, counterclockwise)
end

--- @param prompt integer
--- @param p1 number
--- @param p2 number
--- @param p3 userdata
natives.hud_uiPromptSetTargetMode = function(prompt, p1, p2, p3)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x5F6503D9CD2754EB, 'void', prompt, p1, p2, p3)
end

--- @param prompt integer
--- @param p1 number
--- @param p2 number
natives.hud_uiPromptSetTargetModeTarget = function(prompt, p1, p2)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')

    local call = natives.invoke(0x5E019C45DD3B6A14, 'void', prompt, p1, p2)
end

--- @param prompt integer
--- @param progress number
natives.hud_uiPromptSetTargetModeProgress = function(prompt, progress)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(progress) == 'number', 'Argument progress must be of type number.')

    local call = natives.invoke(0x00123054BEC8A30F, 'void', prompt, progress)
end

--- @param prompt integer
--- @param toggle boolean
natives.hud_uiPromptSetBeatMode = function(prompt, toggle)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xF957A1654C6322FE, 'void', prompt, toggle)
end

--- @param prompt integer
--- @return boolean
natives.hud_uiPromptWasBeatModePressedInTimeWindow = function(prompt)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')

    local call = natives.invoke(0x1FE4788AB1430C55, 'bool', prompt)
    return call
end

--- @param prompt integer
--- @param p1 userdata
natives.hud_uiPromptSetBeatModeGrayedOut = function(prompt, p1)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xB487A4936FBF40AC, 'void', prompt, p1)
end

--- @param prompt integer
natives.hud_uiPromptRestartModes = function(prompt)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')

    local call = natives.invoke(0xDC6C55DFA2C24EE5, 'void', prompt)
end

--- @param prompt integer
--- @param p1 userdata
natives.hud_uiPromptSetSpinnerSpeed = function(prompt, p1)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xAC6586A7FDCD4B68, 'void', prompt, p1)
end

--- @param prompt integer
--- @param p1 userdata
natives.hud_uiPromptSetSpinnerPosition = function(prompt, p1)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x832CB510DE546282, 'void', prompt, p1)
end

--- @param prompt integer
--- @param toggle boolean
natives.hud_uiPromptSetUrgentPulsingEnabled = function(prompt, toggle)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xC5F428EE08FA7F2C, 'void', prompt, toggle)
end

--- @param prompt integer
--- @return boolean
natives.hud_uiPromptGetUrgentPulsingEnabled = function(prompt)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')

    local call = natives.invoke(0x1FBA0DABECDDB52B, 'bool', prompt)
    return call
end

--- @param prompt integer
--- @param p1 userdata
natives.hud_uiPromptSetTag = function(prompt, p1)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xDEC85C174751292B, 'void', prompt, p1)
end

--- @param entity integer
--- @return number
natives.hud_uiPromptGetGroupIdForTargetEntity = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xB796970BD125FCE8, 'int', entity)
    return call
end

--- @param p0 userdata
--- @param p1 integer
--- @return number
natives.hud_uiPromptGetGroupIdForScenarioPoint = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xCB73D7521E7103F0, 'int', p0, p1)
    return call
end

-- tabIndex: specifies tab of prompt
--- @param prompt integer
--- @param groupid integer
--- @param tabindex integer
natives.hud_uiPromptSetGroup = function(prompt, groupid, tabindex)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')
    assert(type(tabindex) == 'integer', 'Argument tabindex must be of type integer.')

    local call = natives.invoke(0x2F11D3A254169EA4, 'void', prompt, groupid, tabindex)
end

--- @param prompt integer
--- @param p1 userdata
natives.hud_uiPromptRemoveGroup = function(prompt, p1)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x4E52C800A28F7BE8, 'void', prompt, p1)
end

-- Note: you must use VAR_STRING for p1 if string is not part of text database
-- tabAmount: specifies number of tabs in prompt group
-- tabDefaultIndex: specifies starting index
-- p3 if is set > 3 you can no longer press Q to change tab if there are more than one tab set in tabAmount
--- @param hash integer
--- @param name string
--- @param tabamount integer
--- @param tabdefaultindex integer
--- @param p4 integer
--- @param prompt integer
--- @return any
natives.hud_uiPromptSetActiveGroupThisFrame = function(hash, name, tabamount, tabdefaultindex, p4, prompt)
    assert(type(hash) == 'integer', 'Argument hash must be of type integer.')
    assert(type(name) == 'string', 'Argument name must be of type string.')
    assert(type(tabamount) == 'integer', 'Argument tabamount must be of type integer.')
    assert(type(tabdefaultindex) == 'integer', 'Argument tabdefaultindex must be of type integer.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')

    local call = natives.invoke(0xC65A45D4453C2627, 'any', hash, name, tabamount, tabdefaultindex, p4, prompt)
    return call
end

--- @param hash integer
--- @return number
natives.hud_uiPromptGetGroupActivePage = function(hash)
    assert(type(hash) == 'integer', 'Argument hash must be of type integer.')

    local call = natives.invoke(0xC1FCC36C3F7286C8, 'int', hash)
    return call
end

--- @param entity integer
--- @param p1 number
--- @param p2 integer
--- @param p3 integer
--- @param p4 integer
--- @param name string
--- @param p6 integer
--- @return any
natives.hud_uiPromptSetAmbientGroupThisFrame = function(entity, p1, p2, p3, p4, name, p6)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')
    assert(type(name) == 'string', 'Argument name must be of type string.')
    assert(type(p6) == 'integer', 'Argument p6 must be of type integer.')

    local call = natives.invoke(0x315C81D760609108, 'any', entity, p1, p2, p3, p4, name, p6)
    return call
end

--- @param groupid integer
--- @param volume integer
--- @param p2 string
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @return any
natives.hud_n0X8B55B324A9123F6B = function(groupid, volume, p2, p3, p4, p5)
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(p2) == 'string', 'Argument p2 must be of type string.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0x8B55B324A9123F6B, 'any', groupid, volume, p2, p3, p4, p5)
    return call
end

--- @param hash integer
--- @return boolean
natives.hud_uiPromptDoesAmbientGroupExist = function(hash)
    assert(type(hash) == 'integer', 'Argument hash must be of type integer.')

    local call = natives.invoke(0xEB550B927B34A1BB, 'bool', hash)
    return call
end

--- @param p0 userdata
--- @param prompt integer
--- @param p2 userdata
natives.hud_uiPromptAddGroupLink = function(p0, prompt, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x684C96CC7C66E8EF, 'void', p0, prompt, p2)
end

--- @param p0 userdata
--- @param prompt integer
natives.hud_uiPromptAddGroupReturnLink = function(p0, prompt)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')

    local call = natives.invoke(0x837972ED28159536, 'void', p0, prompt)
end

-- TM_ANY = 0,
-- TM_ON_FOOT,
-- TM_IN_VEHICLE
--- @param prompt integer
--- @param mode integer
natives.hud_uiPromptSetTransportMode = function(prompt, mode)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(mode) == 'integer', 'Argument mode must be of type integer.')

    local call = natives.invoke(0x876E4A35C73A6655, 'void', prompt, mode)
end

natives.hud_uiPromptDisablePromptsThisFrame = function()

    local call = natives.invoke(0xF1622CE88A1946FB, 'void')
end

--- @param prompt integer
natives.hud_uiPromptDelete = function(prompt)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')

    local call = natives.invoke(0x00EDE88D4D13CF59, 'void', prompt)
end

--- @param prompt integer
--- @return boolean
natives.hud_uiPromptIsValid = function(prompt)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')

    local call = natives.invoke(0x347469FBDD1589A9, 'bool', prompt)
    return call
end

--- @param prompt integer
--- @return boolean
natives.hud_uiPromptIsActive = function(prompt)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')

    local call = natives.invoke(0x546E342E01DE71CF, 'bool', prompt)
    return call
end

--- @param prompt integer
--- @param toggle boolean
natives.hud_uiPromptSetVisible = function(prompt, toggle)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x71215ACCFDE075EE, 'void', prompt, toggle)
end

--- @param prompt integer
--- @param toggle boolean
natives.hud_uiPromptSetEnabled = function(prompt, toggle)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x8A0FB4D03A630D21, 'void', prompt, toggle)
end

--- @param prompt integer
--- @param text string
natives.hud_uiPromptSetText = function(prompt, text)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(text) == 'string', 'Argument text must be of type string.')

    local call = natives.invoke(0x5DD02A8318420DD7, 'void', prompt, text)
end

-- attribute: https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eUIPromptAttribute
--- @param prompt integer
--- @param attribute integer
--- @param enabled boolean
natives.hud_uiPromptSetAttribute = function(prompt, attribute, enabled)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(attribute) == 'integer', 'Argument attribute must be of type integer.')
    assert(type(enabled) == 'boolean', 'Argument enabled must be of type boolean.')

    local call = natives.invoke(0x560E76D5E2E1803F, 'void', prompt, attribute, enabled)
end

-- Params: type = mostly 0, 6 (net_mission_intro_story_gvo), 7 (fm_mission_controller), 14 (net_ugc_end_flow_transition_online), 15 (net_main_[tlg_]offline)
--- @param prompt integer
--- @param type integer
natives.hud_uiPromptSetType = function(prompt, type)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(type) == 'integer', 'Argument type must be of type integer.')

    local call = natives.invoke(0xF4A5C4509BF923B1, 'void', prompt, type)
end

--- @param prompt integer
--- @param p1 boolean
natives.hud_n0X53Ce46C01A089Da1 = function(prompt, p1)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x53CE46C01A089DA1, 'void', prompt, p1)
end

--- @param prompt integer
--- @param p1 userdata
natives.hud_uiPromptSetManualResolved = function(prompt, p1)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xA520C7B05FA4EB2A, 'void', prompt, p1)
end

-- Attaches a Volume
--- @param prompt integer
--- @param volume integer
natives.hud_uiPromptContextSetVolume = function(prompt, volume)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')

    local call = natives.invoke(0x4D107406667423BE, 'void', prompt, volume)
end

--- @param prompt integer
--- @param x number
--- @param y number
--- @param z number
natives.hud_uiPromptContextSetPoint = function(prompt, x, y, z)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0xAE84C5EE2C384FB3, 'void', prompt, x, y, z)
end

--- @param prompt integer
--- @param radius number
natives.hud_uiPromptContextSetRadius = function(prompt, radius)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')

    local call = natives.invoke(0x0C718001B77CA468, 'void', prompt, radius)
end

--- @param prompt integer
--- @return boolean
natives.hud_uiPromptIsPressed = function(prompt)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')

    local call = natives.invoke(0x21E60E230086697F, 'bool', prompt)
    return call
end

--- @param prompt integer
--- @return boolean
natives.hud_uiPromptIsJustPressed = function(prompt)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')

    local call = natives.invoke(0x2787CC611D3FACC5, 'bool', prompt)
    return call
end

--- @param prompt integer
--- @return boolean
natives.hud_uiPromptIsJustReleased = function(prompt)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')

    local call = natives.invoke(0x635CC82FA297A827, 'bool', prompt)
    return call
end

--- @param prompt integer
--- @return boolean
natives.hud_uiPromptIsReleased = function(prompt)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')

    local call = natives.invoke(0xAFC887BA7A7756D6, 'bool', prompt)
    return call
end

-- https:--github.com/femga/rdr3_discoveries/tree/master/graphics/HUD/prompts/prompt_types
--- @param p0 integer
natives.hud_uiPromptEnablePromptTypeThisFrame = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x06565032897BA861, 'void', p0)
end

--- @param p0 integer
natives.hud_uiPromptDisablePromptTypeThisFrame = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0xFC094EF26DD153FA, 'void', p0)
end

natives.hud_uiPromptFilterClear = function()

    local call = natives.invoke(0x6A2F820452017EA2, 'void')
end

--- @param ped integer
natives.hud_uiPromptSetPromptPriorityPreference = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x530A428705BE5DEF, 'void', ped)
end

natives.hud_uiPromptClearPromptPriorityPreference = function()

    local call = natives.invoke(0x51259AE5C72D4A1B, 'void')
end

--- @param prompt integer
--- @return boolean
natives.hud_uiPromptIsEnabled = function(prompt)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')

    local call = natives.invoke(0x0D00EDDFB58B7F28, 'bool', prompt)
    return call
end

--- @param controlaction integer
--- @return boolean
natives.hud_uiPromptIsControlActionActive = function(controlaction)
    assert(type(controlaction) == 'integer', 'Argument controlaction must be of type integer.')

    local call = natives.invoke(0x1BE19185B8AFE299, 'bool', controlaction)
    return call
end

--- @param p0 userdata
--- @return any
natives.hud_n0Xd6Bd313Cfa41E57A = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xD6BD313CFA41E57A, 'any', p0)
    return call
end

-- This returns an id that can be used with 0x6095358C4142932A.
--- @return number
natives.hud_uiPromptSetRegisterHorizontalOrientation = function()

    local call = natives.invoke(0xD9459157EB22C895, 'int')
    return call
end

-- id is the return value from 0xD9459157EB22C895.
--- @param id integer
natives.hud_uiPromptClearHorizontalOrientation = function(id)
    assert(type(id) == 'integer', 'Argument id must be of type integer.')

    local call = natives.invoke(0x6095358C4142932A, 'void', id)
end

--- @param prompt integer
--- @param p1 userdata
natives.hud_uiPromptSetOrderingAsInputType = function(prompt, p1)
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x2F385ECC5200938D, 'void', prompt, p1)
end

--- @return any
natives.hud_n0X066725A9D52B3641 = function()

    local call = natives.invoke(0x066725A9D52B3641, 'any')
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.hud_n0X958278B97C4Affd8 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x958278B97C4AFFD8, 'void', p0, p1)
end

--- @param player integer
--- @param username string
--- @param pointedclantag boolean
--- @param isrockstarclan boolean
--- @param clantag string
--- @param clanflag integer
--- @return number
natives.hud_createMpGamerTag = function(player, username, pointedclantag, isrockstarclan, clantag, clanflag)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(username) == 'string', 'Argument username must be of type string.')
    assert(type(pointedclantag) == 'boolean', 'Argument pointedclantag must be of type boolean.')
    assert(type(isrockstarclan) == 'boolean', 'Argument isrockstarclan must be of type boolean.')
    assert(type(clantag) == 'string', 'Argument clantag must be of type string.')
    assert(type(clanflag) == 'integer', 'Argument clanflag must be of type integer.')

    local call = natives.invoke(0xD877AF112AD2B41B, 'int', player, username, pointedclantag, isrockstarclan, clantag, clanflag)
    return call
end

--- @param ped integer
--- @param username string
--- @param pointedclantag boolean
--- @param isrockstarclan boolean
--- @param clantag string
--- @param clanflag integer
--- @return number
natives.hud_createFakeMpGamerTag = function(ped, username, pointedclantag, isrockstarclan, clantag, clanflag)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(username) == 'string', 'Argument username must be of type string.')
    assert(type(pointedclantag) == 'boolean', 'Argument pointedclantag must be of type boolean.')
    assert(type(isrockstarclan) == 'boolean', 'Argument isrockstarclan must be of type boolean.')
    assert(type(clantag) == 'string', 'Argument clantag must be of type string.')
    assert(type(clanflag) == 'integer', 'Argument clanflag must be of type integer.')

    local call = natives.invoke(0x53CB4B502E1C57EA, 'int', ped, username, pointedclantag, isrockstarclan, clantag, clanflag)
    return call
end

--- @param entity integer
--- @param text string
--- @return number
natives.hud_createMpGamerTagOnEntity = function(entity, text)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(text) == 'string', 'Argument text must be of type string.')

    local call = natives.invoke(0xE961BF23EAB76B12, 'int', entity, text)
    return call
end

--- @param gamertagid integer
natives.hud_removeMpGamerTag = function(gamertagid)
    assert(type(gamertagid) == 'integer', 'Argument gamertagid must be of type integer.')

    local call = natives.invoke(0x839BFD7D7E49FE09, 'void', gamertagid)
end

--- @param gamertagid integer
--- @return boolean
natives.hud_isMpGamerTagActive = function(gamertagid)
    assert(type(gamertagid) == 'integer', 'Argument gamertagid must be of type integer.')

    local call = natives.invoke(0x6E1C31E14C7A5F97, 'bool', gamertagid)
    return call
end

--- @param gamertagid integer
--- @param entity integer
--- @return boolean
natives.hud_isMpGamerTagActiveOnEntity = function(gamertagid, entity)
    assert(type(gamertagid) == 'integer', 'Argument gamertagid must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x502E1591A504F843, 'bool', gamertagid, entity)
    return call
end

-- visibility:
-- enum eUIGamertagVisibility
-- {
-- 	UIGAMERTAGVISIBILITY_NONE,
-- 	UIGAMERTAGVISIBILITY_ICON,
-- 	UIGAMERTAGVISIBILITY_SIMPLE,
-- 	UIGAMERTAGVISIBILITY_COMPLEX
-- };
--- @param gamertagid integer
--- @param visibility integer
natives.hud_setMpGamerTagVisibility = function(gamertagid, visibility)
    assert(type(gamertagid) == 'integer', 'Argument gamertagid must be of type integer.')
    assert(type(visibility) == 'integer', 'Argument visibility must be of type integer.')

    local call = natives.invoke(0x93171DDDAB274EB8, 'void', gamertagid, visibility)
end

-- Found types: GENERIC_PLAYER, DEADDROP, HOTPROPERTY, MINIGAMES
--- @param gamertagid integer
--- @param type integer
natives.hud_setMpGamerTagType = function(gamertagid, type)
    assert(type(gamertagid) == 'integer', 'Argument gamertagid must be of type integer.')
    assert(type(type) == 'integer', 'Argument type must be of type integer.')

    local call = natives.invoke(0x25B9C78A25105C35, 'void', gamertagid, type)
end

--- @param gamertagid integer
--- @param colour integer
natives.hud_setMpGamerTagColour = function(gamertagid, colour)
    assert(type(gamertagid) == 'integer', 'Argument gamertagid must be of type integer.')
    assert(type(colour) == 'integer', 'Argument colour must be of type integer.')

    local call = natives.invoke(0x84BD27DDF9575816, 'void', gamertagid, colour)
end

-- nullsub, doesn't do anything
--- @param gamertagid integer
--- @param allow boolean
natives.hud_setMpGamerTagUnkAllowLocalized = function(gamertagid, allow)
    assert(type(gamertagid) == 'integer', 'Argument gamertagid must be of type integer.')
    assert(type(allow) == 'boolean', 'Argument allow must be of type boolean.')

    local call = natives.invoke(0xEF7AB1A0E8C86170, 'void', gamertagid, allow)
end

--- @param gamertagid integer
--- @param string string
natives.hud_setMpGamerTagName = function(gamertagid, string)
    assert(type(gamertagid) == 'integer', 'Argument gamertagid must be of type integer.')
    assert(type(string) == 'string', 'Argument string must be of type string.')

    local call = natives.invoke(0xEA6F4B8D4B4B5B3E, 'void', gamertagid, string)
end

--- @param gamertagid integer
--- @param text string
natives.hud_setMpGamerTagNamePosse = function(gamertagid, text)
    assert(type(gamertagid) == 'integer', 'Argument gamertagid must be of type integer.')
    assert(type(text) == 'string', 'Argument text must be of type string.')

    local call = natives.invoke(0x1EA716E0628A6F44, 'void', gamertagid, text)
end

--- @param gamertagid integer
--- @param string string
natives.hud_setMpGamerTagBigText = function(gamertagid, string)
    assert(type(gamertagid) == 'integer', 'Argument gamertagid must be of type integer.')
    assert(type(string) == 'string', 'Argument string must be of type string.')

    local call = natives.invoke(0xA0D7CE5F83259663, 'void', gamertagid, string)
end

-- Found icons: https:--pastebin.com/xx6rEgiG
--- @param gamertagid integer
--- @param icon integer
natives.hud_setMpGamerTagTopIcon = function(gamertagid, icon)
    assert(type(gamertagid) == 'integer', 'Argument gamertagid must be of type integer.')
    assert(type(icon) == 'integer', 'Argument icon must be of type integer.')

    local call = natives.invoke(0x5F57522BC1EB9D9D, 'void', gamertagid, icon)
end

-- Found icons: SPEAKER, THROPY
--- @param gamertagid integer
--- @param icon integer
natives.hud_setMpGamerTagSecondaryIcon = function(gamertagid, icon)
    assert(type(gamertagid) == 'integer', 'Argument gamertagid must be of type integer.')
    assert(type(icon) == 'integer', 'Argument icon must be of type integer.')

    local call = natives.invoke(0x95384C6CE1526EFF, 'void', gamertagid, icon)
end

--- @param gamertagid integer
natives.hud_mpGamerTagEnableReviveTopIcon = function(gamertagid)
    assert(type(gamertagid) == 'integer', 'Argument gamertagid must be of type integer.')

    local call = natives.invoke(0xFFF6579CF0139FCE, 'void', gamertagid)
end

--- @param gamertagid integer
natives.hud_mpGamerTagDisableReviveTopIcon = function(gamertagid)
    assert(type(gamertagid) == 'integer', 'Argument gamertagid must be of type integer.')

    local call = natives.invoke(0x1F9A64C2804B3471, 'void', gamertagid)
end

--- @param ped integer
--- @param args userdata
natives.ik_inverseKinematicsRequestLookAt = function(ped, args)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(args) == 'userdata', 'Argument args must be of type userdata.')

    local call = natives.invoke(0x66F9EB44342BB4C5, 'void', ped, args)
end

--- @param ped integer
--- @param args userdata
natives.ik_n0X0B9F7A01Ec50448D = function(ped, args)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(args) == 'userdata', 'Argument args must be of type userdata.')

    local call = natives.invoke(0x0B9F7A01EC50448D, 'void', ped, args)
end

-- Seems to disable IK on ped
--- @param ped integer
--- @param p1 integer
--- @param p2 boolean
natives.ik_inverseKinematicsSetDisabledForPed = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x0EABF182FBB63D72, 'void', ped, p1, p2)
end

--- @param ped integer
--- @param p1 integer
--- @return boolean
natives.ik_n0X6098139150Dcc745 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x6098139150DCC745, 'bool', ped, p1)
    return call
end

--- @param ped1 integer
--- @param ped2 integer
natives.ik_n0X873C792E07A32C8B = function(ped1, ped2)
    assert(type(ped1) == 'integer', 'Argument ped1 must be of type integer.')
    assert(type(ped2) == 'integer', 'Argument ped2 must be of type integer.')

    local call = natives.invoke(0x873C792E07A32C8B, 'void', ped1, ped2)
end

-- Shows the cursor on screen for one frame.
-- 
-- Old name: _SET_MOUSE_CURSOR_ACTIVE_THIS_FRAME
natives.interaction_setMouseCursorThisFrame = function()

    local call = natives.invoke(0xF12E4CCAF249DC10, 'void')
end

-- Changes the mouse cursor's sprite.
-- 
-- spriteId's: https:--github.com/femga/rdr3_discoveries/tree/master/graphics/HUD/cursor_sprites#readme
-- 
-- Old name: _SET_MOUSE_CURSOR_SPRITE
--- @param spriteid integer
natives.interaction_setMouseCursorStyle = function(spriteid)
    assert(type(spriteid) == 'integer', 'Argument spriteid must be of type integer.')

    local call = natives.invoke(0x7F5858AAB5A58CCE, 'void', spriteid)
end

-- Allows camera to be moved if middle mouse button is held while in first person
-- Must be called every frame
-- _SET*
natives.interaction_setAllowFirstPersonMouseCameraMovement = function()

    local call = natives.invoke(0x0546B117BB17548B, 'void')
end

-- Returns true if player is moving mouse while cursor is active
-- _PI* - _PO*
--- @return boolean
natives.interaction_pointerIsBeingMoved = function()

    local call = natives.invoke(0x2B8B605F2A9E64BF, 'bool')
    return call
end

-- Returns true if player is holding LMB while cursor is active
-- _PI* - _PO*
--- @return boolean
natives.interaction_pointerIsLeftButtonHeld = function()

    local call = natives.invoke(0x61CAE9D1FD055E44, 'bool')
    return call
end

-- Returns true if player releases LMB if cursor is active
-- _PI* - _PO*
--- @return boolean
natives.interaction_pointerIsLeftButtonJustReleased = function()

    local call = natives.invoke(0xF7F51A57349739F2, 'bool')
    return call
end

--- @param interior integer
--- @return boolean
natives.interior_isValidInterior = function(interior)
    assert(type(interior) == 'integer', 'Argument interior must be of type integer.')

    local call = natives.invoke(0x017C1B3159F79F6C, 'bool', interior)
    return call
end

--- @param interior integer
--- @param position integer
--- @param namehash integer
natives.interior_getInteriorLocationAndNamehash = function(interior, position, namehash)
    assert(type(interior) == 'integer', 'Argument interior must be of type integer.')
    assert(type(position) == 'integer', 'Argument position must be of type integer.')
    assert(type(namehash) == 'integer', 'Argument namehash must be of type integer.')

    local call = natives.invoke(0x8451E87D3C2B0286, 'void', interior, position, namehash)
end

--- @param interior integer
--- @return number
natives.interior_getInteriorMinimapHash = function(interior)
    assert(type(interior) == 'integer', 'Argument interior must be of type integer.')

    local call = natives.invoke(0x3039BE60B3749716, 'integer', interior)
    return call
end

--- @param interior integer
--- @return number, number, number
natives.interior_getInteriorPosition = function(interior)
    assert(type(interior) == 'integer', 'Argument interior must be of type integer.')

    local call = natives.invoke(0x2C9746D0CA15BE1C, 'vector3', interior)
    return call.x, call.y, call.z
end

--- @return boolean
natives.interior_isInteriorScene = function()

    local call = natives.invoke(0x4200F14D6F840A9A, 'bool')
    return call
end

--- @param entity integer
natives.interior_clearRoomForEntity = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xA1762D5BBFCA13A8, 'void', entity)
end

--- @param entity integer
--- @param interior integer
--- @param roomhashkey integer
natives.interior_forceRoomForEntity = function(entity, interior, roomhashkey)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(interior) == 'integer', 'Argument interior must be of type integer.')
    assert(type(roomhashkey) == 'integer', 'Argument roomhashkey must be of type integer.')

    local call = natives.invoke(0xBC29A9894C976945, 'void', entity, interior, roomhashkey)
end

-- Gets the room hash key from the room that the specified entity is in. Each room in every interior has a unique key. Returns 0 if the entity is outside.
--- @param entity integer
--- @return number
natives.interior_getRoomKeyFromEntity = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x076E46E0EB52AFC6, 'integer', entity)
    return call
end

-- Seems to do the exact same as INTERIOR::GET_ROOM_KEY_FROM_ENTITY
--- @param entity integer
--- @return number
natives.interior_getKeyForEntityInRoom = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x27D7B6F79E1F4603, 'integer', entity)
    return call
end

-- Returns the handle of the interior that the entity is in. Returns 0 if outside.
--- @param entity integer
--- @return number
natives.interior_getInteriorFromEntity = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xB417689857646F61, 'int', entity)
    return call
end

--- @param entity integer
--- @param interior integer
natives.interior_retainEntityInInterior = function(entity, interior)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(interior) == 'integer', 'Argument interior must be of type integer.')

    local call = natives.invoke(0x5BD616735F16BF5C, 'void', entity, interior)
end

--- @param interiorid integer
--- @param roomhashkey integer
natives.interior_forceRoomForGameViewport = function(interiorid, roomhashkey)
    assert(type(interiorid) == 'integer', 'Argument interiorid must be of type integer.')
    assert(type(roomhashkey) == 'integer', 'Argument roomhashkey must be of type integer.')

    local call = natives.invoke(0x115B4AA8FB28AB43, 'void', interiorid, roomhashkey)
end

natives.interior_clearRoomForGameViewport = function()

    local call = natives.invoke(0x951A049765E0D450, 'void')
end

--- @return number
natives.interior_getInteriorFromPrimaryView = function()

    local call = natives.invoke(0xBC8A281FF125C655, 'int')
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @return number
natives.interior_getInteriorAtCoords = function(x, y, z)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0xCDD36C9E5C469070, 'int', x, y, z)
    return call
end

--- @param interior integer
natives.interior_pinInteriorInMemory = function(interior)
    assert(type(interior) == 'integer', 'Argument interior must be of type integer.')

    local call = natives.invoke(0xBD3D33EABF680168, 'void', interior)
end

-- Does something similar to INTERIOR::DISABLE_INTERIOR.
-- 
-- You don't fall through the floor but everything is invisible inside and looks the same as when INTERIOR::DISABLE_INTERIOR is used. Peds behaves normally inside. 
--- @param interior integer
natives.interior_unpinInterior = function(interior)
    assert(type(interior) == 'integer', 'Argument interior must be of type integer.')

    local call = natives.invoke(0x07FD1A0B814F6055, 'void', interior)
end

--- @param interior integer
--- @return boolean
natives.interior_isInteriorReady = function(interior)
    assert(type(interior) == 'integer', 'Argument interior must be of type integer.')

    local call = natives.invoke(0x941560D2D45DBFC8, 'bool', interior)
    return call
end

-- Actually returns void in IDA but the script header defines a BOOL return type
--- @param interior integer
--- @return boolean
natives.interior_setInteriorInUse = function(interior)
    assert(type(interior) == 'integer', 'Argument interior must be of type integer.')

    local call = natives.invoke(0xB5EF6FEF2DC9EBED, 'bool', interior)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @param interiortype string
--- @return number
natives.interior_getInteriorAtCoordsWithType = function(x, y, z, interiortype)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(interiortype) == 'string', 'Argument interiortype must be of type string.')

    local call = natives.invoke(0xAAD6170AA33B13C0, 'int', x, y, z, interiortype)
    return call
end

-- Hashed version of GET_INTERIOR_AT_COORDS_WITH_TYPE
--- @param x number
--- @param y number
--- @param z number
--- @param typehash integer
--- @return number
natives.interior_getInteriorAtCoordsWithTypehash = function(x, y, z, typehash)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(typehash) == 'integer', 'Argument typehash must be of type integer.')

    local call = natives.invoke(0x3543AEA1816D1D2B, 'int', x, y, z, typehash)
    return call
end

-- Returns true if the collision at the specified coords is marked as being outside (false if there's an interior)
--- @param x number
--- @param y number
--- @param z number
--- @return boolean
natives.interior_isCollisionMarkedOutside = function(x, y, z)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0xF291396B517E25B2, 'bool', x, y, z)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @return number
natives.interior_getInteriorFromCollision = function(x, y, z)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0x5054D1A5218FA696, 'int', x, y, z)
    return call
end

-- https:--github.com/femga/rdr3_discoveries/tree/master/interiors/interior_sets
--- @param interior integer
--- @param entitysetname string
--- @param p2 integer
natives.interior_activateInteriorEntitySet = function(interior, entitysetname, p2)
    assert(type(interior) == 'integer', 'Argument interior must be of type integer.')
    assert(type(entitysetname) == 'string', 'Argument entitysetname must be of type string.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x174D0AAB11CED739, 'void', interior, entitysetname, p2)
end

--- @param interior integer
--- @param entitysetname string
--- @param p2 boolean
natives.interior_deactivateInteriorEntitySet = function(interior, entitysetname, p2)
    assert(type(interior) == 'integer', 'Argument interior must be of type integer.')
    assert(type(entitysetname) == 'string', 'Argument entitysetname must be of type string.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x33B81A2C07A51FFF, 'void', interior, entitysetname, p2)
end

--- @param interior integer
--- @param entitysetname string
--- @return boolean
natives.interior_isInteriorEntitySetActive = function(interior, entitysetname)
    assert(type(interior) == 'integer', 'Argument interior must be of type integer.')
    assert(type(entitysetname) == 'string', 'Argument entitysetname must be of type string.')

    local call = natives.invoke(0x32810CA2125F5842, 'bool', interior, entitysetname)
    return call
end

--- @param interior integer
--- @param entitysetname string
--- @return boolean
natives.interior_isInteriorEntitySetValid = function(interior, entitysetname)
    assert(type(interior) == 'integer', 'Argument interior must be of type integer.')
    assert(type(entitysetname) == 'string', 'Argument entitysetname must be of type string.')

    local call = natives.invoke(0xD56FF170710FC826, 'bool', interior, entitysetname)
    return call
end

--- @param interior integer
--- @param toggle boolean
natives.interior_disableInterior = function(interior, toggle)
    assert(type(interior) == 'integer', 'Argument interior must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x3C2B92A1A07D4FCE, 'void', interior, toggle)
end

--- @param p0 userdata
--- @param p1 userdata
natives.interior_n0X2533F2Ab0Eb9C6F9 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x2533F2AB0EB9C6F9, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.interior_n0Xfe2B3D5500B1B2E4 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xFE2B3D5500B1B2E4, 'void', p0, p1)
end

-- Returns a unique inventory ID for this ped.
-- For the local player ped, it is an eInventories value.
-- For other peds, it is the inventory address casted to unsigned int.
-- 
-- enum eInventories
-- {
-- 	INVENTORY_INVALID,
-- 	INVENTORY_SP_PLAYER,
-- 	INVENTORY_MP_PLAYER,
-- 	INVENTORY_MP_MISSION,
-- 	INVENTORY_SECOND_SCREEN,
-- 	INVENTORY_SP_BACKUP,
-- 	INVENTORY_SP_SNAPSHOT,
-- 	INVENTORY_0xDE2AE452,
-- 	INVENTORY_0x399D9B3A,
-- 	INVENTORY_0x4BD43FA7,
-- 	INVENTORY_0x9529D251,
-- 	INVENTORY_0xA75776AC,
-- 	INVENTORY_MAX_ID = 11,
-- 	INVENTORY_IDS_COUNT
-- };
--- @param ped integer
--- @return number
natives.inventory_inventoryGetInventoryIdFromPed = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x13D234A2A3F66E63, 'int', ped)
    return call
end

--- @param inventoryid integer
--- @param erolemaxlevel integer
--- @return number
natives.inventory_getItemRoleMaxLevelCount = function(inventoryid, erolemaxlevel)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(erolemaxlevel) == 'integer', 'Argument erolemaxlevel must be of type integer.')

    local call = natives.invoke(0xADDD1E7C0ECF7D95, 'int', inventoryid, erolemaxlevel)
    return call
end

--- @param provision integer
--- @param slotid integer
--- @return number
natives.inventory_getItemSlotMaxCount = function(provision, slotid)
    assert(type(provision) == 'integer', 'Argument provision must be of type integer.')
    assert(type(slotid) == 'integer', 'Argument slotid must be of type integer.')

    local call = natives.invoke(0xE80E50BEE276A54A, 'int', provision, slotid)
    return call
end

-- Only used in R* SP Scripts
--- @param inventoryid integer
--- @param p1 integer
--- @param year integer
--- @param month integer
--- @param day integer
--- @param hour integer
--- @param minute integer
--- @param second integer
--- @return boolean
natives.inventory_n0X112Bca290D2Eb53C = function(inventoryid, p1, year, month, day, hour, minute, second)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(year) == 'integer', 'Argument year must be of type integer.')
    assert(type(month) == 'integer', 'Argument month must be of type integer.')
    assert(type(day) == 'integer', 'Argument day must be of type integer.')
    assert(type(hour) == 'integer', 'Argument hour must be of type integer.')
    assert(type(minute) == 'integer', 'Argument minute must be of type integer.')
    assert(type(second) == 'integer', 'Argument second must be of type integer.')

    local call = natives.invoke(0x112BCA290D2EB53C, 'bool', inventoryid, p1, year, month, day, hour, minute, second)
    return call
end

-- eInventoryItem: CLOTHING_FANCY_SUIT, CLOTHING_GUNSLINGER_OUTFIT, etc.
-- Only used in R* SP Scripts
--- @param inventoryid integer
--- @param einventoryitem integer
--- @param p2 boolean
natives.inventory_n0X46743Bbfedbc859E = function(inventoryid, einventoryitem, p2)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(einventoryitem) == 'integer', 'Argument einventoryitem must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x46743BBFEDBC859E, 'void', inventoryid, einventoryitem, p2)
end

-- Only works on CClothingItem
--- @param inventoryid integer
--- @param guid userdata
--- @param inuse boolean
natives.inventory_inventorySetInventoryItemInUse = function(inventoryid, guid, inuse)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(guid) == 'userdata', 'Argument guid must be of type userdata.')
    assert(type(inuse) == 'boolean', 'Argument inuse must be of type boolean.')

    local call = natives.invoke(0x65A5F70F4A292EBE, 'void', inventoryid, guid, inuse)
end

--- @param inventoryid integer
--- @param guid userdata
--- @return boolean
natives.inventory_inventoryGetInventoryItemInUse = function(inventoryid, guid)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(guid) == 'userdata', 'Argument guid must be of type userdata.')

    local call = natives.invoke(0x70E3A884ED000A01, 'bool', inventoryid, guid)
    return call
end

-- Used with CClothingItem
--- @param inventoryid integer
--- @param guid userdata
--- @param hidden boolean
natives.inventory_inventorySetInventoryItemHidden = function(inventoryid, guid, hidden)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(guid) == 'userdata', 'Argument guid must be of type userdata.')
    assert(type(hidden) == 'boolean', 'Argument hidden must be of type boolean.')

    local call = natives.invoke(0x9A113C660AEA3832, 'void', inventoryid, guid, hidden)
end

-- Used with CSatchelItem, R* Script usage: fisihing_core
--- @param inventoryid integer
--- @param guid userdata
--- @param hidden boolean
natives.inventory_inventorySetInventoryItemHidden2 = function(inventoryid, guid, hidden)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(guid) == 'userdata', 'Argument guid must be of type userdata.')
    assert(type(hidden) == 'boolean', 'Argument hidden must be of type boolean.')

    local call = natives.invoke(0xD740F11FBC8AEF43, 'void', inventoryid, guid, hidden)
end

--- @param inventoryid integer
--- @param guid userdata
--- @return boolean
natives.inventory_inventoryGetInventoryItemHidden = function(inventoryid, guid)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(guid) == 'userdata', 'Argument guid must be of type userdata.')

    local call = natives.invoke(0xF9933164965533B7, 'bool', inventoryid, guid)
    return call
end

--- @param item integer
--- @return boolean
natives.inventory_inventoryGetInventoryItemIsAnimalPelt = function(item)
    assert(type(item) == 'integer', 'Argument item must be of type integer.')

    local call = natives.invoke(0x4AEF1FB5B9011D75, 'bool', item)
    return call
end

--- @param item integer
--- @return number
natives.inventory_inventoryGetInventoryItemDescriptionHash = function(item)
    assert(type(item) == 'integer', 'Argument item must be of type integer.')

    local call = natives.invoke(0xA4550FE9C512E3DD, 'integer', item)
    return call
end

-- flag: https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/ItemDatabaseItemFlags
-- 2097152 (is item read?), 8388608 (is item sent/received/mailable?), 16777216 (is item consumable?)
--- @param item integer
--- @param flag integer
--- @return boolean
natives.inventory_inventoryIsInventoryItemFlagEnabled = function(item, flag)
    assert(type(item) == 'integer', 'Argument item must be of type integer.')
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')

    local call = natives.invoke(0x245D07651B1D183B, 'bool', item, flag)
    return call
end

-- soundType: https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/CItemInfoSoundsInterface__sSoundsInfo__eSoundType
--- @param item integer
--- @param soundtype integer
--- @return boolean
natives.inventory_inventoryGetIsInventoryItemSoundValid = function(item, soundtype)
    assert(type(item) == 'integer', 'Argument item must be of type integer.')
    assert(type(soundtype) == 'integer', 'Argument soundtype must be of type integer.')

    local call = natives.invoke(0x2BAE4880DCDD560B, 'bool', item, soundtype)
    return call
end

-- soundType: see 0x2BAE4880DCDD560B
-- Returns item Hash to be used with _IS_SCRIPTED_AUDIO_CUSTOM and _PLAY_SOUND_FROM_ITEM (p0)
--- @param item integer
--- @param soundtype integer
--- @return number
natives.inventory_inventoryGetInventoryItemSound = function(item, soundtype)
    assert(type(item) == 'integer', 'Argument item must be of type integer.')
    assert(type(soundtype) == 'integer', 'Argument soundtype must be of type integer.')

    local call = natives.invoke(0x2E1CDC1FF3B8473E, 'integer', item, soundtype)
    return call
end

--- @param item integer
--- @param info userdata
--- @return boolean
natives.inventory_inventoryGetInventoryItemInspectionInfo = function(item, info)
    assert(type(item) == 'integer', 'Argument item must be of type integer.')
    assert(type(info) == 'userdata', 'Argument info must be of type userdata.')

    local call = natives.invoke(0x0C093C1787F18519, 'bool', item, info)
    return call
end

-- Returns CopyID
--- @param inventoryid integer
--- @param guid userdata
--- @return number
natives.inventory_inventoryGetInventoryItemWeaponCopyId = function(inventoryid, guid)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(guid) == 'userdata', 'Argument guid must be of type userdata.')

    local call = natives.invoke(0xAB5F12746A099A0E, 'int', inventoryid, guid)
    return call
end

-- inventoryId: see _INVENTORY_GET_PED_INVENTORY_ID
--- @param inventoryid integer
--- @return boolean
natives.inventory_inventoryAreLocalChangesAllowed = function(inventoryid)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')

    local call = natives.invoke(0x0FBBFFC891A97C81, 'bool', inventoryid)
    return call
end

--- @param guid userdata
--- @return boolean
natives.inventory_inventoryIsGuidValid = function(guid)
    assert(type(guid) == 'userdata', 'Argument guid must be of type userdata.')

    local call = natives.invoke(0xB881CA836CC4B6D4, 'bool', guid)
    return call
end

--- @param guid1 userdata
--- @param guid2 userdata
--- @return boolean
natives.inventory_inventoryCompareGuids = function(guid1, guid2)
    assert(type(guid1) == 'userdata', 'Argument guid1 must be of type userdata.')
    assert(type(guid2) == 'userdata', 'Argument guid2 must be of type userdata.')

    local call = natives.invoke(0x4C543D5DFCD2DAFD, 'bool', guid1, guid2)
    return call
end

--- @param inventoryid integer
--- @param guid userdata
--- @param p2 integer
--- @param slotid integer
--- @param outguid userdata
--- @return boolean
natives.inventory_inventoryGetGuidFromItemid = function(inventoryid, guid, p2, slotid, outguid)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(guid) == 'userdata', 'Argument guid must be of type userdata.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(slotid) == 'integer', 'Argument slotid must be of type integer.')
    assert(type(outguid) == 'userdata', 'Argument outguid must be of type userdata.')

    local call = natives.invoke(0x886DFD3E185C8A89, 'bool', inventoryid, guid, p2, slotid, outguid)
    return call
end

-- removeReason: REMOVE_REASON_DEFAULT (eRemoveItemReason)
-- Example: INVENTORY::_0x5D6182F3BCE1333B(1, joaat("REMOVE_REASON_DEFAULT")); -> clears weapon wheel
-- Only used in R* SP Scripts
--- @param inventoryid integer
--- @param removereason integer
--- @return boolean
natives.inventory_n0X5D6182F3Bce1333B = function(inventoryid, removereason)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(removereason) == 'integer', 'Argument removereason must be of type integer.')

    local call = natives.invoke(0x5D6182F3BCE1333B, 'bool', inventoryid, removereason)
    return call
end

--- @param inventoryid integer
--- @param indata userdata
--- @param outdata userdata
--- @param p3 boolean
--- @return boolean
natives.inventory_inventoryGetInventoryItem = function(inventoryid, indata, outdata, p3)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(indata) == 'userdata', 'Argument indata must be of type userdata.')
    assert(type(outdata) == 'userdata', 'Argument outdata must be of type userdata.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0x9700E8EFC4AB9089, 'bool', inventoryid, indata, outdata, p3)
    return call
end

--- @param inventoryid integer
--- @param guid userdata
--- @param p2 userdata
--- @param p3 integer
--- @param p4 integer
--- @return boolean
natives.inventory_inventoryGetFullInventoryItemData = function(inventoryid, guid, p2, p3, p4)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(guid) == 'userdata', 'Argument guid must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')

    local call = natives.invoke(0x025A1B1FB03FBF61, 'bool', inventoryid, guid, p2, p3, p4)
    return call
end

--- @param inventoryid integer
--- @param parentguid userdata
--- @param childindex userdata
--- @param outinventoryitem userdata
--- @return boolean
natives.inventory_inventoryGetInventoryItemChild = function(inventoryid, parentguid, childindex, outinventoryitem)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(parentguid) == 'userdata', 'Argument parentguid must be of type userdata.')
    assert(type(childindex) == 'userdata', 'Argument childindex must be of type userdata.')
    assert(type(outinventoryitem) == 'userdata', 'Argument outinventoryitem must be of type userdata.')

    local call = natives.invoke(0xCD9A485F2B383B44, 'bool', inventoryid, parentguid, childindex, outinventoryitem)
    return call
end

-- inventoryItemSlotHash: https:--pastebin.com/P6fyr3vr
--- @param inventoryid integer
--- @param guid1 userdata
--- @param guid2 userdata
--- @param item integer
--- @param inventoryitemslot integer
--- @param p5 integer
--- @param addreason integer
--- @return boolean
natives.inventory_inventoryAddItemWithGuid = function(inventoryid, guid1, guid2, item, inventoryitemslot, p5, addreason)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(guid1) == 'userdata', 'Argument guid1 must be of type userdata.')
    assert(type(guid2) == 'userdata', 'Argument guid2 must be of type userdata.')
    assert(type(item) == 'integer', 'Argument item must be of type integer.')
    assert(type(inventoryitemslot) == 'integer', 'Argument inventoryitemslot must be of type integer.')
    assert(type(p5) == 'integer', 'Argument p5 must be of type integer.')
    assert(type(addreason) == 'integer', 'Argument addreason must be of type integer.')

    local call = natives.invoke(0xCB5D11F9508A928D, 'bool', inventoryid, guid1, guid2, item, inventoryitemslot, p5, addreason)
    return call
end

-- Getter: _INVENTORY_GET_FULL_INVENTORY_ITEM_DATA
--- @param inventoryid integer
--- @param guid1 userdata
--- @param guid2 userdata
--- @param p3 integer
--- @return boolean
natives.inventory_inventoryUpdateInventoryItem = function(inventoryid, guid1, guid2, p3)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(guid1) == 'userdata', 'Argument guid1 must be of type userdata.')
    assert(type(guid2) == 'userdata', 'Argument guid2 must be of type userdata.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')

    local call = natives.invoke(0xD80A8854DB5CFBA5, 'bool', inventoryid, guid1, guid2, p3)
    return call
end

--- @param inventoryid integer
--- @param guid userdata
--- @param quantity integer
--- @param removereason integer
--- @return boolean
natives.inventory_inventoryRemoveInventoryItemWithGuid = function(inventoryid, guid, quantity, removereason)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(guid) == 'userdata', 'Argument guid must be of type userdata.')
    assert(type(quantity) == 'integer', 'Argument quantity must be of type integer.')
    assert(type(removereason) == 'integer', 'Argument removereason must be of type integer.')

    local call = natives.invoke(0x3E4E811480B3AE79, 'bool', inventoryid, guid, quantity, removereason)
    return call
end

--- @param inventoryid integer
--- @param item integer
--- @param quantity integer
--- @param removereason integer
--- @return boolean
natives.inventory_inventoryRemoveInventoryItemWithItemid = function(inventoryid, item, quantity, removereason)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(item) == 'integer', 'Argument item must be of type integer.')
    assert(type(quantity) == 'integer', 'Argument quantity must be of type integer.')
    assert(type(removereason) == 'integer', 'Argument removereason must be of type integer.')

    local call = natives.invoke(0xB4158C8C9A3B5DCE, 'bool', inventoryid, item, quantity, removereason)
    return call
end

-- guid1: old parent GUID
-- guid2: new parent GUID
-- guid3: new item GUID (out param)
--- @param inventoryid integer
--- @param guid1 userdata
--- @param guid2 userdata
--- @param slotid integer
--- @param quantity integer
--- @param outguid userdata
--- @return boolean
natives.inventory_inventoryMoveInventoryItem = function(inventoryid, guid1, guid2, slotid, quantity, outguid)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(guid1) == 'userdata', 'Argument guid1 must be of type userdata.')
    assert(type(guid2) == 'userdata', 'Argument guid2 must be of type userdata.')
    assert(type(slotid) == 'integer', 'Argument slotid must be of type integer.')
    assert(type(quantity) == 'integer', 'Argument quantity must be of type integer.')
    assert(type(outguid) == 'userdata', 'Argument outguid must be of type userdata.')

    local call = natives.invoke(0xDCCAA7C3BFD88862, 'bool', inventoryid, guid1, guid2, slotid, quantity, outguid)
    return call
end

--- @param inventoryid integer
--- @param guid1 userdata
--- @param guid2 userdata
--- @return boolean
natives.inventory_inventorySwapInventoryItem = function(inventoryid, guid1, guid2)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(guid1) == 'userdata', 'Argument guid1 must be of type userdata.')
    assert(type(guid2) == 'userdata', 'Argument guid2 must be of type userdata.')

    local call = natives.invoke(0xF2753D691BCDA314, 'bool', inventoryid, guid1, guid2)
    return call
end

-- filterName (collections): "ALL", "ALL SATCHEL", "ALL HORSES", "ALL COACHES", "ALL MOUNTS", "ALL CLOTHING", "ALL WEAPONS", "ALL SATCHEL EXCLUDING CLOTHING", "ALL EXCLUDING CLOTHING"
-- slotId: -1591664384
-- p3: outCollectionSize (?)
-- Returns collectionId
--- @param inventoryid integer
--- @param filtername string
--- @param slotid integer
--- @param size integer
--- @return number
natives.inventory_inventoryCreateItemCollection = function(inventoryid, filtername, slotid, size)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(filtername) == 'string', 'Argument filtername must be of type string.')
    assert(type(slotid) == 'integer', 'Argument slotid must be of type integer.')
    assert(type(size) == 'integer', 'Argument size must be of type integer.')

    local call = natives.invoke(0x80D78BDC9D88EF07, 'int', inventoryid, filtername, slotid, size)
    return call
end

--- @param inventoryid integer
--- @param filter userdata
--- @param numincollection integer
--- @return number
natives.inventory_inventoryCreateItemCollectionWithFilter = function(inventoryid, filter, numincollection)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(filter) == 'userdata', 'Argument filter must be of type userdata.')
    assert(type(numincollection) == 'integer', 'Argument numincollection must be of type integer.')

    local call = natives.invoke(0x640F890C3E5A3FFD, 'int', inventoryid, filter, numincollection)
    return call
end

-- collectionId is < outCollectionSize
--- @param collectionid integer
--- @param itemindex integer
--- @param itemdata userdata
--- @return boolean
natives.inventory_inventoryGetItemFromCollectionIndex = function(collectionid, itemindex, itemdata)
    assert(type(collectionid) == 'integer', 'Argument collectionid must be of type integer.')
    assert(type(itemindex) == 'integer', 'Argument itemindex must be of type integer.')
    assert(type(itemdata) == 'userdata', 'Argument itemdata must be of type userdata.')

    local call = natives.invoke(0x82FA24C3D3FCD9B7, 'bool', collectionid, itemindex, itemdata)
    return call
end

-- Max num of collections is 5, so release your unused ones.
--- @param collectionid integer
--- @return boolean
natives.inventory_inventoryReleaseItemCollection = function(collectionid)
    assert(type(collectionid) == 'integer', 'Argument collectionid must be of type integer.')

    local call = natives.invoke(0x42A2F33A1942E865, 'bool', collectionid)
    return call
end

--- @param inventoryid integer
--- @param guid userdata
--- @param bequipped boolean
--- @return boolean
natives.inventory_inventoryEquipItemWithGuid = function(inventoryid, guid, bequipped)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(guid) == 'userdata', 'Argument guid must be of type userdata.')
    assert(type(bequipped) == 'boolean', 'Argument bequipped must be of type boolean.')

    local call = natives.invoke(0x734311E2852760D0, 'bool', inventoryid, guid, bequipped)
    return call
end

--- @param inventoryid integer
--- @param guid userdata
--- @param slotid integer
--- @param outguid userdata
--- @return boolean
natives.inventory_inventoryGetInventoryItemEquippedInSlotByRef = function(inventoryid, guid, slotid, outguid)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(guid) == 'userdata', 'Argument guid must be of type userdata.')
    assert(type(slotid) == 'integer', 'Argument slotid must be of type integer.')
    assert(type(outguid) == 'userdata', 'Argument outguid must be of type userdata.')

    local call = natives.invoke(0x22E590F108289A9D, 'bool', inventoryid, guid, slotid, outguid)
    return call
end

--- @param inventoryid integer
--- @param guid userdata
--- @param item integer
--- @return boolean
natives.inventory_inventoryDoesItemOwnEquipment = function(inventoryid, guid, item)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(guid) == 'userdata', 'Argument guid must be of type userdata.')
    assert(type(item) == 'integer', 'Argument item must be of type integer.')

    local call = natives.invoke(0x88B58B83A43A8CAB, 'bool', inventoryid, guid, item)
    return call
end

-- Params: p3 returns an int between 0 and 20 (?)
-- Only used in R* SP Scripts
--- @param inventoryid integer
--- @param guid userdata
--- @param p2 integer
--- @param p3 integer
--- @return boolean
natives.inventory_n0Xd08685Ba892Dbfab = function(inventoryid, guid, p2, p3)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(guid) == 'userdata', 'Argument guid must be of type userdata.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')

    local call = natives.invoke(0xD08685BA892DBFAB, 'bool', inventoryid, guid, p2, p3)
    return call
end

-- Params: p0 is only 0 or 1
-- Only used in R* SP Scripts
--- @param p0 boolean
--- @param inventoryid integer
--- @param guid userdata
natives.inventory_n0X0349404A22736740 = function(p0, inventoryid, guid)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(guid) == 'userdata', 'Argument guid must be of type userdata.')

    local call = natives.invoke(0x0349404A22736740, 'void', p0, inventoryid, guid)
end

-- OWE_INVALID = -1,
-- OWE_GOOD_IN_HOT
-- OWE_GOOD_IN_NONE
-- OWE_GOOD_IN_COLD
-- OWE_GOOD_IN_ALL
--- @param inventoryid integer
--- @param guid userdata
--- @param weathereffectiveness integer
natives.inventory_inventorySetInventoryItemWeatherEffectiveness = function(inventoryid, guid, weathereffectiveness)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(guid) == 'userdata', 'Argument guid must be of type userdata.')
    assert(type(weathereffectiveness) == 'integer', 'Argument weathereffectiveness must be of type integer.')

    local call = natives.invoke(0x6D2F987736A42D4C, 'void', inventoryid, guid, weathereffectiveness)
end

-- Example: (1, WEAPON_REVOLVER_CATTLEMAN, 0) - disables cattleman revolver on weapon wheel
--- @param inventoryid integer
--- @param item integer
--- @param gtxreason integer
natives.inventory_inventoryDisableItem = function(inventoryid, item, gtxreason)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(item) == 'integer', 'Argument item must be of type integer.')
    assert(type(gtxreason) == 'integer', 'Argument gtxreason must be of type integer.')

    local call = natives.invoke(0x766315A564594401, 'void', inventoryid, item, gtxreason)
end

--- @param inventoryid integer
--- @param item integer
natives.inventory_inventoryEnableItem = function(inventoryid, item)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(item) == 'integer', 'Argument item must be of type integer.')

    local call = natives.invoke(0x6A564540FAC12211, 'void', inventoryid, item)
end

-- Alternative Name: _INVENTORY_IS_ITEM_DISABLED
--- @param inventoryid integer
--- @param item integer
--- @param p2 boolean
--- @return boolean
natives.inventory_inventoryIsInventoryItemEquipped = function(inventoryid, item, p2)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(item) == 'integer', 'Argument item must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x3D10D7179D7034AF, 'bool', inventoryid, item, p2)
    return call
end

--- @param inventoryid integer
--- @param p1 userdata
--- @param enabled boolean
--- @return boolean
natives.inventory_inventorySetInventoryItemInspectionEnabled = function(inventoryid, p1, enabled)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(enabled) == 'boolean', 'Argument enabled must be of type boolean.')

    local call = natives.invoke(0x227522FD59DDB7E8, 'bool', inventoryid, p1, enabled)
    return call
end

--- @param itemguid userdata
--- @return boolean
natives.inventory_inventoryIsItemExpired = function(itemguid)
    assert(type(itemguid) == 'userdata', 'Argument itemguid must be of type userdata.')

    local call = natives.invoke(0x0137C77A2EC64536, 'bool', itemguid)
    return call
end

--- @param itemguid userdata
--- @return number
natives.inventory_inventoryGetItemExpiryTime = function(itemguid)
    assert(type(itemguid) == 'userdata', 'Argument itemguid must be of type userdata.')

    local call = natives.invoke(0x4A606C17276E1BCC, 'int', itemguid)
    return call
end

--- @param inventoryid integer
--- @param guid userdata
--- @param p2 boolean
--- @return number
natives.inventory_inventoryGetInventoryItemCountWithGuid = function(inventoryid, guid, p2)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(guid) == 'userdata', 'Argument guid must be of type userdata.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xC97E0D2302382211, 'int', inventoryid, guid, p2)
    return call
end

--- @param inventoryid integer
--- @param einventoryitem integer
--- @param p2 boolean
--- @return number
natives.inventory_inventoryGetInventoryItemCountWithItemid = function(inventoryid, einventoryitem, p2)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(einventoryitem) == 'integer', 'Argument einventoryitem must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xE787F05DFC977BDE, 'int', inventoryid, einventoryitem, p2)
    return call
end

--- @param inventoryid integer
--- @param itemguid userdata
--- @return boolean
natives.inventory_n0Xb1Dd74A1F5536622 = function(inventoryid, itemguid)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(itemguid) == 'userdata', 'Argument itemguid must be of type userdata.')

    local call = natives.invoke(0xB1DD74A1F5536622, 'bool', inventoryid, itemguid)
    return call
end

--- @param inventoryid integer
--- @param parentguid userdata
--- @return number
natives.inventory_inventoryGetChildrenCount = function(inventoryid, parentguid)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(parentguid) == 'userdata', 'Argument parentguid must be of type userdata.')

    local call = natives.invoke(0xE843D21A8E2498AA, 'int', inventoryid, parentguid)
    return call
end

--- @param inventoryid integer
--- @param guid userdata
--- @param slotid integer
--- @return number
natives.inventory_inventoryGetChildrenInSlotCount = function(inventoryid, guid, slotid)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(guid) == 'userdata', 'Argument guid must be of type userdata.')
    assert(type(slotid) == 'integer', 'Argument slotid must be of type integer.')

    local call = natives.invoke(0x033EE4B89F3AC545, 'int', inventoryid, guid, slotid)
    return call
end

--- @param inventoryid integer
--- @param guid userdata
--- @param slotid integer
--- @param p3 integer
--- @param p4 userdata
--- @return number
natives.inventory_inventoryGetInventoryItemEquippedInSlot = function(inventoryid, guid, slotid, p3, p4)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(guid) == 'userdata', 'Argument guid must be of type userdata.')
    assert(type(slotid) == 'integer', 'Argument slotid must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0xBE012571B25F5ACA, 'int', inventoryid, guid, slotid, p3, p4)
    return call
end

--- @param item integer
--- @param slotid integer
--- @return boolean
natives.inventory_inventoryFitsSlotId = function(item, slotid)
    assert(type(item) == 'integer', 'Argument item must be of type integer.')
    assert(type(slotid) == 'integer', 'Argument slotid must be of type integer.')

    local call = natives.invoke(0x780C5B9AE2819807, 'bool', item, slotid)
    return call
end

-- p1: WARDROBE, KIT_CAMP, CHARACTER, KIT_MOONSHINER_PROPERTY
-- Returns slot hash
--- @param item integer
--- @param p1 integer
--- @return number
natives.inventory_getDefaultItemSlotInfo = function(item, p1)
    assert(type(item) == 'integer', 'Argument item must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x6452B1D357D81742, 'integer', item, p1)
    return call
end

--- @param p0 integer
--- @param p1 userdata
--- @param p2 integer
--- @return boolean
natives.inventory_inventoryGetInventoryItemFitSlot = function(p0, p1, p2)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0xB991FE166FAF84FD, 'bool', p0, p1, p2)
    return call
end

-- p1 (out) and p2 (in) are both script arrays?
-- item: can be a component item, see SHOP_CATALOG_BUILD_LIST_OF_WEAPON_COMPONENTS
--- @param item integer
--- @param p1 userdata
--- @param p2 userdata
--- @return boolean
natives.inventory_n0X9Ac53Cb6907B4428 = function(item, p1, p2)
    assert(type(item) == 'integer', 'Argument item must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x9AC53CB6907B4428, 'bool', item, p1, p2)
    return call
end

-- p0 is the return value of DATABINDING::_DATABINDING_ADD_DATA_CONTAINER_FROM_PATH
-- p2, p3: 0
-- Returns databindingEntryId
--- @param data userdata
--- @param effects string
--- @param p2 boolean
--- @param p3 boolean
--- @return number
natives.inventory_n0X9D21B185Abc2Dbc4 = function(data, effects, p2, p3)
    assert(type(data) == 'userdata', 'Argument data must be of type userdata.')
    assert(type(effects) == 'string', 'Argument effects must be of type string.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0x9D21B185ABC2DBC4, 'integer', data, effects, p2, p3)
    return call
end

-- p1, p2: 0
--- @param databindingentryid integer
--- @param p1 boolean
--- @param p2 boolean
natives.inventory_n0X75Cfac49301E134F = function(databindingentryid, p1, p2)
    assert(type(databindingentryid) == 'integer', 'Argument databindingentryid must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x75CFAC49301E134F, 'void', databindingentryid, p1, p2)
end

-- p2: 0
-- p3: -1
-- Returns databindingEntryId to be used with 0x75CFAC49301E134E (p0)
--- @param data userdata
--- @param stats string
--- @param p2 integer
--- @param p3 integer
--- @return number
natives.inventory_n0X9D21B185Abc2Dbc5 = function(data, stats, p2, p3)
    assert(type(data) == 'userdata', 'Argument data must be of type userdata.')
    assert(type(stats) == 'string', 'Argument stats must be of type string.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')

    local call = natives.invoke(0x9D21B185ABC2DBC5, 'integer', data, stats, p2, p3)
    return call
end

-- p0: value returned by 0x9D21B185ABC2DBC5
--- @param data userdata
--- @param p1 boolean
--- @param ped integer
natives.inventory_n0X75Cfac49301E134E = function(data, p1, ped)
    assert(type(data) == 'userdata', 'Argument data must be of type userdata.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x75CFAC49301E134E, 'void', data, p1, ped)
end

-- Returns databindingEntryId to be used with 0x951847CEF3D829FF (p0)
--- @param data userdata
--- @param stats string
--- @param guid userdata
--- @param ped integer
--- @return number
natives.inventory_n0X46Db71883Ee9D5Af = function(data, stats, guid, ped)
    assert(type(data) == 'userdata', 'Argument data must be of type userdata.')
    assert(type(stats) == 'string', 'Argument stats must be of type string.')
    assert(type(guid) == 'userdata', 'Argument guid must be of type userdata.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x46DB71883EE9D5AF, 'integer', data, stats, guid, ped)
    return call
end

-- p0: value returned by 0x46DB71883EE9D5AF
--- @param p0 userdata
--- @param outguid userdata
--- @param ped integer
natives.inventory_n0X951847Cef3D829Ff = function(p0, outguid, ped)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(outguid) == 'userdata', 'Argument outguid must be of type userdata.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x951847CEF3D829FF, 'void', p0, outguid, ped)
end

-- Only used in R* SP Scripts
--- @param inventoryid integer
--- @param guid userdata
--- @param p2 integer
--- @param p3 userdata
--- @return boolean
natives.inventory_n0X6862E4D93F64Cf01 = function(inventoryid, guid, p2, p3)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(guid) == 'userdata', 'Argument guid must be of type userdata.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x6862E4D93F64CF01, 'bool', inventoryid, guid, p2, p3)
    return call
end

-- This native has no functionality.
--- @param toggle boolean
natives.inventory_setUseMissionInventory = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x597F571DDEE3FFAC, 'void', toggle)
end

natives.inventory_inventoryDisableMissionInventoryPickups = function()

    local call = natives.invoke(0xE1F389F03DC83673, 'void')
end

--- @param enable boolean
--- @param mirrortransactions boolean
natives.inventory_inventoryUseMissionInventory = function(enable, mirrortransactions)
    assert(type(enable) == 'boolean', 'Argument enable must be of type boolean.')
    assert(type(mirrortransactions) == 'boolean', 'Argument mirrortransactions must be of type boolean.')

    local call = natives.invoke(0xA6AA9F56BC6CFF58, 'void', enable, mirrortransactions)
end

--- @param p0 boolean
--- @param p1 boolean
--- @param bcopysatchelitems boolean
--- @param bcopyemotes boolean
--- @param bcopyhorse boolean
--- @param p5 boolean
natives.inventory_inventoryCopyMpInventoryToMissionInventory = function(p0, p1, bcopysatchelitems, bcopyemotes, bcopyhorse, p5)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(bcopysatchelitems) == 'boolean', 'Argument bcopysatchelitems must be of type boolean.')
    assert(type(bcopyemotes) == 'boolean', 'Argument bcopyemotes must be of type boolean.')
    assert(type(bcopyhorse) == 'boolean', 'Argument bcopyhorse must be of type boolean.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')

    local call = natives.invoke(0x644CCB76A76CFBD6, 'void', p0, p1, bcopysatchelitems, bcopyemotes, bcopyhorse, p5)
end

--- @param guid userdata
--- @param p1 boolean
natives.inventory_inventoryCopyItemToMissionInventory = function(guid, p1)
    assert(type(guid) == 'userdata', 'Argument guid must be of type userdata.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x3112ADB9D5F3426B, 'void', guid, p1)
end

-- Only used in R* SP Scripts
--- @param p0 boolean
natives.inventory_n0Xe36D4A38D28D9Cfb = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0xE36D4A38D28D9CFB, 'void', p0)
end

--- @return boolean
natives.inventory_inventoryUseSpBackup = function()

    local call = natives.invoke(0x7C7E4AB748EA3B07, 'bool')
    return call
end

--- @return boolean
natives.inventory_inventoryIsPlayerInventoryMirroringTransactions = function()

    local call = natives.invoke(0xFC7563F482781A3D, 'bool')
    return call
end

--- @param inventoryid integer
--- @param inventoryidcloned integer
--- @param p2 userdata
--- @param p3 userdata
natives.inventory_inventoryCopyItemToInventory = function(inventoryid, inventoryidcloned, p2, p3)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(inventoryidcloned) == 'integer', 'Argument inventoryidcloned must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xC04F47D488EF9EBA, 'void', inventoryid, inventoryidcloned, p2, p3)
end

--- @param ped integer
--- @param p1 integer
natives.inventory_n0X9E58207B194488Ac = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x9E58207B194488AC, 'void', ped, p1)
end

--- @param p0 userdata
natives.inventory_setItemPromptInfoRequest = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xFD41D1D4350F6413, 'void', p0)
end

-- Used in function SET_SHOP_BEING_ROBBED and many other shop related scripts and functions.
-- INVENTORY_A*
natives.inventory_n0X9B4E793B1Cb6550A = function()

    local call = natives.invoke(0x9B4E793B1CB6550A, 'void')
end

--- @param data userdata
natives.inventory_setCarriableCarryActionPromptOverride = function(data)
    assert(type(data) == 'userdata', 'Argument data must be of type userdata.')

    local call = natives.invoke(0xF666EF30F4F0AC4E, 'void', data)
end

--- @param inventoryid integer
natives.inventory_inventoryEnableWeapons = function(inventoryid)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')

    local call = natives.invoke(0xD5D72F1624F3BA7C, 'void', inventoryid)
end

-- Params: p1 = 0
--- @param inventoryid integer
--- @param p1 userdata
natives.inventory_inventoryDisableWeapons = function(inventoryid, p1)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xE3A46370F70F3607, 'void', inventoryid, p1)
end

-- Only used in R* SP Scripts
--- @param inventoryid integer
natives.inventory_n0Xe1F45A67A9F0Dcbc = function(inventoryid)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')

    local call = natives.invoke(0xE1F45A67A9F0DCBC, 'void', inventoryid)
end

-- Only used in R* SP Scripts
--- @param inventoryid integer
natives.inventory_n0X6968Ce7Ac32F6788 = function(inventoryid)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')

    local call = natives.invoke(0x6968CE7AC32F6788, 'void', inventoryid)
end

-- Returns collectionId
--- @param collectionsize integer
--- @return number
natives.inventory_inventoryCreateItemCollection2 = function(collectionsize)
    assert(type(collectionsize) == 'integer', 'Argument collectionsize must be of type integer.')

    local call = natives.invoke(0x97A3646645727F42, 'int', collectionsize)
    return call
end

-- p1: 32
-- Returns collectionId
--- @param inventoryid integer
--- @param p1 integer
--- @param size integer
--- @return number
natives.inventory_inventoryCreateSortedCollection = function(inventoryid, p1, size)
    assert(type(inventoryid) == 'integer', 'Argument inventoryid must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(size) == 'integer', 'Argument size must be of type integer.')

    local call = natives.invoke(0xBB7F968675B34B0C, 'int', inventoryid, p1, size)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param slotid integer
--- @return boolean
natives.itemdatabase_itemdatabaseCanEquipItemOnCategory = function(p0, p1, slotid)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(slotid) == 'integer', 'Argument slotid must be of type integer.')

    local call = natives.invoke(0x856FF92C57742AE5, 'bool', p0, p1, slotid)
    return call
end

--- @param p0 userdata
--- @return number
natives.itemdatabase_itemdatabaseGetFitsSlotCount = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x2970D1D6BFCF9B46, 'int', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseGetFitsSlotInfo = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x77210C146CED5261, 'bool', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @return number
natives.itemdatabase_itemdatabaseGetHasSlotCount = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x44915068579D7710, 'int', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseGetHasSlotInfo = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x8A9BD0DB7E8376CF, 'bool', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseFilloutItemByName = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x2A610BEE7D341CC4, 'bool', p0, p1)
    return call
end

-- p0 can be a weapon hash, component item
-- p1 is a struct containing WEAPON_MOD and WEAPON_DECORATION
--- @param p0 integer
--- @param p1 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseFilloutItemInfo = function(p0, p1)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xFE90ABBCBFDC13B2, 'bool', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseFilloutAcquireCost = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x74F7928816E4E181, 'bool', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseFilloutSellPrice = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x7A62A2EEDE1C3766, 'bool', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseFilloutSatchelData = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x4776EFD78F75C23F, 'bool', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseFilloutUiData = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xB86F7CC2DC67AC60, 'bool', p0, p1)
    return call
end

-- _ITEMDATABASE_FILLOUT_(A)* - _ITEMDATABASE_FILLOUT_(B)*
--- @param p0 userdata
--- @param p1 userdata
--- @return boolean
natives.itemdatabase_n0X74C3B1093728D263 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x74C3B1093728D263, 'bool', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseFilloutItemEffectIds = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x9379BE60DC55BBE6, 'bool', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseFilloutItemEffectIdInfo = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xCF2D360D27FD1ABF, 'bool', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseFilloutTagData = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x5A11D6EEA17165B0, 'bool', p0, p1, p2, p3)
    return call
end

--- @param p0 userdata
--- @return number
natives.itemdatabase_itemdatabaseGetAcquireCostsCount = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x01FDDAD392D04144, 'int', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseGetAcquireCost = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x6772A83C67A25775, 'bool', p0, p1, p2)
    return call
end

-- Returns fillOutIndex (?)
-- _ITEMDATABASE_GET_(A)* - _ITEMDATABASE_GET_(B)*
--- @param p0 integer
--- @param costshop integer
--- @return number
natives.itemdatabase_n0Xdee7B3C76Ed664Be = function(p0, costshop)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(costshop) == 'integer', 'Argument costshop must be of type integer.')

    local call = natives.invoke(0xDEE7B3C76ED664BE, 'int', p0, costshop)
    return call
end

--- @param p0 integer
--- @param costshop integer
--- @param filloutindex integer
--- @param p3 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseFilloutItem = function(p0, costshop, filloutindex, p3)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(costshop) == 'integer', 'Argument costshop must be of type integer.')
    assert(type(filloutindex) == 'integer', 'Argument filloutindex must be of type integer.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xAD73B614DF26CF8A, 'bool', p0, costshop, filloutindex, p3)
    return call
end

-- _ITEMDATABASE_GET_(A)* - _ITEMDATABASE_GET_(B)*
--- @param p0 userdata
--- @return number
natives.itemdatabase_itemdatabaseGetAwardAcquireCostType = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x12DF9C58201DD19A, 'int', p0)
    return call
end

-- _ITEMDATABASE_GET_(A)* - _ITEMDATABASE_GET_(B)*
--- @param p0 userdata
--- @param index integer
--- @param data userdata
--- @return boolean
natives.itemdatabase_n0X1Fc25Aeb5F76B38D = function(p0, index, data)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')
    assert(type(data) == 'userdata', 'Argument data must be of type userdata.')

    local call = natives.invoke(0x1FC25AEB5F76B38D, 'bool', p0, index, data)
    return call
end

-- Returns itemCount (?)
-- _ITEMDATABASE_GET_(A)* - _ITEMDATABASE_GET_(B)*
--- @param award userdata
--- @param cost integer
--- @return number
natives.itemdatabase_n0Xf540239F9937033B = function(award, cost)
    assert(type(award) == 'userdata', 'Argument award must be of type userdata.')
    assert(type(cost) == 'integer', 'Argument cost must be of type integer.')

    local call = natives.invoke(0xF540239F9937033B, 'int', award, cost)
    return call
end

-- _ITEMDATABASE_FILLOUT_(A)* - _ITEMDATABASE_FILLOUT_(B)*
--- @param award userdata
--- @param cost integer
--- @param index integer
--- @param p3 userdata
--- @return boolean
natives.itemdatabase_n0Xf27F01Bbf5Acd3F3 = function(award, cost, index, p3)
    assert(type(award) == 'userdata', 'Argument award must be of type userdata.')
    assert(type(cost) == 'integer', 'Argument cost must be of type integer.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xF27F01BBF5ACD3F3, 'bool', award, cost, index, p3)
    return call
end

-- Returns collectionId to be used with 0x8750F69A720C2E41 (p0) and 0xCBB7B6EDFA933ADE (p0)
--- @param p0 userdata
--- @param size integer
--- @param comparisontype integer
--- @return number
natives.itemdatabase_itemdatabaseCreateItemCollection = function(p0, size, comparisontype)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(size) == 'integer', 'Argument size must be of type integer.')
    assert(type(comparisontype) == 'integer', 'Argument comparisontype must be of type integer.')

    local call = natives.invoke(0x71EFA7999AE79408, 'int', p0, size, comparisontype)
    return call
end

-- Returns (collection?) size/index (?)
-- _ITEMDATABASE_GET_(A)* - _ITEMDATABASE_GET_(B)*
--- @param collectionid integer
--- @return number
natives.itemdatabase_itemdatabaseGetCollectionSize = function(collectionid)
    assert(type(collectionid) == 'integer', 'Argument collectionid must be of type integer.')

    local call = natives.invoke(0xD389A2549C4EFB30, 'int', collectionid)
    return call
end

-- Params: p2 can be a component item hash
--- @param collectionid integer
--- @param index integer
--- @param p2 integer
--- @return boolean
natives.itemdatabase_itemdatabaseGetComponentItem = function(collectionid, index, p2)
    assert(type(collectionid) == 'integer', 'Argument collectionid must be of type integer.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x8750F69A720C2E41, 'bool', collectionid, index, p2)
    return call
end

--- @param collectionid integer
--- @return boolean
natives.itemdatabase_itemdatabaseReleaseItemCollection = function(collectionid)
    assert(type(collectionid) == 'integer', 'Argument collectionid must be of type integer.')

    local call = natives.invoke(0xCBB7B6EDFA933ADE, 'bool', collectionid)
    return call
end

--- @param p0 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseIsIntrinsicItem = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x337F88E3A063995E, 'bool', p0)
    return call
end

--- @param p0 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseIsOverpoweredItem = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x337F88E3A063995F, 'bool', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseIsKeyValid = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x6D5D51B188333FD1, 'bool', p0, p1)
    return call
end

--- @param p0 integer
--- @param p1 userdata
--- @return boolean
natives.itemdatabase_n0X537A0555F62Ca01A = function(p0, p1)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x537A0555F62CA01A, 'bool', p0, p1)
    return call
end

--- @param p0 userdata
--- @return number
natives.itemdatabase_itemdatabaseGetBundleId = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x891A45960B6B768A, 'int', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return number
natives.itemdatabase_itemdatabaseGetBundleItemCount = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x3332695B01015DF9, 'int', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseGetBundleItemInfo = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x5D48A77E4B668B57, 'bool', p0, p1, p2, p3)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseIsBundleValid = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x4308812A6E9CA62E, 'bool', p0, p1)
    return call
end

-- Returns Item Count
--- @param bundle userdata
--- @param p1 userdata
--- @return number
natives.itemdatabase_n0X799Fcd53358Ed5Fa = function(bundle, p1)
    assert(type(bundle) == 'userdata', 'Argument bundle must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x799FCD53358ED5FA, 'int', bundle, p1)
    return call
end

--- @param bundle userdata
--- @param p1 userdata
--- @param index integer
--- @param p3 userdata
--- @return boolean
natives.itemdatabase_n0Xc4146375D8A0B374 = function(bundle, p1, index, p3)
    assert(type(bundle) == 'userdata', 'Argument bundle must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xC4146375D8A0B374, 'bool', bundle, p1, index, p3)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return boolean
natives.itemdatabase_n0Xa97Ee5E4589Fcf5A = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xA97EE5E4589FCF5A, 'bool', p0, p1)
    return call
end

--- @param p0 userdata
--- @return number
natives.itemdatabase_n0X7A35A72A692Be9Db = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x7A35A72A692BE9DB, 'int', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return boolean
natives.itemdatabase_n0X3A0B667Abff87F6E = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x3A0B667ABFF87F6E, 'bool', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return number
natives.itemdatabase_n0X388088Bff3681189 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x388088BFF3681189, 'int', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseFilloutBundle = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xB542632693D53408, 'bool', p0, p1, p2, p3)
    return call
end

--- @param p0 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseIsShopKeyValid = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x00B9507D8E1D8716, 'bool', p0)
    return call
end

--- @param p0 userdata
--- @return number
natives.itemdatabase_itemdatabaseGetShopInventoriesItemsCount = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xC568B1A0F17C7025, 'int', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseGetShopInventoriesItemInfo = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x4A79B41B4EB91F4E, 'bool', p0, p1, p2)
    return call
end

-- Same Native Function as 0x17721003A66C72BF
--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseGetShopInventoriesItemInfoByKey = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xCFB06801F5099B25, 'bool', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseGetShopInventoriesRequirementGroupInfo = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x76C752D788A76813, 'bool', p0, p1, p2, p3)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseGetShopInventoriesRequirementInfo = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0xE0EA5C031AE5539F, 'bool', p0, p1, p2, p3, p4)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return boolean
natives.itemdatabase_n0X17721003A66C72Bf = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x17721003A66C72BF, 'bool', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseIsShopLayoutKeyValid = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x3AFE5182C45A84F6, 'bool', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseGetShopLayoutInfo = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x66A6D76B6BB999B4, 'bool', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseGetShopLayoutRootMenuInfo = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x86FCB565CCA0CFA7, 'bool', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseGetShopLayoutMenuInfoById = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xD66114469978B55B, 'bool', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseGetShopLayoutMenuInfoByIndex = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xF04247092F193B75, 'bool', p0, p1, p2, p3)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseGetShopLayoutMenuPageKey = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x9A60570657A7B635, 'bool', p0, p1, p2, p3)
    return call
end

--- @param p0 userdata
--- @param index integer
--- @param menukey userdata
--- @return boolean
natives.itemdatabase_n0Xdbeada0Df5F9Ab9F = function(p0, index, menukey)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')
    assert(type(menukey) == 'userdata', 'Argument menukey must be of type userdata.')

    local call = natives.invoke(0xDBEADA0DF5F9AB9F, 'bool', p0, index, menukey)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseGetShopLayoutPageInfoByKey = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xB347C100DF0C9B7F, 'bool', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseGetShopLayoutPageItemKey = function(p0, p1, p2, p3, p4, p5)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0xF32BEF578B3DBAE8, 'bool', p0, p1, p2, p3, p4, p5)
    return call
end

--- @param p0 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseIsBuyableAwardValid = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x4CE753203FA42214, 'bool', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseFilloutBuyAwardAcquireCosts = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xB52E20F6767A09A2, 'bool', p0, p1, p2, p3)
    return call
end

-- _ITEMDATABASE_FILLOUT_(B)* - ITEMDATABASE_FILLOUT_ITEM*
--- @param p0 userdata
--- @param p1 userdata
--- @return boolean
natives.itemdatabase_n0Xf8D09Ef8Ce61D7Bf = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xF8D09EF8CE61D7BF, 'bool', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseGetItemPriceModifiers = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x4EB37AAB79AB0C48, 'bool', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseFilloutPriceModifierByKey = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x40C5D95818823C94, 'bool', p0, p1)
    return call
end

--- @param p0 userdata
--- @return number
natives.itemdatabase_itemdatabaseGetNumberOfModifiedPrices = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x5AAAF40E9B224F5E, 'int', p0)
    return call
end

-- Returns an alternative cost hash to COST_SHOP_DEFAULT
--- @param p0 userdata
--- @param p1 userdata
--- @return number
natives.itemdatabase_itemdatabaseGetModifiedPrice = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xCB92EC9C004732B4, 'integer', p0, p1)
    return call
end

--- @param p0 userdata
--- @return number
natives.itemdatabase_itemdatabaseGetNumberOfModifiers = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x1289D8315235856D, 'int', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseFilloutModifier = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x60614A0AB580A2B5, 'bool', p0, p1, p2)
    return call
end

-- _ITEMDATABASE_GET_* - _ITEMDATABASE_IS_*
--- @param award integer
--- @return boolean
natives.itemdatabase_itemdatabaseGetPriorityAccessAward = function(award)
    assert(type(award) == 'integer', 'Argument award must be of type integer.')

    local call = natives.invoke(0xEF254F1A4C08B7E6, 'bool', award)
    return call
end

-- Returns iAwardItemCount
--- @param award integer
--- @return number
natives.itemdatabase_itemdatabaseGetAwardItemCount = function(award)
    assert(type(award) == 'integer', 'Argument award must be of type integer.')

    local call = natives.invoke(0x3FAA928A79591761, 'int', award)
    return call
end

-- _ITEMDATABASE_GET_(A)* - _ITEMDATABASE_GET_(B)*
--- @param award integer
--- @return number
natives.itemdatabase_n0X48229Ce0C7938237 = function(award)
    assert(type(award) == 'integer', 'Argument award must be of type integer.')

    local call = natives.invoke(0x48229CE0C7938237, 'int', award)
    return call
end

--- @param award integer
--- @param index integer
--- @param currency integer
--- @return boolean
natives.itemdatabase_itemdatabaseFilloutAwardItemInfo = function(award, index, currency)
    assert(type(award) == 'integer', 'Argument award must be of type integer.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')
    assert(type(currency) == 'integer', 'Argument currency must be of type integer.')

    local call = natives.invoke(0x121D2005DD64496B, 'bool', award, index, currency)
    return call
end

-- _ITEMDATABASE_FILLOUT_(A)* - _ITEMDATABASE_FILLOUT_(B)*
--- @param award integer
--- @param p1 userdata
--- @param p2 userdata
--- @return boolean
natives.itemdatabase_n0X8D029948Ca29409B = function(award, p1, p2)
    assert(type(award) == 'integer', 'Argument award must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x8D029948CA29409B, 'bool', award, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return boolean
natives.itemdatabase_itemdatabaseGetAwardCostModifiers = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xE81D0378A384E755, 'bool', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return boolean
natives.itemdatabase_n0Xd076Db9B96Faadf1 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xD076DB9B96FAADF1, 'bool', p0, p1)
    return call
end

--- @param item integer
--- @param tag integer
--- @param tagtype integer
--- @return boolean
natives.itemdatabase_itemdatabaseDoesItemHaveTag = function(item, tag, tagtype)
    assert(type(item) == 'integer', 'Argument item must be of type integer.')
    assert(type(tag) == 'integer', 'Argument tag must be of type integer.')
    assert(type(tagtype) == 'integer', 'Argument tagtype must be of type integer.')

    local call = natives.invoke(0xFF5FB5605AD56856, 'bool', item, tag, tagtype)
    return call
end

-- Params: tag = TAG_ITEM_PROPERTY (tagType(?))
--- @param bundle integer
--- @param tag integer
--- @param tagtype integer
--- @return boolean
natives.itemdatabase_itemdatabaseDoesBundleHaveTag = function(bundle, tag, tagtype)
    assert(type(bundle) == 'integer', 'Argument bundle must be of type integer.')
    assert(type(tag) == 'integer', 'Argument tag must be of type integer.')
    assert(type(tagtype) == 'integer', 'Argument tagtype must be of type integer.')

    local call = natives.invoke(0x99C6EA66DFE73757, 'bool', bundle, tag, tagtype)
    return call
end

--- @param item integer
--- @param tag integer
--- @return number
natives.itemdatabase_itemdatabaseGetItemTagType = function(item, tag)
    assert(type(item) == 'integer', 'Argument item must be of type integer.')
    assert(type(tag) == 'integer', 'Argument tag must be of type integer.')

    local call = natives.invoke(0x6111B8F9413F413A, 'integer', item, tag)
    return call
end

--- @param p0 userdata
--- @param tagtype integer
--- @param p2 userdata
--- @return number
natives.itemdatabase_n0X8870895Ba5Ed9385 = function(p0, tagtype, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(tagtype) == 'integer', 'Argument tagtype must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x8870895BA5ED9385, 'int', p0, tagtype, p2)
    return call
end

-- Returns docData.iNumTotalLabelTypes
--- @param p0 userdata
--- @return number
natives.itemdatabase_itemdatabaseLocalizationGetNumLabelTypes = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xCEC6A41E8910486A, 'int', p0)
    return call
end

-- Returns iNumValuesForType
--- @param p0 userdata
--- @param p1 userdata
--- @return number
natives.itemdatabase_itemdatabaseLocalizationGetNumValues = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x49885D82A13EEAEA, 'int', p0, p1)
    return call
end

-- Returns LabelType
--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.itemdatabase_itemdatabaseLocalizationGetType = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xCABF5D41D0073D4A, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param label integer
--- @param p2 userdata
--- @return number
natives.itemdatabase_itemdatabaseLocalizationGetValue = function(p0, label, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(label) == 'integer', 'Argument label must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x9AE5610FDCED6EA7, 'int', p0, label, p2)
    return call
end

--- @param item integer
--- @param p1 integer
--- @return number
natives.itemdatabase_itemdatabaseGetItemPathset = function(item, p1)
    assert(type(item) == 'integer', 'Argument item must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xF4452CE83118C738, 'int', item, p1)
    return call
end

-- Returns Pathset Hash
--- @param p0 userdata
--- @param p1 integer
--- @return number
natives.itemdatabase_n0Xaa29A5F13B2C20B2 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xAA29A5F13B2C20B2, 'integer', p0, p1)
    return call
end

--- @param p0 boolean
--- @return number
natives.itemset_createItemset = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0xA1AF16083320065A, 'integer', p0)
    return call
end

--- @param itemset integer
natives.itemset_destroyItemset = function(itemset)
    assert(type(itemset) == 'integer', 'Argument itemset must be of type integer.')

    local call = natives.invoke(0x712BC69F10549B92, 'void', itemset)
end

--- @param itemset integer
--- @return boolean
natives.itemset_isItemsetValid = function(itemset)
    assert(type(itemset) == 'integer', 'Argument itemset must be of type integer.')

    local call = natives.invoke(0xD30765D153EF5C76, 'bool', itemset)
    return call
end

--- @param entity integer
--- @param itemset integer
--- @return boolean
natives.itemset_addToItemset = function(entity, itemset)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(itemset) == 'integer', 'Argument itemset must be of type integer.')

    local call = natives.invoke(0xABE74510883C7950, 'bool', entity, itemset)
    return call
end

--- @param entity integer
--- @param itemset integer
natives.itemset_removeFromItemset = function(entity, itemset)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(itemset) == 'integer', 'Argument itemset must be of type integer.')

    local call = natives.invoke(0xC5BAA432B429DC24, 'void', entity, itemset)
end

--- @param itemset integer
--- @return number
natives.itemset_getItemsetSize = function(itemset)
    assert(type(itemset) == 'integer', 'Argument itemset must be of type integer.')

    local call = natives.invoke(0x55F2E375AC6018A9, 'int', itemset)
    return call
end

--- @param index integer
--- @param itemset integer
--- @return number
natives.itemset_getIndexedItemInItemset = function(index, itemset)
    assert(type(index) == 'integer', 'Argument index must be of type integer.')
    assert(type(itemset) == 'integer', 'Argument itemset must be of type integer.')

    local call = natives.invoke(0x275A2E2C0FAB7612, 'int', index, itemset)
    return call
end

--- @param index integer
--- @param itemset integer
--- @return any
natives.itemset_getIndexedScenarioPointIndexInItemset = function(index, itemset)
    assert(type(index) == 'integer', 'Argument index must be of type integer.')
    assert(type(itemset) == 'integer', 'Argument itemset must be of type integer.')

    local call = natives.invoke(0x9FC3CDB5CE815901, 'any', index, itemset)
    return call
end

--- @param entity integer
--- @param itemset integer
--- @return boolean
natives.itemset_isInItemset = function(entity, itemset)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(itemset) == 'integer', 'Argument itemset must be of type integer.')

    local call = natives.invoke(0xD1503C2EE2FE688C, 'bool', entity, itemset)
    return call
end

--- @param itemset integer
natives.itemset_cleanItemset = function(itemset)
    assert(type(itemset) == 'integer', 'Argument itemset must be of type integer.')

    local call = natives.invoke(0x85F3A86CA9021FB0, 'void', itemset)
end

--- @param itemset integer
natives.itemset_clearItemset = function(itemset)
    assert(type(itemset) == 'integer', 'Argument itemset must be of type integer.')

    local call = natives.invoke(0x20A4BF0E09BEE146, 'void', itemset)
end

-- crimeType:
-- enum eCrimeType : Hash
-- {
-- 	CRIME_ACCOMPLICE = 0xAF074F6D,
-- 	CRIME_ARSON = 0x68134DC7,
-- 	CRIME_ASSAULT = 0x0BADC882,
-- 	CRIME_ASSAULT_ANIMAL = 0x18DA55EE,
-- 	CRIME_ASSAULT_CORPSE = 0x4E5F23F2,
-- 	CRIME_ASSAULT_HORSE = 0xC4736181,
-- 	CRIME_ASSAULT_LAW = 0xD7466D7C,
-- 	CRIME_ASSAULT_LIVESTOCK = 0xCCE1CCBD,
-- 	CRIME_BANK_ROBBERY = 0x6A1ADE3D,
-- 	CRIME_BURGLARY = 0xA54C77E0,
-- 	CRIME_CHEATING = 0xA2FF1145,
-- 	CRIME_DISTURBANCE = 0x5011F613,
-- 	CRIME_EXPLOSION = 0x3EBA7A37,
-- 	CRIME_EXPLOSION_POISON = 0x91D0A0E1,
-- 	CRIME_GRAVE_ROBBERY = 0x971EA5AF,
-- 	CRIME_HASSLE = 0x58488776,
-- 	CRIME_HIT_AND_RUN = 0xFF0A3CC4,
-- 	CRIME_HIT_AND_RUN_LAW = 0x064814AF,
-- 	CRIME_INTIMIDATION = 0x8319FBAB,
-- 	CRIME_JACK_HORSE = 0x82F7E4A2,
-- 	CRIME_JACK_VEHICLE = 0x6B981F4C,
-- 	CRIME_JAIL_BREAK = 0x12C1D589,
-- 	CRIME_KIDNAPPING = 0x98F908DB,
-- 	CRIME_KIDNAPPING_LAW = 0xFD72A7EA,
-- 	CRIME_LASSO_ASSAULT = 0x56EE5D5A,
-- 	CRIME_LAW_IS_THREATENED = 0x1CB91DF0,
-- 	CRIME_LOITERING = 0x6629D2F4,
-- 	CRIME_LOOTING = 0x55AD2BEB,
-- 	CRIME_MURDER = 0xE28ECE7E,
-- 	CRIME_MURDER_ANIMAL = 0x48F59A66,
-- 	CRIME_MURDER_HORSE = 0xC7261D79,
-- 	CRIME_MURDER_LAW = 0x7797FCE7,
-- 	CRIME_MURDER_LIVESTOCK = 0x9569C546,
-- 	CRIME_MURDER_PLAYER = 0xF5ABD6C9,
-- 	CRIME_MURDER_PLAYER_HORSE = 0xD55C6A79,
-- 	CRIME_PROPERTY_DESTRUCTION = 0x533B003D,
-- 	CRIME_RESIST_ARREST = 0xDF577BA5,
-- 	CRIME_ROBBERY = 0xA3BEDE4C,
-- 	CRIME_SELF_DEFENCE = 0xBD6A0AA3,
-- 	CRIME_STAGECOACH_ROBBERY = 0xFC738E61,
-- 	CRIME_STOLEN_GOODS = 0x9A949C79,
-- 	CRIME_THEFT = 0x72ADE410,
-- 	CRIME_THEFT_HORSE = 0xBE3A5838,
-- 	CRIME_THEFT_LIVESTOCK = 0x85BA08FD,
-- 	CRIME_THEFT_VEHICLE = 0x43A9ECA1,
-- 	CRIME_THREATEN = 0x941C985A,
-- 	CRIME_THREATEN_LAW = 0x7F908566,
-- 	CRIME_TRAIN_ROBBERY = 0x647D2A5A,
-- 	CRIME_TRAMPLE = 0x45DB39D8,
-- 	CRIME_TRAMPLE_LAW = 0xF00F266B,
-- 	CRIME_TRAMPLE_PLAYER = 0x75970C15,
-- 	CRIME_TRESPASSING = 0xAEDE8E35,
-- 	CRIME_UNARMED_ASSAULT = 0x5098CC5A,
-- 	CRIME_VANDALISM = 0x80FDC759,
-- 	CRIME_VANDALISM_VEHICLE = 0xF9E7ECE4,
-- 	CRIME_VEHICLE_DESTRUCTION = 0x54A85DDC,
-- 	CRIME_WANTED_LEVEL_UP_DEBUG_HIGH = 0x99C52FF5,
-- 	CRIME_WANTED_LEVEL_UP_DEBUG_LOW = 0xD891890F
-- };
--- @param player integer
--- @param crimetype integer
--- @param bounty integer
--- @param entity integer
--- @param isknownsuspect boolean
natives.law_reportCrime = function(player, crimetype, bounty, entity, isknownsuspect)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(crimetype) == 'integer', 'Argument crimetype must be of type integer.')
    assert(type(bounty) == 'integer', 'Argument bounty must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(isknownsuspect) == 'boolean', 'Argument isknownsuspect must be of type boolean.')

    local call = natives.invoke(0xF60386770878A98F, 'void', player, crimetype, bounty, entity, isknownsuspect)
end

-- crimeType: see _REPORT_CRIME
--- @param player integer
--- @param crimetype integer
--- @param p2 integer
--- @param p3 integer
--- @param p4 integer
natives.law_suppressCrimeThisFrame = function(player, crimetype, p2, p3, p4)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(crimetype) == 'integer', 'Argument crimetype must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')

    local call = natives.invoke(0x785177E4D57D7389, 'void', player, crimetype, p2, p3, p4)
end

-- Returns amount of suppressed crimes to be used later in the function MPINTRO_CRIME_MONITOR_MAINTAIN
--- @param player integer
--- @param crimetype integer
--- @return number
natives.law_numCrimesSuppressed = function(player, crimetype)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(crimetype) == 'integer', 'Argument crimetype must be of type integer.')

    local call = natives.invoke(0xC08E804C91F47C80, 'int', player, crimetype)
    return call
end

--- @param ped integer
--- @param crimetype integer
--- @param p2 boolean
--- @return any
natives.law_n0Xffebe5Aa96Bc2E4E = function(ped, crimetype, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(crimetype) == 'integer', 'Argument crimetype must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xFFEBE5AA96BC2E4E, 'any', ped, crimetype, p2)
    return call
end

-- Params: p0 either 0, 1 or -1 in R* Scripts
-- Set to 0 called together with _SUPPRESS_CRIME
--- @param p0 integer
natives.law_n0X15Abd5004Cad2D99 = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x15ABD5004CAD2D99, 'void', p0)
end

--- @param crimetype integer
--- @param p1 boolean
natives.law_n0Xf611De44Aeb36A1D = function(crimetype, p1)
    assert(type(crimetype) == 'integer', 'Argument crimetype must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xF611DE44AEB36A1D, 'void', crimetype, p1)
end

--- @return boolean
natives.law_n0X3D2674828A4E6B3C = function()

    local call = natives.invoke(0x3D2674828A4E6B3C, 'bool')
    return call
end

--- @param p0 boolean
natives.law_n0Xc5Eb2755Fa25F1E9 = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0xC5EB2755FA25F1E9, 'void', p0)
end

--- @param player integer
--- @return number
natives.law_getBounty = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x54310AAB97B92816, 'int', player)
    return call
end

--- @param player integer
--- @param itemvalueamount integer
natives.law_addBounty = function(player, itemvalueamount)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(itemvalueamount) == 'integer', 'Argument itemvalueamount must be of type integer.')

    local call = natives.invoke(0x0E3BDEED21BEB945, 'void', player, itemvalueamount)
end

--- @param player integer
--- @param amount integer
natives.law_setBounty = function(player, amount)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(amount) == 'integer', 'Argument amount must be of type integer.')

    local call = natives.invoke(0x093A9D1F72DF0D19, 'void', player, amount)
end

--- @param player integer
natives.law_clearBounty = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xC76F252371150D9A, 'void', player)
end

--- @param player integer
--- @return number
natives.law_getWantedScore = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xDD5FD601481F648B, 'int', player)
    return call
end

--- @param player integer
--- @param intensity integer
natives.law_setWantedScore = function(player, intensity)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(intensity) == 'integer', 'Argument intensity must be of type integer.')

    local call = natives.invoke(0xA80FF73F772ACF6A, 'void', player, intensity)
end

--- @param player integer
natives.law_clearWantedScore = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x062B4A4A3396351D, 'void', player)
end

--- @param p0 userdata
natives.law_n0X331D349E0380B097 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x331D349E0380B097, 'void', p0)
end

-- Only used in R* Script fm_mission_controller
-- _CLEAR_WANTED_*
natives.law_n0X292Ad61A33A7A485 = function()

    local call = natives.invoke(0x292AD61A33A7A485, 'void')
end

-- Used in SP only, called together with 0x55F37F5F3F2475E1 & CLEAR_WANTED_SCORE
-- _REPORT_*
--- @param player integer
natives.law_n0X07E8B8B20570271C = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x07E8B8B20570271C, 'void', player)
end

-- Used in SP only
-- _REPORT_*
--- @param player integer
--- @param lawregionhash integer
natives.law_n0X22741652985C84D0 = function(player, lawregionhash)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(lawregionhash) == 'integer', 'Argument lawregionhash must be of type integer.')

    local call = natives.invoke(0x22741652985C84D0, 'void', player, lawregionhash)
end

--- @param player integer
--- @param dispatchresponsehash integer
natives.law_reportPlayerLawDispatchResponseOverride = function(player, dispatchresponsehash)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(dispatchresponsehash) == 'integer', 'Argument dispatchresponsehash must be of type integer.')

    local call = natives.invoke(0x9C4352134B2835FB, 'void', player, dispatchresponsehash)
end

-- Only used in shoprobberies R* Scripts
--- @return boolean
natives.law_n0X9Ef07Cfbb19A9733 = function()

    local call = natives.invoke(0x9EF07CFBB19A9733, 'bool')
    return call
end

--- @param toggle boolean
natives.law_setLawDisabled = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x8DE82BC774F3B862, 'void', toggle)
end

natives.law_forceLawOnLocalPlayerImmediately = function()

    local call = natives.invoke(0x956510F8C36B5C64, 'void')
end

-- enum eLawRegion : Hash
-- {
-- 	LAW_DISPATCH_REGION_NONE = 0,
-- 	LAW_REGION_AGUASDULCES = 0x2F573EBE,
-- 	LAW_REGION_ANNESBURG = 0x68CAFD50,
-- 	LAW_REGION_ARMADILLO = 0xF0B90756,
-- 	LAW_REGION_BAYOU_NWA = 0x80966B1C,
-- 	LAW_REGION_BEECHERS_HOPE = 0xE2544977,
-- 	LAW_REGION_BIG_VALLEY = 0x3DF1559A,
-- 	LAW_REGION_BLACKWATER = 0x60D4886D,
-- 	LAW_REGION_BLACKWATER_MAINGAME = 0x66553576,
-- 	LAW_REGION_BLUEGILL_MARSH = 0x1D6AED8E,
-- 	LAW_REGION_BRAITHWAITE_MANOR = 0x3D71E7FF,
-- 	LAW_REGION_BUTCHER_CREEK = 0x2B3E1822,
-- 	LAW_REGION_CALIGA_HALL = 0xF3FE5080,
-- 	LAW_REGION_CORNWALL = 0xCC4672FA,
-- 	LAW_REGION_CUMBERLAND_FOREST = 0x81A78306,
-- 	LAW_REGION_EMERALD_RANCH = 0x5C069DF3,
-- 	LAW_REGION_FORT_WALLACE = 0x0AF25192,
-- 	LAW_REGION_GREAT_PLAINS = 0xB20573FA,
-- 	LAW_REGION_GREAT_PLAINS_MAINGAME = 0x9862FF7C,
-- 	LAW_REGION_GRIZZLIES = 0xBB936031,
-- 	LAW_REGION_GUAMA = 0x200DFF42,
-- 	LAW_REGION_HEARTLANDS = 0xAD14DA65,
-- 	LAW_REGION_LAGRAS = 0xC64808D3,
-- 	LAW_REGION_MACFARLANES_RANCH = 0x396A7D5F,
-- 	LAW_REGION_MANICATO = 0x039DB6BF,
-- 	LAW_REGION_MANZANITA_POST = 0x895E580E,
-- 	LAW_REGION_MANZANITA_POST_MAINGAME = 0x9BDD6A38,
-- 	LAW_REGION_OCCUPIED_CARAVAN_CAMP = 0x7EBABB01,
-- 	LAW_REGION_OLD_MAP_WILDERNESS = 0xCBB45950,
-- 	LAW_REGION_OLD_MAP_WILDERNESS_MAINGAME = 0x9F839BE7,
-- 	LAW_REGION_OUTLAW3 = 0x97A02FC1,
-- 	LAW_REGION_PRONGHORN_RANCH = 0x398E4BFC,
-- 	LAW_REGION_RHODES = 0x89222928,
-- 	LAW_REGION_RHODES_LOCKDOWN = 0xB1181671,
-- 	LAW_REGION_RIDGEWOOD_FARM = 0x635C3028,
-- 	LAW_REGION_ROANOKE_RIDGE = 0x46386A9A,
-- 	LAW_REGION_SAINT_DENIS = 0x5CF7C268,
-- 	LAW_REGION_SAINT_DENIS_RURAL = 0x4FD5331A,
-- 	LAW_REGION_SCARLETT_MEADOWS = 0x5FDD9717,
-- 	LAW_REGION_SISIKA = 0x2B6BBA52,
-- 	LAW_REGION_STRAWBERRY = 0xDD932620,
-- 	LAW_REGION_TALL_TREES = 0xD939B758,
-- 	LAW_REGION_TALL_TREES_MAINGAME = 0x084B17DF,
-- 	LAW_REGION_THIEVES_LANDING = 0x3D0C2EB6,
-- 	LAW_REGION_THIEVES_LANDING_MAINGAME = 0x61C450F3,
-- 	LAW_REGION_TUMBLEWEED = 0x0EFAF8DC,
-- 	LAW_REGION_VALENTINE = 0xA7A3F0C3,
-- 	LAW_REGION_VALENTINE_LOCKDOWN = 0x123582FE,
-- 	LAW_REGION_VAN_HORN = 0x619B528E,
-- 	LAW_REGION_WAPITI = 0x7A976E02
-- };
--- @param player integer
--- @param lawregionhash integer
--- @param statehash integer
natives.law_setLawRegion = function(player, lawregionhash, statehash)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(lawregionhash) == 'integer', 'Argument lawregionhash must be of type integer.')
    assert(type(statehash) == 'integer', 'Argument statehash must be of type integer.')

    local call = natives.invoke(0x4752F68EB7F2D280, 'void', player, lawregionhash, statehash)
end

-- Only used in R* SP Scripts
--- @param player integer
--- @param p1 boolean
natives.law_n0X5E6F375Ca101C108 = function(player, p1)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x5E6F375CA101C108, 'void', player, p1)
end

--- @param player integer
--- @param p1 integer
natives.law_setLawRbsVolume = function(player, p1)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x9BBDCB8DF789EBC1, 'void', player, p1)
end

--- @param player integer
--- @return boolean
natives.law_isLawIncidentActive = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xAD401C63158ACBAA, 'bool', player)
    return call
end

--- @param player integer
--- @return number
natives.law_n0X148E7Ac8141C9E64 = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x148E7AC8141C9E64, 'integer', player)
    return call
end

-- _SET_C* - _SET_D*
--- @param player integer
--- @param crimetype integer
--- @param bounty integer
--- @param p3 number
--- @param p4 number
--- @param p5 boolean
--- @param p6 number
--- @param p7 number
--- @param p8 userdata
natives.law_n0Xedfc6C1Fd1C964F5 = function(player, crimetype, bounty, p3, p4, p5, p6, p7, p8)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(crimetype) == 'integer', 'Argument crimetype must be of type integer.')
    assert(type(bounty) == 'integer', 'Argument bounty must be of type integer.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')
    assert(type(p6) == 'number', 'Argument p6 must be of type number.')
    assert(type(p7) == 'number', 'Argument p7 must be of type number.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')

    local call = natives.invoke(0xEDFC6C1FD1C964F5, 'void', player, crimetype, bounty, p3, p4, p5, p6, p7, p8)
end

--- @param pedgroup1 integer
--- @param ped integer
--- @param pedgroup2 integer
--- @param x number
--- @param y number
--- @param z number
--- @param crimetype integer
--- @return boolean
natives.law_lawWitnessResponseTask = function(pedgroup1, ped, pedgroup2, x, y, z, crimetype)
    assert(type(pedgroup1) == 'integer', 'Argument pedgroup1 must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(pedgroup2) == 'integer', 'Argument pedgroup2 must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(crimetype) == 'integer', 'Argument crimetype must be of type integer.')

    local call = natives.invoke(0xF0B67BAD53C35BD9, 'bool', pedgroup1, ped, pedgroup2, x, y, z, crimetype)
    return call
end

--- @param ped integer
--- @param p1 userdata
--- @return any
natives.law_n0X018F30D762E62Df8 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x018F30D762E62DF8, 'any', ped, p1)
    return call
end

-- Only used in R* SP Script av_amb_camp_robbery
--- @param ped integer
--- @param p1 userdata
--- @return any
natives.law_n0X318F0F9A4426Cfa2 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x318F0F9A4426CFA2, 'any', ped, p1)
    return call
end

--- @param entity integer
--- @param ped integer
--- @param p2 boolean
--- @param x number
--- @param y number
--- @param z number
--- @param crimetype integer
--- @return any
natives.law_n0X95878B13E272Ef1F = function(entity, ped, p2, x, y, z, crimetype)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(crimetype) == 'integer', 'Argument crimetype must be of type integer.')

    local call = natives.invoke(0x95878B13E272EF1F, 'any', entity, ped, p2, x, y, z, crimetype)
    return call
end

--- @param player integer
--- @param crimetype integer
--- @param pedgroup integer
natives.law_addWitnessResponse = function(player, crimetype, pedgroup)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(crimetype) == 'integer', 'Argument crimetype must be of type integer.')
    assert(type(pedgroup) == 'integer', 'Argument pedgroup must be of type integer.')

    local call = natives.invoke(0x10827B5A0AAC56A7, 'void', player, crimetype, pedgroup)
end

-- Only used in R* SP Scripts
-- Params: p2 either 1 or 2
--- @param player integer
--- @param crimetype integer
--- @param p2 integer
natives.law_n0Xd7494Ded50C6Ef52 = function(player, crimetype, p2)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(crimetype) == 'integer', 'Argument crimetype must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0xD7494DED50C6EF52, 'void', player, crimetype, p2)
end

--- @param player integer
--- @return boolean
natives.law_areWitnessesActive = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x69E181772886F48B, 'bool', player)
    return call
end

--- @param player integer
--- @return boolean
natives.law_areWitnessesPending = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x0BB6DE7D23C60626, 'bool', player)
    return call
end

--- @param player integer
--- @param areinvestigatorsactive boolean
--- @param p2 userdata
--- @return boolean
natives.law_areInvestigatorsActive = function(player, areinvestigatorsactive, p2)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(areinvestigatorsactive) == 'boolean', 'Argument areinvestigatorsactive must be of type boolean.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xF0FBFB9AB15F7734, 'bool', player, areinvestigatorsactive, p2)
    return call
end

--- @param player integer
--- @param itemset integer
natives.law_n0X522F74636Df10201 = function(player, itemset)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(itemset) == 'integer', 'Argument itemset must be of type integer.')

    local call = natives.invoke(0x522F74636DF10201, 'void', player, itemset)
end

-- Only used in R* SP Scripts
-- Params: p1 = true, p2 = false
--- @param itemset integer
--- @param p1 boolean
--- @param p2 boolean
natives.law_n0Xda1A9Adc4E3D4B16 = function(itemset, p1, p2)
    assert(type(itemset) == 'integer', 'Argument itemset must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xDA1A9ADC4E3D4B16, 'void', itemset, p1, p2)
end

--- @param toggle boolean
natives.law_enableDispatchLaw = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xC805EB785824F712, 'void', toggle)
end

--- @param toggle boolean
natives.law_enableDispatchLaw2 = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x710448D44A64C213, 'void', toggle)
end

-- Only used in rcm_homerob00 R* Script
--- @return boolean
natives.law_areAnyLawPedsInvestigating = function()

    local call = natives.invoke(0xECE3C34B270428D5, 'bool')
    return call
end

-- Only used in trainrobbery_ambient R* Script
--- @return boolean
natives.law_areLawPedsEnabledForTrain = function()

    local call = natives.invoke(0xA22C46F16359471C, 'bool')
    return call
end

-- Only used in rcm_gunslinger1_1 R* Script: p0 = 0
--- @param p0 integer
natives.law_n0X82F11E1296996574 = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x82F11E1296996574, 'void', p0)
end

--- @param p0 integer
natives.law_n0X3852237A3D9Df145 = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x3852237A3D9DF145, 'void', p0)
end

--- @param ped integer
--- @return boolean
natives.law_n0X0Eaf918F751F27Ba = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x0EAF918F751F27BA, 'bool', ped)
    return call
end

-- Only used in rcm_serial_killer1 R* Script
--- @param ped integer
--- @return boolean
natives.law_n0Xc0Df161950Fb101E = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xC0DF161950FB101E, 'bool', ped)
    return call
end

--- @param player integer
--- @param p1 integer
--- @return any
natives.law_n0Xe4D6E45F491A66Cb = function(player, p1)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xE4D6E45F491A66CB, 'any', player, p1)
    return call
end

-- Returns p1 value for 0xE4D6E45F491A66CB
--- @param player integer
--- @return number
natives.law_n0Xe9Eb79Cbf9C0F58A = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xE9EB79CBF9C0F58A, 'int', player)
    return call
end

--- @param player integer
--- @param ped integer
--- @param outcoords integer
natives.law_n0X21213B833Ef4Dae7 = function(player, ped, outcoords)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(outcoords) == 'integer', 'Argument outcoords must be of type integer.')

    local call = natives.invoke(0x21213B833EF4DAE7, 'void', player, ped, outcoords)
end

--- @param player integer
natives.law_n0X61B98367D93F012F = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x61B98367D93F012F, 'void', player)
end

--- @param player integer
--- @param crimetype integer
--- @param p2 userdata
natives.law_n0X6Abc50979655Bee7 = function(player, crimetype, p2)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(crimetype) == 'integer', 'Argument crimetype must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x6ABC50979655BEE7, 'void', player, crimetype, p2)
end

-- _CLEAR*
--- @param player integer
--- @param p1 boolean
natives.law_n0X390710D2Dafa6Bff = function(player, p1)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x390710D2DAFA6BFF, 'void', player, p1)
end

-- Returns bounty (increment) value
--- @param crimetype integer
--- @return number
natives.law_getCrimeBountyAmountByType = function(crimetype)
    assert(type(crimetype) == 'integer', 'Argument crimetype must be of type integer.')

    local call = natives.invoke(0x35E5E21F9159849C, 'int', crimetype)
    return call
end

-- crimeType: see _REPORT_CRIME
--- @param crimetype integer
--- @param p1 userdata
--- @return number
natives.law_n0Xdaefdfdb2Aeece37 = function(crimetype, p1)
    assert(type(crimetype) == 'integer', 'Argument crimetype must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xDAEFDFDB2AEECE37, 'int', crimetype, p1)
    return call
end

-- See _REPORT_CRIME
--- @param player integer
--- @return number
natives.law_getHudPlayerCrimeType = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x259CE340A8738814, 'integer', player)
    return call
end

--- @param player integer
--- @return number
natives.law_n0Xe083Beda81709891 = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xE083BEDA81709891, 'int', player)
    return call
end

--- @param player integer
--- @param p1 integer
--- @param p2 integer
--- @return boolean
natives.law_n0X89E005B1662F6E48 = function(player, p1, p2)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x89E005B1662F6E48, 'bool', player, p1, p2)
    return call
end

--- @param player integer
--- @param p1 integer
--- @param p2 integer
--- @return boolean
natives.law_n0X3738B784Ddd35Cc6 = function(player, p1, p2)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x3738B784DDD35CC6, 'bool', player, p1, p2)
    return call
end

-- Only used in net_fetch R* Script
--- @param crimetype integer
--- @return number
natives.law_n0X0Bdfebcf40A5F7E3 = function(crimetype)
    assert(type(crimetype) == 'integer', 'Argument crimetype must be of type integer.')

    local call = natives.invoke(0x0BDFEBCF40A5F7E3, 'int', crimetype)
    return call
end

-- Note: This native is only used in multiplayer scripts
-- dispatchResponseHash: see update1/common/data/dispatchresponses/..
--- @param dispatchresponsehash integer
natives.law_setCustomLawDispatchResponse = function(dispatchresponsehash)
    assert(type(dispatchresponsehash) == 'integer', 'Argument dispatchresponsehash must be of type integer.')

    local call = natives.invoke(0x009CF9A29972C298, 'void', dispatchresponsehash)
end

-- dispatchResponseHash: see common/data/dispatchresponses/..
--- @param x number
--- @param y number
--- @param z number
--- @param dispatchresponsehash integer
--- @return any
natives.law_createLawDispatchResponseForCoords = function(x, y, z, dispatchresponsehash)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(dispatchresponsehash) == 'integer', 'Argument dispatchresponsehash must be of type integer.')

    local call = natives.invoke(0x75CBF20BA47E4F89, 'any', x, y, z, dispatchresponsehash)
    return call
end

-- Force clears local player's wanted level
natives.law_setBountyHunterPursuitCleared = function()

    local call = natives.invoke(0x55F37F5F3F2475E1, 'void')
end

-- Called together with REPORT_POLICE_SPOTTED_PLAYER
natives.law_n0Xbd944A3D36E992De = function()

    local call = natives.invoke(0xBD944A3D36E992DE, 'void')
end

--- @param p0 boolean
natives.law_n0X987Be590Fb9D41E5 = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x987BE590FB9D41E5, 'void', p0)
end

--- @param p0 boolean
natives.law_n0Xdcf12B89624Aac96 = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0xDCF12B89624AAC96, 'void', p0)
end

--- @param p0 boolean
natives.law_n0Xddce8E960D1De240 = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0xDDCE8E960D1DE240, 'void', p0)
end

natives.law_n0Xdea083C16Bb91345 = function()

    local call = natives.invoke(0xDEA083C16BB91345, 'void')
end

-- Only used in act_bankrobbery01 R* Script
--- @param player integer
--- @param itemset integer
natives.law_n0X9C8A2Bf37E966464 = function(player, itemset)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(itemset) == 'integer', 'Argument itemset must be of type integer.')

    local call = natives.invoke(0x9C8A2BF37E966464, 'void', player, itemset)
end

--- @param player integer
--- @return boolean
natives.law_n0X9D5C9A5A3321B128 = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x9D5C9A5A3321B128, 'bool', player)
    return call
end

--- @param player integer
--- @return boolean
natives.law_n0X0F230De0Ddbe3649 = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x0F230DE0DDBE3649, 'bool', player)
    return call
end

--- @param player integer
--- @return boolean
natives.law_n0X9945A3E2528A02E8 = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x9945A3E2528A02E8, 'bool', player)
    return call
end

-- Returns the amount of time (probably in game minutes) since last seen by the law / left the wanted radius
--- @param player integer
--- @return number
natives.law_getTimeSinceLastSeenByLaw = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x717DA2281DF90855, 'float', player)
    return call
end

--- @param p0 number
natives.law_n0X9B4C564Bfa7Cff37 = function(p0)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')

    local call = natives.invoke(0x9B4C564BFA7CFF37, 'void', p0)
end

--- @param toggle boolean
natives.law_setAllowDisabledLawResponses = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x4B52BF96E225D230, 'void', toggle)
end

--- @param player integer
natives.law_resetWantedForNewIncident = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x2728C77FBC4B9796, 'void', player)
end

--- @param ped integer
--- @return boolean
natives.law_n0X856Ce8Fde2416602 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x856CE8FDE2416602, 'bool', ped)
    return call
end

-- Only used in shoprobberies
--- @param entity integer
--- @return boolean
natives.law_n0X7351Da734F989F4E = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x7351DA734F989F4E, 'bool', entity)
    return call
end

-- p0 is always BOUNTYHUNTERSGLOBALCOOLDOWN in R* scripts
--- @param p0 integer
--- @return number
natives.law_getBountyHunterGlobalCooldown = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x76CF93D4B416B288, 'int', p0)
    return call
end

-- p0 is always BOUNTYHUNTERSGLOBALCOOLDOWN in R* scripts
--- @param p0 integer
--- @param p1 integer
natives.law_setBountyHunterGlobalCooldown = function(p0, p1)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xF19706B1F8FFA88F, 'void', p0, p1)
end

-- Only used in resapwn_dump_body R* Script
--- @param p0 userdata
natives.law_n0X2001687F9562Fd9D = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x2001687F9562FD9D, 'void', p0)
end

-- p0 is always BOUNTYHUNTERSGLOBALCOOLDOWN in R* scripts
--- @param p0 integer
--- @param p1 boolean
--- @param p2 userdata
natives.law_pauseBountyHunterCooldown = function(p0, p1, p2)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xC61EDEBF16CD9668, 'void', p0, p1, p2)
end

-- Only used in R* SP Scripts
-- Params: p1 = 0
--- @param p0 boolean
--- @param p1 userdata
natives.law_n0Xe9Ac8466Abe484Bb = function(p0, p1)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xE9AC8466ABE484BB, 'void', p0, p1)
end

--- @param ped integer
--- @return boolean
natives.law_n0X40851Bcc33Acd9Ab = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x40851BCC33ACD9AB, 'bool', ped)
    return call
end

--- @return boolean
natives.law_n0Xf46108C50A22B029 = function()

    local call = natives.invoke(0xF46108C50A22B029, 'bool')
    return call
end

natives.law_n0X7803436E68C32B26 = function()

    local call = natives.invoke(0x7803436E68C32B26, 'void')
end

natives.law_n0Xc310239Acccf5579 = function()

    local call = natives.invoke(0xC310239ACCCF5579, 'void')
end

natives.law_n0X29Cd4896Ecb66C12 = function()

    local call = natives.invoke(0x29CD4896ECB66C12, 'void')
end

-- Seems to disable lawmen guarding behaviors (like during a region lockdown). Must be called every frame.
-- Only used in R* SP Scripts, mostly used in train_fast_travel_core
natives.law_n0Xe94B5E938619712E = function()

    local call = natives.invoke(0xE94B5E938619712E, 'void')
end

-- Only used in R* Script long_update
-- Returns a value thats being subtracted from GET_GAME_TIMER
--- @param player integer
--- @return number
natives.law_n0X7Fc667F6Ddfbcdcc = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x7FC667F6DDFBCDCC, 'int', player)
    return call
end

--- @param crimetype integer
natives.law_n0X9C5Bd8C562565Ce6 = function(crimetype)
    assert(type(crimetype) == 'integer', 'Argument crimetype must be of type integer.')

    local call = natives.invoke(0x9C5BD8C562565CE6, 'void', crimetype)
end

--- @param player integer
--- @param data userdata
natives.law_n0Xcbfb4951F2E3934C = function(player, data)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(data) == 'userdata', 'Argument data must be of type userdata.')

    local call = natives.invoke(0xCBFB4951F2E3934C, 'void', player, data)
end

-- behaviour: https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/CLawBehavior__Flags
--- @param ped integer
--- @param behaviour integer
natives.law_setPedLawBehaviour = function(ped, behaviour)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(behaviour) == 'integer', 'Argument behaviour must be of type integer.')

    local call = natives.invoke(0x819ADD5EF1742F47, 'void', ped, behaviour)
end

--- @param ped integer
--- @param bitset integer
natives.law_n0X00Db0Bc05E3Faa4E = function(ped, bitset)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(bitset) == 'integer', 'Argument bitset must be of type integer.')

    local call = natives.invoke(0x00DB0BC05E3FAA4E, 'void', ped, bitset)
end

--- @param x number
--- @param y number
--- @param z number
--- @param p3 number
--- @param itemset integer
natives.law_n0X0C392Db374655176 = function(x, y, z, p3, itemset)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(itemset) == 'integer', 'Argument itemset must be of type integer.')

    local call = natives.invoke(0x0C392DB374655176, 'void', x, y, z, p3, itemset)
end

--- @param p0 userdata
--- @return any
natives.law_n0Xc687A23E166Dcf68 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xC687A23E166DCF68, 'any', p0)
    return call
end

--- @param multiplier number
natives.law_setDispatchMultiplierOverride = function(multiplier)
    assert(type(multiplier) == 'number', 'Argument multiplier must be of type number.')

    local call = natives.invoke(0x002BABE0B7D53136, 'void', multiplier)
end

--- @param player integer
--- @return boolean
natives.law_n0X26934083D3F2579C = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x26934083D3F2579C, 'bool', player)
    return call
end

--- @param player integer
--- @param p1 integer
--- @param crimetype integer
--- @return boolean
natives.law_getPlayerRegisteredCrime = function(player, p1, crimetype)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(crimetype) == 'integer', 'Argument crimetype must be of type integer.')

    local call = natives.invoke(0x532C5FDDB986EE5C, 'bool', player, p1, crimetype)
    return call
end

--- @param player integer
--- @param p1 integer
--- @param crimetype integer
--- @return boolean
natives.law_n0Xb527099D1E1Eed49 = function(player, p1, crimetype)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(crimetype) == 'integer', 'Argument crimetype must be of type integer.')

    local call = natives.invoke(0xB527099D1E1EED49, 'bool', player, p1, crimetype)
    return call
end

--- @param player integer
natives.law_clearPlayerPastCrimes = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xBCC6DC59E32A2BDC, 'void', player)
end

--- @param player integer
--- @param lawregionhash integer
natives.law_setPlayerArrestedInRegion = function(player, lawregionhash)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(lawregionhash) == 'integer', 'Argument lawregionhash must be of type integer.')

    local call = natives.invoke(0xE0FA74AA3CCE650B, 'void', player, lawregionhash)
end

--- @param player integer
--- @param lawregionhash integer
natives.law_setPlayerTurnedInBountyInRegion = function(player, lawregionhash)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(lawregionhash) == 'integer', 'Argument lawregionhash must be of type integer.')

    local call = natives.invoke(0x73BAD7B2F2DB50DE, 'void', player, lawregionhash)
end

--- @param player integer
--- @param p1 boolean
natives.law_n0Xd6C0A8C7C0B2F82C = function(player, p1)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xD6C0A8C7C0B2F82C, 'void', player, p1)
end

-- Default range is 1.0f
--- @param player integer
--- @param range number
natives.law_setLawSenseRangeModifier = function(player, range)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(range) == 'number', 'Argument range must be of type number.')

    local call = natives.invoke(0xFEC85339AACA2A35, 'void', player, range)
end

-- _SET_DISPATCH_*
--- @param flag integer
--- @param p1 boolean
natives.law_n0X7Ef2A2Fe38D74456 = function(flag, p1)
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x7EF2A2FE38D74456, 'void', flag, p1)
end

-- _GET_DISPATCH_*
--- @param flag integer
--- @return boolean
natives.law_n0Xc7Dc5A0A7Df608Cb = function(flag)
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')

    local call = natives.invoke(0xC7DC5A0A7DF608CB, 'bool', flag)
    return call
end

--- @param player integer
--- @param p1 boolean
natives.law_setDisableDisturbanceCrimes = function(player, p1)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xDE5FAA741A781F73, 'void', player, p1)
end

--- @param player integer
--- @param p1 boolean
natives.law_setPostponeDisturbanceCrimesDuringCombat = function(player, p1)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x362086B911657B1A, 'void', player, p1)
end

--- @param name string
natives.law_createGuardZone = function(name)
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0x8F9DE75680275C9F, 'void', name)
end

--- @param name string
natives.law_removeGuardZone = function(name)
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0x67EBDD958835956C, 'void', name)
end

-- Only used in loanshark_miner1 R* Script: name = ANNESBURG_MINES
--- @param ped integer
--- @param name string
natives.law_n0X9772395Cc73E8D1F = function(ped, name)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0x9772395CC73E8D1F, 'void', ped, name)
end

--- @param name string
natives.law_disableGuardZone = function(name)
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0x26D558692B25DD95, 'void', name)
end

-- Only used in sisikapenitentiary R* Script: name = SISIKA
-- _IS_G* or _IS_H*
--- @param name string
--- @return boolean
natives.law_n0X0Dbaca9C38C9A686 = function(name)
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0x0DBACA9C38C9A686, 'bool', name)
    return call
end

--- @param ped integer
--- @return boolean
natives.law_isGuardPedInvestigating = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xD743C4293F47AFAD, 'bool', ped)
    return call
end

-- Returns true when investigation creation was successful
--- @param guardzonename string
--- @param entity integer
--- @param x number
--- @param y number
--- @param z number
--- @return boolean
natives.law_createGuardZoneForEntity = function(guardzonename, entity, x, y, z)
    assert(type(guardzonename) == 'string', 'Argument guardzonename must be of type string.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0x0D4B77E862475ED3, 'bool', guardzonename, entity, x, y, z)
    return call
end

--- @param name string
--- @param volume integer
natives.law_setGuardZoneVolumeRegistrationStart = function(name, volume)
    assert(type(name) == 'string', 'Argument name must be of type string.')
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')

    local call = natives.invoke(0x8C598A930F471938, 'void', name, volume)
end

--- @param name string
--- @param volume integer
natives.law_setGuardZoneVolumeRestricted = function(name, volume)
    assert(type(name) == 'string', 'Argument name must be of type string.')
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')

    local call = natives.invoke(0x35815F372D43E1E5, 'void', name, volume)
end

--- @param name string
--- @param volume integer
natives.law_setGuardZoneVolumeThreat = function(name, volume)
    assert(type(name) == 'string', 'Argument name must be of type string.')
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')

    local call = natives.invoke(0xA1B0E6301E2E02A6, 'void', name, volume)
end

--- @param name string
--- @param volume integer
natives.law_setGuardZoneVolumeWarning = function(name, volume)
    assert(type(name) == 'string', 'Argument name must be of type string.')
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')

    local call = natives.invoke(0xAD3E07C37A7C1ADC, 'void', name, volume)
end

--- @param name string
--- @param volume integer
natives.law_setGuardZoneVolumeRegistrationEnd = function(name, volume)
    assert(type(name) == 'string', 'Argument name must be of type string.')
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')

    local call = natives.invoke(0xA8A74AA79FB67159, 'void', name, volume)
end

--- @param name string
--- @param x number
--- @param y number
--- @param z number
natives.law_setGuardZonePosition = function(name, x, y, z)
    assert(type(name) == 'string', 'Argument name must be of type string.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0x7E7BF59F89FC6C6D, 'void', name, x, y, z)
end

--- @param name string
--- @param x number
--- @param y number
--- @param z number
natives.law_setGuardZonePosition2 = function(name, x, y, z)
    assert(type(name) == 'string', 'Argument name must be of type string.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0x2F9005E2EA4E5EE4, 'void', name, x, y, z)
end

-- Same return values as GET_CURRENT_LANGUAGE
--- @return number
natives.localization_localizationGetSystemLanguage = function()

    local call = natives.invoke(0x3C1A05F86AE6ACB5, 'int')
    return call
end

-- 0 = american (en-US)
-- 1 = french (fr-FR)
-- 2 = german (de-DE)
-- 3 = italian (it-IT)
-- 4 = spanish (es-ES)
-- 5 = brazilian (pt-BR)
-- 6 = polish (pl-PL)
-- 7 = russian (ru-RU)
-- 8 = korean (ko-KR)
-- 9 = chinesetrad (zh-TW)
-- 10 = japanese (ja-JP)
-- 11 = mexican (es-MX)
-- 12 = chinesesimp (zh-CN)
--- @return number
natives.localization_getCurrentLanguage = function()

    local call = natives.invoke(0xDB917DA5C6835FCC, 'int')
    return call
end

-- Returns true if the current language is american, french, german, italian, spanish, brazilian or mexican.
-- _DOES_*
--- @return boolean
natives.localization_doesCurrentLanguageSupportCondensedStyle = function()

    local call = natives.invoke(0x45D50415E4D885FF, 'bool')
    return call
end

-- 0 = DATE_FORMAT_DMY
-- 1 = DATE_FORMAT_MDY
-- 2 = DATE_FORMAT_YMD
-- 
-- Old name: _LOCALIZATION_GET_SYSTEM_DATE_FORMAT
--- @return number
natives.localization_localizationGetSystemDateType = function()

    local call = natives.invoke(0x76E30B799EBEEA0F, 'int')
    return call
end

-- Returns the Blip handle of given Entity.
--- @param entity integer
--- @return number
natives.map_getBlipFromEntity = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x6D2C41A8BD6D6FD0, 'int', entity)
    return call
end

--- @return number
natives.map_getMainPlayerBlipId = function()

    local call = natives.invoke(0x5CD2889B2B381D45, 'int')
    return call
end

--- @param stylehash integer
--- @return number
natives.map_blipAddForStyle = function(stylehash)
    assert(type(stylehash) == 'integer', 'Argument stylehash must be of type integer.')

    local call = natives.invoke(0x3E593DF9C2962EC6, 'int', stylehash)
    return call
end

-- https:--github.com/femga/rdr3_discoveries/tree/master/useful_info_from_rpfs/textures/blips
-- https:--github.com/femga/rdr3_discoveries/tree/master/useful_info_from_rpfs/textures/blips_mp
--- @param bliphash integer
--- @param x number
--- @param y number
--- @param z number
--- @return number
natives.map_blipAddForCoords = function(bliphash, x, y, z)
    assert(type(bliphash) == 'integer', 'Argument bliphash must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0x554D9D53F696D002, 'int', bliphash, x, y, z)
    return call
end

--- @param bliphash integer
--- @param entity integer
--- @return number
natives.map_blipAddForEntity = function(bliphash, entity)
    assert(type(bliphash) == 'integer', 'Argument bliphash must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x23F74C2FDA6E7C61, 'int', bliphash, entity)
    return call
end

--- @param bliphash integer
--- @param pickup integer
--- @return number
natives.map_blipAddForPickupPlacement = function(bliphash, pickup)
    assert(type(bliphash) == 'integer', 'Argument bliphash must be of type integer.')
    assert(type(pickup) == 'integer', 'Argument pickup must be of type integer.')

    local call = natives.invoke(0xA486008892065FB9, 'int', bliphash, pickup)
    return call
end

--- @param bliphash integer
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @return number
natives.map_blipAddForRadius = function(bliphash, x, y, z, radius)
    assert(type(bliphash) == 'integer', 'Argument bliphash must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')

    local call = natives.invoke(0x45F13B7E0A15C880, 'int', bliphash, x, y, z, radius)
    return call
end

--- @param bliphash integer
--- @param x number
--- @param y number
--- @param z number
--- @param scalex number
--- @param scaley number
--- @param scalez number
--- @param p7 integer
--- @return number
natives.map_blipAddForArea = function(bliphash, x, y, z, scalex, scaley, scalez, p7)
    assert(type(bliphash) == 'integer', 'Argument bliphash must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(scalex) == 'number', 'Argument scalex must be of type number.')
    assert(type(scaley) == 'number', 'Argument scaley must be of type number.')
    assert(type(scalez) == 'number', 'Argument scalez must be of type number.')
    assert(type(p7) == 'integer', 'Argument p7 must be of type integer.')

    local call = natives.invoke(0xEC174ADBCB611ECC, 'int', bliphash, x, y, z, scalex, scaley, scalez, p7)
    return call
end

--- @param bliphash integer
--- @param volume integer
--- @return number
natives.map_blipAddForVolume = function(bliphash, volume)
    assert(type(bliphash) == 'integer', 'Argument bliphash must be of type integer.')
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')

    local call = natives.invoke(0xA6EF0C54A3443E70, 'int', bliphash, volume)
    return call
end

-- https:--github.com/femga/rdr3_discoveries/tree/master/useful_info_from_rpfs/blip_styles
-- Removes any existing modifiers and sets the style.
--- @param blip integer
--- @param stylehash integer
--- @return boolean
natives.map_blipSetStyle = function(blip, stylehash)
    assert(type(blip) == 'integer', 'Argument blip must be of type integer.')
    assert(type(stylehash) == 'integer', 'Argument stylehash must be of type integer.')

    local call = natives.invoke(0xEDD964B7984AC291, 'bool', blip, stylehash)
    return call
end

--- @param blip integer
--- @param stylehash integer
--- @return boolean
natives.map_blipAddStyle = function(blip, stylehash)
    assert(type(blip) == 'integer', 'Argument blip must be of type integer.')
    assert(type(stylehash) == 'integer', 'Argument stylehash must be of type integer.')

    local call = natives.invoke(0xBD62D98799A3DAF0, 'bool', blip, stylehash)
    return call
end

-- https:--alloc8or.re/rdr3/doc/enums/eBlipModifier.txt
-- https:--github.com/femga/rdr3_discoveries/tree/master/useful_info_from_rpfs/blip_modifiers
-- 
-- Old name: _BLIP_SET_MODIFIER
--- @param blip integer
--- @param modifierhash integer
--- @return boolean
natives.map_blipAddModifier = function(blip, modifierhash)
    assert(type(blip) == 'integer', 'Argument blip must be of type integer.')
    assert(type(modifierhash) == 'integer', 'Argument modifierhash must be of type integer.')

    local call = natives.invoke(0x662D364ABF16DE2F, 'bool', blip, modifierhash)
    return call
end

-- If modifierHash is 0, ALL modifiers will be removed.
--- @param blip integer
--- @param modifierhash integer
--- @return boolean
natives.map_blipRemoveModifier = function(blip, modifierhash)
    assert(type(blip) == 'integer', 'Argument blip must be of type integer.')
    assert(type(modifierhash) == 'integer', 'Argument modifierhash must be of type integer.')

    local call = natives.invoke(0xB059D7BD3D78C16F, 'bool', blip, modifierhash)
    return call
end

--- @param blip integer
natives.map_n0X250C75Eb1728Cc0D = function(blip)
    assert(type(blip) == 'integer', 'Argument blip must be of type integer.')

    local call = natives.invoke(0x250C75EB1728CC0D, 'void', blip)
end

--- @param blip integer
--- @param bliptype integer
--- @param bliphash integer
natives.map_setBlipFlashTimer = function(blip, bliptype, bliphash)
    assert(type(blip) == 'integer', 'Argument blip must be of type integer.')
    assert(type(bliptype) == 'integer', 'Argument bliptype must be of type integer.')
    assert(type(bliphash) == 'integer', 'Argument bliphash must be of type integer.')

    local call = natives.invoke(0x02FF4CF43B7209D1, 'void', blip, bliptype, bliphash)
end

--- @param blip integer
--- @param p1 integer
--- @param p2 integer
--- @return boolean
natives.map_setBlipFlashes = function(blip, p1, p2)
    assert(type(blip) == 'integer', 'Argument blip must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x0DF2B55F717DDB10, 'bool', blip, p1, p2)
    return call
end

--- @param typehash integer
--- @param x number
--- @param y number
--- @param z number
natives.map_triggerSonarBlip = function(typehash, x, y, z)
    assert(type(typehash) == 'integer', 'Argument typehash must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0x72DD432F3CDFC0EE, 'void', typehash, x, y, z)
end

--- @param typehash integer
--- @param entity integer
natives.map_triggerSonarBlipOnEntity = function(typehash, entity)
    assert(type(typehash) == 'integer', 'Argument typehash must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x0C7A2289A5C4D7C9, 'void', typehash, entity)
end

--- @param toggle boolean
natives.map_allowSonarBlips = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x6E6E64788C07D2E0, 'void', toggle)
end

--- @param blip integer
--- @param posx number
--- @param posy number
--- @param posz number
natives.map_setBlipCoords = function(blip, posx, posy, posz)
    assert(type(blip) == 'integer', 'Argument blip must be of type integer.')
    assert(type(posx) == 'number', 'Argument posx must be of type number.')
    assert(type(posy) == 'number', 'Argument posy must be of type number.')
    assert(type(posz) == 'number', 'Argument posz must be of type number.')

    local call = natives.invoke(0x4FF674F5E23D49CE, 'void', blip, posx, posy, posz)
end

--- @param blip integer
--- @return number, number, number
natives.map_getBlipCoords = function(blip)
    assert(type(blip) == 'integer', 'Argument blip must be of type integer.')

    local call = natives.invoke(0x201C319797BDA603, 'vector3', blip)
    return call.x, call.y, call.z
end

--- @param blip integer
--- @param hash integer
--- @param p2 boolean
natives.map_setBlipSprite = function(blip, hash, p2)
    assert(type(blip) == 'integer', 'Argument blip must be of type integer.')
    assert(type(hash) == 'integer', 'Argument hash must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x74F74D3207ED525C, 'void', blip, hash, p2)
end

-- _CLEAR*
--- @param p0 userdata
--- @return any
natives.map_n0X01B928Ca2E198B01 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x01B928CA2E198B01, 'any', p0)
    return call
end

--- @param blip integer
--- @param textlabel string
natives.map_setBlipNameFromTextFile = function(blip, textlabel)
    assert(type(blip) == 'integer', 'Argument blip must be of type integer.')
    assert(type(textlabel) == 'string', 'Argument textlabel must be of type string.')

    local call = natives.invoke(0x0A062D6D7C0B2C2C, 'void', blip, textlabel)
end

--- @param blip integer
--- @param name string
natives.map_setBlipName = function(blip, name)
    assert(type(blip) == 'integer', 'Argument blip must be of type integer.')
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0x9CB1A1623062F402, 'void', blip, name)
end

--- @param blip integer
--- @param player integer
natives.map_setBlipNameToPlayerName = function(blip, player)
    assert(type(blip) == 'integer', 'Argument blip must be of type integer.')
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x093DD5A31BC2B459, 'void', blip, player)
end

--- @param blip integer
--- @param rotation integer
natives.map_setBlipRotation = function(blip, rotation)
    assert(type(blip) == 'integer', 'Argument blip must be of type integer.')
    assert(type(rotation) == 'integer', 'Argument rotation must be of type integer.')

    local call = natives.invoke(0x6049966A94FBE706, 'void', blip, rotation)
end

--- @param blip integer
--- @param scale number
natives.map_setBlipScale = function(blip, scale)
    assert(type(blip) == 'integer', 'Argument blip must be of type integer.')
    assert(type(scale) == 'number', 'Argument scale must be of type number.')

    local call = natives.invoke(0xD38744167B2FA257, 'void', blip, scale)
end

--- @param blip integer
natives.map_removeBlip = function(blip)
    assert(type(blip) == 'integer', 'Argument blip must be of type integer.')

    local call = natives.invoke(0xF2C3C9DA47AAA54A, 'void', blip)
end

--- @param blip integer
--- @return boolean
natives.map_doesBlipExist = function(blip)
    assert(type(blip) == 'integer', 'Argument blip must be of type integer.')

    local call = natives.invoke(0xCD82FA174080B3B1, 'bool', blip)
    return call
end

--- @param entity integer
--- @return boolean
natives.map_doesEntityHaveBlip = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x9FA00E2FC134A9D0, 'bool', entity)
    return call
end

--- @param zoomlevel integer
natives.map_setRadarZoom = function(zoomlevel)
    assert(type(zoomlevel) == 'integer', 'Argument zoomlevel must be of type integer.')

    local call = natives.invoke(0xCAF6489DA2C8DD9E, 'void', zoomlevel)
end

-- It's unclear what exactly this does, but I assume it marks the blip as "no longer needed"
--- @param blip integer
natives.map_abandonBlip = function(blip)
    assert(type(blip) == 'integer', 'Argument blip must be of type integer.')

    local call = natives.invoke(0xDEEDE7C41742E011, 'void', blip)
end

--- @param blip integer
--- @return boolean
natives.map_isBlipAttachedToAnyEntity = function(blip)
    assert(type(blip) == 'integer', 'Argument blip must be of type integer.')

    local call = natives.invoke(0xE9F676788F8D5E1E, 'bool', blip)
    return call
end

--- @param blip integer
--- @return boolean
natives.map_isBlipOnMinimap = function(blip)
    assert(type(blip) == 'integer', 'Argument blip must be of type integer.')

    local call = natives.invoke(0x46534526B9CD2D17, 'bool', blip)
    return call
end

-- Doesn't actually return anything.
--- @return any
natives.map_forceSonarBlipsThisFrame = function()

    local call = natives.invoke(0xEE1C7BA69BB74B08, 'any')
    return call
end

-- https:--alloc8or.re/rdr3/doc/enums/rage__eGpsFlags.txt
--- @param p0 integer
--- @param p1 number
natives.map_setGpsFlags = function(p0, p1)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x5DE61C90DDECFA2D, 'void', p0, p1)
end

-- Clears the GPS flags.
natives.map_clearGpsFlags = function()

    local call = natives.invoke(0x4D3771237C79FF41, 'void')
end

--- @param p0 boolean
--- @param p1 integer
--- @param p2 integer
natives.map_setGpsCustomRouteRender = function(p0, p1, p2)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0xF6CEF599FC470B33, 'void', p0, p1, p2)
end

natives.map_clearGpsCustomRoute = function()

    local call = natives.invoke(0x1EAA5674B4D181C5, 'void')
end

--- @param colornamehash integer
--- @param onfoot boolean
--- @param invehicle boolean
natives.map_startGpsMultiRoute = function(colornamehash, onfoot, invehicle)
    assert(type(colornamehash) == 'integer', 'Argument colornamehash must be of type integer.')
    assert(type(onfoot) == 'boolean', 'Argument onfoot must be of type boolean.')
    assert(type(invehicle) == 'boolean', 'Argument invehicle must be of type boolean.')

    local call = natives.invoke(0x3D3D15AF7BCAAF83, 'void', colornamehash, onfoot, invehicle)
end

--- @param x number
--- @param y number
--- @param z number
--- @param p3 boolean
natives.map_addPointToGpsMultiRoute = function(x, y, z, p3)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0x64C59DD6834FA942, 'void', x, y, z, p3)
end

--- @param toggle boolean
natives.map_setGpsMultiRouteRender = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x4426D65E029A4DC0, 'void', toggle)
end

-- Does the same as SET_GPS_MULTI_ROUTE_RENDER(false);
natives.map_clearGpsMultiRoute = function()

    local call = natives.invoke(0x9E0AB9AAEE87CE28, 'void')
end

--- @param waypointrecording string
--- @param point integer
--- @param numpoints integer
--- @param colornamehash integer
--- @param p4 boolean
--- @param p5 boolean
natives.map_startGpsCustomRouteFromWaypointRecordingRoute = function(waypointrecording, point, numpoints, colornamehash, p4, p5)
    assert(type(waypointrecording) == 'string', 'Argument waypointrecording must be of type string.')
    assert(type(point) == 'integer', 'Argument point must be of type integer.')
    assert(type(numpoints) == 'integer', 'Argument numpoints must be of type integer.')
    assert(type(colornamehash) == 'integer', 'Argument colornamehash must be of type integer.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')

    local call = natives.invoke(0x6B44F13D888F770D, 'void', waypointrecording, point, numpoints, colornamehash, p4, p5)
end

natives.map_clearGpsPlayerWaypoint = function()

    local call = natives.invoke(0x08FDC6F796E350D1, 'void')
end

--- @param p0 userdata
natives.map_n0Xd3F58E9316B7Fc2A = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xD3F58E9316B7FC2A, 'void', p0)
end

natives.map_setWaypointOff = function()

    local call = natives.invoke(0xFA8C41E8020D3439, 'void')
end

--- @return boolean
natives.map_isWaypointActive = function()

    local call = natives.invoke(0x202B1BBFC6AB5EE4, 'bool')
    return call
end

--- @return number, number, number
natives.map_getWaypointCoords = function()

    local call = natives.invoke(0x29B30D07C3F7873B, 'vector3')
    return call.x, call.y, call.z
end

--- @param p0 userdata
--- @param p1 userdata
--- @return boolean
natives.map_n0Xf08E42Bfa46Bdff8 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xF08E42BFA46BDFF8, 'bool', p0, p1)
    return call
end

natives.map_hideActivePointsOfInterest = function()

    local call = natives.invoke(0xA1B4052C2A3DCC1E, 'void')
end

natives.map_showActivePointsOfInterest = function()

    local call = natives.invoke(0x3FBB838AEA30C1D8, 'void')
end

--- @return any
natives.map_n0Xf47A1Eb2A538A3A3 = function()

    local call = natives.invoke(0xF47A1EB2A538A3A3, 'any')
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @param outposition integer
--- @return boolean
natives.map_findClosestGpsPosition = function(x, y, z, outposition)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(outposition) == 'integer', 'Argument outposition must be of type integer.')

    local call = natives.invoke(0x3FDA2B79AEEE351C, 'bool', x, y, z, outposition)
    return call
end

-- If Minimap / Radar should be displayed.
--- @param toggle boolean
natives.map_displayRadar = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x1B3DA717B9AFF828, 'void', toggle)
end

-- https:--github.com/femga/rdr3_discoveries/blob/master/graphics/minimap/radar/radar_configs.lua
-- configHash: -1943724816, 347777538, -117986897, -789269373, -547506804, -1986542417, 2080113112
-- p1: usually 898171178 or 0 in R* scripts (doesn't seems to have any effect)
--- @param confighash integer
--- @param p1 integer
natives.map_setRadarConfigType = function(confighash, p1)
    assert(type(confighash) == 'integer', 'Argument confighash must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x9C113883487FD53C, 'void', confighash, p1)
end

-- list of minimap props: https:--github.com/femga/rdr3_discoveries/tree/master/graphics/minimap/minimapObjects
--- @param minimapprop integer
--- @param x number
--- @param y number
--- @param rotation number
--- @param p4 integer
natives.map_addPropToMinimap = function(minimapprop, x, y, rotation, p4)
    assert(type(minimapprop) == 'integer', 'Argument minimapprop must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(rotation) == 'number', 'Argument rotation must be of type number.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')

    local call = natives.invoke(0x1392105DA88BBFFB, 'void', minimapprop, x, y, rotation, p4)
end

--- @param minimapprop integer
natives.map_removePropFromMinimap = function(minimapprop)
    assert(type(minimapprop) == 'integer', 'Argument minimapprop must be of type integer.')

    local call = natives.invoke(0xE057FEA9A22EB3EE, 'void', minimapprop)
end

natives.map_setRadarAsExteriorThisFrame = function()

    local call = natives.invoke(0xA8EBBAE986FB5457, 'void')
end

-- Reveals the entire minimap (FOW = Fog of War)
--- @param toggle boolean
natives.map_setMinimapHideFow = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x4B8F743A4A6D2FF8, 'void', toggle)
end

-- Used for GUARMA MODE; Enabled: toggle = false, 0; Disabled: toggle = true, 0
-- Hash p1 seems to be unused, always 0
--- @param toggle boolean
--- @param p1 integer
natives.map_setFowUpdatePlayerOverride = function(toggle, p1)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x63E7279D04160477, 'void', toggle, p1)
end

--- @param scale number
--- @param p1 integer
natives.map_setMinimapFowOverrideRevealScale = function(scale, p1)
    assert(type(scale) == 'number', 'Argument scale must be of type number.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xE5A7F70B7C0F3271, 'void', scale, p1)
end

--- @param toggle boolean
--- @param p1 integer
natives.map_setMinimapFowShouldUpdate = function(toggle, p1)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x632AA10BF7EA53D3, 'void', toggle, p1)
end

-- Up to eight coordinates may be revealed per frame
--- @param x number
--- @param y number
--- @param z number
--- @param p3 integer
natives.map_setMinimapFowRevealCoordinate = function(x, y, z, p3)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')

    local call = natives.invoke(0x73348402566ECB6E, 'void', x, y, z, p3)
end

--- @param volume integer
--- @param p1 integer
natives.map_setMinimapFowRevealVolume = function(volume, p1)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x63CBBD6CA6F321F9, 'void', volume, p1)
end

--- @param hash integer
natives.map_resetMinimapFow = function(hash)
    assert(type(hash) == 'integer', 'Argument hash must be of type integer.')

    local call = natives.invoke(0xEB3CB3386C775D72, 'void', hash)
end

--- @param hash integer
natives.map_revealMinimapFow = function(hash)
    assert(type(hash) == 'integer', 'Argument hash must be of type integer.')

    local call = natives.invoke(0xF8096DF9B87246E3, 'void', hash)
end

-- hash can be the hash of "guarma" or "world".
--- @param zone integer
natives.map_setMinimapZone = function(zone)
    assert(type(zone) == 'integer', 'Argument zone must be of type integer.')

    local call = natives.invoke(0xA657EC9DBC6CC900, 'void', zone)
end

-- Locks the minimap to the specified angle in integer degrees.
-- 
-- angle: The angle in whole degrees. If less than 0 or greater than 360, unlocks the angle.
--- @param angle integer
natives.map_lockMinimapAngle = function(angle)
    assert(type(angle) == 'integer', 'Argument angle must be of type integer.')

    local call = natives.invoke(0x0BFD145EF819FB3A, 'void', angle)
end

natives.map_unlockMinimapAngle = function()

    local call = natives.invoke(0x5373DE8E179BC2A0, 'void')
end

-- regionHash: https:--github.com/femga/rdr3_discoveries/tree/master/graphics/minimap/wanted_regions
--- @param regionhash integer
--- @param stylehash integer
natives.map_mapEnableRegionBlip = function(regionhash, stylehash)
    assert(type(regionhash) == 'integer', 'Argument regionhash must be of type integer.')
    assert(type(stylehash) == 'integer', 'Argument stylehash must be of type integer.')

    local call = natives.invoke(0x563FCB6620523917, 'void', regionhash, stylehash)
end

--- @param regionhash integer
natives.map_mapDisableRegionBlip = function(regionhash)
    assert(type(regionhash) == 'integer', 'Argument regionhash must be of type integer.')

    local call = natives.invoke(0x6786D7AFAC3162B3, 'void', regionhash)
end

--- @param regionhash integer
--- @param stylehash integer
--- @return boolean
natives.map_mapIsRegionHighlightedWithStyle = function(regionhash, stylehash)
    assert(type(regionhash) == 'integer', 'Argument regionhash must be of type integer.')
    assert(type(stylehash) == 'integer', 'Argument stylehash must be of type integer.')

    local call = natives.invoke(0xE38450DBCBC70E3D, 'bool', regionhash, stylehash)
    return call
end

--- @param discoveryhash integer
natives.map_mapDiscoverRegion = function(discoveryhash)
    assert(type(discoveryhash) == 'integer', 'Argument discoveryhash must be of type integer.')

    local call = natives.invoke(0xD8C7162AB2E2AF45, 'void', discoveryhash)
end

--- @param discoveryhash integer
natives.map_mapDiscoverySetEnabled = function(discoveryhash)
    assert(type(discoveryhash) == 'integer', 'Argument discoveryhash must be of type integer.')

    local call = natives.invoke(0xDA98246C7A3C2189, 'void', discoveryhash)
end

--- @param discoveryhash integer
--- @return boolean
natives.map_mapIsDiscoveryActive = function(discoveryhash)
    assert(type(discoveryhash) == 'integer', 'Argument discoveryhash must be of type integer.')

    local call = natives.invoke(0x3F81EA4275D39D6F, 'bool', discoveryhash)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
natives.map_setPausemapCoordsWithRadius = function(x, y, z, radius)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')

    local call = natives.invoke(0xE0884C184728C75B, 'void', x, y, z, radius)
end

natives.map_n0X7C9F4Cdf402Ca82A = function()

    local call = natives.invoke(0x7C9F4CDF402CA82A, 'void')
end

-- _CLEAR*
--- @param entity integer
--- @param p1 userdata
natives.map_n0X44813684F72B563C = function(entity, p1)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x44813684F72B563C, 'void', entity, p1)
end

--- @param entity integer
--- @param p1 userdata
natives.map_n0X97F6F158Cc5B5Ca2 = function(entity, p1)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x97F6F158CC5B5CA2, 'void', entity, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.map_n0Xbb68D4D3Ca3De402 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xBB68D4D3CA3DE402, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.map_n0X3Cb8859F04763C78 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x3CB8859F04763C78, 'any', p0, p1)
    return call
end

-- FM_CLIENT_SETUP_EAGLE_EYE - setting up eagle eye for entity
--- @param entity integer
--- @param blip integer
natives.map_n0X7563Cbca99253D1A = function(entity, blip)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(blip) == 'integer', 'Argument blip must be of type integer.')

    local call = natives.invoke(0x7563CBCA99253D1A, 'void', entity, blip)
end

--- @param p0 userdata
natives.map_n0X1726963E6049Db53 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x1726963E6049DB53, 'void', p0)
end

--- @param p0 userdata
natives.minigame_n0X6480723D3Be535B6 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x6480723D3BE535B6, 'void', p0)
end

natives.minigame_n0X3Df7Ee3A76185108 = function()

    local call = natives.invoke(0x3DF7EE3A76185108, 'void')
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.minigame_n0Xe1F365C4C8F259D8 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xE1F365C4C8F259D8, 'any', p0, p1, p2)
    return call
end

--- @return any
natives.minigame_n0Xe53A308Ac35877A8 = function()

    local call = natives.invoke(0xE53A308AC35877A8, 'any')
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.minigame_n0X580F34C726387226 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x580F34C726387226, 'any', p0, p1)
    return call
end

natives.minigame_n0X0876326238914A3F = function()

    local call = natives.invoke(0x0876326238914A3F, 'void')
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.minigame_n0X3Ffe60Dd8A936551 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x3FFE60DD8A936551, 'any', p0, p1)
    return call
end

natives.minigame_n0X18A0D48Df9211C07 = function()

    local call = natives.invoke(0x18A0D48DF9211C07, 'void')
end

--- @param p0 userdata
--- @return any
natives.minigame_minigameIsConnectedToServer = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x2A0C4736AC5AF0CE, 'any', p0)
    return call
end

--- @return any
natives.minigame_n0X39654E1F68B78287 = function()

    local call = natives.invoke(0x39654E1F68B78287, 'any')
    return call
end

--- @return any
natives.minigame_n0X3Eecaadab0D9Fe29 = function()

    local call = natives.invoke(0x3EECAADAB0D9FE29, 'any')
    return call
end

--- @param p0 userdata
--- @return any
natives.minigame_n0Xd39D32Eb3B52Dd83 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xD39D32EB3B52DD83, 'any', p0)
    return call
end

--- @param p0 userdata
--- @return boolean
natives.minigame_minigameIsSeatOccupied = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x8593A8CB0ED2C3B4, 'bool', p0)
    return call
end

--- @param data userdata
--- @return boolean
natives.minigame_minigameRequestSeatAtTable = function(data)
    assert(type(data) == 'userdata', 'Argument data must be of type userdata.')

    local call = natives.invoke(0xF6AC6085D8D6C004, 'bool', data)
    return call
end

--- @param p0 userdata
--- @return any
natives.minigame_minigameLeaveTable = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xF5446E47941E654C, 'any', p0)
    return call
end

--- @return any
natives.minigame_minigameGetNextEventType = function()

    local call = natives.invoke(0x578907F59BA01B6C, 'any')
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.minigame_minigameGetNextEvent = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xDF728C5AE137FC13, 'any', p0, p1)
    return call
end

natives.minigame_minigamePopNextEvent = function()

    local call = natives.invoke(0x833E03BAEBADC4B0, 'void')
end

--- @return any
natives.minigame_n0X3B31732Fade5Baf3 = function()

    local call = natives.invoke(0x3B31732FADE5BAF3, 'any')
    return call
end

--- @param p0 userdata
--- @return any
natives.minigame_n0X578907F59Ba01B6D = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x578907F59BA01B6D, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.minigame_n0Xdf728C5Ae137Fc14 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xDF728C5AE137FC14, 'any', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @return any
natives.minigame_minigameIsRequestPending = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x9105A4A2556FA937, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.minigame_n0X644439B5387Ee57E = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x644439B5387EE57E, 'any', p0, p1)
    return call
end

--- @return any
natives.minigame_n0X15E90B6A993017Aa = function()

    local call = natives.invoke(0x15E90B6A993017AA, 'any')
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.minigame_n0X10342Cc82E8356E9 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x10342CC82E8356E9, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.minigame_n0X32A7C216344D623B = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x32A7C216344D623B, 'any', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @return any
natives.minigame_n0Xec819D612038Ef4B = function(p0, p1, p2, p3, p4, p5, p6, p7)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')

    local call = natives.invoke(0xEC819D612038EF4B, 'any', p0, p1, p2, p3, p4, p5, p6, p7)
    return call
end

--- @param p0 userdata
--- @return any
natives.minigame_pokerGetGameSettingsForId = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x2D20E12E1990D584, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.minigame_pokerBuyIn = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xB4D610EA5A1FDE74, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.minigame_pokerCall = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x8DED681B161EBD78, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.minigame_pokerCheck = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x49A045628D9B1B86, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @return any
natives.minigame_pokerFold = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x3DFAB7D9BB45B5BE, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.minigame_pokerRaise = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xECCF45A79A17BB96, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @return any
natives.minigame_pokerReveal = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x2F2131DB0A8B02DC, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.minigame_n0X58521E6Dcde97D74 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x58521E6DCDE97D74, 'void', p0, p1, p2)
end

natives.minigame_n0Xf6De98516Fd3Ac9B = function()

    local call = natives.invoke(0xF6DE98516FD3AC9B, 'void')
end

--- @param p0 userdata
--- @return any
natives.minigame_n0X3F4Fd4Bed07Ab8C4 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x3F4FD4BED07AB8C4, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.minigame_n0X3Ae451860F03Ca8A = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x3AE451860F03CA8A, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.minigame_n0X012027C28F421F46 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x012027C28F421F46, 'any', p0, p1)
    return call
end

natives.minigame_n0X455Ecca0715C507F = function()

    local call = natives.invoke(0x455ECCA0715C507F, 'void')
end

-- Hardcoded to return zero/false.
--- @param p0 userdata
--- @return any
natives.minigame_dominoesBuyIn = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x399E6CD12FC8CA89, 'any', p0)
    return call
end

-- Hardcoded to return zero/false.
--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.minigame_dominoesPlaceDomino = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xB79A29B33BF29BA5, 'any', p0, p1)
    return call
end

-- Hardcoded to return zero/false.
--- @param p0 userdata
--- @return any
natives.minigame_dominoesRequestValidPlacements = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xE26AEE7E67D9E21D, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.minigame_n0Xa2Db3C6270C122E3 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xA2DB3C6270C122E3, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.minigame_n0X398066F893149856 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x398066F893149856, 'any', p0, p1, p2)
    return call
end

--- @return any
natives.minigame_n0Xbea7D3Cb47E1479C = function()

    local call = natives.invoke(0xBEA7D3CB47E1479C, 'any')
    return call
end

--- @return any
natives.minigame_n0X910B088E51A511Ac = function()

    local call = natives.invoke(0x910B088E51A511AC, 'any')
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.minigame_n0X9Dd95B405Ab4983E = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x9DD95B405AB4983E, 'any', p0, p1)
    return call
end

--- @param stacksize integer
--- @return number
natives.misc_getNumberOfFreeStacksOfThisSize = function(stacksize)
    assert(type(stacksize) == 'integer', 'Argument stacksize must be of type integer.')

    local call = natives.invoke(0x40DC2907A9697EF7, 'int', stacksize)
    return call
end

--- @return number
natives.misc_getNumberOfInstructions = function()

    local call = natives.invoke(0x72904D3D62AF5839, 'int')
    return call
end

--- @return number
natives.misc_getMaxNumInstructions = function()

    local call = natives.invoke(0xC43CD2668B204419, 'int')
    return call
end

-- magdemo = magazine demo, i. e. for magazines such as IGN, pre play phases to prepare articles etc. - example 2012 builds for V
-- Hardcoded to return false.
--- @return boolean
natives.misc_isMagDemo1Active = function()

    local call = natives.invoke(0x5FC9357C26DAEFCE, 'bool')
    return call
end

--- @param seed integer
natives.misc_setRandomSeed = function(seed)
    assert(type(seed) == 'integer', 'Argument seed must be of type integer.')

    local call = natives.invoke(0x5CD7A49104AFCB6B, 'void', seed)
end

-- Maximum value is 1.0f
-- At a value of 0.0f the game will still run at a minimum time scale.
--- @param timescale number
natives.misc_setTimeScale = function(timescale)
    assert(type(timescale) == 'number', 'Argument timescale must be of type number.')

    local call = natives.invoke(0x9682AF6050854856, 'void', timescale)
end

-- If true, the player can't save the game.
--- @param toggle boolean
natives.misc_setMissionFlag = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x36694B456BE80D0A, 'void', toggle)
end

--- @return boolean
natives.misc_getMissionFlag = function()

    local call = natives.invoke(0xB15CD1CF58771DE1, 'bool')
    return call
end

--- @param p0 userdata
natives.misc_n0X5801Be2Df2Af07Ec = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x5801BE2DF2AF07EC, 'void', p0)
end

-- If the parameter is true, sets the random event flag to true, if the parameter is false, the function does nothing at all.
-- Does nothing if the mission flag is set.
--- @param toggle boolean
natives.misc_setRandomEventFlag = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xB1ADCCC4150C6473, 'void', toggle)
end

--- @return boolean
natives.misc_getRandomEventFlag = function()

    local call = natives.invoke(0x924D54E5698AE3E0, 'bool')
    return call
end

--- @param p0 userdata
natives.misc_n0X9Bf2C0C568C61641 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x9BF2C0C568C61641, 'void', p0)
end

-- nullsub, doesn't do anything
--- @param p0 string
--- @param p1 string
natives.misc_activityFeedCreate = function(p0, p1)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')

    local call = natives.invoke(0xCC7FC854B956A128, 'void', p0, p1)
end

-- nullsub, doesn't do anything
--- @param p0 string
natives.misc_activityFeedAddSubstringToCaption = function(p0)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')

    local call = natives.invoke(0x9935F76407C32539, 'void', p0)
end

-- nullsub, doesn't do anything
--- @param p0 userdata
natives.misc_n0Xff252E2Bafb7330F = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xFF252E2BAFB7330F, 'void', p0)
end

-- nullsub, doesn't do anything
--- @param p0 string
--- @param p1 string
natives.misc_activityFeedActionStartWithCommandLine = function(p0, p1)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')

    local call = natives.invoke(0x91D657230BC208D2, 'void', p0, p1)
end

-- nullsub, doesn't do anything
--- @param p0 string
natives.misc_activityFeedActionStartWithCommandLineAdd = function(p0)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')

    local call = natives.invoke(0x1694A053DFB61A34, 'void', p0)
end

-- Hardcoded to return one/true.
--- @param p0 userdata
--- @return any
natives.misc_n0Xaf530E56505D1Bd6 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xAF530E56505D1BD6, 'any', p0)
    return call
end

-- nullsub, doesn't do anything
natives.misc_activityFeedPost = function()

    local call = natives.invoke(0xB16FC7B364D86585, 'void')
end

--- @return string
natives.misc_n0Xf81C53561D15F330 = function()

    local call = natives.invoke(0xF81C53561D15F330, 'string')
    return call
end

-- _SET_MISSION_NAME_*(FOR_ACTIVITY?/MINIGAME?)
--- @param name string
natives.misc_n0X1096603B519C905F = function(name)
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0x1096603B519C905F, 'void', name)
end

--- @param p0 integer
natives.misc_n0Xcc3Edc5614B03F61 = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0xCC3EDC5614B03F61, 'void', p0)
end

--- @param p0 string
natives.misc_informCodeOfContentIdOfCurrentUgcMission = function(p0)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')

    local call = natives.invoke(0x708DF841B8F27AA2, 'void', p0)
end

--- @param p0 userdata
natives.misc_n0Xda4D8Eb04E8E2928 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xDA4D8EB04E8E2928, 'void', p0)
end

--- @param p0 userdata
natives.misc_n0Xb08C4Fa25Bc29Db9 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xB08C4FA25BC29DB9, 'void', p0)
end

--- @return number
natives.misc_getPrevWeatherTypeHashName = function()

    local call = natives.invoke(0x4BEB42AEBCA732E9, 'integer')
    return call
end

--- @return number
natives.misc_getNextWeatherTypeHashName = function()

    local call = natives.invoke(0x51021D36F62AAA83, 'integer')
    return call
end

--- @param p0 userdata
natives.misc_n0X0730E518486Deec3 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x0730E518486DEEC3, 'void', p0)
end

-- https:--github.com/femga/rdr3_discoveries/blob/master/weather/weather_types.lua
--- @param weathertype integer
--- @param p1 boolean
--- @param p2 boolean
--- @param transition boolean
--- @param transitiontime number
--- @param p5 boolean
natives.misc_setWeatherType = function(weathertype, p1, p2, transition, transitiontime, p5)
    assert(type(weathertype) == 'integer', 'Argument weathertype must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(transition) == 'boolean', 'Argument transition must be of type boolean.')
    assert(type(transitiontime) == 'number', 'Argument transitiontime must be of type number.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')

    local call = natives.invoke(0x59174F1AFE095B5A, 'void', weathertype, p1, p2, transition, transitiontime, p5)
end

--- @param weathertype integer
--- @param p1 integer
--- @param p2 integer
--- @param p3 integer
--- @param p4 boolean
natives.misc_setWeatherType2 = function(weathertype, p1, p2, p3, p4)
    assert(type(weathertype) == 'integer', 'Argument weathertype must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')

    local call = natives.invoke(0x2C6A07AF9AEDABD8, 'void', weathertype, p1, p2, p3, p4)
end

--- @return number
natives.misc_getRandomWeatherTypeIndex = function()

    local call = natives.invoke(0x7F4CE164D9A11DFE, 'int')
    return call
end

--- @return number
natives.misc_getRandomWeatherType = function()

    local call = natives.invoke(0x1359C181BC625503, 'integer')
    return call
end

--- @param p0 boolean
--- @param p1 boolean
natives.misc_setRandomWeatherType = function(p0, p1)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x6E5A7FBEECAB3C72, 'void', p0, p1)
end

natives.misc_clearWeatherTypePersist = function()

    local call = natives.invoke(0xD85DFE5C131E4AE9, 'void')
end

--- @param milliseconds integer
natives.misc_clearWeatherTypePersistOvertime = function(milliseconds)
    assert(type(milliseconds) == 'integer', 'Argument milliseconds must be of type integer.')

    local call = natives.invoke(0xCE7690C0A0D1C36D, 'void', milliseconds)
end

-- Params: percentWeather2: 0f - 0.75f in R* Scripts
-- 
-- Old name: _GET_WEATHER_TYPE_TRANSITION
--- @param weathertype1 integer
--- @param weathertype2 integer
--- @param percentweather2 integer
natives.misc_getCurrWeatherState = function(weathertype1, weathertype2, percentweather2)
    assert(type(weathertype1) == 'integer', 'Argument weathertype1 must be of type integer.')
    assert(type(weathertype2) == 'integer', 'Argument weathertype2 must be of type integer.')
    assert(type(percentweather2) == 'integer', 'Argument percentweather2 must be of type integer.')

    local call = natives.invoke(0x0AC679B2342F14F2, 'void', weathertype1, weathertype2, percentweather2)
end

-- Params: BOOL p3 is always true
-- 
-- Old name: _SET_WEATHER_TYPE_TRANSITION
--- @param weathertype1 integer
--- @param weathertype2 integer
--- @param percentweather2 number
--- @param enabled boolean
natives.misc_setCurrWeatherState = function(weathertype1, weathertype2, percentweather2, enabled)
    assert(type(weathertype1) == 'integer', 'Argument weathertype1 must be of type integer.')
    assert(type(weathertype2) == 'integer', 'Argument weathertype2 must be of type integer.')
    assert(type(percentweather2) == 'number', 'Argument percentweather2 must be of type number.')
    assert(type(enabled) == 'boolean', 'Argument enabled must be of type boolean.')

    local call = natives.invoke(0xFA3E3CA8A1DE6D5D, 'void', weathertype1, weathertype2, percentweather2, enabled)
end

--- @param toggle boolean
natives.misc_setWeatherTypeFrozen = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xD74ACDF7DB8114AF, 'void', toggle)
end

-- Returns the weather type that has been set by a script
--- @param weather integer
--- @param p1 integer
natives.misc_getForcedWeather = function(weather, p1)
    assert(type(weather) == 'integer', 'Argument weather must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xDD560ABEF5D3784C, 'void', weather, p1)
end

--- @param weathertype integer
natives.misc_n0X2916B30Dc6C41179 = function(weathertype)
    assert(type(weathertype) == 'integer', 'Argument weathertype must be of type integer.')

    local call = natives.invoke(0x2916B30DC6C41179, 'void', weathertype)
end

--- @param weathertype integer
natives.misc_n0Xd3F943B88F55376A = function(weathertype)
    assert(type(weathertype) == 'integer', 'Argument weathertype must be of type integer.')

    local call = natives.invoke(0xD3F943B88F55376A, 'void', weathertype)
end

natives.misc_n0X243Cede8F916B994 = function()

    local call = natives.invoke(0x243CEDE8F916B994, 'void')
end

--- @param weathertype integer
natives.misc_setOverrideWeather = function(weathertype)
    assert(type(weathertype) == 'integer', 'Argument weathertype must be of type integer.')

    local call = natives.invoke(0xBE83CAE8ED77A94F, 'void', weathertype)
end

natives.misc_clearOverrideWeather = function()

    local call = natives.invoke(0x80A398F16FFE3CC3, 'void')
end

-- https:--github.com/femga/rdr3_discoveries/blob/master/weather/weather_variations.lua
--- @param weathertype string
--- @param variation string
natives.misc_setWeatherVariation = function(weathertype, variation)
    assert(type(weathertype) == 'string', 'Argument weathertype must be of type string.')
    assert(type(variation) == 'string', 'Argument variation must be of type string.')

    local call = natives.invoke(0x3373779BAF7CAF48, 'void', weathertype, variation)
end

--- @param weathertype string
--- @param p1 boolean
natives.misc_clearWeatherVariation = function(weathertype, p1)
    assert(type(weathertype) == 'string', 'Argument weathertype must be of type string.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x0E71C80FA4EC8147, 'void', weathertype, p1)
end

-- Only used in smuggler2 script
--- @param amplitude number
natives.misc_waterOverrideSetShorewaveamplitude = function(amplitude)
    assert(type(amplitude) == 'number', 'Argument amplitude must be of type number.')

    local call = natives.invoke(0x55123D5A7D9D3C42, 'void', amplitude)
end

-- Only used in smuggler2 script
--- @param maxamplitude number
natives.misc_waterOverrideSetOceanwavemaxamplitude = function(maxamplitude)
    assert(type(maxamplitude) == 'number', 'Argument maxamplitude must be of type number.')

    local call = natives.invoke(0xF06C5B66DE20B2B8, 'void', maxamplitude)
end

--- @param x number
--- @param y number
--- @param z number
--- @return number
natives.misc_getTemperatureAtCoords = function(x, y, z)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0xB98B78C3768AF6E0, 'float', x, y, z)
    return call
end

--- @param speed number
natives.misc_setWindSpeed = function(speed)
    assert(type(speed) == 'number', 'Argument speed must be of type number.')

    local call = natives.invoke(0xD00C2D82DC04A99F, 'void', speed)
end

--- @return number
natives.misc_getWindSpeed = function()

    local call = natives.invoke(0xFFB7E74E041150A4, 'float')
    return call
end

--- @param direction number
natives.misc_setWindDirection = function(direction)
    assert(type(direction) == 'number', 'Argument direction must be of type number.')

    local call = natives.invoke(0xB56C4F5F57A45600, 'void', direction)
end

--- @return number, number, number
natives.misc_getWindDirection = function()

    local call = natives.invoke(0xF703E82F3FE14A5F, 'vector3')
    return call.x, call.y, call.z
end

-- Old name: _SET_RAIN_LEVEL
--- @param intensity number
natives.misc_setRain = function(intensity)
    assert(type(intensity) == 'number', 'Argument intensity must be of type number.')

    local call = natives.invoke(0x193DFC0526830FD6, 'void', intensity)
end

--- @return number
natives.misc_getRainLevel = function()

    local call = natives.invoke(0x931B5F4CC130224B, 'float')
    return call
end

--- @param p0 number
natives.misc_n0X745808Bb01Cec6B9 = function(p0)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')

    local call = natives.invoke(0x745808BB01CEC6B9, 'void', p0)
end

--- @param level number
natives.misc_setSnowLevel = function(level)
    assert(type(level) == 'number', 'Argument level must be of type number.')

    local call = natives.invoke(0xF6BEE7E80EC5CA40, 'void', level)
end

--- @return number
natives.misc_getSnowLevel = function()

    local call = natives.invoke(0x1E5D727041BE1709, 'float')
    return call
end

-- creates single lightning+thunder at random position
natives.misc_forceLightningFlash = function()

    local call = natives.invoke(0x369DB5B2510FA080, 'void')
end

-- p3 is always -1.0f in the scripts
--- @param x number
--- @param y number
--- @param z number
--- @param p3 number
natives.misc_forceLightningFlashAtCoords = function(x, y, z, p3)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')

    local call = natives.invoke(0x67943537D179597C, 'void', x, y, z, p3)
end

-- nullsub, doesn't do anything
--- @param p0 userdata
natives.misc_n0Xa9342743B634A462 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xA9342743B634A462, 'void', p0)
end

--- @return number
natives.misc_getGameTimer = function()

    local call = natives.invoke(0x4F67E8ECA7D3F667, 'int')
    return call
end

-- Returns rage::fwTimer::sm_nonScaledClippedTime
--- @return number
natives.misc_getGameTimerNonScaledClipped = function()

    local call = natives.invoke(0x483B8C542103AD72, 'int')
    return call
end

--- @return number
natives.misc_getSystemTime = function()

    local call = natives.invoke(0xBE7F225417E35A7C, 'int')
    return call
end

--- @return number
natives.misc_getNumberOfMicrosecondsSinceLastCall = function()

    local call = natives.invoke(0xB0CE5E5ED8BB3581, 'int')
    return call
end

--- @return number
natives.misc_getScriptTimeWithinFrameInMicroseconds = function()

    local call = natives.invoke(0x63219768C586667C, 'int')
    return call
end

natives.misc_resetScriptTimeWithinFrame = function()

    local call = natives.invoke(0x1411A7CBC3A6EB7B, 'void')
end

--- @return number
natives.misc_getFrameTime = function()

    local call = natives.invoke(0x5E72022914CE3C38, 'float')
    return call
end

-- Old name: _GET_BENCHMARK_TIME
--- @return number
natives.misc_getSystemTimeStep = function()

    local call = natives.invoke(0x3F3172FEAE3AFE1C, 'float')
    return call
end

--- @return number
natives.misc_getFrameCount = function()

    local call = natives.invoke(0x77DFA958FCF100C1, 'int')
    return call
end

--- @param p0 userdata
--- @param p1 number
natives.misc_n0X6Bed40493A1Afdb8 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x6BED40493A1AFDB8, 'void', p0, p1)
end

-- Reads the passed value as floating point value and returns it.
-- Example: _READ_INT_AS_FLOAT(0x3F800000) returns 1.0f because 0x3F800000 is the hexadecimal representation of 1.0f.
--- @param value integer
--- @return number
natives.misc_readIntAsFloat = function(value)
    assert(type(value) == 'integer', 'Argument value must be of type integer.')

    local call = natives.invoke(0xD2C9126410DFA1B2, 'float', value)
    return call
end

--- @param startrange number
--- @param endrange number
--- @return number
natives.misc_getRandomFloatInRange = function(startrange, endrange)
    assert(type(startrange) == 'number', 'Argument startrange must be of type number.')
    assert(type(endrange) == 'number', 'Argument endrange must be of type number.')

    local call = natives.invoke(0xE29F927A961F8AAA, 'float', startrange, endrange)
    return call
end

--- @param startrange integer
--- @param endrange integer
--- @return number
natives.misc_getRandomIntInRange = function(startrange, endrange)
    assert(type(startrange) == 'integer', 'Argument startrange must be of type integer.')
    assert(type(endrange) == 'integer', 'Argument endrange must be of type integer.')

    local call = natives.invoke(0xD53343AA4FB7DD28, 'int', startrange, endrange)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @param groundz integer
--- @param p4 boolean
--- @return boolean
natives.misc_getGroundZFor3DCoord = function(x, y, z, groundz, p4)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(groundz) == 'integer', 'Argument groundz must be of type integer.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')

    local call = natives.invoke(0x24FA4267BB8D2431, 'bool', x, y, z, groundz, p4)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @param groundz integer
--- @param normal integer
--- @return boolean
natives.misc_getGroundZAndNormalFor3DCoord = function(x, y, z, groundz, normal)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(groundz) == 'integer', 'Argument groundz must be of type integer.')
    assert(type(normal) == 'integer', 'Argument normal must be of type integer.')

    local call = natives.invoke(0x2A29CA9A6319E6AB, 'bool', x, y, z, groundz, normal)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @return any
natives.misc_n0Xbbe5B63Effb08E68 = function(p0, p1, p2, p3, p4, p5, p6)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0xBBE5B63EFFB08E68, 'any', p0, p1, p2, p3, p4, p5, p6)
    return call
end

--- @param p0 number
--- @return number
natives.misc_asin = function(p0)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')

    local call = natives.invoke(0x6E3C15D296C15583, 'float', p0)
    return call
end

--- @param p0 number
--- @return number
natives.misc_acos = function(p0)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')

    local call = natives.invoke(0x586690F0176DC575, 'float', p0)
    return call
end

--- @param p0 number
--- @return number
natives.misc_tan = function(p0)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')

    local call = natives.invoke(0x8C13DB96497B7ABF, 'float', p0)
    return call
end

--- @param p0 number
--- @return number
natives.misc_atan = function(p0)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')

    local call = natives.invoke(0x503054DED0B78027, 'float', p0)
    return call
end

--- @param p0 number
--- @param p1 number
--- @return number
natives.misc_atan2 = function(p0, p1)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x965B220A066E3F07, 'float', p0, p1)
    return call
end

-- If useZ is false, only the 2D plane (X-Y) will be considered for calculating the distance.
-- 
-- Consider using this faster native instead: BUILTIN::VDIST - DVIST always takes in consideration the 3D coordinates.
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param usez boolean
--- @return number
natives.misc_getDistanceBetweenCoords = function(x1, y1, z1, x2, y2, z2, usez)
    assert(type(x1) == 'number', 'Argument x1 must be of type number.')
    assert(type(y1) == 'number', 'Argument y1 must be of type number.')
    assert(type(z1) == 'number', 'Argument z1 must be of type number.')
    assert(type(x2) == 'number', 'Argument x2 must be of type number.')
    assert(type(y2) == 'number', 'Argument y2 must be of type number.')
    assert(type(z2) == 'number', 'Argument z2 must be of type number.')
    assert(type(usez) == 'boolean', 'Argument usez must be of type boolean.')

    local call = natives.invoke(0x0BE7F4E3CDBAFB28, 'float', x1, y1, z1, x2, y2, z2, usez)
    return call
end

--- @param x1 number
--- @param y1 number
--- @param x2 number
--- @param y2 number
--- @return number
natives.misc_getAngleBetween2DVectors = function(x1, y1, x2, y2)
    assert(type(x1) == 'number', 'Argument x1 must be of type number.')
    assert(type(y1) == 'number', 'Argument y1 must be of type number.')
    assert(type(x2) == 'number', 'Argument x2 must be of type number.')
    assert(type(y2) == 'number', 'Argument y2 must be of type number.')

    local call = natives.invoke(0xD0DFE1C486097BBB, 'float', x1, y1, x2, y2)
    return call
end

-- dx = x1 - x2
-- dy = y1 - y2
--- @param dx number
--- @param dy number
--- @return number
natives.misc_getHeadingFromVector2D = function(dx, dy)
    assert(type(dx) == 'number', 'Argument dx must be of type number.')
    assert(type(dy) == 'number', 'Argument dy must be of type number.')

    local call = natives.invoke(0x38D5202FF9271C62, 'float', dx, dy)
    return call
end

--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 number
--- @param p7 number
--- @param p8 number
--- @param p9 boolean
--- @return number, number, number
natives.misc_getClosestPointOnLine = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'number', 'Argument p6 must be of type number.')
    assert(type(p7) == 'number', 'Argument p7 must be of type number.')
    assert(type(p8) == 'number', 'Argument p8 must be of type number.')
    assert(type(p9) == 'boolean', 'Argument p9 must be of type boolean.')

    local call = natives.invoke(0x83ACC65D9ACEC5EF, 'vector3', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)
    return call.x, call.y, call.z
end

--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 number
--- @param p7 number
--- @param p8 number
--- @param p9 number
--- @param p10 number
--- @param p11 number
--- @param p12 integer
--- @return boolean
natives.misc_getLinePlaneIntersection = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'number', 'Argument p6 must be of type number.')
    assert(type(p7) == 'number', 'Argument p7 must be of type number.')
    assert(type(p8) == 'number', 'Argument p8 must be of type number.')
    assert(type(p9) == 'number', 'Argument p9 must be of type number.')
    assert(type(p10) == 'number', 'Argument p10 must be of type number.')
    assert(type(p11) == 'number', 'Argument p11 must be of type number.')
    assert(type(p12) == 'integer', 'Argument p12 must be of type integer.')

    local call = natives.invoke(0xAB6A04CEC428258B, 'bool', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12)
    return call
end

--- @param address integer
--- @param offset integer
natives.misc_setBit = function(address, offset)
    assert(type(address) == 'integer', 'Argument address must be of type integer.')
    assert(type(offset) == 'integer', 'Argument offset must be of type integer.')

    local call = natives.invoke(0xF73FBE4845C43B5B, 'void', address, offset)
end

--- @param address integer
--- @param offset integer
natives.misc_clearBit = function(address, offset)
    assert(type(address) == 'integer', 'Argument address must be of type integer.')
    assert(type(offset) == 'integer', 'Argument offset must be of type integer.')

    local call = natives.invoke(0x7D1D4A3602B6AD4E, 'void', address, offset)
end

--- @param bitflags userdata
--- @param flag integer
--- @return boolean
natives.misc_isBitFlagSet = function(bitflags, flag)
    assert(type(bitflags) == 'userdata', 'Argument bitflags must be of type userdata.')
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')

    local call = natives.invoke(0x8F4F050054005C27, 'bool', bitflags, flag)
    return call
end

--- @param bitflags userdata
--- @return boolean
natives.misc_isAnyBitFlagSet = function(bitflags)
    assert(type(bitflags) == 'userdata', 'Argument bitflags must be of type userdata.')

    local call = natives.invoke(0x80E9C316EF84DD81, 'bool', bitflags)
    return call
end

--- @param bitflags userdata
--- @return number
natives.misc_countBitFlags = function(bitflags)
    assert(type(bitflags) == 'userdata', 'Argument bitflags must be of type userdata.')

    local call = natives.invoke(0xE704838F36F93B7B, 'int', bitflags)
    return call
end

-- Similar to SET_BIT but specifically designed for large (>32 flags) bit flag sets.
-- The flags are stored in an int array where each int has the ability to hold 32 flags.
-- Flags 0-31 would be stored in the first int, flags 32-63 in the second int, etc.
--- @param bitflags userdata
--- @param flag integer
natives.misc_setBitFlag = function(bitflags, flag)
    assert(type(bitflags) == 'userdata', 'Argument bitflags must be of type userdata.')
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')

    local call = natives.invoke(0xE84AAC1B22A73E99, 'void', bitflags, flag)
end

--- @param bitflags userdata
--- @param flag integer
natives.misc_clearBitFlag = function(bitflags, flag)
    assert(type(bitflags) == 'userdata', 'Argument bitflags must be of type userdata.')
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')

    local call = natives.invoke(0xB909149F2BB5F6DA, 'void', bitflags, flag)
end

--- @param bitflags userdata
natives.misc_clearAllBitFlags = function(bitflags)
    assert(type(bitflags) == 'userdata', 'Argument bitflags must be of type userdata.')

    local call = natives.invoke(0xD2D74F89DF844A50, 'void', bitflags)
end

-- Computes a hash for the given string. It is hashed using Jenkins' One-at-a-Time hash algorithm (https:--en.wikipedia.org/wiki/Jenkins_hash_function)
-- Note: this implementation is case-insensitive.
--- @param string string
--- @return number
natives.misc_getHashKey = function(string)
    assert(type(string) == 'string', 'Argument string must be of type string.')

    local call = natives.invoke(0xFD340785ADF8CFB7, 'integer', string)
    return call
end

-- https:--easings.net/
-- 
-- enum class eEasingCurveType
-- {
-- 	TYPE_LINEAR,
-- 	TYPE_QUADRATIC_IN,
-- 	TYPE_QUADRATIC_OUT,
-- 	TYPE_QUADRATIC_INOUT,
-- 	TYPE_CUBIC_IN,
-- 	TYPE_CUBIC_OUT,
-- 	TYPE_CUBIC_INOUT,
-- 	TYPE_QUARTIC_IN,
-- 	TYPE_QUARTIC_OUT,
-- 	TYPE_QUARTIC_INOUT,
-- 	TYPE_QUINTIC_IN,
-- 	TYPE_QUINTIC_OUT,
-- 	TYPE_QUINTIC_INOUT,
-- 	TYPE_EXPONENTIAL_IN,
-- 	TYPE_EXPONENTIAL_OUT,
-- 	TYPE_EXPONENTIAL_INOUT,
-- 	TYPE_SINE_IN,
-- 	TYPE_SINE_OUT,
-- 	TYPE_SINE_INOUT,
-- 	TYPE_CIRCULAR_IN,
-- 	TYPE_CIRCULAR_OUT,
-- 	TYPE_CIRCULAR_INOUT,
-- 	TYPE_BOUNCE_IN,
-- 	TYPE_BOUNCE_OUT,
-- 	TYPE_BOUNCE_INOUT,
-- 	TYPE_CUSTOM
-- };
--- @param t number
--- @param b number
--- @param d number
--- @param easingcurvetype integer
--- @return number
natives.misc_getEasingCurveValue = function(t, b, d, easingcurvetype)
    assert(type(t) == 'number', 'Argument t must be of type number.')
    assert(type(b) == 'number', 'Argument b must be of type number.')
    assert(type(d) == 'number', 'Argument d must be of type number.')
    assert(type(easingcurvetype) == 'integer', 'Argument easingcurvetype must be of type integer.')

    local call = natives.invoke(0xEF50E344A8F93784, 'float', t, b, d, easingcurvetype)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @param range number
--- @param p4 boolean
--- @param p5 boolean
--- @param p6 boolean
--- @param p7 boolean
--- @param p8 boolean
--- @param p9 userdata
--- @param p10 boolean
--- @return boolean
natives.misc_isPositionOccupied = function(x, y, z, range, p4, p5, p6, p7, p8, p9, p10)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(range) == 'number', 'Argument range must be of type number.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')
    assert(type(p7) == 'boolean', 'Argument p7 must be of type boolean.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')
    assert(type(p10) == 'boolean', 'Argument p10 must be of type boolean.')

    local call = natives.invoke(0x825CA3ED43831015, 'bool', x, y, z, range, p4, p5, p6, p7, p8, p9, p10)
    return call
end

-- flag |= 1 | 1048576 | 524288
-- ALL_BASE, PROJECTILES, AMBIENT_POPULATION, BROADCAST
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param flag integer
natives.misc_clearArea = function(x, y, z, radius, flag)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')

    local call = natives.invoke(0x3B882A96EA77D5B1, 'void', x, y, z, radius, flag)
end

--- @param volume integer
--- @param flag integer
natives.misc_clearVolumeArea = function(volume, flag)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')

    local call = natives.invoke(0x2FCD528A397E5C88, 'void', volume, flag)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
natives.misc_clearAngledAreaOfVehicles = function(p0, p1, p2, p3, p4, p5, p6, p7)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')

    local call = natives.invoke(0xA4D83115C1E02F8A, 'void', p0, p1, p2, p3, p4, p5, p6, p7)
end

--- @param toggle boolean
natives.misc_setCreditsActive = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xD37BECF862DA726F, 'void', toggle)
end

natives.misc_networkSetScriptIsSafeForNetworkGame = function()

    local call = natives.invoke(0x3D0EAC6385DD6100, 'void')
end

--- @param toggle boolean
natives.misc_pauseDeathArrestRestart = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x66AB6B6C7E72F393, 'void', toggle)
end

--- @param toggle boolean
natives.misc_ignoreNextRestart = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x6C9FF40FF1B69F8F, 'void', toggle)
end

-- Sets whether the game should fade in after the player dies or is arrested.
--- @param toggle boolean
natives.misc_setFadeInAfterDeathArrest = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xDF3B5846DE5904AF, 'void', toggle)
end

--- @param toggle boolean
natives.misc_setFadeInAfterLoad = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xAC806C4CAB973517, 'void', toggle)
end

--- @param override boolean
--- @param x number
--- @param y number
--- @param z number
--- @param heading number
--- @param isautosave boolean
--- @param returncoords integer
--- @param returnheading integer
--- @return boolean
natives.misc_overrideSaveHouse = function(override, x, y, z, heading, isautosave, returncoords, returnheading)
    assert(type(override) == 'boolean', 'Argument override must be of type boolean.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(heading) == 'number', 'Argument heading must be of type number.')
    assert(type(isautosave) == 'boolean', 'Argument isautosave must be of type boolean.')
    assert(type(returncoords) == 'integer', 'Argument returncoords must be of type integer.')
    assert(type(returnheading) == 'integer', 'Argument returnheading must be of type integer.')

    local call = natives.invoke(0xB2C69E11A37B5AF0, 'bool', override, x, y, z, heading, isautosave, returncoords, returnheading)
    return call
end

--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param damage integer
--- @param p7 boolean
--- @param weaponhash integer
--- @param ownerped integer
--- @param isaudible boolean
--- @param isinvisible boolean
--- @param speed number
--- @param p13 boolean
natives.misc_shootSingleBulletBetweenCoords = function(x1, y1, z1, x2, y2, z2, damage, p7, weaponhash, ownerped, isaudible, isinvisible, speed, p13)
    assert(type(x1) == 'number', 'Argument x1 must be of type number.')
    assert(type(y1) == 'number', 'Argument y1 must be of type number.')
    assert(type(z1) == 'number', 'Argument z1 must be of type number.')
    assert(type(x2) == 'number', 'Argument x2 must be of type number.')
    assert(type(y2) == 'number', 'Argument y2 must be of type number.')
    assert(type(z2) == 'number', 'Argument z2 must be of type number.')
    assert(type(damage) == 'integer', 'Argument damage must be of type integer.')
    assert(type(p7) == 'boolean', 'Argument p7 must be of type boolean.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')
    assert(type(ownerped) == 'integer', 'Argument ownerped must be of type integer.')
    assert(type(isaudible) == 'boolean', 'Argument isaudible must be of type boolean.')
    assert(type(isinvisible) == 'boolean', 'Argument isinvisible must be of type boolean.')
    assert(type(speed) == 'number', 'Argument speed must be of type number.')
    assert(type(p13) == 'boolean', 'Argument p13 must be of type boolean.')

    local call = natives.invoke(0x867654CBC7606F2C, 'void', x1, y1, z1, x2, y2, z2, damage, p7, weaponhash, ownerped, isaudible, isinvisible, speed, p13)
end

--- @param args userdata
natives.misc_fireSingleBullet = function(args)
    assert(type(args) == 'userdata', 'Argument args must be of type userdata.')

    local call = natives.invoke(0xCBC9A21F6A2A679C, 'void', args)
end

--- @param modelhash integer
--- @param minimum integer
--- @param maximum integer
natives.misc_getModelDimensions = function(modelhash, minimum, maximum)
    assert(type(modelhash) == 'integer', 'Argument modelhash must be of type integer.')
    assert(type(minimum) == 'integer', 'Argument minimum must be of type integer.')
    assert(type(maximum) == 'integer', 'Argument maximum must be of type integer.')

    local call = natives.invoke(0xDCB8DDD5D054A7E7, 'void', modelhash, minimum, maximum)
end

--- @param address integer
--- @param offset integer
--- @return boolean
natives.misc_isBitSet = function(address, offset)
    assert(type(address) == 'integer', 'Argument address must be of type integer.')
    assert(type(offset) == 'integer', 'Argument offset must be of type integer.')

    local call = natives.invoke(0x4ED6CFDFE8D4131A, 'bool', address, offset)
    return call
end

--- @param p0 userdata
natives.misc_n0X0A487Cc74A517Fb5 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x0A487CC74A517FB5, 'void', p0)
end

--- @return boolean
natives.misc_isMinigameInProgress = function()

    local call = natives.invoke(0xF4D8BCD052E7EA1B, 'bool')
    return call
end

-- Returns whether the game's measurement system is set to metric.
--- @return boolean
natives.misc_shouldUseMetricMeasurements = function()

    local call = natives.invoke(0x4FB556ACEFA93098, 'bool')
    return call
end

-- Same as SHOULD_USE_METRIC_MEASUREMENTS
--- @return boolean
natives.misc_shouldUseMetricMeasurements2 = function()

    local call = natives.invoke(0x58BCDC75BA52110A, 'bool')
    return call
end

--- @return boolean
natives.misc_shouldUseMetricTemperature = function()

    local call = natives.invoke(0xFF4AAF3275BAAB4F, 'bool')
    return call
end

--- @return boolean
natives.misc_shouldUseMetricWeight = function()

    local call = natives.invoke(0x8F24157FEDB85EA2, 'bool')
    return call
end

--- @return boolean
natives.misc_shouldUse24HourClock = function()

    local call = natives.invoke(0x0177CF20345F44DD, 'bool')
    return call
end

--- @param str1 string
--- @param str2 string
--- @param matchcase boolean
--- @param maxlength integer
--- @return number
natives.misc_compareStrings = function(str1, str2, matchcase, maxlength)
    assert(type(str1) == 'string', 'Argument str1 must be of type string.')
    assert(type(str2) == 'string', 'Argument str2 must be of type string.')
    assert(type(matchcase) == 'boolean', 'Argument matchcase must be of type boolean.')
    assert(type(maxlength) == 'integer', 'Argument maxlength must be of type integer.')

    local call = natives.invoke(0xBFBB74A15EFC149B, 'int', str1, str2, matchcase, maxlength)
    return call
end

--- @param value integer
--- @return number
natives.misc_absi = function(value)
    assert(type(value) == 'integer', 'Argument value must be of type integer.')

    local call = natives.invoke(0x0C214D5B8A38C828, 'int', value)
    return call
end

--- @param value number
--- @return number
natives.misc_absf = function(value)
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0x134549B388167CBF, 'float', value)
    return call
end

-- Determines whether there is a projectile within the specified coordinates. The coordinates form a rectangle.
-- 
-- ownedByPlayer = only projectiles fired by the player will be detected.
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param ownedbyplayer boolean
--- @return boolean
natives.misc_isProjectileInArea = function(x1, y1, z1, x2, y2, z2, ownedbyplayer)
    assert(type(x1) == 'number', 'Argument x1 must be of type number.')
    assert(type(y1) == 'number', 'Argument y1 must be of type number.')
    assert(type(z1) == 'number', 'Argument z1 must be of type number.')
    assert(type(x2) == 'number', 'Argument x2 must be of type number.')
    assert(type(y2) == 'number', 'Argument y2 must be of type number.')
    assert(type(z2) == 'number', 'Argument z2 must be of type number.')
    assert(type(ownedbyplayer) == 'boolean', 'Argument ownedbyplayer must be of type boolean.')

    local call = natives.invoke(0x05B0061EFDFC8941, 'bool', x1, y1, z1, x2, y2, z2, ownedbyplayer)
    return call
end

-- Determines whether there is a projectile of a specific type within the specified coordinates. The coordinates form a rectangle.
--- @param xmin number
--- @param ymin number
--- @param zmin number
--- @param xmax number
--- @param ymax number
--- @param zmax number
--- @param weapontype integer
--- @param isplayer boolean
--- @return boolean
natives.misc_isProjectileTypeInArea = function(xmin, ymin, zmin, xmax, ymax, zmax, weapontype, isplayer)
    assert(type(xmin) == 'number', 'Argument xmin must be of type number.')
    assert(type(ymin) == 'number', 'Argument ymin must be of type number.')
    assert(type(zmin) == 'number', 'Argument zmin must be of type number.')
    assert(type(xmax) == 'number', 'Argument xmax must be of type number.')
    assert(type(ymax) == 'number', 'Argument ymax must be of type number.')
    assert(type(zmax) == 'number', 'Argument zmax must be of type number.')
    assert(type(weapontype) == 'integer', 'Argument weapontype must be of type integer.')
    assert(type(isplayer) == 'boolean', 'Argument isplayer must be of type boolean.')

    local call = natives.invoke(0x04965FB9E14235C7, 'bool', xmin, ymin, zmin, xmax, ymax, zmax, weapontype, isplayer)
    return call
end

--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 number
--- @param p7 userdata
--- @param p8 boolean
--- @return boolean
natives.misc_isProjectileTypeInAngledArea = function(p0, p1, p2, p3, p4, p5, p6, p7, p8)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'number', 'Argument p6 must be of type number.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')

    local call = natives.invoke(0x928431F4133CD3D4, 'bool', p0, p1, p2, p3, p4, p5, p6, p7, p8)
    return call
end

--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 userdata
--- @param p4 number
--- @param p5 boolean
--- @return boolean
natives.misc_isProjectileTypeWithinDistance = function(p0, p1, p2, p3, p4, p5)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')

    local call = natives.invoke(0xF51C9BAAD9ED64C4, 'bool', p0, p1, p2, p3, p4, p5)
    return call
end

--- @param ped integer
--- @param weaponhash integer
--- @param distance number
--- @param outcoords integer
--- @param p4 boolean
--- @param mustbeownedbythisped boolean
--- @return boolean
natives.misc_getCoordsOfProjectileTypeWithinDistance = function(ped, weaponhash, distance, outcoords, p4, mustbeownedbythisped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')
    assert(type(distance) == 'number', 'Argument distance must be of type number.')
    assert(type(outcoords) == 'integer', 'Argument outcoords must be of type integer.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')
    assert(type(mustbeownedbythisped) == 'boolean', 'Argument mustbeownedbythisped must be of type boolean.')

    local call = natives.invoke(0xD73C960A681052DF, 'bool', ped, weaponhash, distance, outcoords, p4, mustbeownedbythisped)
    return call
end

--- @param ped integer
--- @param weaponhash integer
--- @param distance number
--- @param outcoords integer
--- @param outprojectile integer
--- @param p5 boolean
--- @param mustbeownedbythisped boolean
--- @return boolean
natives.misc_getProjectileOfProjectileTypeWithinDistance = function(ped, weaponhash, distance, outcoords, outprojectile, p5, mustbeownedbythisped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')
    assert(type(distance) == 'number', 'Argument distance must be of type number.')
    assert(type(outcoords) == 'integer', 'Argument outcoords must be of type integer.')
    assert(type(outprojectile) == 'integer', 'Argument outprojectile must be of type integer.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')
    assert(type(mustbeownedbythisped) == 'boolean', 'Argument mustbeownedbythisped must be of type boolean.')

    local call = natives.invoke(0x9578986A6105A6AD, 'bool', ped, weaponhash, distance, outcoords, outprojectile, p5, mustbeownedbythisped)
    return call
end

--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 number
--- @param p7 boolean
--- @return boolean
natives.misc_isBulletInAngledArea = function(p0, p1, p2, p3, p4, p5, p6, p7)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'number', 'Argument p6 must be of type number.')
    assert(type(p7) == 'boolean', 'Argument p7 must be of type boolean.')

    local call = natives.invoke(0x9D09D8493747CF02, 'bool', p0, p1, p2, p3, p4, p5, p6, p7)
    return call
end

--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 boolean
--- @return boolean
natives.misc_isBulletInArea = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')

    local call = natives.invoke(0xC652FD308772D79E, 'bool', p0, p1, p2, p3, p4)
    return call
end

--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 boolean
--- @return boolean
natives.misc_isBulletInBox = function(p0, p1, p2, p3, p4, p5, p6)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')

    local call = natives.invoke(0xC128137C52152741, 'bool', p0, p1, p2, p3, p4, p5, p6)
    return call
end

-- p3 - possibly radius?
--- @param x number
--- @param y number
--- @param z number
--- @param p3 number
--- @param p4 boolean
--- @param p5 boolean
--- @return boolean
natives.misc_hasBulletImpactedInArea = function(x, y, z, p3, p4, p5)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')

    local call = natives.invoke(0xC153E5BCCF411814, 'bool', x, y, z, p3, p4, p5)
    return call
end

--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 boolean
--- @param p7 boolean
--- @return boolean
natives.misc_hasBulletImpactedInBox = function(p0, p1, p2, p3, p4, p5, p6, p7)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')
    assert(type(p7) == 'boolean', 'Argument p7 must be of type boolean.')

    local call = natives.invoke(0x3B6A4C05FB2B33AC, 'bool', p0, p1, p2, p3, p4, p5, p6, p7)
    return call
end

--- @param entity integer
--- @param p1 integer
--- @param p2 integer
--- @return any
natives.misc_n0X7A76104Cc2Cc69E8 = function(entity, p1, p2)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x7A76104CC2CC69E8, 'any', entity, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @return any
natives.misc_n0Xdc416Ca762Bc4F43 = function(p0, p1, p2, p3, p4, p5)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0xDC416CA762BC4F43, 'any', p0, p1, p2, p3, p4, p5)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.misc_n0X970339Efa4Fde518 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x970339EFA4FDE518, 'any', p0, p1, p2)
    return call
end

-- Hardcoded to return false.
-- Checks for PS4 Game Build.
--- @return boolean
natives.misc_isOrbisVersion = function()

    local call = natives.invoke(0x88CFAE250D3E0C71, 'bool')
    return call
end

-- Hardcoded to return false.
-- Checks for XBOXONE Game Build.
--- @return boolean
natives.misc_isDurangoVersion = function()

    local call = natives.invoke(0xD1CCC2A2639D325F, 'bool')
    return call
end

-- Hardcoded to return true.
--- @return boolean
natives.misc_isPcVersion = function()

    local call = natives.invoke(0xB0FB6CFAA5A1C833, 'bool')
    return call
end

-- Hardcoded to return false.
--- @return boolean
natives.misc_isStadiaVersion = function()

    local call = natives.invoke(0x268AB8420A9E4ED7, 'bool')
    return call
end

--- @param string string
--- @return boolean
natives.misc_isStringNull = function(string)
    assert(type(string) == 'string', 'Argument string must be of type string.')

    local call = natives.invoke(0x602102324604D96B, 'bool', string)
    return call
end

--- @param string string
--- @return boolean
natives.misc_isStringNullOrEmpty = function(string)
    assert(type(string) == 'string', 'Argument string must be of type string.')

    local call = natives.invoke(0x2CF12F9ACF18F048, 'bool', string)
    return call
end

-- Returns true if the entire string consists only of space characters.
--- @param string string
--- @return boolean
natives.misc_isStringNullOrEmptyOrSpaces = function(string)
    assert(type(string) == 'string', 'Argument string must be of type string.')

    local call = natives.invoke(0x375F5870A7B8BEC1, 'bool', string)
    return call
end

--- @param string1 string
--- @param string2 string
--- @return boolean
natives.misc_areStringsEqual = function(string1, string2)
    assert(type(string1) == 'string', 'Argument string1 must be of type string.')
    assert(type(string2) == 'string', 'Argument string2 must be of type string.')

    local call = natives.invoke(0xD3852F22AB713A1F, 'bool', string1, string2)
    return call
end

--- @param string1 string
--- @param string2 string
--- @return boolean
natives.misc_doesStringExistInString = function(string1, string2)
    assert(type(string1) == 'string', 'Argument string1 must be of type string.')
    assert(type(string2) == 'string', 'Argument string2 must be of type string.')

    local call = natives.invoke(0x9382D5D43D2AA6FF, 'bool', string1, string2)
    return call
end

natives.misc_n0X3C3C7B1B5Ec08764 = function()

    local call = natives.invoke(0x3C3C7B1B5EC08764, 'void')
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.misc_n0X94E8Ca3Dee952789 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x94E8CA3DEE952789, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @return any
natives.misc_n0X5B4A8121A47D844D = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x5B4A8121A47D844D, 'any', p0)
    return call
end

-- Returns false if it's a null or empty string or if the string is too long. outInteger will be set to -999 in that case.
--- @param string string
--- @param outinteger integer
--- @return boolean
natives.misc_stringToInt = function(string, outinteger)
    assert(type(string) == 'string', 'Argument string must be of type string.')
    assert(type(outinteger) == 'integer', 'Argument outinteger must be of type integer.')

    local call = natives.invoke(0xF2DD2298B3AF23E2, 'bool', string, outinteger)
    return call
end

-- Note: the buffer should be exactly 32 bytes long
--- @param value integer
--- @param format string
--- @param buffer integer
natives.misc_intToString = function(value, format, buffer)
    assert(type(value) == 'integer', 'Argument value must be of type integer.')
    assert(type(format) == 'string', 'Argument format must be of type string.')
    assert(type(buffer) == 'integer', 'Argument buffer must be of type integer.')

    local call = natives.invoke(0xCF11C0CEB40C401B, 'void', value, format, buffer)
end

--- @param p0 userdata
natives.misc_n0X74Aca66484Cebaf0 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x74ACA66484CEBAF0, 'void', p0)
end

--- @param p0 userdata
natives.misc_n0X49C44Fe78A135A1D = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x49C44FE78A135A1D, 'void', p0)
end

--- @param p0 userdata
natives.misc_n0Xf650Dcf5D6F312C1 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xF650DCF5D6F312C1, 'void', p0)
end

--- @param value number
--- @param digits integer
--- @return string
natives.misc_getStringFromFloat = function(value, digits)
    assert(type(value) == 'number', 'Argument value must be of type number.')
    assert(type(digits) == 'integer', 'Argument digits must be of type integer.')

    local call = natives.invoke(0x2B6846401D68E563, 'string', value, digits)
    return call
end

-- Returns a string in the following format: <<%.4f,%.4f,%.4f>>
--- @param x number
--- @param y number
--- @param z number
--- @return string
natives.misc_getStringFromVector = function(x, y, z)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0x6C4DBF553885F9EB, 'string', x, y, z)
    return call
end

--- @param value boolean
--- @return string
natives.misc_getStringFromBool = function(value)
    assert(type(value) == 'boolean', 'Argument value must be of type boolean.')

    local call = natives.invoke(0xF216F74101968DB0, 'string', value)
    return call
end

-- Note: The first bit in 'flags' must not be set.
-- It is also required to pass at least one extra argument (this must be a text label string or hash).
-- When passing a hash, flags should be 0.
--- @param flags integer
--- @param ... userdata
--- @return string
natives.misc_varString = function(flags, ...)
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')
    assert(type(...) == 'userdata', 'Argument ... must be of type userdata.')

    local call = natives.invoke(0xFA925AC00EB830B9, 'string', flags, ...)
    return call
end

-- Returns a formatted string (0x%x)
--- @param rgb integer
--- @return string
natives.misc_createColorString = function(rgb)
    assert(type(rgb) == 'integer', 'Argument rgb must be of type integer.')

    local call = natives.invoke(0xBCC2CFADEA1AEA6C, 'string', rgb)
    return call
end

--- @param var integer
--- @param rangestart integer
--- @param rangeend integer
--- @param p3 integer
natives.misc_setBitsInRange = function(var, rangestart, rangeend, p3)
    assert(type(var) == 'integer', 'Argument var must be of type integer.')
    assert(type(rangestart) == 'integer', 'Argument rangestart must be of type integer.')
    assert(type(rangeend) == 'integer', 'Argument rangeend must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')

    local call = natives.invoke(0x324DC1CEF57F31E6, 'void', var, rangestart, rangeend, p3)
end

--- @param var integer
--- @param rangestart integer
--- @param rangeend integer
--- @return number
natives.misc_getBitsInRange = function(var, rangestart, rangeend)
    assert(type(var) == 'integer', 'Argument var must be of type integer.')
    assert(type(rangestart) == 'integer', 'Argument rangestart must be of type integer.')
    assert(type(rangeend) == 'integer', 'Argument rangeend must be of type integer.')

    local call = natives.invoke(0x68E1352AF48F905D, 'int', var, rangestart, rangeend)
    return call
end

-- Make sure to call this from the correct thread if you're using multiple threads because all other threads except the one which is calling SET_GAME_PAUSED will be paused.
--- @param toggle boolean
natives.misc_setGamePaused = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xFAEC088D28B1DE4A, 'void', toggle)
end

--- @param toggle boolean
natives.misc_setThisScriptCanBePaused = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x3215376E79F6EA18, 'void', toggle)
end

--- @param toggle boolean
natives.misc_setThisScriptCanRemoveBlipsCreatedByAnyScript = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x8ABD939C2E5D00ED, 'void', toggle)
end

-- Cheats are GTA IV cheats:
-- 
-- 0 = unknown
-- 1 = unknown (same as 0)
-- 2 = Max Health and Armor
-- 3 = Raise Wanted Level
-- 4 = Lower Wanted Level
-- 5 = unknown (does nothing)
-- 6 = Change Weather
-- 7 = Spawn Annihilator
-- 8 = Spawn NRG 900
-- 9 = Spawn FBI
-- 10 = Spawn Jetmax
-- 11 = Spawn Comet
-- 12 = Spawn Turismo
-- 13 = Spawn Cognoscenti
-- 14 = Spawn Super GT
-- 15 = Spawn Sanchez
-- 
-- Initially used in Max Payne 3, that's why we know the name.
--- @param cheatid integer
natives.misc_setCheatActive = function(cheatid)
    assert(type(cheatid) == 'integer', 'Argument cheatid must be of type integer.')

    local call = natives.invoke(0xD4958E8CF0DE0DD0, 'void', cheatid)
end

-- nullsub, doesn't do anything
natives.misc_n0Xb711Eb4Bc8D06013 = function()

    local call = natives.invoke(0xB711EB4BC8D06013, 'void')
end

-- spawns a few distant/out-of-sight peds, vehicles, animals etc each time it is called
natives.misc_populateNow = function()

    local call = natives.invoke(0xEA6DC3A8ADD2005F, 'void')
end

--- @return boolean
natives.misc_isGameSessionStateMachineIdle = function()

    local call = natives.invoke(0xF9E7DBB39080640B, 'bool')
    return call
end

-- p0 must be < 2
--- @param p0 integer
--- @return boolean
natives.misc_queueSavegameOperation = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x279B0696DA4657EB, 'bool', p0)
    return call
end

-- Only 0 and 1 are valid for p0, higher values causes the native to return 2.
--- @param p0 integer
--- @return number
natives.misc_getStatusOfSavegameOperation = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x1B065A2BF7953815, 'int', p0)
    return call
end

--- @param p0 userdata
--- @return any
natives.misc_n0X6C7B68D3Ce60E8De = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x6C7B68D3CE60E8DE, 'any', p0)
    return call
end

--- @param p0 userdata
--- @return any
natives.misc_n0X627B68D9Ce6Ee8De = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x627B68D9CE6EE8DE, 'any', p0)
    return call
end

--- @param p0 userdata
--- @return any
natives.misc_n0X7Cf96F1250Ef3221 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x7CF96F1250EF3221, 'any', p0)
    return call
end

-- Old name: _COPY_MEMORY
--- @param dst userdata
--- @param src userdata
--- @param size integer
natives.misc_copyScriptStruct = function(dst, src, size)
    assert(type(dst) == 'userdata', 'Argument dst must be of type userdata.')
    assert(type(src) == 'userdata', 'Argument src must be of type userdata.')
    assert(type(size) == 'integer', 'Argument size must be of type integer.')

    local call = natives.invoke(0xF7AC7DC0DEE7C9BE, 'void', dst, src, size)
end

-- enum DispatchType
-- {
-- 	DT_Invalid,
-- 	DT_PoliceAutomobile,
-- 	DT_PoliceHelicopter,
-- 	DT_FireDepartment,
-- 	DT_SwatAutomobile,
-- 	DT_AmbulanceDepartment,
-- 	DT_PoliceRiders,
-- 	DT_PoliceVehicleRequest,
-- 	DT_PoliceRoadBlock,
-- 	DT_PoliceAutomobileWaitPulledOver,
-- 	DT_PoliceAutomobileWaitCruising,
-- 	DT_Gangs,
-- 	DT_SwatHelicopter,
-- 	DT_PoliceBoat,
-- 	DT_ArmyVehicle,
-- 	DT_OnFoot,
-- 	DT_PoliceDogs
-- };
--- @param dispatchservice integer
--- @param toggle boolean
natives.misc_enableDispatchService = function(dispatchservice, toggle)
    assert(type(dispatchservice) == 'integer', 'Argument dispatchservice must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x50E52637EF70EF77, 'void', dispatchservice, toggle)
end

-- dispatchService: see ENABLE_DISPATCH_SERVICE
--- @param dispatchservice integer
--- @param toggle boolean
natives.misc_blockDispatchServiceResourceCreation = function(dispatchservice, toggle)
    assert(type(dispatchservice) == 'integer', 'Argument dispatchservice must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x66947E61A44DE2C6, 'void', dispatchservice, toggle)
end

-- dispatchService: see ENABLE_DISPATCH_SERVICE
--- @param dispatchservice integer
--- @param x number
--- @param y number
--- @param z number
--- @param numunits integer
--- @param radius number
--- @param outincidentid integer
--- @param p7 userdata
--- @param p8 userdata
--- @return boolean
natives.misc_createIncident = function(dispatchservice, x, y, z, numunits, radius, outincidentid, p7, p8)
    assert(type(dispatchservice) == 'integer', 'Argument dispatchservice must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(numunits) == 'integer', 'Argument numunits must be of type integer.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(outincidentid) == 'integer', 'Argument outincidentid must be of type integer.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')

    local call = natives.invoke(0x3F892CAF67444AE7, 'bool', dispatchservice, x, y, z, numunits, radius, outincidentid, p7, p8)
    return call
end

-- dispatchService: see ENABLE_DISPATCH_SERVICE
-- 
-- The entities must be added to itemSet.
--- @param dispatchservice integer
--- @param x number
--- @param y number
--- @param z number
--- @param itemset integer
--- @param radius number
--- @param outincidentid integer
--- @return boolean
natives.misc_createIncidentWithEntities = function(dispatchservice, x, y, z, itemset, radius, outincidentid)
    assert(type(dispatchservice) == 'integer', 'Argument dispatchservice must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(itemset) == 'integer', 'Argument itemset must be of type integer.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(outincidentid) == 'integer', 'Argument outincidentid must be of type integer.')

    local call = natives.invoke(0xAB3D3F45436DB1D8, 'bool', dispatchservice, x, y, z, itemset, radius, outincidentid)
    return call
end

-- Delete an incident with a given id.
--- @param incidentid integer
natives.misc_deleteIncident = function(incidentid)
    assert(type(incidentid) == 'integer', 'Argument incidentid must be of type integer.')

    local call = natives.invoke(0x5CFD0F0D6AAE0AEE, 'void', incidentid)
end

--- @param incidentid integer
--- @return boolean
natives.misc_isIncidentValid = function(incidentid)
    assert(type(incidentid) == 'integer', 'Argument incidentid must be of type integer.')

    local call = natives.invoke(0x39F2B1BAD412246A, 'bool', incidentid)
    return call
end

--- @param incidentid integer
natives.misc_setIncidentUnk = function(incidentid)
    assert(type(incidentid) == 'integer', 'Argument incidentid must be of type integer.')

    local call = natives.invoke(0x9617B6E5F6537B63, 'void', incidentid)
end

--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param peddensity number
--- @param trafficdensity number
--- @param p8 boolean
--- @param p9 boolean
--- @return number
natives.misc_addPopMultiplierArea = function(x1, y1, z1, x2, y2, z2, peddensity, trafficdensity, p8, p9)
    assert(type(x1) == 'number', 'Argument x1 must be of type number.')
    assert(type(y1) == 'number', 'Argument y1 must be of type number.')
    assert(type(z1) == 'number', 'Argument z1 must be of type number.')
    assert(type(x2) == 'number', 'Argument x2 must be of type number.')
    assert(type(y2) == 'number', 'Argument y2 must be of type number.')
    assert(type(z2) == 'number', 'Argument z2 must be of type number.')
    assert(type(peddensity) == 'number', 'Argument peddensity must be of type number.')
    assert(type(trafficdensity) == 'number', 'Argument trafficdensity must be of type number.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')
    assert(type(p9) == 'boolean', 'Argument p9 must be of type boolean.')

    local call = natives.invoke(0x5EBDA1A3B8CB5EF7, 'int', x1, y1, z1, x2, y2, z2, peddensity, trafficdensity, p8, p9)
    return call
end

--- @param id integer
--- @return boolean
natives.misc_doesPopMultiplierAreaExist = function(id)
    assert(type(id) == 'integer', 'Argument id must be of type integer.')

    local call = natives.invoke(0x03BA619C81A646B3, 'bool', id)
    return call
end

--- @param id integer
--- @param p1 boolean
natives.misc_removePopMultiplierArea = function(id, p1)
    assert(type(id) == 'integer', 'Argument id must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x88CB484364EFB37A, 'void', id, p1)
end

-- Only used in script function PROCESS_ZONE_CREATION
-- Returns Pop multiplier volume ID
--- @param volume integer
--- @param peddensity number
--- @param vehicledensity number
--- @param p3 boolean
--- @param p4 boolean
--- @return number
natives.misc_addPopMultiplierVolume = function(volume, peddensity, vehicledensity, p3, p4)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(peddensity) == 'number', 'Argument peddensity must be of type number.')
    assert(type(vehicledensity) == 'number', 'Argument vehicledensity must be of type number.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')

    local call = natives.invoke(0x3233C4EC0514C7EC, 'int', volume, peddensity, vehicledensity, p3, p4)
    return call
end

--- @param volume integer
--- @return boolean
natives.misc_doesPopMultiplierAreaExistForVolume = function(volume)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')

    local call = natives.invoke(0x39D6DACE323A20B6, 'bool', volume)
    return call
end

--- @param volume integer
--- @param p1 integer
natives.misc_removePopMultiplierAreaForVolume = function(volume, p1)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xBD090F5B1DB82189, 'void', volume, p1)
end

natives.misc_n0Xf569E33Fb72Ed28E = function()

    local call = natives.invoke(0xF569E33FB72ED28E, 'void')
end

natives.misc_resetDispatchIdealSpawnDistance = function()

    local call = natives.invoke(0xC7817264BC4B6377, 'void')
end

--- @param fidealspawndistance number
natives.misc_setDispatchIdealSpawnDistance = function(fidealspawndistance)
    assert(type(fidealspawndistance) == 'number', 'Argument fidealspawndistance must be of type number.')

    local call = natives.invoke(0xEAB6823B82FBD283, 'void', fidealspawndistance)
end

natives.misc_resetDispatchMinSpawnDistance = function()

    local call = natives.invoke(0x96498D922D8D0D0A, 'void')
end

--- @param minspawndistance number
natives.misc_setDispatchMinSpawnDistance = function(minspawndistance)
    assert(type(minspawndistance) == 'number', 'Argument minspawndistance must be of type number.')

    local call = natives.invoke(0x27A1B170AA8AF84C, 'void', minspawndistance)
end

natives.misc_resetDispatchMaxSpawnDistance = function()

    local call = natives.invoke(0x54EC7B6BC72BAD69, 'void')
end

--- @param maxspawndistance number
natives.misc_setDispatchMaxSpawnDistance = function(maxspawndistance)
    assert(type(maxspawndistance) == 'number', 'Argument maxspawndistance must be of type number.')

    local call = natives.invoke(0x89314FB3463E28DE, 'void', maxspawndistance)
end

natives.misc_n0X4B0501A468B749F8 = function()

    local call = natives.invoke(0x4B0501A468B749F8, 'void')
end

-- _SET_DISPATCH_*, unused
--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.misc_n0X6Bcf7B5Cd338281A = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x6BCF7B5CD338281A, 'void', p0, p1, p2)
end

--- @param volume integer
--- @return any
natives.misc_addDispatchSpawnBlockingArea = function(volume)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')

    local call = natives.invoke(0xA2D5A26208421426, 'any', volume)
    return call
end

--- @param p0 userdata
natives.misc_removeDispatchSpawnBlockingArea = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x49F751F6868DDC5B, 'void', p0)
end

natives.misc_resetWantedResponseNumPedsToSpawn = function()

    local call = natives.invoke(0xEF42F56F69877125, 'void')
end

-- Params: p3 is 0 in R* Script utopia2
--- @param x number
--- @param y number
--- @param z number
--- @param p3 integer
natives.misc_addTacticalNavMeshPoint = function(x, y, z, p3)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')

    local call = natives.invoke(0xE4EE55E63FA9AF45, 'void', x, y, z, p3)
end

natives.misc_clearTacticalNavMeshPoints = function()

    local call = natives.invoke(0xD93B6516C6878267, 'void')
end

-- enum eOnscreenKeyboardTextType
-- {
-- 	KTEXTTYPE_INVALID = -1,
-- 	KTEXTTYPE_DEFAULT,
-- 	KTEXTTYPE_EMAIL,
-- 	KTEXTTYPE_PASSWORD,
-- 	KTEXTTYPE_NUMERIC,
-- 	KTEXTTYPE_ALPHABET,
-- 	KTEXTTYPE_GAMERTAG,
-- 	KTEXTTYPE_FILENAME,
-- 	KTEXTTYPE_COUNT
-- };
--- @param texttype integer
--- @param windowtitle string
--- @param p2 string
--- @param defaulttext string
--- @param defaultconcat1 string
--- @param defaultconcat2 string
--- @param defaultconcat3 string
--- @param maxinputlength integer
natives.misc_displayOnscreenKeyboard = function(texttype, windowtitle, p2, defaulttext, defaultconcat1, defaultconcat2, defaultconcat3, maxinputlength)
    assert(type(texttype) == 'integer', 'Argument texttype must be of type integer.')
    assert(type(windowtitle) == 'string', 'Argument windowtitle must be of type string.')
    assert(type(p2) == 'string', 'Argument p2 must be of type string.')
    assert(type(defaulttext) == 'string', 'Argument defaulttext must be of type string.')
    assert(type(defaultconcat1) == 'string', 'Argument defaultconcat1 must be of type string.')
    assert(type(defaultconcat2) == 'string', 'Argument defaultconcat2 must be of type string.')
    assert(type(defaultconcat3) == 'string', 'Argument defaultconcat3 must be of type string.')
    assert(type(maxinputlength) == 'integer', 'Argument maxinputlength must be of type integer.')

    local call = natives.invoke(0x044131118D8DB3CD, 'void', texttype, windowtitle, p2, defaulttext, defaultconcat1, defaultconcat2, defaultconcat3, maxinputlength)
end

-- Returns the current status of the onscreen keyboard, and updates the output.
-- 
-- Status Codes:
-- 
-- 0 - User still editing
-- 1 - User has finished editing
-- 2 - User has canceled editing
-- 3 - Keyboard isn't active
--- @return number
natives.misc_updateOnscreenKeyboard = function()

    local call = natives.invoke(0x37DF360F235A3893, 'int')
    return call
end

-- Returns NULL unless UPDATE_ONSCREEN_KEYBOARD() returns 1 in the same tick.
--- @return string
natives.misc_getOnscreenKeyboardResult = function()

    local call = natives.invoke(0xAFB4CF58A4A292B1, 'string')
    return call
end

-- Old name: _CANCEL_ONSCREEN_KEYBOARD
natives.misc_cancelOnscreenKeyboard = function()

    local call = natives.invoke(0x58A39BE597CE99CD, 'void')
end

--- @param fontbitfield integer
natives.misc_nextOnscreenKeyboardResultWillDisplayUsingTheseFonts = function(fontbitfield)
    assert(type(fontbitfield) == 'integer', 'Argument fontbitfield must be of type integer.')

    local call = natives.invoke(0x5CB71EAA1429A358, 'void', fontbitfield)
end

-- Appears to remove stealth kill action from memory (?)
--- @param hash integer
--- @param enable boolean
natives.misc_actionManagerEnableAction = function(hash, enable)
    assert(type(hash) == 'integer', 'Argument hash must be of type integer.')
    assert(type(enable) == 'boolean', 'Argument enable must be of type boolean.')

    local call = natives.invoke(0x7ACF124C12A2B045, 'void', hash, enable)
end

--- @param hash integer
--- @return boolean
natives.misc_actionManagerIsActionEnabled = function(hash)
    assert(type(hash) == 'integer', 'Argument hash must be of type integer.')

    local call = natives.invoke(0xFD0759658268FD8E, 'bool', hash)
    return call
end

-- Returns GET_GAME_TIMER() / 1000
-- Only used in rcm_pearson1.ysc
--- @return number
natives.misc_getRealWorldTime = function()

    local call = natives.invoke(0x2E036F0480B8BF02, 'int')
    return call
end

--- @param player integer
natives.misc_setSuperJumpThisFrame = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xB3E9BE963F10C445, 'void', player)
end

--- @param numcheckpoints integer
--- @param numlaps integer
--- @param numplayers integer
--- @param p3 userdata
natives.misc_scriptRaceInit = function(numcheckpoints, numlaps, numplayers, p3)
    assert(type(numcheckpoints) == 'integer', 'Argument numcheckpoints must be of type integer.')
    assert(type(numlaps) == 'integer', 'Argument numlaps must be of type integer.')
    assert(type(numplayers) == 'integer', 'Argument numplayers must be of type integer.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x8AE059F47158417E, 'void', numcheckpoints, numlaps, numplayers, p3)
end

natives.misc_scriptRaceShutdown = function()

    local call = natives.invoke(0x334CE0DA4FAF330C, 'void')
end

--- @param part integer
--- @param checkpoint integer
--- @param lap integer
--- @param time integer
natives.misc_scriptRacePlayerHitCheckpoint = function(part, checkpoint, lap, time)
    assert(type(part) == 'integer', 'Argument part must be of type integer.')
    assert(type(checkpoint) == 'integer', 'Argument checkpoint must be of type integer.')
    assert(type(lap) == 'integer', 'Argument lap must be of type integer.')
    assert(type(time) == 'integer', 'Argument time must be of type integer.')

    local call = natives.invoke(0xBA62B4D80FA66BD6, 'void', part, checkpoint, lap, time)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return boolean
natives.misc_scriptRaceGetPlayerSplitTime = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x769E848C66E3C2BB, 'bool', p0, p1, p2)
    return call
end

-- Begins with START_*. Next character in the name is either D or E.
-- 
-- Old name: _START_BENCHMARK_RECORDING
natives.misc_startEndUserBenchmark = function()

    local call = natives.invoke(0x29D1F6DF864A094E, 'void')
end

-- Begins with STOP_*. Next character in the name is either D or E.
-- 
-- Old name: _STOP_BENCHMARK_RECORDING
natives.misc_stopEndUserBenchmark = function()

    local call = natives.invoke(0xB89AEC71AFF2B599, 'void')
end

-- Begins with RESET_*. Next character in the name is either D or E.
-- 
-- Old name: _RESET_BENCHMARK_RECORDING
natives.misc_resetEndUserBenchmark = function()

    local call = natives.invoke(0xECBABD0307FB216F, 'void')
end

-- Saves the benchmark recording to %USERPROFILE%\Documents\Rockstar Games\Red Dead Redemption 2\Benchmarks and submits some metrics.
-- 
-- Old name: _SAVE_BENCHMARK_RECORDING
natives.misc_saveEndUserBenchmark = function()

    local call = natives.invoke(0xF4743E2ECC02B3DA, 'void')
end

-- Hardcoded to return false.
-- 
-- Old name: _UI_IS_SINGLEPLAYER_PAUSE_MENU_ACTIVE
--- @return boolean
natives.misc_uiStartedEndUserBenchmark = function()

    local call = natives.invoke(0x4FFA0386A6216113, 'bool')
    return call
end

-- Returns value of the '-benchmarkIterations' command line option.
-- 
-- Old name: _GET_BENCHMARK_ITERATIONS_FROM_COMMAND_LINE
--- @return number
natives.misc_getBenchmarkIterations = function()

    local call = natives.invoke(0x22FC52CF470CC98D, 'int')
    return call
end

-- Returns value of the '-benchmarkPass' command line option.
-- 
-- Old name: _GET_BENCHMARK_PASS_FROM_COMMAND_LINE
--- @return number
natives.misc_getBenchmarkPass = function()

    local call = natives.invoke(0x9297DACF3A2CDFF7, 'int')
    return call
end

-- Hardcoded to return one/true.
--- @return any
natives.misc_n0Xdc057B86Fc157031 = function()

    local call = natives.invoke(0xDC057B86FC157031, 'any')
    return call
end

natives.misc_n0X9A252Aa23D7098F2 = function()

    local call = natives.invoke(0x9A252AA23D7098F2, 'void')
end

--- @param item integer
--- @return boolean
natives.misc_doesItemHaveValidBase = function(item)
    assert(type(item) == 'integer', 'Argument item must be of type integer.')

    local call = natives.invoke(0xBDC6E364C9C78178, 'bool', item)
    return call
end

-- 0 = invalid
-- 1 = CEntity
-- 2 = rage::volBase
-- 3 = rage::volSphere
-- 4 = rage::volBox
-- 5 = rage::volAggregate
-- 6 = rage::volCylinder
-- 7 = CScriptedCoverPoint
-- 8 = rage::ptfxScriptInfo
-- 9 = CPed
-- 10 = CVehicle
-- 11 = CObject
-- 12 = CItemSet
-- 13 = CPersistentCharacter
--- @param handle integer
--- @return number
natives.misc_getItemType = function(handle)
    assert(type(handle) == 'integer', 'Argument handle must be of type integer.')

    local call = natives.invoke(0xDC8D2FF478DF9553, 'int', handle)
    return call
end

--- @param handle integer
--- @return boolean
natives.misc_isBaseAPersistentCharacter = function(handle)
    assert(type(handle) == 'integer', 'Argument handle must be of type integer.')

    local call = natives.invoke(0x716F17F8A0419F95, 'bool', handle)
    return call
end

--- @param handle integer
--- @return boolean
natives.misc_isBaseACoverPoint = function(handle)
    assert(type(handle) == 'integer', 'Argument handle must be of type integer.')

    local call = natives.invoke(0xFEC1D4B5C82C176F, 'bool', handle)
    return call
end

-- UPDATE_PICKUP_COLLECTIBLE: set Eagle Eye fountain
-- _J*, _K*, _L*
--- @param entity integer
natives.misc_n0X553D67295Ddd2309 = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x553D67295DDD2309, 'void', entity)
end

--- @param item integer
--- @return number
natives.misc_getVolumeFromIndexedItem = function(item)
    assert(type(item) == 'integer', 'Argument item must be of type integer.')

    local call = natives.invoke(0xF18AF483DF70BBDE, 'integer', item)
    return call
end

--- @param item integer
--- @return number
natives.misc_getEntityFromItem = function(item)
    assert(type(item) == 'integer', 'Argument item must be of type integer.')

    local call = natives.invoke(0xEE04C0AFD4EFAF0E, 'int', item)
    return call
end

--- @param item integer
--- @return number
natives.misc_getPedFromIndexedItem = function(item)
    assert(type(item) == 'integer', 'Argument item must be of type integer.')

    local call = natives.invoke(0x3FFB15534067DCD4, 'int', item)
    return call
end

--- @param item integer
--- @return number
natives.misc_getVehicleFromIndexedItem = function(item)
    assert(type(item) == 'integer', 'Argument item must be of type integer.')

    local call = natives.invoke(0xE578C8AE173719B3, 'int', item)
    return call
end

--- @param item integer
--- @return number
natives.misc_getObjectFromIndexedItem = function(item)
    assert(type(item) == 'integer', 'Argument item must be of type integer.')

    local call = natives.invoke(0x18013392501CE5DC, 'integer', item)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @return any
natives.misc_n0X33982467B1E349Ef = function(p0, p1, p2, p3, p4, p5, p6)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0x33982467B1E349EF, 'any', p0, p1, p2, p3, p4, p5, p6)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.misc_n0X8314Fc2013Ece2Da = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x8314FC2013ECE2DA, 'any', p0, p1, p2)
    return call
end

natives.misc_n0X4D5C9Cc7E7E23E09 = function()

    local call = natives.invoke(0x4D5C9CC7E7E23E09, 'void')
end

-- p3 is usually the same value of radius
-- p8 determines whether the ILO prompt is a lock on prompt with RMB
--- @param entity integer
--- @param text string
--- @param radius number
--- @param p3 number
--- @param flag integer
--- @param p5 number
--- @param p6 number
--- @param prompt integer
--- @param p8 boolean
--- @param p9 integer
--- @return boolean
natives.misc_registerInteractionLockonPrompt = function(entity, text, radius, p3, flag, p5, p6, prompt, p8, p9)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(text) == 'string', 'Argument text must be of type string.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'number', 'Argument p6 must be of type number.')
    assert(type(prompt) == 'integer', 'Argument prompt must be of type integer.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')
    assert(type(p9) == 'integer', 'Argument p9 must be of type integer.')

    local call = natives.invoke(0x870708A6E147A9AD, 'bool', entity, text, radius, p3, flag, p5, p6, prompt, p8, p9)
    return call
end

--- @param entity integer
--- @return boolean
natives.misc_unregisterInteractionLockonPrompt = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xE98D55C5983F2509, 'bool', entity)
    return call
end

natives.misc_n0Xfc6Ecb9170145Ece = function()

    local call = natives.invoke(0xFC6ECB9170145ECE, 'void')
end

--- @return any
natives.misc_n0X35165C658077Cd0B = function()

    local call = natives.invoke(0x35165C658077CD0B, 'any')
    return call
end

--- @param ped integer
--- @return boolean
natives.misc_n0X4B101Dbcc9482F2D = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x4B101DBCC9482F2D, 'bool', ped)
    return call
end

--- @return boolean
natives.misc_isMissionCreatorActive = function()

    local call = natives.invoke(0xF236C84C6ADFCB2F, 'bool')
    return call
end

natives.misc_n0Xa3A8926951471C82 = function()

    local call = natives.invoke(0xA3A8926951471C82, 'void')
end

-- aiMemoryType: https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/_CREATE_AI_MEMORY
--- @param args userdata
--- @param aimemorytype integer
natives.misc_createAiMemory = function(args, aimemorytype)
    assert(type(args) == 'userdata', 'Argument args must be of type userdata.')
    assert(type(aimemorytype) == 'integer', 'Argument aimemorytype must be of type integer.')

    local call = natives.invoke(0x88BC5F4AEF77FC4E, 'void', args, aimemorytype)
end

--- @param args userdata
--- @param p1 integer
--- @return boolean
natives.misc_getAiPedDoesHaveEventMemory = function(args, p1)
    assert(type(args) == 'userdata', 'Argument args must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xFDF38E2B711BF78E, 'bool', args, p1)
    return call
end

-- Not implemented.
--- @param ped integer
--- @param p1 userdata
natives.misc_n0Xeb946B9E579729Ad = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xEB946B9E579729AD, 'void', ped, p1)
end

-- Used in CAIConditionAmbientAIMemoryReactionsEnabled
--- @param enabled boolean
natives.misc_setAiMemoryReactionsEnabled = function(enabled)
    assert(type(enabled) == 'boolean', 'Argument enabled must be of type boolean.')

    local call = natives.invoke(0x6AC4AF46A6B8DFB2, 'void', enabled)
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.misc_n0X8Db104Ccebcd58C5 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x8DB104CCEBCD58C5, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.misc_n0X68319452C5064Aba = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x68319452C5064ABA, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.misc_n0Xde2C3B74D2B3705C = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xDE2C3B74D2B3705C, 'void', p0, p1)
end

--- @param p0 integer
natives.misc_n0X49F3241C28Ebbfbc = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x49F3241C28EBBFBC, 'void', p0)
end

--- @param data userdata
natives.misc_n0X183672Fe838A661B = function(data)
    assert(type(data) == 'userdata', 'Argument data must be of type userdata.')

    local call = natives.invoke(0x183672FE838A661B, 'void', data)
end

--- @param p0 integer
natives.misc_n0X38C0C9Cae1544500 = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x38C0C9CAE1544500, 'void', p0)
end

--- @param p0 userdata
natives.misc_n0X154340E87D8Cc178 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x154340E87D8CC178, 'void', p0)
end

--- @param p0 userdata
natives.misc_n0X94Fcadcf9F0C368E = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x94FCADCF9F0C368E, 'void', p0)
end

--- @param p0 integer
--- @return boolean
natives.misc_n0X0D0Ae5081F88Cfe1 = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x0D0AE5081F88CFE1, 'bool', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.misc_n0Xaf3A84C7De6A1Dc5 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xAF3A84C7DE6A1DC5, 'void', p0, p1)
end

--- @param ped integer
--- @param p1 boolean
--- @param p2 boolean
--- @param loottablekey integer
--- @param p4 userdata
--- @param p5 userdata
natives.misc_lootTablesGetInfo = function(ped, p1, p2, loottablekey, p4, p5)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(loottablekey) == 'integer', 'Argument loottablekey must be of type integer.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0x48E4D50F87A96AA5, 'void', ped, p1, p2, loottablekey, p4, p5)
end

--- @param p0 userdata
--- @return any
natives.misc_n0Xb1F6665Aa54Dcd5C = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xB1F6665AA54DCD5C, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.misc_n0X8Bb99B85444544D9 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x8BB99B85444544D9, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @return any
natives.misc_n0X6F02B5E50511721E = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x6F02B5E50511721E, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.misc_n0Xcc1Baf72D571Db8D = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xCC1BAF72D571DB8D, 'any', p0, p1, p2)
    return call
end

--- @param ped integer
--- @return boolean
natives.misc_isPedDecomposed = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x5170DDA6D63ACAAA, 'bool', ped)
    return call
end

--- @param ped integer
--- @param toggle boolean
natives.misc_setPedDecomposed = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x674B90BE1115846D, 'void', ped, toggle)
end

--- @param p0 userdata
--- @param p1 userdata
natives.misc_n0Xab26Deee120Fd3Fd = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xAB26DEEE120FD3FD, 'void', p0, p1)
end

--- @param compositeid integer
--- @param p1 boolean
natives.misc_n0X082C043C7Afc3747 = function(compositeid, p1)
    assert(type(compositeid) == 'integer', 'Argument compositeid must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x082C043C7AFC3747, 'void', compositeid, p1)
end

--- @param compositeid integer
--- @param p1 boolean
natives.misc_disableLootingCompositeLootableThisFrame = function(compositeid, p1)
    assert(type(compositeid) == 'integer', 'Argument compositeid must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x40D72189F46D2E15, 'void', compositeid, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.misc_n0Xbb282Cf5D2333Fb8 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xBB282CF5D2333FB8, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.misc_n0Xad44856A1Cd29635 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xAD44856A1CD29635, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @return any
natives.misc_n0X38C2Bf94D15F464D = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x38C2BF94D15F464D, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.misc_n0X3A87Fda8F1B6Cdfb = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x3A87FDA8F1B6CDFB, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
natives.misc_n0X4647842Fe8F31C1E = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x4647842FE8F31C1E, 'void', p0, p1)
end

-- Event names in the scripts: MGBegin, MGEnd, ReadyForCut
--- @param ped integer
--- @param eventname string
--- @return boolean
natives.misc_getLootingEventHasFired = function(ped, eventname)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(eventname) == 'string', 'Argument eventname must be of type string.')

    local call = natives.invoke(0xF9B91C5129EABC08, 'bool', ped, eventname)
    return call
end

--- @param ped integer
--- @param item userdata
natives.misc_setLootPeltSatchelItem = function(ped, item)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(item) == 'userdata', 'Argument item must be of type userdata.')

    local call = natives.invoke(0x9B47971234169990, 'void', ped, item)
end

--- @param p0 userdata
--- @param p1 userdata
natives.misc_n0X96282005C5C6801F = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x96282005C5C6801F, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.misc_n0Xf63Fa29D4A9Aca86 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xF63FA29D4A9ACA86, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.misc_n0X8C0F6A3D7236Deeb = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x8C0F6A3D7236DEEB, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.misc_n0X7Fa58Ced69405F9A = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x7FA58CED69405F9A, 'void', p0, p1)
end

-- _CLEAR*
--- @param p0 userdata
natives.misc_n0Xa08111B053D84B4D = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xA08111B053D84B4D, 'void', p0)
end

--- @param index integer
--- @return boolean
natives.misc_isGlobalBlockValid = function(index)
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0xACB7E1418A8B6E32, 'bool', index)
    return call
end

--- @param index integer
--- @param toggle boolean
natives.misc_setGlobalBlockIsLoaded = function(index, toggle)
    assert(type(index) == 'integer', 'Argument index must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xE97240065406CB80, 'void', index, toggle)
end

--- @param transitionmode integer
--- @return boolean
natives.misc_gameFrameworkManagerInit = function(transitionmode)
    assert(type(transitionmode) == 'integer', 'Argument transitionmode must be of type integer.')

    local call = natives.invoke(0x4CABE596D632E4B0, 'bool', transitionmode)
    return call
end

natives.misc_gameFrameworkManagerShutdown = function()

    local call = natives.invoke(0xAFF2FD8ADD927585, 'void')
end

--- @return number
natives.misc_gameFrameworkManagerGetMode = function()

    local call = natives.invoke(0xFAED234C7F53ABEB, 'integer')
    return call
end

--- @return boolean
natives.misc_isPlayerOwningStandaloneSp = function()

    local call = natives.invoke(0x36040772DF5E59A0, 'bool')
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @return any
natives.misc_n0X0358B8A41916C613 = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x0358B8A41916C613, 'any', p0, p1, p2, p3)
    return call
end

-- Note: this native was added in build 1232.56
natives.misc_setGameLogicPaused = function()

    local call = natives.invoke(0x550F05CFFBD63C8C, 'void')
end

-- nullsub, doesn't do anything
natives.misc_stopCurrentLoadingProgressTimer = function()

    local call = natives.invoke(0xA565FAC215CBC77D, 'void')
end

natives.misc_n0Xdbda48Ec456Ed908 = function()

    local call = natives.invoke(0xDBDA48EC456ED908, 'void')
end

--- @param p0 userdata
--- @return boolean
natives.missiondata_missiondataIsValid = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xE54DC27571D5EDC5, 'bool', p0)
    return call
end

--- @param missionid integer
--- @return number
natives.missiondata_missiondataGetCatagory = function(missionid)
    assert(type(missionid) == 'integer', 'Argument missionid must be of type integer.')

    local call = natives.invoke(0x57E798B65C45EE17, 'integer', missionid)
    return call
end

--- @param missionid integer
--- @return number
natives.missiondata_missiondataGetTextureName = function(missionid)
    assert(type(missionid) == 'integer', 'Argument missionid must be of type integer.')

    local call = natives.invoke(0x57E798B56C45EE15, 'integer', missionid)
    return call
end

--- @param missionid integer
--- @return number
natives.missiondata_missiondataGetTextureTxd = function(missionid)
    assert(type(missionid) == 'integer', 'Argument missionid must be of type integer.')

    local call = natives.invoke(0x57E798B57C45EE16, 'integer', missionid)
    return call
end

-- see: missions.meta
--- @param missionid integer
--- @return boolean
natives.missiondata_missiondataWasCompleted = function(missionid)
    assert(type(missionid) == 'integer', 'Argument missionid must be of type integer.')

    local call = natives.invoke(0xE54DC27571D5EDC4, 'bool', missionid)
    return call
end

--- @param missionid integer
--- @return number
natives.missiondata_missiondataGetRating = function(missionid)
    assert(type(missionid) == 'integer', 'Argument missionid must be of type integer.')

    local call = natives.invoke(0x57E798B54C45EE1A, 'int', missionid)
    return call
end

-- MISSION_RATING_INCOMPLETE = 0,
-- MISSION_RATING_SKIPPED,
-- MISSION_RATING_COMPLETE,
-- MISSION_RATING_BRONZE,
-- MISSION_RATING_SILVER,
-- MISSION_RATING_GOLD,
--- @param missionid integer
--- @param rating integer
natives.missiondata_missiondataSetMissionRating = function(missionid, rating)
    assert(type(missionid) == 'integer', 'Argument missionid must be of type integer.')
    assert(type(rating) == 'integer', 'Argument rating must be of type integer.')

    local call = natives.invoke(0xE824CE7D13FCB300, 'void', missionid, rating)
end

--- @param missionid integer
--- @return boolean
natives.missiondata_missiondataIsRequiredStoryMission = function(missionid)
    assert(type(missionid) == 'integer', 'Argument missionid must be of type integer.')

    local call = natives.invoke(0xE824CE7D13FCB35E, 'bool', missionid)
    return call
end

-- replayState: MISSIONDATA_GET_REPLAY_STATE
--- @param missionid integer
--- @param replaystate integer
natives.missiondata_missiondataSetReplayStateLocked = function(missionid, replaystate)
    assert(type(missionid) == 'integer', 'Argument missionid must be of type integer.')
    assert(type(replaystate) == 'integer', 'Argument replaystate must be of type integer.')

    local call = natives.invoke(0xE4E2C581F127A11C, 'void', missionid, replaystate)
end

--- @param p0 userdata
--- @return number
natives.missiondata_missiondataGetReplayState = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x8C32D86E9556ED86, 'int', p0)
    return call
end

--- @param missionid integer
--- @param bronzescore integer
--- @param silverscore integer
--- @param goldscore integer
natives.missiondata_missiondataSetRatingScores = function(missionid, bronzescore, silverscore, goldscore)
    assert(type(missionid) == 'integer', 'Argument missionid must be of type integer.')
    assert(type(bronzescore) == 'integer', 'Argument bronzescore must be of type integer.')
    assert(type(silverscore) == 'integer', 'Argument silverscore must be of type integer.')
    assert(type(goldscore) == 'integer', 'Argument goldscore must be of type integer.')

    local call = natives.invoke(0x12F65317708749A5, 'void', missionid, bronzescore, silverscore, goldscore)
end

--- @param missionid integer
--- @param score integer
natives.missiondata_missiondataSetHighScore = function(missionid, score)
    assert(type(missionid) == 'integer', 'Argument missionid must be of type integer.')
    assert(type(score) == 'integer', 'Argument score must be of type integer.')

    local call = natives.invoke(0x3A04F0169DA87A9D, 'void', missionid, score)
end

--- @param missionid integer
--- @return number
natives.missiondata_missiondataGetHighScore = function(missionid)
    assert(type(missionid) == 'integer', 'Argument missionid must be of type integer.')

    local call = natives.invoke(0x9AABABF8313C3516, 'int', missionid)
    return call
end

--- @param category integer
--- @return boolean
natives.missiondata_missiondataIsReplayCategoryLocked = function(category)
    assert(type(category) == 'integer', 'Argument category must be of type integer.')

    local call = natives.invoke(0xE145864DECC34219, 'bool', category)
    return call
end

--- @param category integer
--- @param locked boolean
natives.missiondata_missiondataSetReplayLockedForCategory = function(category, locked)
    assert(type(category) == 'integer', 'Argument category must be of type integer.')
    assert(type(locked) == 'boolean', 'Argument locked must be of type boolean.')

    local call = natives.invoke(0x957A830C9B4B99EA, 'void', category, locked)
end

--- @param timecyclename string
natives.missiondata_missiondataTimecycleBoxSetModifier = function(timecyclename)
    assert(type(timecyclename) == 'string', 'Argument timecyclename must be of type string.')

    local call = natives.invoke(0x25855B1574BF8CD5, 'void', timecyclename)
end

natives.missiondata_missiondataTimecycleBoxDelete = function()

    local call = natives.invoke(0x7F89E15A8FB8DE97, 'void')
end

--- @return boolean
natives.missiondata_missiondataTimecycleBoxExists = function()

    local call = natives.invoke(0x7E8F86A4FA33033C, 'bool')
    return call
end

--- @return number
natives.money_moneyGetCashBalance = function()

    local call = natives.invoke(0x0C02DABFA3B98176, 'int')
    return call
end

--- @param amount integer
--- @return boolean
natives.money_moneyDecrementCashBalance = function(amount)
    assert(type(amount) == 'integer', 'Argument amount must be of type integer.')

    local call = natives.invoke(0x466BC8769CF26A7A, 'bool', amount)
    return call
end

--- @param amount integer
--- @param addreason integer
--- @return boolean
natives.money_moneyIncrementCashBalance = function(amount, addreason)
    assert(type(amount) == 'integer', 'Argument amount must be of type integer.')
    assert(type(addreason) == 'integer', 'Argument addreason must be of type integer.')

    local call = natives.invoke(0xBC3422DC91667621, 'bool', amount, addreason)
    return call
end

--- @return string
natives.money_networkGetStringCashBalance = function()

    local call = natives.invoke(0x282D36FF103D78DF, 'string')
    return call
end

--- @param cashbalance integer
--- @param goldbarbalance integer
--- @return boolean
natives.money_networkIsMoneyBalanceNotLessThan = function(cashbalance, goldbarbalance)
    assert(type(cashbalance) == 'integer', 'Argument cashbalance must be of type integer.')
    assert(type(goldbarbalance) == 'integer', 'Argument goldbarbalance must be of type integer.')

    local call = natives.invoke(0xAEC5F0119867E457, 'bool', cashbalance, goldbarbalance)
    return call
end

--- @return string
natives.money_n0Xa46Fd001D1Be896C = function()

    local call = natives.invoke(0xA46FD001D1BE896C, 'string')
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return boolean
natives.money_n0X07Ad9E43Fd478527 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x07AD9E43FD478527, 'bool', p0, p1)
    return call
end

--- @return number
natives.money_networkGetCashBalance = function()

    local call = natives.invoke(0x8A67120DBC299525, 'int')
    return call
end

--- @param p0 integer
--- @param p1 integer
--- @return boolean
natives.netshopping_cashinventoryInitSessionStatus = function(p0, p1)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xC019112F8995DC1C, 'bool', p0, p1)
    return call
end

--- @return boolean
natives.netshopping_cashinventoryIsSessionReady = function()

    local call = natives.invoke(0xFCC24220FDDAC929, 'bool')
    return call
end

--- @return boolean
natives.netshopping_cashinventoryIsConnectionFaulted = function()

    local call = natives.invoke(0x6CE9FB6332B5E46E, 'bool')
    return call
end

--- @return boolean
natives.netshopping_cashinventoryInitSessionIsFaulted = function()

    local call = natives.invoke(0xD1CE92D1D9BE170A, 'bool')
    return call
end

--- @param actionhash integer
--- @param id integer
--- @param item userdata
--- @param p3 integer
--- @return boolean
natives.netshopping_cashinventoryTransactionFireAndForgetItem = function(actionhash, id, item, p3)
    assert(type(actionhash) == 'integer', 'Argument actionhash must be of type integer.')
    assert(type(id) == 'integer', 'Argument id must be of type integer.')
    assert(type(item) == 'userdata', 'Argument item must be of type userdata.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')

    local call = natives.invoke(0xFFEA09CCEC4AF32F, 'bool', actionhash, id, item, p3)
    return call
end

--- @param id integer
--- @param type integer
--- @param actionhash integer
--- @return boolean
natives.netshopping_cashinventoryTransactionStart = function(id, type, actionhash)
    assert(type(id) == 'integer', 'Argument id must be of type integer.')
    assert(type(type) == 'integer', 'Argument type must be of type integer.')
    assert(type(actionhash) == 'integer', 'Argument actionhash must be of type integer.')

    local call = natives.invoke(0xF039EC27F4490E96, 'bool', id, type, actionhash)
    return call
end

--- @param id integer
--- @return boolean
natives.netshopping_cashinventoryTransactionGetBasketIsValid = function(id)
    assert(type(id) == 'integer', 'Argument id must be of type integer.')

    local call = natives.invoke(0x52A226ADF4A270D2, 'bool', id)
    return call
end

--- @param id integer
--- @return boolean
natives.netshopping_cashinventoryTransactionDelete = function(id)
    assert(type(id) == 'integer', 'Argument id must be of type integer.')

    local call = natives.invoke(0x59EF5D516E2D96B9, 'bool', id)
    return call
end

--- @param p0 integer
--- @param p1 userdata
--- @return number
natives.netshopping_cashinventoryTransactionValidateItem = function(p0, p1)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x6C9F12700BCE69F4, 'int', p0, p1)
    return call
end

--- @param p0 integer
--- @return number
natives.netshopping_n0X38640A8C2Def011B = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x38640A8C2DEF011B, 'int', p0)
    return call
end

--- @param p0 integer
--- @param p1 integer
--- @param p2 userdata
--- @param p3 integer
--- @param p4 userdata
--- @param p5 integer
--- @return boolean
natives.netshopping_n0Xa3B8D31C13Cb4239 = function(p0, p1, p2, p3, p4, p5)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'integer', 'Argument p5 must be of type integer.')

    local call = natives.invoke(0xA3B8D31C13CB4239, 'bool', p0, p1, p2, p3, p4, p5)
    return call
end

--- @param id integer
--- @param hash integer
--- @param p2 userdata
--- @param p3 userdata
--- @return boolean
natives.netshopping_cashinventoryTransactionAddAward = function(id, hash, p2, p3)
    assert(type(id) == 'integer', 'Argument id must be of type integer.')
    assert(type(hash) == 'integer', 'Argument hash must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x52BDE32F21BA3B6D, 'bool', id, hash, p2, p3)
    return call
end

--- @param id integer
--- @param index integer
--- @param iteminfo userdata
--- @return boolean
natives.netshopping_cashinventoryTransactionGetItemInfo = function(id, index, iteminfo)
    assert(type(id) == 'integer', 'Argument id must be of type integer.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')
    assert(type(iteminfo) == 'userdata', 'Argument iteminfo must be of type userdata.')

    local call = natives.invoke(0x7616B5F0895C2D99, 'bool', id, index, iteminfo)
    return call
end

--- @param id integer
--- @return number
natives.netshopping_cashinventoryTransactionGetNumOfItems = function(id)
    assert(type(id) == 'integer', 'Argument id must be of type integer.')

    local call = natives.invoke(0xCF2D04D076847478, 'int', id)
    return call
end

--- @param id integer
--- @return number
natives.netshopping_cashinventoryTransactionGetAction = function(id)
    assert(type(id) == 'integer', 'Argument id must be of type integer.')

    local call = natives.invoke(0xBD2D520C51CCFF52, 'integer', id)
    return call
end

--- @param id integer
--- @return boolean
natives.netshopping_cashinventoryTransactionCheckout = function(id)
    assert(type(id) == 'integer', 'Argument id must be of type integer.')

    local call = natives.invoke(0x592BC00BF6629BE7, 'bool', id)
    return call
end

--- @param id integer
--- @param status integer
--- @return boolean
natives.netshopping_cashinventoryTransactionCheckoutStatus = function(id, status)
    assert(type(id) == 'integer', 'Argument id must be of type integer.')
    assert(type(status) == 'integer', 'Argument status must be of type integer.')

    local call = natives.invoke(0x26C008791D066F37, 'bool', id, status)
    return call
end

--- @param p0 integer
--- @param p1 integer
--- @return number
natives.netshopping_n0Xb6F4557060Ef0Fb4 = function(p0, p1)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xB6F4557060EF0FB4, 'int', p0, p1)
    return call
end

--- @param id integer
--- @param index integer
--- @param iteminfo userdata
--- @return boolean
natives.netshopping_cashinventoryTransactionResponseGetItemInfo = function(id, index, iteminfo)
    assert(type(id) == 'integer', 'Argument id must be of type integer.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')
    assert(type(iteminfo) == 'userdata', 'Argument iteminfo must be of type userdata.')

    local call = natives.invoke(0x98412398BBE73F61, 'bool', id, index, iteminfo)
    return call
end

--- @param p0 integer
--- @return boolean
natives.netshopping_n0Xce54C9Abe6Fbc6Db = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0xCE54C9ABE6FBC6DB, 'bool', p0)
    return call
end

--- @param p0 integer
--- @param p1 userdata
--- @return boolean
natives.netshopping_n0Xa0B7094629724974 = function(p0, p1)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xA0B7094629724974, 'bool', p0, p1)
    return call
end

--- @param id integer
--- @param index integer
--- @param p2 userdata
--- @return boolean
natives.netshopping_n0X92A32Ba29622763F = function(id, index, p2)
    assert(type(id) == 'integer', 'Argument id must be of type integer.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x92A32BA29622763F, 'bool', id, index, p2)
    return call
end

--- @param p0 integer
--- @param p1 integer
--- @param p2 integer
--- @param p3 userdata
--- @param p4 integer
--- @return boolean
natives.netshopping_n0X3Fa09Dd57B93C0De = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')

    local call = natives.invoke(0x3FA09DD57B93C0DE, 'bool', p0, p1, p2, p3, p4)
    return call
end

--- @param p0 integer
--- @param p1 integer
--- @param p2 integer
--- @param p3 userdata
--- @param p4 integer
--- @return boolean
natives.netshopping_n0Xd1555Fbc96C88444 = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')

    local call = natives.invoke(0xD1555FBC96C88444, 'bool', p0, p1, p2, p3, p4)
    return call
end

--- @return boolean
natives.network_networkIsSignedOnline = function()

    local call = natives.invoke(0x1077788E268557C2, 'bool')
    return call
end

-- Hardcoded to return zero.
-- 
-- ==== PS4 specific info ====
-- 
-- Returns some sort of unavailable reason:
-- -1 = REASON_INVALID
--  0 = REASON_OTHER
--  1 = REASON_SYSTEM_UPDATE
--  2 = REASON_GAME_UPDATE
--  3 = REASON_SIGNED_OUT
--  4 = REASON_AGE
--  5 = REASON_CONNECTION
-- 
-- =================================
--- @return number
natives.network_networkGetNpUnavailableReason = function()

    local call = natives.invoke(0x74FB3E29E6D10FA9, 'int')
    return call
end

-- Returns whether the signed-in user has valid Rockstar Online Services (ROS) credentials.
--- @return boolean
natives.network_networkHasValidRosCredentials = function()

    local call = natives.invoke(0x85443FF4C328F53B, 'bool')
    return call
end

--- @return boolean
natives.network_networkIsCloudAvailable = function()

    local call = natives.invoke(0x9A4CF4F48AD77302, 'bool')
    return call
end

--- @return boolean
natives.network_networkHasSocialClubAccount = function()

    local call = natives.invoke(0x67A5589628E0CFF6, 'bool')
    return call
end

-- If you are host, returns true else returns false.
--- @return boolean
natives.network_networkIsHost = function()

    local call = natives.invoke(0x8DB296B814EDDA07, 'bool')
    return call
end

--- @return boolean
natives.network_networkHaveOnlinePrivileges = function()

    local call = natives.invoke(0x25CB5A9F37BFD063, 'bool')
    return call
end

--- @param p0 integer
--- @return boolean
natives.network_networkCheckUserContentPrivileges = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x595F028698072DD9, 'bool', p0)
    return call
end

--- @param p0 integer
--- @return boolean
natives.network_networkCheckCommunicationPrivileges = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x83F28CE49FBBFFBA, 'bool', p0)
    return call
end

--- @param gamerhandle userdata
--- @return boolean
natives.network_networkCanViewGamerUserContent = function(gamerhandle)
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')

    local call = natives.invoke(0x246545C37C27A717, 'bool', gamerhandle)
    return call
end

--- @param gamerhandle userdata
--- @return boolean
natives.network_n0Xf23A6D6C11D8Ec15 = function(gamerhandle)
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')

    local call = natives.invoke(0xF23A6D6C11D8EC15, 'bool', gamerhandle)
    return call
end

-- Stadia only; always returns -1 on other platforms. p0 may be a BOOL.
--- @param p0 integer
--- @return number
natives.network_n0X3E8Cce6769Db5F34 = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x3E8CCE6769DB5F34, 'int', p0)
    return call
end

-- Note: this native was added in build 1491.50
--- @param p0 integer
--- @return boolean
natives.network_n0Xdbdf80673Bba3D65 = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0xDBDF80673BBA3D65, 'bool', p0)
    return call
end

natives.network_networkShowAccountUpgradeUi = function()

    local call = natives.invoke(0x83FE8D7229593017, 'void')
end

-- Hardcoded to return false.
--- @return boolean
natives.network_networkIsPromotionEnabled = function()

    local call = natives.invoke(0x8FF6059DA26E688A, 'bool')
    return call
end

-- Hardcoded to return false.
--- @return boolean
natives.network_networkIsCustomUpsellEnabled = function()

    local call = natives.invoke(0x78A9535AF83715C6, 'bool')
    return call
end

-- Hardcoded to return false.
--- @return boolean
natives.network_networkShouldShowPromotionDlg = function()

    local call = natives.invoke(0xDA4B1A479C414FB2, 'bool')
    return call
end

-- nullsub, doesn't do anything
natives.network_n0Xfc6Fcf4C03F1Bbf6 = function()

    local call = natives.invoke(0xFC6FCF4C03F1BBF6, 'void')
end

-- nullsub, doesn't do anything
--- @return any
natives.network_n0X160F0Ce6D76A39C9 = function()

    local call = natives.invoke(0x160F0CE6D76A39C9, 'any')
    return call
end

-- Hardcoded to return zero.
--- @return number
natives.network_networkGetPromotionDlgSeenCount = function()

    local call = natives.invoke(0x2FB53C631A49BE92, 'int')
    return call
end

natives.network_n0Xe5Ff65Cff5160752 = function()

    local call = natives.invoke(0xE5FF65CFF5160752, 'void')
end

--- @param loadingstate integer
--- @return boolean
natives.network_networkCanAccessMultiplayer = function(loadingstate)
    assert(type(loadingstate) == 'integer', 'Argument loadingstate must be of type integer.')

    local call = natives.invoke(0xAF50DA1A3F8B1BA4, 'bool', loadingstate)
    return call
end

--- @return boolean
natives.network_networkCheckAccessAndAlertIfFail = function()

    local call = natives.invoke(0x2A8112A974DE1EF6, 'bool')
    return call
end

--- @param entity integer
--- @return number
natives.network_networkGetGlobalEntityFlags = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xDD7806FD0543BC3D, 'int', entity)
    return call
end

--- @param p0 boolean
natives.network_n0Xa95470Da137587F5 = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0xA95470DA137587F5, 'void', p0)
end

--- @param p0 boolean
--- @return any
natives.network_n0Xbb697756309D77Ee = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0xBB697756309D77EE, 'any', p0)
    return call
end

--- @return boolean
natives.network_networkHasCompletedMpIntroFlowOnCurrentSlot = function()

    local call = natives.invoke(0xDD73C9838CE7181D, 'bool')
    return call
end

--- @param completed boolean
--- @return boolean
natives.network_networkSetCompletedMpIntroFlowOnCurrentSlot = function(completed)
    assert(type(completed) == 'boolean', 'Argument completed must be of type boolean.')

    local call = natives.invoke(0x2C5BD9A43987AA27, 'bool', completed)
    return call
end

--- @param p0 integer
--- @return boolean
natives.network_n0Xd7D0Df27Cb1765B5 = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0xD7D0DF27CB1765B5, 'bool', p0)
    return call
end

--- @param enabled boolean
--- @param flagindex integer
--- @return boolean
natives.network_networkSetMpMissionFlagOnCurrentSlot = function(enabled, flagindex)
    assert(type(enabled) == 'boolean', 'Argument enabled must be of type boolean.')
    assert(type(flagindex) == 'integer', 'Argument flagindex must be of type integer.')

    local call = natives.invoke(0x86FD10251A7118A4, 'bool', enabled, flagindex)
    return call
end

--- @param p0 boolean
natives.network_n0X3E74A687A73979C6 = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x3E74A687A73979C6, 'void', p0)
end

-- Checks for session flag 'SF_PRIVATE'
--- @return boolean
natives.network_networkSessionIsPrivate = function()

    local call = natives.invoke(0xCEF70AA5B3F89BA1, 'bool')
    return call
end

-- Note: this native was added in build 1311.23
--- @param sessionid userdata
natives.network_networkSessionGetSessionId = function(sessionid)
    assert(type(sessionid) == 'userdata', 'Argument sessionid must be of type userdata.')

    local call = natives.invoke(0xE9B356C330C0A806, 'void', sessionid)
end

-- Note: this native was added in build 1311.23
--- @param sessionid1 userdata
--- @param sessionid2 userdata
--- @return boolean
natives.network_networkSessionAreSessionIdsEqual = function(sessionid1, sessionid2)
    assert(type(sessionid1) == 'userdata', 'Argument sessionid1 must be of type userdata.')
    assert(type(sessionid2) == 'userdata', 'Argument sessionid2 must be of type userdata.')

    local call = natives.invoke(0x4DEC5000F7B508F0, 'bool', sessionid1, sessionid2)
    return call
end

-- flags:
-- enum eSessionRequestOptionFlags
-- {
-- 	SESSION_REQUEST_OPTION_FLAG_INCLUDE_GANG_MEMBERS = (1 << 1),
-- 	SESSION_REQUEST_OPTION_FLAG_LEADER_KEEPS_GANG = (1 << 7),
-- };
-- 
-- seamlessType:
-- enum eSeamlessType
-- {
-- 	SEAMLESS_TYPE_NORMAL,
-- 	SEAMLESS_TYPE_PVE,
-- 	SEAMLESS_TYPE_DEV,
-- 	SEAMLESS_TYPE_NO_SEAMLESS
-- };
--- @param flags integer
--- @param seamlesstype integer
--- @param sessionrequestid userdata
--- @return boolean
natives.network_networkRequestSessionSeamless = function(flags, seamlesstype, sessionrequestid)
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')
    assert(type(seamlesstype) == 'integer', 'Argument seamlesstype must be of type integer.')
    assert(type(sessionrequestid) == 'userdata', 'Argument sessionrequestid must be of type userdata.')

    local call = natives.invoke(0x04019AE4956D4393, 'bool', flags, seamlesstype, sessionrequestid)
    return call
end

-- Equivalent to NETWORK_REQUEST_SESSION_SEAMLESS if userHash == 0.
-- Otherwise it is equivalent to NETWORK_SESSION_REQUEST_SESSION_COMPETITIVE(flags, MATCHTYPE_SEAMLESS, userHash, 0, sessionRequestId);
-- 
-- p1 is unused
--- @param flags integer
--- @param seamlesstype integer
--- @param userhash integer
--- @param sessionrequestid userdata
--- @return boolean
natives.network_networkSessionRequestSessionSeamless = function(flags, seamlesstype, userhash, sessionrequestid)
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')
    assert(type(seamlesstype) == 'integer', 'Argument seamlesstype must be of type integer.')
    assert(type(userhash) == 'integer', 'Argument userhash must be of type integer.')
    assert(type(sessionrequestid) == 'userdata', 'Argument sessionrequestid must be of type userdata.')

    local call = natives.invoke(0x2989E131FDE37E97, 'bool', flags, seamlesstype, userhash, sessionrequestid)
    return call
end

-- matchType:
-- enum eMatchType
-- {
-- 	MATCHTYPE_DEPRECATED,
-- 	MATCHTYPE_UGCPLAYLIST,
-- 	MATCHTYPE_UGCMISSION,
-- 	MATCHTYPE_MINIGAME,
-- 	MATCHTYPE_SEAMLESS,
-- 	MATCHTYPE_PRIVATE_DO_NOT_USE
-- };
--- @param flags integer
--- @param matchtype integer
--- @param userhash integer
--- @param p3 integer
--- @param sessionrequestid userdata
--- @return boolean
natives.network_networkSessionRequestSessionCompetitive = function(flags, matchtype, userhash, p3, sessionrequestid)
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')
    assert(type(matchtype) == 'integer', 'Argument matchtype must be of type integer.')
    assert(type(userhash) == 'integer', 'Argument userhash must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')
    assert(type(sessionrequestid) == 'userdata', 'Argument sessionrequestid must be of type userdata.')

    local call = natives.invoke(0x309BBEBEA8A3986C, 'bool', flags, matchtype, userhash, p3, sessionrequestid)
    return call
end

-- Session flag 'SF_PRIVATE' is set internally
-- p1 represents max amount of players in private session
--- @param flags integer
--- @param numplayers integer
--- @param userhash integer
--- @param sessionrequestid userdata
--- @return boolean
natives.network_networkSessionRequestSessionPrivate = function(flags, numplayers, userhash, sessionrequestid)
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')
    assert(type(numplayers) == 'integer', 'Argument numplayers must be of type integer.')
    assert(type(userhash) == 'integer', 'Argument userhash must be of type integer.')
    assert(type(sessionrequestid) == 'userdata', 'Argument sessionrequestid must be of type userdata.')

    local call = natives.invoke(0x39A8EF7AF29A192C, 'bool', flags, numplayers, userhash, sessionrequestid)
    return call
end

-- category:
-- enum eOnCallType
-- {
-- 	NETWORK_SESSION_REQUEST_ON_CALL_TYPE_STORY = 2,
-- 	NETWORK_SESSION_REQUEST_ON_CALL_TYPE_MATCH = 3
-- };
--- @param flags integer
--- @param category integer
--- @param p2 userdata
--- @param userhash integer
--- @param sessionrequestid userdata
--- @return boolean
natives.network_networkSessionRequestSessionOnCall = function(flags, category, p2, userhash, sessionrequestid)
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')
    assert(type(category) == 'integer', 'Argument category must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(userhash) == 'integer', 'Argument userhash must be of type integer.')
    assert(type(sessionrequestid) == 'userdata', 'Argument sessionrequestid must be of type userdata.')

    local call = natives.invoke(0x23D9C1F2E4098EDC, 'bool', flags, category, p2, userhash, sessionrequestid)
    return call
end

--- @param flags integer
--- @param userhash integer
--- @param p2 integer
--- @param sessionrequestid userdata
--- @return boolean
natives.network_networkSessionRequestSessionNominated = function(flags, userhash, p2, sessionrequestid)
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')
    assert(type(userhash) == 'integer', 'Argument userhash must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(sessionrequestid) == 'userdata', 'Argument sessionrequestid must be of type userdata.')

    local call = natives.invoke(0x4F4672457FF597D1, 'bool', flags, userhash, p2, sessionrequestid)
    return call
end

--- @param sessionrequestid userdata
--- @return boolean
natives.network_networkSessionIsSessionRequestIdValid = function(sessionrequestid)
    assert(type(sessionrequestid) == 'userdata', 'Argument sessionrequestid must be of type userdata.')

    local call = natives.invoke(0x2F54B146D3EDCE4D, 'bool', sessionrequestid)
    return call
end

--- @return number
natives.network_networkSessionGetSessionType = function()

    local call = natives.invoke(0xF0C0C94B404206FA, 'int')
    return call
end

--- @return number
natives.network_n0X1413B6Bf27Ab7A95 = function()

    local call = natives.invoke(0x1413B6BF27AB7A95, 'int')
    return call
end

--- @return boolean
natives.network_networkSessionIsAnyRequestInProgress = function()

    local call = natives.invoke(0xBAFFDE5F953720D9, 'bool')
    return call
end

--- @param sessionrequestid userdata
--- @return boolean
natives.network_n0Xafa14F98327791Ce = function(sessionrequestid)
    assert(type(sessionrequestid) == 'userdata', 'Argument sessionrequestid must be of type userdata.')

    local call = natives.invoke(0xAFA14F98327791CE, 'bool', sessionrequestid)
    return call
end

--- @param sessionrequestid userdata
--- @return boolean
natives.network_networkSessionIsRequestInProgress = function(sessionrequestid)
    assert(type(sessionrequestid) == 'userdata', 'Argument sessionrequestid must be of type userdata.')

    local call = natives.invoke(0x8FB7C254CFCBF78E, 'bool', sessionrequestid)
    return call
end

--- @param queuegroup integer
--- @return boolean
natives.network_networkSessionIsRequestInProgressByQueueGroup = function(queuegroup)
    assert(type(queuegroup) == 'integer', 'Argument queuegroup must be of type integer.')

    local call = natives.invoke(0x9E762A595CF88E4A, 'bool', queuegroup)
    return call
end

--- @param sessionrequestid userdata
--- @return boolean
natives.network_networkSessionCancelRequest = function(sessionrequestid)
    assert(type(sessionrequestid) == 'userdata', 'Argument sessionrequestid must be of type userdata.')

    local call = natives.invoke(0xE72E5C1289BD1F40, 'bool', sessionrequestid)
    return call
end

--- @param p0 userdata
natives.network_n0Xa6F1Baabff6Ad7B9 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xA6F1BAABFF6AD7B9, 'void', p0)
end

-- Returns result of session request:
-- 0 - NOT_FOUND
-- 1 - IN_PROGRESS
-- 2 - TIMEOUT
-- 3 - PLAYER_OFFLINE
-- 4 - GANG_MEMBERS_CHANGED
-- 5 - PLAYER_CANCELLED
-- 6 - PLAYER_SET_TOO_LARGE
-- 7 - MATCH_ACCEPTED
-- 8 - OTHER
--- @param sessionrequestid userdata
--- @param p1 integer
--- @return number
natives.network_networkSessionGetSessionRequestResult = function(sessionrequestid, p1)
    assert(type(sessionrequestid) == 'userdata', 'Argument sessionrequestid must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x0DD051B1BF4B8BD6, 'int', sessionrequestid, p1)
    return call
end

--- @param sessionrequestid userdata
--- @return boolean
natives.network_networkSessionIsRequestPendingTransition = function(sessionrequestid)
    assert(type(sessionrequestid) == 'userdata', 'Argument sessionrequestid must be of type userdata.')

    local call = natives.invoke(0xCCF878D50F8AB10D, 'bool', sessionrequestid)
    return call
end

--- @param sessionrequestid userdata
--- @return boolean
natives.network_networkSessionTransitionToSession = function(sessionrequestid)
    assert(type(sessionrequestid) == 'userdata', 'Argument sessionrequestid must be of type userdata.')

    local call = natives.invoke(0xF20B18A330E6DB5C, 'bool', sessionrequestid)
    return call
end

--- @param sessionrequestid userdata
--- @return boolean
natives.network_networkSessionIsNsrrSuccess = function(sessionrequestid)
    assert(type(sessionrequestid) == 'userdata', 'Argument sessionrequestid must be of type userdata.')

    local call = natives.invoke(0x0F44A5C78D114922, 'bool', sessionrequestid)
    return call
end

--- @param sessionrequestid userdata
--- @return boolean
natives.network_networkSessionLeftQueueOrRequestedSession = function(sessionrequestid)
    assert(type(sessionrequestid) == 'userdata', 'Argument sessionrequestid must be of type userdata.')

    local call = natives.invoke(0xECE6A0C1B59CD8BE, 'bool', sessionrequestid)
    return call
end

--- @return boolean
natives.network_networkSessionLeaveSession = function()

    local call = natives.invoke(0x17C21B7319A05047, 'bool')
    return call
end

--- @return boolean
natives.network_networkSessionIsTransitioning = function()

    local call = natives.invoke(0xF2CBC969C4F090C7, 'bool')
    return call
end

-- Only used in R* Script startup_clip
natives.network_n0Xfd4272A137703449 = function()

    local call = natives.invoke(0xFD4272A137703449, 'void')
end

-- Only used in R* Script net_rolling_playlist
natives.network_networkSessionPlaylistGoToNextContent = function()

    local call = natives.invoke(0xBDE605F925B07127, 'void')
end

-- Only used in R* Script net_rolling_playlist
natives.network_networkSessionPlaylistGetUpcomingContent = function()

    local call = natives.invoke(0x8F9DB6CD03B42B58, 'void')
end

natives.network_networkDisableRealtimeMultiplayer = function()

    local call = natives.invoke(0x236905C700FDB54D, 'void')
end

-- Only used in R* Script fm_race_controller
--- @param p0 boolean
natives.network_n0X71Fa2D1880C48032 = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x71FA2D1880C48032, 'void', p0)
end

--- @param hours integer
--- @param minutes integer
--- @param seconds integer
natives.network_networkGetGlobalMultiplayerClock = function(hours, minutes, seconds)
    assert(type(hours) == 'integer', 'Argument hours must be of type integer.')
    assert(type(minutes) == 'integer', 'Argument minutes must be of type integer.')
    assert(type(seconds) == 'integer', 'Argument seconds must be of type integer.')

    local call = natives.invoke(0x6D03BFBD643B2A02, 'void', hours, minutes, seconds)
end

natives.network_networkClearClockTimeOverride = function()

    local call = natives.invoke(0xD972DF67326F966E, 'void')
end

--- @return boolean
natives.network_networkIsClockTimeOverridden = function()

    local call = natives.invoke(0xD7C95D322FF57522, 'bool')
    return call
end

--- @param hour integer
--- @param minute integer
--- @param second integer
--- @return boolean
natives.network_networkGetGlobalClock = function(hour, minute, second)
    assert(type(hour) == 'integer', 'Argument hour must be of type integer.')
    assert(type(minute) == 'integer', 'Argument minute must be of type integer.')
    assert(type(second) == 'integer', 'Argument second must be of type integer.')

    local call = natives.invoke(0x11A7ADCD629E170F, 'bool', hour, minute, second)
    return call
end

--- @param hour integer
--- @param minute integer
--- @param second integer
--- @param transitiontime integer
--- @param pauseclock boolean
natives.network_networkClockTimeOverride = function(hour, minute, second, transitiontime, pauseclock)
    assert(type(hour) == 'integer', 'Argument hour must be of type integer.')
    assert(type(minute) == 'integer', 'Argument minute must be of type integer.')
    assert(type(second) == 'integer', 'Argument second must be of type integer.')
    assert(type(transitiontime) == 'integer', 'Argument transitiontime must be of type integer.')
    assert(type(pauseclock) == 'boolean', 'Argument pauseclock must be of type boolean.')

    local call = natives.invoke(0x669E223E64B1903C, 'void', hour, minute, second, transitiontime, pauseclock)
end

--- @param hour integer
--- @param minute integer
--- @param second integer
--- @param transitiontime integer
--- @param pauseclock boolean
--- @param clockwise boolean
natives.network_networkClockTimeOverride2 = function(hour, minute, second, transitiontime, pauseclock, clockwise)
    assert(type(hour) == 'integer', 'Argument hour must be of type integer.')
    assert(type(minute) == 'integer', 'Argument minute must be of type integer.')
    assert(type(second) == 'integer', 'Argument second must be of type integer.')
    assert(type(transitiontime) == 'integer', 'Argument transitiontime must be of type integer.')
    assert(type(pauseclock) == 'boolean', 'Argument pauseclock must be of type boolean.')
    assert(type(clockwise) == 'boolean', 'Argument clockwise must be of type boolean.')

    local call = natives.invoke(0xE28C13ECC36FF14E, 'void', hour, minute, second, transitiontime, pauseclock, clockwise)
end

--- @param milliseconds integer
natives.network_networkClearClockOverrideOvertime = function(milliseconds)
    assert(type(milliseconds) == 'integer', 'Argument milliseconds must be of type integer.')

    local call = natives.invoke(0x65F040D91001ED4B, 'void', milliseconds)
end

--- @return boolean
natives.network_n0X0E54D4Da6018Ff8E = function()

    local call = natives.invoke(0x0E54D4DA6018FF8E, 'bool')
    return call
end

--- @return boolean
natives.network_networkIsFindingGamers = function()

    local call = natives.invoke(0xDDDF64C91BFCF0AA, 'bool')
    return call
end

--- @return boolean
natives.network_networkDidFindGamersSucceed = function()

    local call = natives.invoke(0xF9B83B77929D8863, 'bool')
    return call
end

--- @param outdata userdata
--- @param p1 integer
--- @return number
natives.network_n0X7Bca0A3972708436 = function(outdata, p1)
    assert(type(outdata) == 'userdata', 'Argument outdata must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x7BCA0A3972708436, 'int', outdata, p1)
    return call
end

natives.network_networkClearFoundGamers = function()

    local call = natives.invoke(0x6D14CCEE1B40381A, 'void')
end

--- @param data userdata
--- @param count integer
--- @return boolean
natives.network_networkGetGamerSessionFromHandle = function(data, count)
    assert(type(data) == 'userdata', 'Argument data must be of type userdata.')
    assert(type(count) == 'integer', 'Argument count must be of type integer.')

    local call = natives.invoke(0xFBDFE1C1356E12E8, 'bool', data, count)
    return call
end

--- @return boolean
natives.network_networkHasCurrentGetGamerStatusStarted = function()

    local call = natives.invoke(0x25189F9908E9CD65, 'bool')
    return call
end

--- @return boolean
natives.network_networkDidGetGamerStatusSucceed = function()

    local call = natives.invoke(0x5AE17C6B0134B7F1, 'bool')
    return call
end

--- @param gamerhandle userdata
--- @param p1 integer
--- @return number
natives.network_networkGetGamerStatus = function(gamerhandle, p1)
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xDDAEB478E58F8DEA, 'int', gamerhandle, p1)
    return call
end

natives.network_networkClearGetGamerStatus = function()

    local call = natives.invoke(0x86E0660E4F5C956D, 'void')
end

--- @param toggle boolean
natives.network_networkSetScriptReadyForEvents = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x7AC752103856FB20, 'void', toggle)
end

-- Note: this native was added in build 1311.23
--- @return boolean
natives.network_n0X316Fd416C432C761 = function()

    local call = natives.invoke(0x316FD416C432C761, 'bool')
    return call
end

-- Note: this native was added in build 1311.23
--- @return boolean
natives.network_n0X062842D61D0D53Fd = function()

    local call = natives.invoke(0x062842D61D0D53FD, 'bool')
    return call
end

--- @return boolean
natives.network_networkIsGameInProgress = function()

    local call = natives.invoke(0x10FAB35428CCC9D7, 'bool')
    return call
end

--- @return boolean
natives.network_networkIsSessionActive = function()

    local call = natives.invoke(0xD83C2B94E7508980, 'bool')
    return call
end

--- @return boolean
natives.network_networkIsInSession = function()

    local call = natives.invoke(0xCA97246103B63917, 'bool')
    return call
end

-- Hardcoded to return false.
--- @return boolean
natives.network_networkIsInSessionLobby = function()

    local call = natives.invoke(0xC5196C42DE19F646, 'bool')
    return call
end

--- @return boolean
natives.network_networkIsSessionStarted = function()

    local call = natives.invoke(0x9DE624D2FC4B603F, 'bool')
    return call
end

--- @return boolean
natives.network_networkCanSessionEnd = function()

    local call = natives.invoke(0x4EEBC3694E49C572, 'bool')
    return call
end

--- @return number
natives.network_networkGetGameMode = function()

    local call = natives.invoke(0x225640E09EFFDC3F, 'int')
    return call
end

-- enum eSessionFlags
-- {
-- 	SESSION_FLAG_NONE = 0,
-- 	SF_INSTANCE = (1 << 0),
-- 	SF_MATCH = (1 << 1),
-- 	SF_PRIVATE = (1 << 2),
-- 	SF_BLOCK_INVITES = (1 << 3),
-- 	SF_BLOCK_JOIN_VIA_PRESENCE = (1 << 4),
-- 	SF_BLOCK_NON_HOST_INVITES = (1 << 5),
-- 	SF_BLOCK_IN_PROGRESS_MATCHMAKING_BACKFILL = (1 << 6),
-- 	SF_BLOCK_IN_GAMEPLAY_MATCHMAKING_BACKFILL = (1 << 7),
-- 	SF_BLOCK_INVITES_TEMPORARY = (1 << 8),
-- 	SF_IN_GAMEPLAY = (1 << 9),
-- 	SF_COMPETITIVE = (1 << 10),
-- 	SF_MATCHMAKING_BACKFILL_IS_BLOCKED = (1 << 11)
-- };
--- @param flags integer
--- @return boolean
natives.network_networkSessionAddSessionFlags = function(flags)
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')

    local call = natives.invoke(0xE546BDA1B3E288EE, 'bool', flags)
    return call
end

-- See _NETWORK_SESSION_ADD_SESSION_FLAGS
--- @param flags integer
--- @return boolean
natives.network_networkSessionRemoveSessionFlags = function(flags)
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')

    local call = natives.invoke(0x78335E12DB0BF961, 'bool', flags)
    return call
end

--- @return number
natives.network_networkSessionGetSessionFlags = function()

    local call = natives.invoke(0x51F33DBC1A41CBFD, 'int')
    return call
end

--- @param flags integer
--- @return boolean
natives.network_networkSessionSetPlayerFlags = function(flags)
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')

    local call = natives.invoke(0x0AE241A4A9ADEEEC, 'bool', flags)
    return call
end

--- @param flags integer
--- @return boolean
natives.network_networkSessionRemovePlayerFlags = function(flags)
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')

    local call = natives.invoke(0x3215BBE34D3418C5, 'bool', flags)
    return call
end

--- @return number
natives.network_networkGetSessionHost = function()

    local call = natives.invoke(0x8DC9AA3B508B1A85, 'int')
    return call
end

--- @return any
natives.network_n0Xd3A3C8B9F3Bdef81 = function()

    local call = natives.invoke(0xD3A3C8B9F3BDEF81, 'any')
    return call
end

--- @return boolean
natives.network_n0X18B94666Cf610Aeb = function()

    local call = natives.invoke(0x18B94666CF610AEB, 'bool')
    return call
end

--- @param inviteindex integer
--- @return boolean
natives.network_n0X981146E5C9Ce9250 = function(inviteindex)
    assert(type(inviteindex) == 'integer', 'Argument inviteindex must be of type integer.')

    local call = natives.invoke(0x981146E5C9CE9250, 'bool', inviteindex)
    return call
end

--- @return number
natives.network_n0Xbf8276E51761F9Da = function()

    local call = natives.invoke(0xBF8276E51761F9DA, 'int')
    return call
end

--- @param p0 userdata
--- @return boolean
natives.network_n0Xdca4A74135E1Dea5 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xDCA4A74135E1DEA5, 'bool', p0)
    return call
end

--- @return boolean
natives.network_networkHasPendingInviteFailure = function()

    local call = natives.invoke(0xD0498AD30E16B6BD, 'bool')
    return call
end

--- @param gamerhandle userdata
--- @return boolean
natives.network_networkCanReceiveInviteFromHandle = function(gamerhandle)
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')

    local call = natives.invoke(0xF23D6475640D29EB, 'bool', gamerhandle)
    return call
end

--- @param setting boolean
natives.network_n0X704F92B3Af20D857 = function(setting)
    assert(type(setting) == 'boolean', 'Argument setting must be of type boolean.')

    local call = natives.invoke(0x704F92B3AF20D857, 'void', setting)
end

--- @param p0 userdata
natives.network_n0Xf342F6Bd0A8287D5 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xF342F6BD0A8287D5, 'void', p0)
end

natives.network_n0Xd39A72Ae5Ebd57E5 = function()

    local call = natives.invoke(0xD39A72AE5EBD57E5, 'void')
end

--- @param gamerhandle userdata
--- @param contentid string
--- @param data userdata
--- @param datasize integer
--- @param p4 integer
--- @param flags integer
--- @return boolean
natives.network_networkSendSessionInvite = function(gamerhandle, contentid, data, datasize, p4, flags)
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')
    assert(type(contentid) == 'string', 'Argument contentid must be of type string.')
    assert(type(data) == 'userdata', 'Argument data must be of type userdata.')
    assert(type(datasize) == 'integer', 'Argument datasize must be of type integer.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')

    local call = natives.invoke(0xE47001B7CB8B98AE, 'bool', gamerhandle, contentid, data, datasize, p4, flags)
    return call
end

--- @param p0 integer
--- @return boolean
natives.network_n0Xd1Ffb246F4E088Ac = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0xD1FFB246F4E088AC, 'bool', p0)
    return call
end

--- @param p0 integer
--- @return number
natives.network_n0X27B1Ae4D8C652F08 = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x27B1AE4D8C652F08, 'int', p0)
    return call
end

--- @param p0 integer
--- @return number
natives.network_n0X6C27442A225A241A = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x6C27442A225A241A, 'int', p0)
    return call
end

--- @param p0 integer
--- @return string
natives.network_n0Xe59F4924Bd3A718D = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0xE59F4924BD3A718D, 'string', p0)
    return call
end

-- Note: this native was added in build 1436.31
--- @param p0 integer
--- @return number
natives.network_n0X78271Bc02Ae9Af83 = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x78271BC02AE9AF83, 'int', p0)
    return call
end

--- @param p0 integer
--- @param gamerhandle userdata
--- @return boolean
natives.network_n0X16Efb123C4451032 = function(p0, gamerhandle)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')

    local call = natives.invoke(0x16EFB123C4451032, 'bool', p0, gamerhandle)
    return call
end

--- @param p0 integer
--- @return string
natives.network_n0Xe79Ba3Bc265895Da = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0xE79BA3BC265895DA, 'string', p0)
    return call
end

--- @param p0 integer
--- @param p1 userdata
--- @param p2 integer
--- @return any
natives.network_n0Xc0Cffda87C2C163D = function(p0, p1, p2)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0xC0CFFDA87C2C163D, 'any', p0, p1, p2)
    return call
end

--- @param p0 integer
--- @return any
natives.network_n0X5Ed39Da62Beb1330 = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x5ED39DA62BEB1330, 'any', p0)
    return call
end

--- @param p0 integer
--- @return boolean
natives.network_networkAcceptRsInvite = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0xB2CEA5105AAC8DDE, 'bool', p0)
    return call
end

--- @param p0 integer
--- @return boolean
natives.network_n0X3Aa0Cdc63696166D = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x3AA0CDC63696166D, 'bool', p0)
    return call
end

--- @param p0 userdata
--- @return number
natives.network_networkRequestJoin = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xE483BB6BE686F632, 'int', p0)
    return call
end

--- @param p0 userdata
--- @return number
natives.network_n0Xe8E633215471Bb5D = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xE8E633215471BB5D, 'int', p0)
    return call
end

--- @param p0 userdata
--- @return boolean
natives.network_n0Xa2837A5E21Fb5A58 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xA2837A5E21FB5A58, 'bool', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return boolean
natives.network_n0Xe39600E50D608693 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xE39600E50D608693, 'bool', p0, p1)
    return call
end

--- @param p0 userdata
--- @return boolean
natives.network_n0Xd7Bad4062074B9C1 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xD7BAD4062074B9C1, 'bool', p0)
    return call
end

--- @param p0 userdata
--- @return number
natives.network_n0Xca58D4Fd20D70F24 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xCA58D4FD20D70F24, 'int', p0)
    return call
end

--- @param p0 userdata
--- @return boolean
natives.network_n0Xc028B3F52C707C49 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xC028B3F52C707C49, 'bool', p0)
    return call
end

--- @return boolean
natives.network_networkIsPlatformInvitePending = function()

    local call = natives.invoke(0xFC4165C9165C166F, 'bool')
    return call
end

natives.network_n0X5B9C6Ac118Fd4774 = function()

    local call = natives.invoke(0x5B9C6AC118FD4774, 'void')
end

--- @return number
natives.network_networkGetPlatformInviteId = function()

    local call = natives.invoke(0x9BCF28FB5D65A9BE, 'int')
    return call
end

--- @return boolean
natives.network_networkActionPlatformInvite = function()

    local call = natives.invoke(0x3B82ACC3F4B6240C, 'bool')
    return call
end

natives.network_networkClearPlatformInvite = function()

    local call = natives.invoke(0xA4484173759749B1, 'void')
end

--- @param p0 boolean
natives.network_n0X603469298A4308Af = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x603469298A4308AF, 'void', p0)
end

-- Returns value of fwuiCachedSetting "general.onlineNotificationsInStoryMode"
--- @return boolean
natives.network_networkAreOnlineNotificationsShownInStoryMode = function()

    local call = natives.invoke(0xF5C5929E07512F80, 'bool')
    return call
end

-- Hardcoded to return false.
--- @return boolean
natives.network_networkIsInPlatformParty = function()

    local call = natives.invoke(0x2FC5650B0271CB57, 'bool')
    return call
end

--- @param gamerhandle1 userdata
--- @param gamerhandle2 userdata
--- @return boolean
natives.network_networkArePlayersInSamePlatformParty = function(gamerhandle1, gamerhandle2)
    assert(type(gamerhandle1) == 'userdata', 'Argument gamerhandle1 must be of type userdata.')
    assert(type(gamerhandle2) == 'userdata', 'Argument gamerhandle2 must be of type userdata.')

    local call = natives.invoke(0x11820D1AE80DEA39, 'bool', gamerhandle1, gamerhandle2)
    return call
end

-- Hardcoded to return false.
--- @return boolean
natives.network_networkIsInPlatformPartyChat = function()

    local call = natives.invoke(0xFD8B834A8BA05048, 'bool')
    return call
end

--- @param seed integer
natives.network_networkSeedRandomNumberGenerator = function(seed)
    assert(type(seed) == 'integer', 'Argument seed must be of type integer.')

    local call = natives.invoke(0xF1B84178F8674195, 'void', seed)
end

--- @param rangestart integer
--- @param rangeend integer
--- @return number
natives.network_networkGetRandomIntRanged = function(rangestart, rangeend)
    assert(type(rangestart) == 'integer', 'Argument rangestart must be of type integer.')
    assert(type(rangeend) == 'integer', 'Argument rangeend must be of type integer.')

    local call = natives.invoke(0xE30CF56F1EFA5F43, 'int', rangestart, rangeend)
    return call
end

--- @param maxnummissionparticipants integer
--- @param p1 boolean
--- @param instanceid integer
natives.network_networkSetThisScriptIsNetworkScript = function(maxnummissionparticipants, p1, instanceid)
    assert(type(maxnummissionparticipants) == 'integer', 'Argument maxnummissionparticipants must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(instanceid) == 'integer', 'Argument instanceid must be of type integer.')

    local call = natives.invoke(0x1CA59E306ECB80A5, 'void', maxnummissionparticipants, p1, instanceid)
end

--- @return boolean
natives.network_networkGetThisScriptIsNetworkScript = function()

    local call = natives.invoke(0x2910669969E9535E, 'bool')
    return call
end

-- Seems to always return 0, but it's used in quite a few loops.
-- 
-- for (num3 = 0; num3 < NETWORK::0xCCD8C02D(); num3++)
--     {
--         if (NETWORK::NETWORK_IS_PARTICIPANT_ACTIVE(PLAYER::0x98F3B274(num3)) != 0)
--         {
--             var num5 = NETWORK::NETWORK_GET_PLAYER_INDEX(PLAYER::0x98F3B274(num3));
--- @return number
natives.network_networkGetMaxNumParticipants = function()

    local call = natives.invoke(0xA6C90FBC38E395EE, 'int')
    return call
end

--- @return number
natives.network_networkGetNumParticipants = function()

    local call = natives.invoke(0x18D0456E86604654, 'int')
    return call
end

--- @return number
natives.network_networkGetScriptStatus = function()

    local call = natives.invoke(0x57D158647A6BFABF, 'int')
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.network_networkRegisterHostBroadcastVariables = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x3E9B2F01C50DF595, 'void', p0, p1, p2)
end

--- @param p0 integer
--- @return number
natives.network_networkGetSizeOfHostBroadcastDataStorage = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0xBA24095EA96DFE17, 'int', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.network_networkRegisterPlayerBroadcastVariables = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x3364AA97340CA215, 'void', p0, p1, p2)
end

--- @param p0 integer
--- @return number
natives.network_networkGetSizeOfPlayerBroadcastDataStorage = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x690806BC83BC8CA2, 'int', p0)
    return call
end

--- @return boolean
natives.network_networkHasReceivedHostBroadcastData = function()

    local call = natives.invoke(0x5D10B3795F3FC886, 'bool')
    return call
end

--- @param player integer
--- @return number
natives.network_networkGetPlayerIndex = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x24FB80D107371267, 'int', player)
    return call
end

--- @param index integer
--- @return number
natives.network_networkGetParticipantIndex = function(index)
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0x1B84DF6AF2A46938, 'int', index)
    return call
end

-- Returns the Player associated to a given Ped when in an online session.
--- @param ped integer
--- @return number
natives.network_networkGetPlayerIndexFromPed = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x6C0E2E0125610278, 'int', ped)
    return call
end

-- Returns the amount of players connected in the current session. Only works when connected to a session/server.
--- @return number
natives.network_networkGetNumConnectedPlayers = function()

    local call = natives.invoke(0xA4A79DD2D9600654, 'int')
    return call
end

--- @param player integer
--- @return boolean
natives.network_networkIsPlayerConnected = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x93DC1BE4E1ABE9D1, 'bool', player)
    return call
end

--- @return number
natives.network_networkGetTotalNumPlayers = function()

    local call = natives.invoke(0xCF61D4B4702EE9EB, 'int')
    return call
end

--- @param p0 integer
--- @return boolean
natives.network_networkIsParticipantActive = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x6FF8FF40B6357D45, 'bool', p0)
    return call
end

--- @param player integer
--- @return boolean
natives.network_networkIsPlayerActive = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xB8DFD30D6973E135, 'bool', player)
    return call
end

--- @param player integer
--- @return boolean
natives.network_networkIsPlayerAParticipant = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x3CA58F6CB7CBD784, 'bool', player)
    return call
end

--- @return boolean
natives.network_networkIsHostOfThisScript = function()

    local call = natives.invoke(0x83CD99A1E6061AB5, 'bool')
    return call
end

--- @return number
natives.network_networkGetHostOfThisScript = function()

    local call = natives.invoke(0xC7B4D79B01FA7A5C, 'int')
    return call
end

--- @param scriptname string
--- @param p1 integer
--- @param p2 integer
--- @return number
natives.network_networkGetHostOfScript = function(scriptname, p1, p2)
    assert(type(scriptname) == 'string', 'Argument scriptname must be of type string.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x1D6A14F1F9A736FC, 'int', scriptname, p1, p2)
    return call
end

--- @param threadid integer
--- @return number
natives.network_networkGetHostOfThread = function(threadid)
    assert(type(threadid) == 'integer', 'Argument threadid must be of type integer.')

    local call = natives.invoke(0xB4A25351D79B444C, 'int', threadid)
    return call
end

natives.network_networkSetMissionFinished = function()

    local call = natives.invoke(0x3B3D11CD9FFCDFC9, 'void')
end

--- @param scriptname string
--- @param p1 integer
--- @param p2 boolean
--- @param p3 integer
--- @return boolean
natives.network_networkIsScriptActive = function(scriptname, p1, p2, p3)
    assert(type(scriptname) == 'string', 'Argument scriptname must be of type string.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')

    local call = natives.invoke(0x9D40DF90FAD26098, 'bool', scriptname, p1, p2, p3)
    return call
end

--- @param scripthash integer
--- @param p1 integer
--- @param p2 boolean
--- @param p3 integer
--- @return boolean
natives.network_networkIsScriptActiveByHash = function(scripthash, p1, p2, p3)
    assert(type(scripthash) == 'integer', 'Argument scripthash must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')

    local call = natives.invoke(0x1B89BC43B6E69107, 'bool', scripthash, p1, p2, p3)
    return call
end

--- @param threadid integer
--- @return boolean
natives.network_networkIsThreadActive = function(threadid)
    assert(type(threadid) == 'integer', 'Argument threadid must be of type integer.')

    local call = natives.invoke(0x31DAD2CD6D49546E, 'bool', threadid)
    return call
end

--- @param threadid integer
--- @return number
natives.network_networkGetInstanceIdOfThread = function(threadid)
    assert(type(threadid) == 'integer', 'Argument threadid must be of type integer.')

    local call = natives.invoke(0xFB9ECED5B68F3B78, 'int', threadid)
    return call
end

--- @param scriptname string
--- @param instanceid integer
--- @param position integer
--- @return number
natives.network_networkGetNumScriptParticipants = function(scriptname, instanceid, position)
    assert(type(scriptname) == 'string', 'Argument scriptname must be of type string.')
    assert(type(instanceid) == 'integer', 'Argument instanceid must be of type integer.')
    assert(type(position) == 'integer', 'Argument position must be of type integer.')

    local call = natives.invoke(0x3658E8CD94FC121A, 'int', scriptname, instanceid, position)
    return call
end

--- @return number
natives.network_networkGetInstanceIdOfThisScript = function()

    local call = natives.invoke(0x638A3A81733086DB, 'int')
    return call
end

--- @param p0 integer
--- @param p1 userdata
--- @param p2 userdata
--- @return boolean
natives.network_networkIsPlayerAParticipantOnScript = function(p0, p1, p2)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x1AD5B71586B94820, 'bool', p0, p1, p2)
    return call
end

natives.network_networkPreventScriptHostMigration = function()

    local call = natives.invoke(0x2302C0264EA58D31, 'void')
end

--- @param featureid integer
--- @return boolean
natives.network_networkIsFeatureSupported = function(featureid)
    assert(type(featureid) == 'integer', 'Argument featureid must be of type integer.')

    local call = natives.invoke(0x9C725D149622BFDE, 'bool', featureid)
    return call
end

-- Return the local Participant ID
--- @return number
natives.network_participantId = function()

    local call = natives.invoke(0x90986E8876CE0A83, 'int')
    return call
end

-- Return the local Participant ID.
-- 
-- This native is exactly the same as 'PARTICIPANT_ID' native.
--- @return number
natives.network_participantIdToInt = function()

    local call = natives.invoke(0x57A3BDDAD8E5AA0A, 'int')
    return call
end

--- @param netid integer
--- @param weaponhash integer
--- @return number
natives.network_networkGetDestroyerOfNetworkId = function(netid, weaponhash)
    assert(type(netid) == 'integer', 'Argument netid must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0x7A1ADEEF01740A24, 'int', netid, weaponhash)
    return call
end

-- _NETWORK_GET_A* - _NETWORK_GET_D*
--- @param ped integer
--- @param p1 userdata
--- @return number
natives.network_n0X6Cf82A7F65A5Ad5F = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x6CF82A7F65A5AD5F, 'int', ped, p1)
    return call
end

-- _NETWORK_GET_A* - _NETWORK_GET_D*
--- @param player integer
--- @param ped integer
--- @param p2 userdata
--- @return boolean
natives.network_n0X236321F1178A5446 = function(player, ped, p2)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x236321F1178A5446, 'bool', player, ped, p2)
    return call
end

--- @param player integer
--- @param entity integer
--- @param p2 integer
--- @return boolean
natives.network_networkGetAssistedDamageOfEntity = function(player, entity, p2)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x4CACA84440FA26F6, 'bool', player, entity, p2)
    return call
end

--- @param player integer
--- @param weaponhash integer
--- @return number
natives.network_networkGetEntityKillerOfPlayer = function(player, weaponhash)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0x42B2DAA6B596F5F8, 'int', player, weaponhash)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @param heading number
--- @param p4 integer
--- @param p5 boolean
--- @param p6 userdata
--- @param p7 boolean
natives.network_networkResurrectLocalPlayer = function(x, y, z, heading, p4, p5, p6, p7)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(heading) == 'number', 'Argument heading must be of type number.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'boolean', 'Argument p7 must be of type boolean.')

    local call = natives.invoke(0xEA23C49EAA83ACFB, 'void', x, y, z, heading, p4, p5, p6, p7)
end

--- @param args userdata
natives.network_networkResurrectLocalPlayer2 = function(args)
    assert(type(args) == 'userdata', 'Argument args must be of type userdata.')

    local call = natives.invoke(0x4154B7D8C75E5DCF, 'void', args)
end

--- @param time integer
natives.network_networkSetLocalPlayerInvincibleTime = function(time)
    assert(type(time) == 'integer', 'Argument time must be of type integer.')

    local call = natives.invoke(0x2D95C7E2D7E07307, 'void', time)
end

--- @param toggle boolean
natives.network_networkSetLocalPlayerSyncLookAt = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x524FF0AEFF9C3973, 'void', toggle)
end

--- @param entity integer
--- @return boolean
natives.network_networkHasEntityBeenRegisteredWithThisThread = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xB07D3185E11657A5, 'bool', entity)
    return call
end

--- @param entity integer
--- @return number
natives.network_networkGetNetworkIdFromEntity = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xA11700682F3AD45C, 'int', entity)
    return call
end

--- @param netid integer
--- @return number
natives.network_networkGetEntityFromNetworkId = function(netid)
    assert(type(netid) == 'integer', 'Argument netid must be of type integer.')

    local call = natives.invoke(0xCE4E5D9B0A4FF560, 'int', netid)
    return call
end

--- @param entity integer
--- @return boolean
natives.network_networkGetEntityIsNetworked = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xC7827959479DCC78, 'bool', entity)
    return call
end

--- @param entity integer
natives.network_networkRegisterEntityAsNetworked = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x06FAACD625D80CAA, 'void', entity)
end

--- @param netid integer
--- @return boolean
natives.network_networkDoesNetworkIdExist = function(netid)
    assert(type(netid) == 'integer', 'Argument netid must be of type integer.')

    local call = natives.invoke(0x38CE16C96BD11344, 'bool', netid)
    return call
end

-- Related to container entity (RANSACK_ATTACHED_LOCKBOX / RANSACK_ATTACHED_CHEST)
--- @param p0 userdata
--- @return any
natives.network_n0X950Acd8F05B7B9Df = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x950ACD8F05B7B9DF, 'any', p0)
    return call
end

--- @param netid integer
--- @return boolean
natives.network_networkRequestControlOfNetworkId = function(netid)
    assert(type(netid) == 'integer', 'Argument netid must be of type integer.')

    local call = natives.invoke(0xA670B3662FAFFBD0, 'bool', netid)
    return call
end

--- @param netid integer
--- @return boolean
natives.network_networkHasControlOfNetworkId = function(netid)
    assert(type(netid) == 'integer', 'Argument netid must be of type integer.')

    local call = natives.invoke(0x4D36070FE0215186, 'bool', netid)
    return call
end

--- @param entity integer
--- @return boolean
natives.network_networkRequestControlOfEntity = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xB69317BF5E782347, 'bool', entity)
    return call
end

--- @param animscene integer
--- @return boolean
natives.network_networkRequestControlOfAnimScene = function(animscene)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')

    local call = natives.invoke(0xAAA92B631B13F614, 'bool', animscene)
    return call
end

--- @param p0 userdata
--- @return boolean
natives.network_networkRequestControlOfPickupPlacement = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x56ED2C48558DAB78, 'bool', p0)
    return call
end

--- @param entity integer
--- @return boolean
natives.network_networkHasControlOfEntity = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x01BF60A500E28887, 'bool', entity)
    return call
end

--- @param pickup integer
--- @return boolean
natives.network_networkHasControlOfPickup = function(pickup)
    assert(type(pickup) == 'integer', 'Argument pickup must be of type integer.')

    local call = natives.invoke(0x5BC9495F0B3B6FA6, 'bool', pickup)
    return call
end

--- @param animscene integer
--- @return boolean
natives.network_networkHasControlOfAnimScene = function(animscene)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')

    local call = natives.invoke(0x26A5C12FACFF8724, 'bool', animscene)
    return call
end

--- @param p0 userdata
--- @return boolean
natives.network_networkHasControlOfPickupPlacement = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x51EABCF2786515AB, 'bool', p0)
    return call
end

-- Same Native Handler as VEH_TO_NET, PED_TO_NET, OBJ_TO_NET and NETWORK_GET_NETWORK_ID_FROM_ENTITY
--- @param handle integer
--- @return number
natives.network_n0Xf260Af6F43953316 = function(handle)
    assert(type(handle) == 'integer', 'Argument handle must be of type integer.')

    local call = natives.invoke(0xF260AF6F43953316, 'int', handle)
    return call
end

-- Returns the network ID of the given vehicle.
--- @param vehicle integer
--- @return number
natives.network_vehToNet = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0xB4C94523F023419C, 'int', vehicle)
    return call
end

-- Returns the network ID of the given ped.
--- @param ped integer
--- @return number
natives.network_pedToNet = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x0EDEC3C276198689, 'int', ped)
    return call
end

-- Returns the network ID of the given object.
--- @param object integer
--- @return number
natives.network_objToNet = function(object)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')

    local call = natives.invoke(0x99BFDC94A603E541, 'int', object)
    return call
end

--- @param animscene integer
--- @return number
natives.network_animSceneToNet = function(animscene)
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')

    local call = natives.invoke(0xE0D73CDDEA79DDCD, 'int', animscene)
    return call
end

--- @param nethandle integer
--- @return number
natives.network_netToVeh = function(nethandle)
    assert(type(nethandle) == 'integer', 'Argument nethandle must be of type integer.')

    local call = natives.invoke(0x367B936610BA360C, 'int', nethandle)
    return call
end

-- gets the ped id of a network id
--- @param nethandle integer
--- @return number
natives.network_netToPed = function(nethandle)
    assert(type(nethandle) == 'integer', 'Argument nethandle must be of type integer.')

    local call = natives.invoke(0xBDCD95FC216A8B3E, 'int', nethandle)
    return call
end

-- gets the object id of a network id
--- @param nethandle integer
--- @return number
natives.network_netToObj = function(nethandle)
    assert(type(nethandle) == 'integer', 'Argument nethandle must be of type integer.')

    local call = natives.invoke(0xD8515F5FEA14CB3F, 'integer', nethandle)
    return call
end

-- gets the entity id of a network id
--- @param nethandle integer
--- @return number
natives.network_netToEnt = function(nethandle)
    assert(type(nethandle) == 'integer', 'Argument nethandle must be of type integer.')

    local call = natives.invoke(0xBFFEAB45A9A9094A, 'int', nethandle)
    return call
end

--- @param netid integer
--- @return number
natives.network_netToAnimScene = function(netid)
    assert(type(netid) == 'integer', 'Argument netid must be of type integer.')

    local call = natives.invoke(0xD7F6781A0ABAF6FB, 'integer', netid)
    return call
end

--- @param propset integer
--- @return number
natives.network_propsetToNet = function(propset)
    assert(type(propset) == 'integer', 'Argument propset must be of type integer.')

    local call = natives.invoke(0x74F99EF7EF503398, 'int', propset)
    return call
end

--- @param netid integer
--- @return number
natives.network_netToPropset = function(netid)
    assert(type(netid) == 'integer', 'Argument netid must be of type integer.')

    local call = natives.invoke(0xD08066E00D26C448, 'integer', netid)
    return call
end

-- nullsub, doesn't do anything
--- @param p0 integer
natives.network_n0X0Cc28C08613Ba9E5 = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x0CC28C08613BA9E5, 'void', p0)
end

--- @param gamerhandle userdata
natives.network_networkGetLocalHandle = function(gamerhandle)
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')

    local call = natives.invoke(0xE86051786B66CD8E, 'void', gamerhandle)
end

--- @param player integer
--- @param gamerhandle userdata
natives.network_networkHandleFromPlayer = function(player, gamerhandle)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')

    local call = natives.invoke(0x388EB2B86C73B6B3, 'void', player, gamerhandle)
end

--- @param player integer
--- @return number
natives.network_networkHashFromPlayerHandle = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xBC1D768F2F5D6C05, 'integer', player)
    return call
end

--- @param friendindex integer
--- @param gamerhandle userdata
natives.network_networkHandleFromFriend = function(friendindex, gamerhandle)
    assert(type(friendindex) == 'integer', 'Argument friendindex must be of type integer.')
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')

    local call = natives.invoke(0xD45CB817D7E177D2, 'void', friendindex, gamerhandle)
end

-- Always returns a null string.
--- @param gamerhandle userdata
--- @return string
natives.network_networkGetGamertagFromHandle = function(gamerhandle)
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')

    local call = natives.invoke(0x426141162EBE5CDB, 'string', gamerhandle)
    return call
end

-- Hardcoded to return -1.
--- @param p0 userdata
--- @param p1 userdata
--- @return number
natives.network_networkDisplaynamesFromHandlesStart = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xD66C9E72B3CC4982, 'int', p0, p1)
    return call
end

-- Hardcoded to return zero.
--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return number
natives.network_networkGetDisplaynamesFromHandles = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x58CC181719256197, 'int', p0, p1, p2)
    return call
end

-- Example:
-- 
-- char displayName[64];
-- if (_NETWORK_GET_DISPLAY_NAME_FROM_HANDLE(handle, displayName))
-- {
-- 	-- use displayName
-- }
--- @param gamerhandle userdata
--- @param displayname integer
--- @return boolean
natives.network_networkGetDisplayNameFromHandle = function(gamerhandle, displayname)
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')
    assert(type(displayname) == 'integer', 'Argument displayname must be of type integer.')

    local call = natives.invoke(0x7FEE4F07C54B6B3C, 'bool', gamerhandle, displayname)
    return call
end

--- @param gamerhandle1 userdata
--- @param gamerhandle2 userdata
--- @return boolean
natives.network_networkAreHandlesTheSame = function(gamerhandle1, gamerhandle2)
    assert(type(gamerhandle1) == 'userdata', 'Argument gamerhandle1 must be of type userdata.')
    assert(type(gamerhandle2) == 'userdata', 'Argument gamerhandle2 must be of type userdata.')

    local call = natives.invoke(0x57DBA049E110F217, 'bool', gamerhandle1, gamerhandle2)
    return call
end

--- @param gamerhandle userdata
--- @return boolean
natives.network_networkIsHandleValid = function(gamerhandle)
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')

    local call = natives.invoke(0x6F79B93B0A8E4133, 'bool', gamerhandle)
    return call
end

--- @param gamerhandle userdata
--- @return number
natives.network_networkGetPlayerFromGamerHandle = function(gamerhandle)
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')

    local call = natives.invoke(0xCE5F689CF5A0A49D, 'int', gamerhandle)
    return call
end

--- @param gamerhandle userdata
--- @return boolean
natives.network_networkIsGamerInMySession = function(gamerhandle)
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')

    local call = natives.invoke(0x0F10B05DDF8D16E9, 'bool', gamerhandle)
    return call
end

--- @param gamerhandle userdata
natives.network_networkShowProfileUi = function(gamerhandle)
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')

    local call = natives.invoke(0x859ED1CEA343FCA8, 'void', gamerhandle)
end

--- @param gamerhandle userdata
--- @param message string
natives.network_n0X5759160Ac17C13Ce = function(gamerhandle, message)
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')
    assert(type(message) == 'string', 'Argument message must be of type string.')

    local call = natives.invoke(0x5759160AC17C13CE, 'void', gamerhandle, message)
end

-- Returns the entity's network ID.
--- @param entity integer
--- @return number
natives.network_n0Xf302Ab9D978352Ee = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xF302AB9D978352EE, 'int', entity)
    return call
end

-- Returns the entity associated with the given network ID.
--- @param networkid integer
--- @return number
natives.network_n0X4538Ee7C321590Bc = function(networkid)
    assert(type(networkid) == 'integer', 'Argument networkid must be of type integer.')

    local call = natives.invoke(0x4538EE7C321590BC, 'int', networkid)
    return call
end

--- @return boolean
natives.network_n0Xa47D48D06Aa5A188 = function()

    local call = natives.invoke(0xA47D48D06AA5A188, 'bool')
    return call
end

--- @return number
natives.network_networkGetTotalNumFriends = function()

    local call = natives.invoke(0xDB7ABDD203FA3704, 'int')
    return call
end

--- @return number
natives.network_n0Xa94Ece191D90637A = function()

    local call = natives.invoke(0xA94ECE191D90637A, 'int')
    return call
end

--- @param p0 userdata
natives.network_n0X5Cb8B0C846D0F30B = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x5CB8B0C846D0F30B, 'void', p0)
end

--- @param p0 userdata
natives.network_n0Xff36F36B07E69059 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xFF36F36B07E69059, 'void', p0)
end

--- @param p0 userdata
--- @return boolean
natives.network_networkGetCurrentFriendPageData = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xA3EEC0A5AFF3FC5B, 'bool', p0)
    return call
end

--- @return number
natives.network_n0Xb389289F031F059A = function()

    local call = natives.invoke(0xB389289F031F059A, 'int')
    return call
end

--- @return boolean
natives.network_networkCanRefreshFriendPage = function()

    local call = natives.invoke(0x1AF5E28E64A76A9F, 'bool')
    return call
end

--- @return boolean
natives.network_networkRefreshCurrentFriendPage = function()

    local call = natives.invoke(0x1F51F367B710A832, 'bool')
    return call
end

--- @return boolean
natives.network_n0Xda1Bfed8582F61F0 = function()

    local call = natives.invoke(0xDA1BFED8582F61F0, 'bool')
    return call
end

--- @return boolean
natives.network_n0X232E1Eb23Cdb313C = function()

    local call = natives.invoke(0x232E1EB23CDB313C, 'bool')
    return call
end

--- @return boolean
natives.network_n0X3E4A16Bc669E71B3 = function()

    local call = natives.invoke(0x3E4A16BC669E71B3, 'bool')
    return call
end

--- @param gamerhandle userdata
--- @return boolean
natives.network_networkIsFriendHandleOnline = function(gamerhandle)
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')

    local call = natives.invoke(0xE348D1404BD80146, 'bool', gamerhandle)
    return call
end

--- @param gamerhandle userdata
--- @return boolean
natives.network_networkIsFriendHandleInSameTitle = function(gamerhandle)
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')

    local call = natives.invoke(0x665161D250850A9F, 'bool', gamerhandle)
    return call
end

--- @param gamerhandle userdata
--- @return string
natives.network_networkGetGamertagFromFriend = function(gamerhandle)
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')

    local call = natives.invoke(0x5659D87BE674AB17, 'string', gamerhandle)
    return call
end

--- @param gamerhandle userdata
--- @return boolean
natives.network_networkIsFriend = function(gamerhandle)
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')

    local call = natives.invoke(0x1A24A179F9B31654, 'bool', gamerhandle)
    return call
end

-- Hardcoded to return false.
--- @param gamerhandle userdata
--- @return boolean
natives.network_networkIsPendingFriend = function(gamerhandle)
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')

    local call = natives.invoke(0x0BE73DA6984A6E33, 'bool', gamerhandle)
    return call
end

--- @param gamerhandle userdata
--- @param message string
--- @return boolean
natives.network_networkAddFriend = function(gamerhandle, message)
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')
    assert(type(message) == 'string', 'Argument message must be of type string.')

    local call = natives.invoke(0x8E02D73914064223, 'bool', gamerhandle, message)
    return call
end

--- @param gamerhandle userdata
--- @return boolean
natives.network_networkRemoveFriend = function(gamerhandle)
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')

    local call = natives.invoke(0x55F618F68AB854D3, 'bool', gamerhandle)
    return call
end

-- On PC this returns true if gamerHandle is a valid handle.
--- @param gamerhandle userdata
--- @return boolean
natives.network_networkCanAddFriend = function(gamerhandle)
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')

    local call = natives.invoke(0x99ABE9BF9DADA162, 'bool', gamerhandle)
    return call
end

-- Old name: _NETWORK_SET_PASSIVE_MODE_OPTION
--- @param toggle boolean
natives.network_networkSetPlayerIsPassive = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x9C25E8EC4C535FBD, 'void', toggle)
end

--- @param toggle boolean
natives.network_networkSetFriendlyFireOption = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xF808475FA571D823, 'void', toggle)
end

--- @param p0 integer
--- @param p1 userdata
--- @param p2 integer
--- @param p3 integer
natives.network_networkSetRichPresence = function(p0, p1, p2, p3)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')

    local call = natives.invoke(0x1DCCACDCFC569362, 'void', p0, p1, p2, p3)
end

--- @return number
natives.network_networkGetTimeoutTime = function()

    local call = natives.invoke(0x5ED0356A0CE3A34F, 'int')
    return call
end

-- Only used in fm_race_controller R* Script (PROCESS_LOCAL_PLAYER_INIT)
--- @param p0 boolean
natives.network_n0Xbc7D36946D19E60E = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0xBC7D36946D19E60E, 'void', p0)
end

-- Params: p5 = 50.f, p6 = 0 in R* Script net_fetch (NET_FETCH_CLIENT_UPDATE_PED_ROLE_CLUE_IDLE)
--- @param p0 userdata
--- @param p1 userdata
--- @param x number
--- @param y number
--- @param z number
--- @param p5 number
--- @param p6 userdata
--- @return boolean
natives.network_n0X880A7202301E282B = function(p0, p1, x, y, z, p5, p6)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0x880A7202301E282B, 'bool', p0, p1, x, y, z, p5, p6)
    return call
end

-- nullsub, doesn't do anything
--- @return any
natives.network_n0Xc964Fcd3D1720697 = function()

    local call = natives.invoke(0xC964FCD3D1720697, 'any')
    return call
end

-- nullsub, doesn't do anything
--- @return any
natives.network_n0Xec089F84A9C16C62 = function()

    local call = natives.invoke(0xEC089F84A9C16C62, 'any')
    return call
end

--- @param netid integer
natives.network_preventNetworkIdMigration = function(netid)
    assert(type(netid) == 'integer', 'Argument netid must be of type integer.')

    local call = natives.invoke(0x7182EDDA1EE7DB5A, 'void', netid)
end

--- @param netid integer
--- @param p1 boolean
--- @param p2 integer
natives.network_keepNetworkIdInFastInstance = function(netid, p1, p2)
    assert(type(netid) == 'integer', 'Argument netid must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0xE1BC73D6815BA361, 'void', netid, p1, p2)
end

-- Only used in SP R* Script dominoes_sp: p1 = 0
--- @param player integer
--- @param p1 userdata
natives.network_n0X02C4C6C2900D84Df = function(player, p1)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x02C4C6C2900D84DF, 'void', player, p1)
end

--- @param player integer
natives.network_n0Xd78A26024Bb13E08 = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xD78A26024BB13E08, 'void', player)
end

--- @param netid integer
--- @param toggle boolean
natives.network_setNetworkIdExistsOnAllMachines = function(netid, toggle)
    assert(type(netid) == 'integer', 'Argument netid must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xE05E81A888FA63C8, 'void', netid, toggle)
end

--- @param netid integer
--- @param player integer
--- @param toggle boolean
natives.network_setNetworkIdAlwaysExistsForPlayer = function(netid, player, toggle)
    assert(type(netid) == 'integer', 'Argument netid must be of type integer.')
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xA8A024587329F36A, 'void', netid, player, toggle)
end

--- @param networkid integer
--- @param bstopcloning boolean
natives.network_setNetworkIdStopCloning = function(networkid, bstopcloning)
    assert(type(networkid) == 'integer', 'Argument networkid must be of type integer.')
    assert(type(bstopcloning) == 'boolean', 'Argument bstopcloning must be of type boolean.')

    local call = natives.invoke(0x9ED3108D6847760A, 'void', networkid, bstopcloning)
end

--- @param entity integer
--- @param toggle boolean
natives.network_networkSetEntityRemainsWhenUnnetworked = function(entity, toggle)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xD785864798258032, 'void', entity, toggle)
end

-- if set to true other network players can't see it
-- if set to false other network player can see it
-- =========================================
-- ^^ I attempted this by grabbing an object with GET_ENTITY_PLAYER_IS_FREE_AIMING_AT and setting this naive no matter the toggle he could still see it.
-- 
-- pc or last gen?
-- 
-- ^^ last-gen
-- 
-- Old name: _NETWORK_SET_ENTITY_INVISIBLE_TO_NETWORK
--- @param entity integer
--- @param toggle boolean
natives.network_networkSetEntityOnlyExistsForParticipants = function(entity, toggle)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xF1CA12B18AEF5298, 'void', entity, toggle)
end

--- @param entity integer
natives.network_n0Xe31A04513237Dc89 = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xE31A04513237DC89, 'void', entity)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.network_setNetworkIdVisibleInCutscene = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xA6928482543022B4, 'void', p0, p1, p2, p3)
end

--- @param netid integer
--- @return boolean
natives.network_isNetworkIdOwnedByParticipant = function(netid)
    assert(type(netid) == 'integer', 'Argument netid must be of type integer.')

    local call = natives.invoke(0xA1607996431332DF, 'bool', netid)
    return call
end

--- @param netid integer
--- @return number
natives.network_networkGetPlayerOwnerOfNetworkId = function(netid)
    assert(type(netid) == 'integer', 'Argument netid must be of type integer.')

    local call = natives.invoke(0xA6C0787443C9583E, 'int', netid)
    return call
end

--- @param isLocal boolean
--- @param remote boolean
--- @param instanceid integer
natives.network_setLocalPlayerVisibleInCutscene = function(isLocal, remote, instanceid)
    assert(type(isLocal) == 'boolean', 'Argument isLocal must be of type boolean.')
    assert(type(remote) == 'boolean', 'Argument remote must be of type boolean.')
    assert(type(instanceid) == 'integer', 'Argument instanceid must be of type integer.')

    local call = natives.invoke(0xD1065D68947E7B6E, 'void', isLocal, remote, instanceid)
end

--- @param toggle boolean
natives.network_preventMigrationOfEntitiesInFastInstanceForLocalPlayer = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x89D803CD48622150, 'void', toggle)
end

--- @param p0 boolean
natives.network_setLocalPlayerInvisibleLocally = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0xE5F773C1A1D9D168, 'void', p0)
end

--- @param player integer
--- @param toggle boolean
natives.network_setPlayerInvisibleLocally = function(player, toggle)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x12B37D54667DB0B8, 'void', player, toggle)
end

--- @param player integer
--- @param toggle boolean
natives.network_setPlayerVisibleLocally = function(player, toggle)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xFAA10F1FAFB11AF2, 'void', player, toggle)
end

--- @param entity integer
--- @param p1 boolean
--- @param p2 boolean
--- @param p3 integer
natives.network_setEntityVisibleInCutscene = function(entity, p1, p2, p3)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')

    local call = natives.invoke(0xE0031D3C8F36AB82, 'void', entity, p1, p2, p3)
end

--- @param doorhash integer
natives.network_setDoorNetworked = function(doorhash)
    assert(type(doorhash) == 'integer', 'Argument doorhash must be of type integer.')

    local call = natives.invoke(0x51D99497ABF3F451, 'void', doorhash)
end

--- @param p0 userdata
--- @param toggle boolean
natives.network_setDoorUnnetworked = function(p0, toggle)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xC1E1A3D5ED7617B8, 'void', p0, toggle)
end

--- @param netid integer
--- @return boolean
natives.network_isDamageTrackerActiveOnNetworkId = function(netid)
    assert(type(netid) == 'integer', 'Argument netid must be of type integer.')

    local call = natives.invoke(0x6E192E33AD436366, 'bool', netid)
    return call
end

--- @param netid integer
--- @param toggle boolean
natives.network_activateDamageTrackerOnNetworkId = function(netid, toggle)
    assert(type(netid) == 'integer', 'Argument netid must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xD45B1FFCCD52FF19, 'void', netid, toggle)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @return boolean
natives.network_isSphereVisibleToAnotherMachine = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0xD82CF8E64C8729D8, 'bool', p0, p1, p2, p3, p4)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @return boolean
natives.network_isSphereVisibleToPlayer = function(p0, p1, p2, p3, p4, p5)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0xDC3A310219E5DA62, 'bool', p0, p1, p2, p3, p4, p5)
    return call
end

--- @param p0 boolean
natives.network_n0Xd42C543F73233041 = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0xD42C543F73233041, 'void', p0)
end

--- @param amount integer
natives.network_reserveNetworkMissionObjects = function(amount)
    assert(type(amount) == 'integer', 'Argument amount must be of type integer.')

    local call = natives.invoke(0x4E5C93BD0C32FBF8, 'void', amount)
end

--- @param amount integer
natives.network_reserveNetworkClientMissionObjects = function(amount)
    assert(type(amount) == 'integer', 'Argument amount must be of type integer.')

    local call = natives.invoke(0xE7DDA8BD3BCF751C, 'void', amount)
end

--- @param amount integer
natives.network_reserveNetworkMissionPeds = function(amount)
    assert(type(amount) == 'integer', 'Argument amount must be of type integer.')

    local call = natives.invoke(0xB60FEBA45333D36F, 'void', amount)
end

--- @param amount integer
natives.network_reserveNetworkClientMissionPeds = function(amount)
    assert(type(amount) == 'integer', 'Argument amount must be of type integer.')

    local call = natives.invoke(0x807E119F80231732, 'void', amount)
end

--- @param amount integer
natives.network_reserveNetworkMissionVehicles = function(amount)
    assert(type(amount) == 'integer', 'Argument amount must be of type integer.')

    local call = natives.invoke(0x76B02E21ED27A469, 'void', amount)
end

--- @param amount integer
natives.network_reserveNetworkMissionPickups = function(amount)
    assert(type(amount) == 'integer', 'Argument amount must be of type integer.')

    local call = natives.invoke(0x4D40E7D749BC6E6D, 'void', amount)
end

--- @param amount integer
--- @return boolean
natives.network_canRegisterMissionObjects = function(amount)
    assert(type(amount) == 'integer', 'Argument amount must be of type integer.')

    local call = natives.invoke(0x800DD4721A8B008B, 'bool', amount)
    return call
end

--- @param amount integer
--- @return boolean
natives.network_canRegisterMissionPeds = function(amount)
    assert(type(amount) == 'integer', 'Argument amount must be of type integer.')

    local call = natives.invoke(0xBCBF4FEF9FA5D781, 'bool', amount)
    return call
end

--- @param amount integer
--- @return boolean
natives.network_canRegisterMissionVehicles = function(amount)
    assert(type(amount) == 'integer', 'Argument amount must be of type integer.')

    local call = natives.invoke(0x7277F1F2E085EE74, 'bool', amount)
    return call
end

--- @param amount integer
--- @return boolean
natives.network_canRegisterMissionPickups = function(amount)
    assert(type(amount) == 'integer', 'Argument amount must be of type integer.')

    local call = natives.invoke(0xF0460C7BF80011EA, 'bool', amount)
    return call
end

--- @param ped_amt integer
--- @param vehicle_amt integer
--- @param object_amt integer
--- @param pickup_amt integer
--- @return boolean
natives.network_canRegisterMissionEntities = function(ped_amt, vehicle_amt, object_amt, pickup_amt)
    assert(type(ped_amt) == 'integer', 'Argument ped_amt must be of type integer.')
    assert(type(vehicle_amt) == 'integer', 'Argument vehicle_amt must be of type integer.')
    assert(type(object_amt) == 'integer', 'Argument object_amt must be of type integer.')
    assert(type(pickup_amt) == 'integer', 'Argument pickup_amt must be of type integer.')

    local call = natives.invoke(0x69778E7564BADE6D, 'bool', ped_amt, vehicle_amt, object_amt, pickup_amt)
    return call
end

-- p0 appears to be for MP
--- @param p0 boolean
--- @return number
natives.network_getNumReservedMissionObjects = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0xAA81B5F10BC43AC2, 'int', p0)
    return call
end

-- p0 appears to be for MP
--- @param p0 boolean
--- @return number
natives.network_getNumReservedMissionPeds = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x1F13D5AE5CB17E17, 'int', p0)
    return call
end

-- p0 appears to be for MP
--- @param p0 boolean
--- @return number
natives.network_getNumReservedMissionVehicles = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0xCF3A965906452031, 'int', p0)
    return call
end

--- @param p0 boolean
--- @return number
natives.network_getNumReservedMissionPickups = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x62BE3ECC79FBD004, 'int', p0)
    return call
end

--- @param p0 boolean
--- @return number
natives.network_getNumCreatedMissionObjects = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x12B6281B6C6706C0, 'int', p0)
    return call
end

--- @param p0 boolean
--- @return number
natives.network_getNumCreatedMissionPeds = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0xCB215C4B56A7FAE7, 'int', p0)
    return call
end

--- @param p0 boolean
--- @return number
natives.network_getNumCreatedMissionVehicles = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x0CD9AB83489430EA, 'int', p0)
    return call
end

--- @param p0 boolean
--- @return number
natives.network_getNumCreatedMissionPickups = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0xD2BA051B94CA9BCC, 'int', p0)
    return call
end

-- Only used in R* Script net_stable_manager
--- @param threadid integer
--- @param pedmax integer
--- @param vehiclemax integer
--- @param unkmax integer
--- @param pedmin integer
--- @param vehiclemin integer
--- @param unkmin integer
natives.network_getReservedMissionEntitiesForThread = function(threadid, pedmax, vehiclemax, unkmax, pedmin, vehiclemin, unkmin)
    assert(type(threadid) == 'integer', 'Argument threadid must be of type integer.')
    assert(type(pedmax) == 'integer', 'Argument pedmax must be of type integer.')
    assert(type(vehiclemax) == 'integer', 'Argument vehiclemax must be of type integer.')
    assert(type(unkmax) == 'integer', 'Argument unkmax must be of type integer.')
    assert(type(pedmin) == 'integer', 'Argument pedmin must be of type integer.')
    assert(type(vehiclemin) == 'integer', 'Argument vehiclemin must be of type integer.')
    assert(type(unkmin) == 'integer', 'Argument unkmin must be of type integer.')

    local call = natives.invoke(0x99AAC89C510DEB0D, 'void', threadid, pedmax, vehiclemax, unkmax, pedmin, vehiclemin, unkmin)
end

-- Used in Script Function NET_ACE_CLIENT_VERIFY_ENTITY_RESERVATIONS
-- Coords: Slot world position
-- 
-- Old name: _GET_RESERVATIONS_FOR_SLOT_WORLD_POSITION
--- @param x number
--- @param y number
--- @param z number
--- @param p3 boolean
--- @param peds integer
--- @param vehicles integer
--- @param objects integer
--- @param pickups integer
natives.network_getReservedMissionEntitiesInArea = function(x, y, z, p3, peds, vehicles, objects, pickups)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')
    assert(type(peds) == 'integer', 'Argument peds must be of type integer.')
    assert(type(vehicles) == 'integer', 'Argument vehicles must be of type integer.')
    assert(type(objects) == 'integer', 'Argument objects must be of type integer.')
    assert(type(pickups) == 'integer', 'Argument pickups must be of type integer.')

    local call = natives.invoke(0x5E71E72A94985214, 'void', x, y, z, p3, peds, vehicles, objects, pickups)
end

-- Note: this native was added in build 1311.23
--- @param p0 integer
--- @param p1 integer
--- @param p2 integer
--- @param p3 integer
--- @return boolean
natives.network_n0X5F328Fc909F0E0Ff = function(p0, p1, p2, p3)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')

    local call = natives.invoke(0x5F328FC909F0E0FF, 'bool', p0, p1, p2, p3)
    return call
end

-- Always returns 60
--- @return number
natives.network_getMaxNumNetworkObjects = function()

    local call = natives.invoke(0xC7BE335216B5EC7C, 'int')
    return call
end

-- Always returns 110
--- @return number
natives.network_getMaxNumNetworkPeds = function()

    local call = natives.invoke(0x0C1F7D49C39D2289, 'int')
    return call
end

-- Always returns 40
--- @return number
natives.network_getMaxNumNetworkVehicles = function()

    local call = natives.invoke(0x0AFCE529F69B21FF, 'int')
    return call
end

-- Always returns 80
--- @return number
natives.network_getMaxNumNetworkPickups = function()

    local call = natives.invoke(0xA72835064DD63E4C, 'int')
    return call
end

--- @param entity integer
--- @param player integer
--- @param p2 userdata
--- @return boolean
natives.network_n0X75Fc34A2Ba345Bd1 = function(entity, player, p2)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x75FC34A2BA345BD1, 'bool', entity, player, p2)
    return call
end

-- Must be called from a background script, otherwise it will do nothing.
--- @param entity integer
--- @param p1 boolean
natives.network_n0X979765465A6F25Fc = function(entity, p1)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x979765465A6F25FC, 'void', entity, p1)
end

-- Hardcoded to return zero.
--- @return number
natives.network_n0X5133Cf81924F1129 = function()

    local call = natives.invoke(0x5133CF81924F1129, 'int')
    return call
end

-- Note: this native was added in build 1311.23
--- @param p0 boolean
--- @return number
natives.network_n0X1E4E097D71D449Fb = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x1E4E097D71D449FB, 'int', p0)
    return call
end

-- Note: this native was added in build 1311.23
--- @param p0 boolean
--- @return number
natives.network_n0X982D7Ad755B8F62C = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x982D7AD755B8F62C, 'int', p0)
    return call
end

-- Note: this native was added in build 1311.23
--- @param p0 boolean
--- @return number
natives.network_n0X917Ad74Bdcf8B6E9 = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x917AD74BDCF8B6E9, 'int', p0)
    return call
end

-- Note: this native was added in build 1311.23
--- @param p0 boolean
--- @return number
natives.network_n0Xf8Dc69Dc1Ad19072 = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0xF8DC69DC1AD19072, 'int', p0)
    return call
end

-- Note: this native was added in build 1311.23
--- @param p0 boolean
--- @return number
natives.network_n0X744Bfbb0Ca908161 = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x744BFBB0CA908161, 'int', p0)
    return call
end

-- Note: this native was added in build 1311.23
--- @param p0 boolean
--- @return number
natives.network_n0X106Cbdd5077Dede1 = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x106CBDD5077DEDE1, 'int', p0)
    return call
end

-- Note: this native was added in build 1311.23
--- @param p0 boolean
--- @return number
natives.network_n0Xbaf7E2979442B29F = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0xBAF7E2979442B29F, 'int', p0)
    return call
end

-- Note: this native was added in build 1311.23
--- @param p0 boolean
--- @return number
natives.network_n0X039B692B3318Fab6 = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x039B692B3318FAB6, 'int', p0)
    return call
end

-- Note: this native was added in build 1311.23
--- @param p0 boolean
--- @return number
natives.network_n0X4835413Ea6F9C9Cd = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x4835413EA6F9C9CD, 'int', p0)
    return call
end

--- @return number
natives.network_getNetworkTime = function()

    local call = natives.invoke(0x7A5487FE9FAA6B48, 'int')
    return call
end

--- @return number
natives.network_getNetworkTimeAccurate = function()

    local call = natives.invoke(0x89023FBBF9200E9F, 'int')
    return call
end

--- @return boolean
natives.network_hasNetworkTimeStarted = function()

    local call = natives.invoke(0x46718ACEEDEAFC84, 'bool')
    return call
end

-- Adds the first argument to the second.
--- @param timea integer
--- @param timeb integer
--- @return number
natives.network_getTimeOffset = function(timea, timeb)
    assert(type(timea) == 'integer', 'Argument timea must be of type integer.')
    assert(type(timeb) == 'integer', 'Argument timeb must be of type integer.')

    local call = natives.invoke(0x017008CCDAD48503, 'int', timea, timeb)
    return call
end

-- Subtracts the second argument from the first, then returns whether the result is negative.
--- @param timea integer
--- @param timeb integer
--- @return boolean
natives.network_isTimeLessThan = function(timea, timeb)
    assert(type(timea) == 'integer', 'Argument timea must be of type integer.')
    assert(type(timeb) == 'integer', 'Argument timeb must be of type integer.')

    local call = natives.invoke(0xCB2CF5148012C8D0, 'bool', timea, timeb)
    return call
end

-- Subtracts the first argument from the second, then returns whether the result is negative.
--- @param timea integer
--- @param timeb integer
--- @return boolean
natives.network_isTimeMoreThan = function(timea, timeb)
    assert(type(timea) == 'integer', 'Argument timea must be of type integer.')
    assert(type(timeb) == 'integer', 'Argument timeb must be of type integer.')

    local call = natives.invoke(0xDE350F8651E4346C, 'bool', timea, timeb)
    return call
end

-- Subtracts the second argument from the first.
--- @param timea integer
--- @param timeb integer
--- @return number
natives.network_getTimeDifference = function(timea, timeb)
    assert(type(timea) == 'integer', 'Argument timea must be of type integer.')
    assert(type(timeb) == 'integer', 'Argument timeb must be of type integer.')

    local call = natives.invoke(0xA2C6FC031D46FFF0, 'int', timea, timeb)
    return call
end

--- @return number
natives.network_getCloudTimeAsInt = function()

    local call = natives.invoke(0x9A73240B49945C76, 'int')
    return call
end

-- Takes the specified time and writes it to the structure specified in the second argument.
-- 
-- struct date_time
-- {
--     int year;
--     int PADDING1;
--     int month;
--     int PADDING2;
--     int day;
--     int PADDING3;
--     int hour;
--     int PADDING4;
--     int minute;
--     int PADDING5;
--     int second;
--     int PADDING6;
-- };
--- @param posixtime integer
--- @param timestructure userdata
natives.network_convertPosixTime = function(posixtime, timestructure)
    assert(type(posixtime) == 'integer', 'Argument posixtime must be of type integer.')
    assert(type(timestructure) == 'userdata', 'Argument timestructure must be of type userdata.')

    local call = natives.invoke(0xAC97AF97FA68E5D5, 'void', posixtime, timestructure)
end

--- @param toggle boolean
--- @param playerped integer
natives.network_networkSetInSpectatorMode = function(toggle, playerped)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')
    assert(type(playerped) == 'integer', 'Argument playerped must be of type integer.')

    local call = natives.invoke(0x423DE3854BB50894, 'void', toggle, playerped)
end

--- @param toggle boolean
--- @param x number
--- @param y number
--- @param z number
natives.network_networkSetInStaticSpectatorMode = function(toggle, x, y, z)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0xFBF1ECFB39A77B5F, 'void', toggle, x, y, z)
end

--- @return boolean
natives.network_networkIsInSpectatorMode = function()

    local call = natives.invoke(0x048746E388762E11, 'bool')
    return call
end

--- @param player integer
--- @return boolean
natives.network_networkIsPlayerInSpectatorMode = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x5B709519997ECF0F, 'bool', player)
    return call
end

--- @param p0 boolean
--- @param p1 boolean
--- @param p2 integer
--- @param p3 boolean
natives.network_networkSetInMpCutscene = function(p0, p1, p2, p3)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0x9CA5DE655269FEC4, 'void', p0, p1, p2, p3)
end

--- @return boolean
natives.network_networkIsInMpCutscene = function()

    local call = natives.invoke(0x6CC27C9FA2040220, 'bool')
    return call
end

-- Note: scripts seem to indicate that this was renamed to NETWORK_IS_PLAYER_IN_MP_FAST_INSTANCE
--- @param player integer
--- @return boolean
natives.network_networkIsPlayerInMpCutscene = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x63F9EE203C3619F2, 'bool', player)
    return call
end

-- _NETWORK_A* - _NETWORK_C*
--- @param p0 boolean
natives.network_n0X34Bc1E79546Ba543 = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x34BC1E79546BA543, 'void', p0)
end

--- @param entity integer
--- @param timer integer
--- @param p2 boolean
natives.network_setNetworkRespotTimer = function(entity, timer, p2)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(timer) == 'integer', 'Argument timer must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x442B4347B6EC36E8, 'void', entity, timer, p2)
end

-- _GET_LAUNCH_PARAM_(RESPOT?)*
-- Name is probably invalid since this native only reads data from parsed entity.
--- @param entity integer
--- @return boolean
natives.network_n0X26A867C0B7A456D1 = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x26A867C0B7A456D1, 'bool', entity)
    return call
end

-- Old name: _SET_LOCAL_PLAYER_AS_GHOST
--- @param toggle boolean
natives.network_setLocalPlayerAsGhost = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x5FFE9B4144F9712F, 'void', toggle)
end

-- Old name: _IS_ENTITY_GHOSTED_TO_LOCAL_PLAYER
--- @param entity integer
--- @return boolean
natives.network_isEntityAGhost = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x21D04D7BC538C146, 'bool', entity)
    return call
end

-- _SET_PLAYER_V* - _SET_S*
--- @param player integer
--- @param disabled boolean
natives.network_setPlayerVisibilityToLocalPlayerDisabled = function(player, disabled)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(disabled) == 'boolean', 'Argument disabled must be of type boolean.')

    local call = natives.invoke(0xDCA6ABDB9288FBE4, 'void', player, disabled)
end

--- @param entity integer
--- @param toggle boolean
natives.network_setEntityGhostedToLocalPlayer = function(entity, toggle)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xEE5AE9956743BA20, 'void', entity, toggle)
end

-- Note: this native was added in build 1311.16
--- @return boolean
natives.network_isObjectReassignmentInProgress = function()

    local call = natives.invoke(0x8FE9EB11EC9CC23A, 'bool')
    return call
end

-- Note: this native was added in build 1311.23
--- @return number
natives.network_n0X039Ad6B57D5179Ff = function()

    local call = natives.invoke(0x039AD6B57D5179FF, 'int')
    return call
end

-- Note: this native was added in build 1311.16
-- 
-- GET_NUM_*
--- @return number
natives.network_n0X02B3Cdd652B3Cdd6 = function()

    local call = natives.invoke(0x02B3CDD652B3CDD6, 'int')
    return call
end

-- Note: this native was added in build 1311.16
--- @return number
natives.network_getNumPeerNegotiationResponses = function()

    local call = natives.invoke(0x4FE932E84FE932E8, 'int')
    return call
end

-- Must be called from a background script, otherwise it will do nothing.
--- @param p0 userdata
natives.network_networkDebugRequestEntityPosition = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xFA38B52F91B59075, 'void', p0)
end

--- @param ropeid integer
--- @return number
natives.network_networkGetNetworkIdFromRopeId = function(ropeid)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')

    local call = natives.invoke(0x42871327315EDAE8, 'int', ropeid)
    return call
end

--- @param netid integer
--- @return number
natives.network_networkGetRopeIdFromNetworkId = function(netid)
    assert(type(netid) == 'integer', 'Argument netid must be of type integer.')

    local call = natives.invoke(0xEB1A4DD8352EC828, 'int', netid)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @param heading number
natives.network_networkSpawnConfigAddSpawnPoint = function(x, y, z, heading)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(heading) == 'number', 'Argument heading must be of type number.')

    local call = natives.invoke(0xFD1AC0B3858F224C, 'void', x, y, z, heading)
end

natives.network_n0Xa63E4F050F20021F = function()

    local call = natives.invoke(0xA63E4F050F20021F, 'void')
end

--- @param volume integer
natives.network_networkSpawnConfigAddExclusionVolume = function(volume)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')

    local call = natives.invoke(0xEEB7818B1D307212, 'void', volume)
end

--- @param volume integer
natives.network_networkSpawnConfigRemoveExclusionVolume = function(volume)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')

    local call = natives.invoke(0xA35E7BF20FA269E0, 'void', volume)
end

natives.network_n0X0Bf90Cbb6B72977B = function()

    local call = natives.invoke(0x0BF90CBB6B72977B, 'void')
end

--- @param player integer
natives.network_n0X7B3Ff2D193628126 = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x7B3FF2D193628126, 'void', player)
end

natives.network_n0X19B52C20B5C4757C = function()

    local call = natives.invoke(0x19B52C20B5C4757C, 'void')
end

--- @param flags integer
natives.network_networkSpawnConfigSetFlags = function(flags)
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')

    local call = natives.invoke(0xF94A0D5B254375DF, 'void', flags)
end

-- _NETWORK_SPAWN_CONFIG_*
natives.network_n0X6Cee2E30021Daec6 = function()

    local call = natives.invoke(0x6CEE2E30021DAEC6, 'void')
end

--- @param configproperty integer
--- @param include boolean
natives.network_networkSpawnConfigAddPropertyScripted = function(configproperty, include)
    assert(type(configproperty) == 'integer', 'Argument configproperty must be of type integer.')
    assert(type(include) == 'boolean', 'Argument include must be of type boolean.')

    local call = natives.invoke(0x44D59EC597BBF348, 'void', configproperty, include)
end

natives.network_n0Xb131E686Bd97B3F8 = function()

    local call = natives.invoke(0xB131E686BD97B3F8, 'void')
end

--- @param configproperty integer
--- @param include boolean
--- @param weight number
natives.network_networkSpawnConfigAddPropertyPreference = function(configproperty, include, weight)
    assert(type(configproperty) == 'integer', 'Argument configproperty must be of type integer.')
    assert(type(include) == 'boolean', 'Argument include must be of type boolean.')
    assert(type(weight) == 'number', 'Argument weight must be of type number.')

    local call = natives.invoke(0xEB6027FD1B4600D5, 'void', configproperty, include, weight)
end

--- @param volume integer
--- @param p1 boolean
--- @param p2 userdata
--- @param p3 userdata
natives.network_n0X405Ddefb1F531B18 = function(volume, p1, p2, p3)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x405DDEFB1F531B18, 'void', volume, p1, p2, p3)
end

natives.network_n0X43Cf999205084B4B = function()

    local call = natives.invoke(0x43CF999205084B4B, 'void')
end

--- @param volume integer
--- @param p1 boolean
--- @param originalweight number
--- @param p3 userdata
--- @param p4 userdata
natives.network_n0X13F592Fc3Bf0Ea84 = function(volume, p1, originalweight, p3, p4)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(originalweight) == 'number', 'Argument originalweight must be of type number.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x13F592FC3BF0EA84, 'void', volume, p1, originalweight, p3, p4)
end

--- @param p0 userdata
natives.network_n0Xcf23Ab5Bd47B384D = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xCF23AB5BD47B384D, 'void', p0)
end

--- @param p0 number
natives.network_n0Xe5634491A58C2703 = function(p0)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')

    local call = natives.invoke(0xE5634491A58C2703, 'void', p0)
end

--- @param offset number
natives.network_networkSpawnConfigSetGroundToRootOffset = function(offset)
    assert(type(offset) == 'number', 'Argument offset must be of type number.')

    local call = natives.invoke(0x59577799F6AE2F34, 'void', offset)
end

--- @param waterdepthlevel integer
natives.network_networkSpawnConfigSetLevelWaterDepth = function(waterdepthlevel)
    assert(type(waterdepthlevel) == 'integer', 'Argument waterdepthlevel must be of type integer.')

    local call = natives.invoke(0xBDCC671B911040F9, 'void', waterdepthlevel)
end

--- @param p0 integer
--- @param p1 number
natives.network_networkSpawnConfigSetTuningFloat = function(p0, p1)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x0608326F7B98C08D, 'void', p0, p1)
end

-- _NETWORK_SPAWN_CONFIG_*
--- @param nsctf integer
natives.network_n0X5D3C528B7A7Df836 = function(nsctf)
    assert(type(nsctf) == 'integer', 'Argument nsctf must be of type integer.')

    local call = natives.invoke(0x5D3C528B7A7DF836, 'void', nsctf)
end

--- @param x number
--- @param y number
--- @param z number
natives.network_n0X2686Bd9566B65Eda = function(x, y, z)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0x2686BD9566B65EDA, 'void', x, y, z)
end

--- @param entity integer
natives.network_n0Xbb1Ec8C2Eef33Baa = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xBB1EC8C2EEF33BAA, 'void', entity)
end

--- @return boolean
natives.network_n0X67Ccdf74C4Df7169 = function()

    local call = natives.invoke(0x67CCDF74C4DF7169, 'bool')
    return call
end

natives.network_n0Xc8B6D18E22484643 = function()

    local call = natives.invoke(0xC8B6D18E22484643, 'void')
end

natives.network_n0X97Bce4C4B3191228 = function()

    local call = natives.invoke(0x97BCE4C4B3191228, 'void')
end

--- @return number
natives.network_n0X41452E8A3B9C0C4B = function()

    local call = natives.invoke(0x41452E8A3B9C0C4B, 'int')
    return call
end

--- @return boolean
natives.network_networkSpawnConfigSearchInProgress = function()

    local call = natives.invoke(0x89EC2FC89ECB1005, 'bool')
    return call
end

natives.network_n0X61Bfbaa795E712Ad = function()

    local call = natives.invoke(0x61BFBAA795E712AD, 'void')
end

natives.network_networkSpawnConfigSetCancelSearch = function()

    local call = natives.invoke(0x765E60A1DCB8B1CE, 'void')
end

--- @param p0 userdata
--- @param p1 userdata
natives.network_n0X691E4De5309Eaefc = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x691E4DE5309EAEFC, 'void', p0, p1)
end

natives.network_networkStartSoloTutorialSession = function()

    local call = natives.invoke(0x17E0198B3882C2CB, 'void')
end

natives.network_networkEndTutorialSession = function()

    local call = natives.invoke(0xD0AFAFF5A51D72F7, 'void')
end

--- @return boolean
natives.network_networkIsInTutorialSession = function()

    local call = natives.invoke(0xADA24309FE08DACF, 'bool')
    return call
end

--- @return boolean
natives.network_networkIsTutorialSessionChangePending = function()

    local call = natives.invoke(0x35F0B98A8387274D, 'bool')
    return call
end

-- Old name: _NETWORK_IS_PLAYER_EQUAL_TO_INDEX
--- @param player integer
--- @param index integer
--- @return boolean
natives.network_networkArePlayersInSameTutorialSession = function(player, index)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0x9DE986FC9A87C474, 'bool', player, index)
    return call
end

--- @param toggle boolean
natives.network_networkAllowAllEntityFadingForInstances = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x4B05B97BA46F419D, 'void', toggle)
end

--- @param entity integer
--- @param toggle boolean
natives.network_networkAllowEntityFadingForInstances = function(entity, toggle)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xF3354D6CA46F419D, 'void', entity, toggle)
end

--- @param p0 boolean
--- @param p1 boolean
natives.network_n0Xdc6Ad5C046F33Ab4 = function(p0, p1)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xDC6AD5C046F33AB4, 'void', p0, p1)
end

natives.network_n0X6C7E04E9De451789 = function()

    local call = natives.invoke(0x6C7E04E9DE451789, 'void')
end

--- @param instanceid integer
natives.network_networkSetLocalPlayerPendingFastInstanceId = function(instanceid)
    assert(type(instanceid) == 'integer', 'Argument instanceid must be of type integer.')

    local call = natives.invoke(0x007FF852DCF49DA4, 'void', instanceid)
end

--- @param player integer
--- @return number
natives.network_networkGetPlayerFastInstanceId = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xD9267375834C5EAB, 'int', player)
    return call
end

--- @param player integer
--- @param toggle boolean
natives.network_networkConcealPlayer = function(player, toggle)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xBBDF066252829606, 'void', player, toggle)
end

--- @param player integer
--- @return boolean
natives.network_networkIsPlayerConcealed = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x919B3C98ED8292F9, 'bool', player)
    return call
end

-- Note: this native was added in build 1355.30
natives.network_n0X40Fedb13870042F1 = function()

    local call = natives.invoke(0x40FEDB13870042F1, 'void')
end

-- Note: this native was added in build 1355.30
--- @param p0 integer
natives.network_n0X422F9D6D6C7Bc290 = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x422F9D6D6C7BC290, 'void', p0)
end

-- Note: this native was added in build 1311.23, but was only used after build 1436.25
natives.network_networkRequestCloudTunables = function()

    local call = natives.invoke(0x42FB3B532D526E6C, 'void')
end

--- @return boolean
natives.network_networkIsTunableCloudRequestPending = function()

    local call = natives.invoke(0x0467C11ED88B7D28, 'bool')
    return call
end

--- @return number
natives.network_networkGetTunableCloudCrc = function()

    local call = natives.invoke(0x10BD227A753B0D84, 'int')
    return call
end

--- @param tunablecontext integer
--- @param tunablename integer
--- @return boolean
natives.network_networkDoesTunableExist = function(tunablecontext, tunablename)
    assert(type(tunablecontext) == 'integer', 'Argument tunablecontext must be of type integer.')
    assert(type(tunablename) == 'integer', 'Argument tunablename must be of type integer.')

    local call = natives.invoke(0x85E5F8B9B898B20A, 'bool', tunablecontext, tunablename)
    return call
end

--- @param tunablecontext integer
--- @param tunablename integer
--- @param value integer
--- @return boolean
natives.network_networkAccessTunableInt = function(tunablecontext, tunablename, value)
    assert(type(tunablecontext) == 'integer', 'Argument tunablecontext must be of type integer.')
    assert(type(tunablename) == 'integer', 'Argument tunablename must be of type integer.')
    assert(type(value) == 'integer', 'Argument value must be of type integer.')

    local call = natives.invoke(0x8BE1146DFD5D4468, 'bool', tunablecontext, tunablename, value)
    return call
end

--- @param tunablecontext integer
--- @param tunablename integer
--- @return boolean
natives.network_networkAccessTunableBool = function(tunablecontext, tunablename)
    assert(type(tunablecontext) == 'integer', 'Argument tunablecontext must be of type integer.')
    assert(type(tunablename) == 'integer', 'Argument tunablename must be of type integer.')

    local call = natives.invoke(0xAA6A47A573ABB75A, 'bool', tunablecontext, tunablename)
    return call
end

--- @param tunablecontext integer
--- @param tunablename integer
--- @param defaultvalue integer
--- @return number
natives.network_networkTryAccessTunableIntHash = function(tunablecontext, tunablename, defaultvalue)
    assert(type(tunablecontext) == 'integer', 'Argument tunablecontext must be of type integer.')
    assert(type(tunablename) == 'integer', 'Argument tunablename must be of type integer.')
    assert(type(defaultvalue) == 'integer', 'Argument defaultvalue must be of type integer.')

    local call = natives.invoke(0xA25E006B36719774, 'int', tunablecontext, tunablename, defaultvalue)
    return call
end

--- @param tunablecontext integer
--- @param tunablename integer
--- @param defaultvalue number
--- @return number
natives.network_networkTryAccessTunableFloatHash = function(tunablecontext, tunablename, defaultvalue)
    assert(type(tunablecontext) == 'integer', 'Argument tunablecontext must be of type integer.')
    assert(type(tunablename) == 'integer', 'Argument tunablename must be of type integer.')
    assert(type(defaultvalue) == 'number', 'Argument defaultvalue must be of type number.')

    local call = natives.invoke(0xA18393089C05E49C, 'float', tunablecontext, tunablename, defaultvalue)
    return call
end

--- @param tunablecontext integer
--- @param tunablename integer
--- @param defaultvalue boolean
--- @return boolean
natives.network_networkTryAccessTunableBoolHash = function(tunablecontext, tunablename, defaultvalue)
    assert(type(tunablecontext) == 'integer', 'Argument tunablecontext must be of type integer.')
    assert(type(tunablename) == 'integer', 'Argument tunablename must be of type integer.')
    assert(type(defaultvalue) == 'boolean', 'Argument defaultvalue must be of type boolean.')

    local call = natives.invoke(0xB2AD5D29A99D4B26, 'bool', tunablecontext, tunablename, defaultvalue)
    return call
end

--- @param nethandle integer
--- @param p1 userdata
natives.network_n0X894B5Ecab45D2342 = function(nethandle, p1)
    assert(type(nethandle) == 'integer', 'Argument nethandle must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x894B5ECAB45D2342, 'void', nethandle, p1)
end

--- @param netid integer
natives.network_networkDisableProximityMigration = function(netid)
    assert(type(netid) == 'integer', 'Argument netid must be of type integer.')

    local call = natives.invoke(0x407091CF6037118E, 'void', netid)
end

--- @return boolean
natives.network_commerceStoreIsOpen = function()

    local call = natives.invoke(0xCE5E79D9E303628E, 'bool')
    return call
end

--- @return boolean
natives.network_commerceStoreIsEnabled = function()

    local call = natives.invoke(0xDBC754CB6CCB9378, 'bool')
    return call
end

--- @param id integer
--- @return boolean
natives.network_cloudHasRequestCompleted = function(id)
    assert(type(id) == 'integer', 'Argument id must be of type integer.')

    local call = natives.invoke(0x4C61B39930D045DA, 'bool', id)
    return call
end

--- @param id integer
--- @return boolean
natives.network_cloudDidRequestSucceed = function(id)
    assert(type(id) == 'integer', 'Argument id must be of type integer.')

    local call = natives.invoke(0x3A3D5568AF297CD5, 'bool', id)
    return call
end

--- @param paramname string
--- @return boolean
natives.network_getLaunchParamExists = function(paramname)
    assert(type(paramname) == 'string', 'Argument paramname must be of type string.')

    local call = natives.invoke(0x02E97CE283648CD9, 'bool', paramname)
    return call
end

--- @param paramname string
--- @return string
natives.network_getLaunchParamValue = function(paramname)
    assert(type(paramname) == 'string', 'Argument paramname must be of type string.')

    local call = natives.invoke(0x65E65CA6A0FE59D4, 'string', paramname)
    return call
end

--- @param paramname string
--- @param value string
natives.network_setLaunchParamValue = function(paramname, value)
    assert(type(paramname) == 'string', 'Argument paramname must be of type string.')
    assert(type(value) == 'string', 'Argument value must be of type string.')

    local call = natives.invoke(0x668AF6E4933AC13F, 'void', paramname, value)
end

--- @param paramname string
natives.network_clearLaunchParam = function(paramname)
    assert(type(paramname) == 'string', 'Argument paramname must be of type string.')

    local call = natives.invoke(0x782C94DB6469634D, 'void', paramname)
end

--- @return string
natives.network_getLaunchParamString = function()

    local call = natives.invoke(0xC59AB6A04333C502, 'string')
    return call
end

--- @param params string
natives.network_setLaunchParamString = function(params)
    assert(type(params) == 'string', 'Argument params must be of type string.')

    local call = natives.invoke(0xDFFC15AA63D04AAB, 'void', params)
end

-- Old name: _CLEAR_LAUNCH_PARAMS
natives.network_clearServiceEventArguments = function()

    local call = natives.invoke(0x966DD84FB6A46017, 'void')
end

--- @param ugcrequestid integer
--- @return boolean
natives.network_ugcIsRequestPending = function(ugcrequestid)
    assert(type(ugcrequestid) == 'integer', 'Argument ugcrequestid must be of type integer.')

    local call = natives.invoke(0xF4AC4FA844FD559A, 'bool', ugcrequestid)
    return call
end

--- @param ugcrequestid integer
--- @return boolean
natives.network_ugcHasRequestFinished = function(ugcrequestid)
    assert(type(ugcrequestid) == 'integer', 'Argument ugcrequestid must be of type integer.')

    local call = natives.invoke(0xA9EB4D606076615D, 'bool', ugcrequestid)
    return call
end

--- @param ugcrequestid integer
--- @return boolean
natives.network_ugcDidRequestSucceed = function(ugcrequestid)
    assert(type(ugcrequestid) == 'integer', 'Argument ugcrequestid must be of type integer.')

    local call = natives.invoke(0x0B6009A90B8495F1, 'bool', ugcrequestid)
    return call
end

--- @param ugcrequestid integer
--- @return boolean
natives.network_n0Xcd53E6Cbf609C012 = function(ugcrequestid)
    assert(type(ugcrequestid) == 'integer', 'Argument ugcrequestid must be of type integer.')

    local call = natives.invoke(0xCD53E6CBF609C012, 'bool', ugcrequestid)
    return call
end

-- Returns ugcRequestId
--- @param p0 integer
--- @param maxget integer
--- @param contenttypename string
--- @param p3 integer
--- @param p4 integer
--- @param p5 integer
--- @return number
natives.network_ugcQueryByContentType = function(p0, maxget, contenttypename, p3, p4, p5)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(maxget) == 'integer', 'Argument maxget must be of type integer.')
    assert(type(contenttypename) == 'string', 'Argument contenttypename must be of type string.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')
    assert(type(p5) == 'integer', 'Argument p5 must be of type integer.')

    local call = natives.invoke(0xF40EF49B3099E98E, 'int', p0, maxget, contenttypename, p3, p4, p5)
    return call
end

-- Returns ugcRequestId
--- @param categorytype integer
--- @param p1 integer
--- @param maxget integer
--- @param contenttypename string
--- @param p4 integer
--- @param p5 boolean
--- @return number
natives.network_ugcQueryByCategory = function(categorytype, p1, maxget, contenttypename, p4, p5)
    assert(type(categorytype) == 'integer', 'Argument categorytype must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(maxget) == 'integer', 'Argument maxget must be of type integer.')
    assert(type(contenttypename) == 'string', 'Argument contenttypename must be of type string.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')

    local call = natives.invoke(0x8C109958C9BB559D, 'int', categorytype, p1, maxget, contenttypename, p4, p5)
    return call
end

-- Returns ugcRequestId
--- @param contentid string
--- @param latestversion boolean
--- @param contenttypename string
--- @return number
natives.network_ugcQueryByContentId = function(contentid, latestversion, contenttypename)
    assert(type(contentid) == 'string', 'Argument contentid must be of type string.')
    assert(type(latestversion) == 'boolean', 'Argument latestversion must be of type boolean.')
    assert(type(contenttypename) == 'string', 'Argument contenttypename must be of type string.')

    local call = natives.invoke(0x69D22E183580113F, 'int', contentid, latestversion, contenttypename)
    return call
end

--- @param contentid string
--- @return boolean
natives.network_ugcIsBookMarked = function(contentid)
    assert(type(contentid) == 'string', 'Argument contentid must be of type string.')

    local call = natives.invoke(0xE42D1042F09865FE, 'bool', contentid)
    return call
end

--- @param ugcrequestid integer
natives.network_ugcClearQueryResults = function(ugcrequestid)
    assert(type(ugcrequestid) == 'integer', 'Argument ugcrequestid must be of type integer.')

    local call = natives.invoke(0xE931354FEA710038, 'void', ugcrequestid)
end

--- @param ugcrequestid integer
--- @return boolean
natives.network_ugcQueryWasForceCancelled = function(ugcrequestid)
    assert(type(ugcrequestid) == 'integer', 'Argument ugcrequestid must be of type integer.')

    local call = natives.invoke(0xF8F0705E77A0E705, 'bool', ugcrequestid)
    return call
end

--- @param ugcrequestid integer
--- @return number
natives.network_ugcQueryGetContentNum = function(ugcrequestid)
    assert(type(ugcrequestid) == 'integer', 'Argument ugcrequestid must be of type integer.')

    local call = natives.invoke(0x76160E0396142765, 'int', ugcrequestid)
    return call
end

--- @param p0 userdata
--- @param index integer
--- @param gamerhandle userdata
--- @return any
natives.network_ugcQueryGetCreatorHandle = function(p0, index, gamerhandle)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')

    local call = natives.invoke(0xADB56322EEDFBDC9, 'any', p0, index, gamerhandle)
    return call
end

--- @param p0 userdata
--- @param index integer
--- @return string
natives.network_ugcQueryGetOwnerId = function(p0, index)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0xF9F0B3028431967B, 'string', p0, index)
    return call
end

--- @param p0 userdata
--- @param index integer
--- @return string
natives.network_ugcQueryGetName = function(p0, index)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0x2D053EA815702DD1, 'string', p0, index)
    return call
end

--- @param p0 userdata
--- @param index integer
--- @return string
natives.network_ugcQueryGetRootContentId = function(p0, index)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0x566CEB0542EF5ECF, 'string', p0, index)
    return call
end

--- @param p0 userdata
--- @param index integer
--- @return string
natives.network_ugcQueryGetPlaylistName = function(p0, index)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0xCAF50048C8D0FBA0, 'string', p0, index)
    return call
end

--- @param p0 userdata
--- @param index integer
--- @return number
natives.network_ugcQueryGetMissionDescHash = function(p0, index)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0xA6BF569956C60A60, 'integer', p0, index)
    return call
end

-- Returns string for GET_STATUS_OF_LOAD_MISSION_CREATOR_PHOTO
--- @param p0 userdata
--- @param p1 integer
--- @param p2 userdata
--- @return string
natives.network_ugcQueryGetCreatorPhoto = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x409FE0CA6A4D1D49, 'string', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param index integer
--- @param p2 userdata
natives.network_ugcQueryGetDate = function(p0, index, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xE0CB4AB15CB32710, 'void', p0, index, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @return number
natives.network_ugcQueryGetPosixUpdatedDate = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x21A99A72B00D8002, 'int', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return number
natives.network_ugcQueryGetPosixPublishedDate = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x104080CA9E519B00, 'int', p0, p1)
    return call
end

--- @param p0 userdata
--- @param index integer
--- @param p2 integer
--- @return number
natives.network_ugcQueryGetVersion = function(p0, index, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x63E9DCBC8B0931ED, 'int', p0, index, p2)
    return call
end

--- @param p0 userdata
--- @param index integer
--- @return number
natives.network_ugcQueryGetLanguage = function(p0, index)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0x97764E8AC6487A9A, 'int', p0, index)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return boolean
natives.network_ugcQueryGetPublished = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x9993F1E11944A3DD, 'bool', p0, p1)
    return call
end

--- @param p0 userdata
--- @param index integer
--- @param p2 integer
--- @return number
natives.network_ugcQueryGetRating = function(p0, index, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x24CD8FAEA1368379, 'float', p0, index, p2)
    return call
end

--- @param p0 userdata
--- @param index integer
--- @param p2 integer
--- @return any
natives.network_n0X5F0E99071582Deca = function(p0, index, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x5F0E99071582DECA, 'any', p0, index, p2)
    return call
end

--- @param p0 userdata
--- @param index integer
--- @return boolean
natives.network_ugcQueryGetContentHasPlayerRecord = function(p0, index)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0xF794765390A6DCA5, 'bool', p0, index)
    return call
end

--- @param p0 userdata
--- @param index integer
--- @return boolean
natives.network_ugcQueryGetBookMarked = function(p0, index)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0x98539FC453AEA639, 'bool', p0, index)
    return call
end

-- Checks if the user has ROS privilege 14.
--- @return boolean
natives.network_ugcHasPrivilege = function()

    local call = natives.invoke(0x6506BFA755FB209C, 'bool')
    return call
end

--- @param contenttypename string
--- @param contentid string
--- @param fileid integer
--- @param fileversion integer
--- @param languageid integer
--- @return number
natives.network_ugcRequestContentDataFromParams = function(contenttypename, contentid, fileid, fileversion, languageid)
    assert(type(contenttypename) == 'string', 'Argument contenttypename must be of type string.')
    assert(type(contentid) == 'string', 'Argument contentid must be of type string.')
    assert(type(fileid) == 'integer', 'Argument fileid must be of type integer.')
    assert(type(fileversion) == 'integer', 'Argument fileversion must be of type integer.')
    assert(type(languageid) == 'integer', 'Argument languageid must be of type integer.')

    local call = natives.invoke(0x7FD2990AF016795E, 'int', contenttypename, contentid, fileid, fileversion, languageid)
    return call
end

--- @param description integer
--- @return number
natives.network_ugcRequestCachedDescription = function(description)
    assert(type(description) == 'integer', 'Argument description must be of type integer.')

    local call = natives.invoke(0x5E0165278F6339EE, 'int', description)
    return call
end

--- @param description integer
--- @return boolean
natives.network_ugcIsDescriptionRequestInProgress = function(description)
    assert(type(description) == 'integer', 'Argument description must be of type integer.')

    local call = natives.invoke(0x2D5DC831176D0114, 'bool', description)
    return call
end

--- @param description integer
--- @return boolean
natives.network_ugcHasDescriptionRequestFinished = function(description)
    assert(type(description) == 'integer', 'Argument description must be of type integer.')

    local call = natives.invoke(0xEBFA8D50ADDC54C4, 'bool', description)
    return call
end

--- @param description integer
--- @return boolean
natives.network_ugcDidDescriptionRequestSucceed = function(description)
    assert(type(description) == 'integer', 'Argument description must be of type integer.')

    local call = natives.invoke(0x162C23CA83ED0A62, 'bool', description)
    return call
end

--- @param description integer
--- @param length integer
--- @return string
natives.network_ugcGetCachedDescription = function(description, length)
    assert(type(description) == 'integer', 'Argument description must be of type integer.')
    assert(type(length) == 'integer', 'Argument length must be of type integer.')

    local call = natives.invoke(0x40F7E66472DF3E5C, 'string', description, length)
    return call
end

--- @param description integer
--- @return boolean
natives.network_ugcReleaseCachedDescription = function(description)
    assert(type(description) == 'integer', 'Argument description must be of type integer.')

    local call = natives.invoke(0x5A34CD9C3C5BEC44, 'bool', description)
    return call
end

natives.network_ugcReleaseAllCachedDescriptions = function()

    local call = natives.invoke(0x68103E2247887242, 'void')
end

--- @param p0 boolean
natives.network_ugcSetQueryDataFromOffline = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0xF98DDE0A8ED09323, 'void', p0)
end

--- @param languageid integer
--- @return boolean
natives.network_ugcIsLanguageSupported = function(languageid)
    assert(type(languageid) == 'integer', 'Argument languageid must be of type integer.')

    local call = natives.invoke(0xF53E48461B71EECB, 'bool', languageid)
    return call
end

--- @param p0 string
--- @param p1 integer
--- @param p2 integer
--- @return any
natives.network_n0Xd4022C7286B0Dfa2 = function(p0, p1, p2)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0xD4022C7286B0DFA2, 'any', p0, p1, p2)
    return call
end

-- Returns false if pedshot push failed
--- @param texture string
--- @param personaphototype integer
--- @param formatindex integer
--- @return boolean
natives.network_networkPersonaPhotoWriteScProfile = function(texture, personaphototype, formatindex)
    assert(type(texture) == 'string', 'Argument texture must be of type string.')
    assert(type(personaphototype) == 'integer', 'Argument personaphototype must be of type integer.')
    assert(type(formatindex) == 'integer', 'Argument formatindex must be of type integer.')

    local call = natives.invoke(0xB72999D3120599DF, 'bool', texture, personaphototype, formatindex)
    return call
end

-- Returns false if pedshot push failed
--- @param texture string
--- @param playerslot integer
--- @param p2 integer
--- @param personaphotolocalcachetype integer
--- @return boolean
natives.network_networkPersonaPhotoWriteLocal = function(texture, playerslot, p2, personaphotolocalcachetype)
    assert(type(texture) == 'string', 'Argument texture must be of type string.')
    assert(type(playerslot) == 'integer', 'Argument playerslot must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(personaphotolocalcachetype) == 'integer', 'Argument personaphotolocalcachetype must be of type integer.')

    local call = natives.invoke(0x2A48D9567940598F, 'bool', texture, playerslot, p2, personaphotolocalcachetype)
    return call
end

-- _NETWORK_IS_T* - _NETWORK_RE*
--- @return boolean
natives.network_networkIsPreviousUploadPending = function()

    local call = natives.invoke(0xA21E3BAD0A42D199, 'bool')
    return call
end

--- @return any
natives.network_n0Xcc4E72C339461Ed1 = function()

    local call = natives.invoke(0xCC4E72C339461ED1, 'any')
    return call
end

-- Only used in R* SP Scripts
--- @param player integer
--- @param personaphotolocalcachetype integer
--- @return string
natives.network_requestPedshotTextureLocalBackupDownload = function(player, personaphotolocalcachetype)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(personaphotolocalcachetype) == 'integer', 'Argument personaphotolocalcachetype must be of type integer.')

    local call = natives.invoke(0x356F9FB0698C1FEB, 'string', player, personaphotolocalcachetype)
    return call
end

-- Only used in R* SP Script map_app_event_handler
--- @param gamerhandle userdata
--- @param p1 integer
--- @return string
natives.network_requestPedshotTextureLocalDownload = function(gamerhandle, p1)
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xCAF4CA2F87779F8F, 'string', gamerhandle, p1)
    return call
end

--- @param gamerhandle userdata
--- @param p1 integer
--- @return string
natives.network_requestPedshotTextureMultiplayerDownload = function(gamerhandle, p1)
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xB5C4B18B12A2AF23, 'string', gamerhandle, p1)
    return call
end

--- @param name string
--- @return boolean
natives.network_textureDownloadTextureNameIsValid = function(name)
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0xE2C3CEC3C0903A00, 'bool', name)
    return call
end

-- Returns textureDownloadId
--- @param gamerhandle userdata
--- @param filepath string
--- @param name string
--- @param p3 boolean
--- @return number
natives.network_textureDownloadRequest = function(gamerhandle, filepath, name, p3)
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')
    assert(type(filepath) == 'string', 'Argument filepath must be of type string.')
    assert(type(name) == 'string', 'Argument name must be of type string.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0x16160DA74A8E74A2, 'int', gamerhandle, filepath, name, p3)
    return call
end

-- Returns textureDownloadId
--- @param gamerhandle userdata
--- @param p1 integer
--- @param name string
--- @param p3 boolean
--- @return number
natives.network_mugshotTextureDownloadRequest = function(gamerhandle, p1, name, p3)
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(name) == 'string', 'Argument name must be of type string.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0x9B5DB6CEAFAA10BB, 'int', gamerhandle, p1, name, p3)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 boolean
--- @return number
natives.network_ugcTextureDownloadRequest = function(p0, p1, p2, p3, p4, p5)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')

    local call = natives.invoke(0x308F96458B7087CC, 'int', p0, p1, p2, p3, p4, p5)
    return call
end

--- @param playerslot integer
--- @param personaphotolocalcachetype integer
--- @return number
natives.network_localPlayerPedshotTextureDownloadRequest = function(playerslot, personaphotolocalcachetype)
    assert(type(playerslot) == 'integer', 'Argument playerslot must be of type integer.')
    assert(type(personaphotolocalcachetype) == 'integer', 'Argument personaphotolocalcachetype must be of type integer.')

    local call = natives.invoke(0x6E2FD8CF7EB10E53, 'int', playerslot, personaphotolocalcachetype)
    return call
end

--- @param texturedownloadid integer
natives.network_textureDownloadRelease = function(texturedownloadid)
    assert(type(texturedownloadid) == 'integer', 'Argument texturedownloadid must be of type integer.')

    local call = natives.invoke(0x487EB90B98E9FB19, 'void', texturedownloadid)
end

--- @param name string
natives.network_textureDownloadReleaseByName = function(name)
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0x7A17B7981560FFA5, 'void', name)
end

--- @param texturedownloadid integer
--- @return string
natives.network_textureDownloadGetName = function(texturedownloadid)
    assert(type(texturedownloadid) == 'integer', 'Argument texturedownloadid must be of type integer.')

    local call = natives.invoke(0x3448505B6E35262D, 'string', texturedownloadid)
    return call
end

-- 0 = succeeded
-- 1 = pending
-- 2 = failed
--- @param texturedownloadid integer
--- @return number
natives.network_getStatusOfTextureDownload = function(texturedownloadid)
    assert(type(texturedownloadid) == 'integer', 'Argument texturedownloadid must be of type integer.')

    local call = natives.invoke(0x8BD6C6DEA20E82C6, 'int', texturedownloadid)
    return call
end

--- @return number
natives.network_pedmugshotGetStatus = function()

    local call = natives.invoke(0xCBAC13F065C47596, 'int')
    return call
end

--- @return boolean
natives.network_pedmugshotTake = function()

    local call = natives.invoke(0xCD954F330693F5F2, 'bool')
    return call
end

--- @return any
natives.network_pedmugshotRequestSend = function()

    local call = natives.invoke(0xFBC30B70B3CDB87E, 'any')
    return call
end

natives.network_n0X814729078Aed6D30 = function()

    local call = natives.invoke(0x814729078AED6D30, 'void')
end

--- @return boolean
natives.network_networkHaveRosBannedPriv = function()

    local call = natives.invoke(0x8020A73847E0CA7D, 'bool')
    return call
end

--- @param index integer
--- @return boolean
natives.network_networkHasRosPrivilege = function(index)
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0xA699957E60D80214, 'bool', index)
    return call
end

-- Always returns -1. Seems to be XB1 specific.
--- @param gamerhandle userdata
--- @return number
natives.network_networkStartUserContentPermissionsCheck = function(gamerhandle)
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')

    local call = natives.invoke(0xDEB2B99A1AF1A2A6, 'int', gamerhandle)
    return call
end

--- @param toggle boolean
natives.network_networkAutoSessionSetAllowedToSplit = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x0A428058079EE65C, 'void', toggle)
end

--- @return boolean
natives.network_networkAutoSessionIsAllowedToMerge = function()

    local call = natives.invoke(0xAADED99A6B268A27, 'bool')
    return call
end

--- @param toggle boolean
--- @param p1 userdata
--- @param p2 integer
natives.network_networkAutoSessionSetAllowedToMerge = function(toggle, p1, p2)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x63246A24F5747510, 'void', toggle, p1, p2)
end

--- @return boolean
natives.network_networkAutoSessionIsAutoWarpDisabled = function()

    local call = natives.invoke(0xE258570E0C116A66, 'bool')
    return call
end

--- @param toggle boolean
natives.network_networkAutoSessionSetAutoWarpEnabled = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x4440FEE3EFE78F54, 'void', toggle)
end

--- @param p0 integer
--- @return boolean
natives.network_networkAutoSessionCanSplitSession = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0xE404BFF0ABA23CDC, 'bool', p0)
    return call
end

--- @param playerstotake integer
--- @param maxinstanceplayers integer
--- @param sessionflags integer
--- @param bucketid integer
--- @return boolean
natives.network_networkAutoSessionSplitSession = function(playerstotake, maxinstanceplayers, sessionflags, bucketid)
    assert(type(playerstotake) == 'integer', 'Argument playerstotake must be of type integer.')
    assert(type(maxinstanceplayers) == 'integer', 'Argument maxinstanceplayers must be of type integer.')
    assert(type(sessionflags) == 'integer', 'Argument sessionflags must be of type integer.')
    assert(type(bucketid) == 'integer', 'Argument bucketid must be of type integer.')

    local call = natives.invoke(0xC223D299C670413D, 'bool', playerstotake, maxinstanceplayers, sessionflags, bucketid)
    return call
end

--- @return boolean
natives.network_networkAutoSessionIsProcessingSessionSplit = function()

    local call = natives.invoke(0xA021095C983F20D8, 'bool')
    return call
end

--- @return boolean
natives.network_networkAutoSessionSplitSessionSuccessful = function()

    local call = natives.invoke(0x6D87BA8EF15226CD, 'bool')
    return call
end

--- @return boolean
natives.network_networkAutoSessionIsInstancedSession = function()

    local call = natives.invoke(0x277865A734918AE6, 'bool')
    return call
end

natives.network_networkAutoSessionFinishInstance = function()

    local call = natives.invoke(0xBB51299166B844F3, 'void')
end

-- Note: this native was added in build 1311.23
natives.network_n0Xfd8112109A96877C = function()

    local call = natives.invoke(0xFD8112109A96877C, 'void')
end

--- @param player integer
--- @param p1 number
natives.network_n0X5A91Bcef74944E93 = function(player, p1)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x5A91BCEF74944E93, 'void', player, p1)
end

-- Note: this native was added in build 1311.23
--- @return number
natives.network_n0Xfb3205788F8Afa3F = function()

    local call = natives.invoke(0xFB3205788F8AFA3F, 'int')
    return call
end

-- Note: this native was added in build 1311.23
--- @param p0 integer
natives.network_n0X335Af56613Ca0F49 = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x335AF56613CA0F49, 'void', p0)
end

-- Note: this native was added in build 1311.23
--- @param p0 integer
--- @return boolean
natives.network_n0X9E5A47744C0F0376 = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x9E5A47744C0F0376, 'bool', p0)
    return call
end

-- Note: this native was added in build 1311.23
--- @param p0 integer
natives.network_n0Xd3B6Ebc6C3D77D44 = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0xD3B6EBC6C3D77D44, 'void', p0)
end

-- Note: this native was added in build 1311.23
--- @param p0 integer
natives.network_n0Xa7670F7991099680 = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0xA7670F7991099680, 'void', p0)
end

-- Note: this native was added in build 1311.23
natives.network_n0X7673C0D2C5Cdac55 = function()

    local call = natives.invoke(0x7673C0D2C5CDAC55, 'void')
end

-- Note: this native was added in build 1311.23
--- @param p0 integer
--- @param p1 integer
--- @param p2 number
natives.network_n0X3Cbd6565D9C3B133 = function(p0, p1, p2)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')

    local call = natives.invoke(0x3CBD6565D9C3B133, 'void', p0, p1, p2)
end

-- Note: this native was added in build 1311.23
--- @param p0 integer
--- @param p1 integer
natives.network_n0X0D183D8490Ee4366 = function(p0, p1)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x0D183D8490EE4366, 'void', p0, p1)
end

-- Note: this native was added in build 1311.23
--- @param p0 integer
natives.network_n0Xc1968045Eeb563B7 = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0xC1968045EEB563B7, 'void', p0)
end

--- @return boolean
natives.network_networkAutoSessionIsObjectCreationPaused = function()

    local call = natives.invoke(0x0E2C3AEE6CE603B7, 'bool')
    return call
end

--- @return boolean
natives.network_n0X0B6B4507Ac5Ea8B8 = function()

    local call = natives.invoke(0x0B6B4507AC5EA8B8, 'bool')
    return call
end

--- @return boolean
natives.network_networkIsResettingPopulation = function()

    local call = natives.invoke(0x1BB50CD340A996E6, 'bool')
    return call
end

--- @param p0 boolean
--- @param p1 integer
--- @return boolean
natives.network_networkResetPopulation = function(p0, p1)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x101F538C25ABB39A, 'bool', p0, p1)
    return call
end

--- @param toggle boolean
natives.network_networkDisableLeaveRemotePedBehind = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xC505036A35AFD01B, 'void', toggle)
end

--- @param p0 boolean
natives.network_n0X3034C77C79A58880 = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x3034C77C79A58880, 'void', p0)
end

-- Old name: _NETWORK_ALLOW_LOCAL_ENTITY_ATTACHMENT
--- @param entity integer
--- @param toggle boolean
natives.network_networkAllowRemoteAttachmentModification = function(entity, toggle)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x267C78C60E806B9A, 'void', entity, toggle)
end

-- nullsub, doesn't do anything
--- @param player integer
natives.network_networkShowChatRestrictionMsc = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x6BFF5F84102DF80A, 'void', player)
end

-- nullsub, doesn't do anything
natives.network_networkShowPsnUgcRestriction = function()

    local call = natives.invoke(0x5C497525F803486B, 'void')
end

-- Old name: _NETWORK_IS_CONNECTION_ENDPOINT_RELAY_SERVER
--- @param player integer
--- @return boolean
natives.network_networkIsConnectedViaRelay = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x16D3D49902F697BB, 'bool', player)
    return call
end

-- Old name: _NETWORK_GET_AVERAGE_LATENCY_FOR_PLAYER
--- @param player integer
--- @return number
natives.network_networkGetAverageLatency = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xD414BE129BB81B32, 'float', player)
    return call
end

-- Same as NETWORK_GET_AVERAGE_LATENCY (0xD414BE129BB81B32)
-- 
-- Old name: _NETWORK_GET_AVERAGE_LATENCY_FOR_PLAYER_2
--- @param player integer
--- @return number
natives.network_networkGetAveragePing = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x0E3A041ED6AC2B45, 'float', player)
    return call
end

-- Old name: _NETWORK_GET_AVERAGE_PACKET_LOSS_FOR_PLAYER
--- @param player integer
--- @return number
natives.network_networkGetAveragePacketLoss = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x350C23949E43686C, 'float', player)
    return call
end

-- Old name: _NETWORK_GET_NUM_UNACKED_FOR_PLAYER
--- @param player integer
--- @return number
natives.network_networkGetNumUnackedReliables = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xFF8FCF9FFC458A1C, 'int', player)
    return call
end

-- Old name: _NETWORK_GET_UNRELIABLE_RESEND_COUNT_FOR_PLAYER
--- @param player integer
--- @return number
natives.network_networkGetUnreliableResendCount = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x3765C3A3E8192E10, 'int', player)
    return call
end

-- Old name: _NETWORK_GET_OLDEST_RESEND_COUNT_FOR_PLAYER
--- @param player integer
--- @return number
natives.network_networkGetHighestReliableResendCount = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x52C1EADAF7B10302, 'int', player)
    return call
end

-- nullsub, doesn't do anything
natives.network_networkDumpNetIfConfig = function()

    local call = natives.invoke(0xAEDF1BC1C133D6E3, 'void')
end

-- nullsub, doesn't do anything
natives.network_networkGetNetStatisticsInfo = function()

    local call = natives.invoke(0x6FD992C4A1C1B986, 'void')
end

-- Returns true if the passed value is less than 32.
--- @param player integer
--- @return boolean
natives.network_networkIsPlayerIndexValid = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x255A5EF65EDA9167, 'bool', player)
    return call
end

--- @param player integer
--- @return boolean
natives.network_getPlayerWaypointIsActive = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xDCC4B7F7112E8AB7, 'bool', player)
    return call
end

--- @param p0 boolean
natives.network_n0X455156F47Dc6B78C = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x455156F47DC6B78C, 'void', p0)
end

--- @param player integer
--- @param damagemultiplier number
natives.network_setLocalPlayerDamageMultiplierForPlayer = function(player, damagemultiplier)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(damagemultiplier) == 'number', 'Argument damagemultiplier must be of type number.')

    local call = natives.invoke(0xD041A32992A55F84, 'void', player, damagemultiplier)
end

-- Old name: _NETWORK_SET_VEHICLE_WHEELS_DESTRUCTIBLE
--- @param entity integer
--- @param p1 boolean
natives.network_networkTriggerDamageEventForZeroDamage = function(entity, p1)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x0C8BC052AE87D744, 'void', entity, p1)
end

--- @param p0 userdata
natives.network_n0X5Cd3Aad8Ff9Ed121 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x5CD3AAD8FF9ED121, 'void', p0)
end

--- @param player integer
--- @param type integer
natives.network_n0X51951De06C0D1C40 = function(player, type)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(type) == 'integer', 'Argument type must be of type integer.')

    local call = natives.invoke(0x51951DE06C0D1C40, 'void', player, type)
end

--- @param setting integer
natives.network_n0Xe3Ab5Eefcb6671A2 = function(setting)
    assert(type(setting) == 'integer', 'Argument setting must be of type integer.')

    local call = natives.invoke(0xE3AB5EEFCB6671A2, 'void', setting)
end

natives.network_n0X9B39B0555Cc692B5 = function()

    local call = natives.invoke(0x9B39B0555CC692B5, 'void')
end

--- @param player1 integer
--- @param player2 integer
--- @return number
natives.network_n0Xfe53B1F8D43F19Bf = function(player1, player2)
    assert(type(player1) == 'integer', 'Argument player1 must be of type integer.')
    assert(type(player2) == 'integer', 'Argument player2 must be of type integer.')

    local call = natives.invoke(0xFE53B1F8D43F19BF, 'int', player1, player2)
    return call
end

--- @param player1 integer
--- @param player2 integer
--- @return boolean
natives.network_n0X862C5040F4888741 = function(player1, player2)
    assert(type(player1) == 'integer', 'Argument player1 must be of type integer.')
    assert(type(player2) == 'integer', 'Argument player2 must be of type integer.')

    local call = natives.invoke(0x862C5040F4888741, 'bool', player1, player2)
    return call
end

-- nullsub, doesn't do anything
natives.network_n0X2Cd41Ac000E6F611 = function()

    local call = natives.invoke(0x2CD41AC000E6F611, 'void')
end

-- nullsub, doesn't do anything
natives.network_n0Xacc44768Af229042 = function()

    local call = natives.invoke(0xACC44768AF229042, 'void')
end

--- @param p0 userdata
--- @param p1 integer
--- @param p2 integer
--- @param p3 integer
--- @param p4 integer
--- @param p5 integer
--- @param p6 integer
--- @param p7 integer
--- @param p8 integer
--- @param p9 integer
--- @param p10 integer
--- @param p11 integer
--- @param p12 integer
--- @param p13 integer
--- @param p14 integer
natives.network_n0X7E300B5B86Ab1D1A = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')
    assert(type(p5) == 'integer', 'Argument p5 must be of type integer.')
    assert(type(p6) == 'integer', 'Argument p6 must be of type integer.')
    assert(type(p7) == 'integer', 'Argument p7 must be of type integer.')
    assert(type(p8) == 'integer', 'Argument p8 must be of type integer.')
    assert(type(p9) == 'integer', 'Argument p9 must be of type integer.')
    assert(type(p10) == 'integer', 'Argument p10 must be of type integer.')
    assert(type(p11) == 'integer', 'Argument p11 must be of type integer.')
    assert(type(p12) == 'integer', 'Argument p12 must be of type integer.')
    assert(type(p13) == 'integer', 'Argument p13 must be of type integer.')
    assert(type(p14) == 'integer', 'Argument p14 must be of type integer.')

    local call = natives.invoke(0x7E300B5B86AB1D1A, 'void', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14)
end

--- @param player integer
--- @return number
natives.network_getUniqueIntForPlayer = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x07F723401B9D921C, 'int', player)
    return call
end

--- @param toggle boolean
natives.network_n0X780A13F780A13F1B = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x780A13F780A13F1B, 'void', toggle)
end

--- @param player integer
--- @param trackedplayer integer
--- @return boolean
natives.network_networkIsTrackedPlayerVisible = function(player, trackedplayer)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(trackedplayer) == 'integer', 'Argument trackedplayer must be of type integer.')

    local call = natives.invoke(0xE525878A35B9EEBD, 'bool', player, trackedplayer)
    return call
end

--- @param player integer
--- @return boolean
natives.network_networkIsAimCamActive = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x8E7CE19219669AEB, 'bool', player)
    return call
end

--- @param ctx integer
--- @param lh integer
--- @param ec integer
--- @param h integer
natives.network_networkAlert = function(ctx, lh, ec, h)
    assert(type(ctx) == 'integer', 'Argument ctx must be of type integer.')
    assert(type(lh) == 'integer', 'Argument lh must be of type integer.')
    assert(type(ec) == 'integer', 'Argument ec must be of type integer.')
    assert(type(h) == 'integer', 'Argument h must be of type integer.')

    local call = natives.invoke(0x1BAA028F52EED310, 'void', ctx, lh, ec, h)
end

-- Note: this native was added in build 1311.23
--- @param ctx integer
--- @param ec integer
--- @param ex boolean
--- @param ro boolean
natives.network_n0X19447Fcae97704Dc = function(ctx, ec, ex, ro)
    assert(type(ctx) == 'integer', 'Argument ctx must be of type integer.')
    assert(type(ec) == 'integer', 'Argument ec must be of type integer.')
    assert(type(ex) == 'boolean', 'Argument ex must be of type boolean.')
    assert(type(ro) == 'boolean', 'Argument ro must be of type boolean.')

    local call = natives.invoke(0x19447FCAE97704DC, 'void', ctx, ec, ex, ro)
end

-- nullsub, doesn't do anything
--- @param p0 string
natives.network_n0X2C4E98Dda475364F = function(p0)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')

    local call = natives.invoke(0x2C4E98DDA475364F, 'void', p0)
end

--- @param p0 integer
--- @param p1 integer
natives.network_n0X3F0Abae38A0515Ad = function(p0, p1)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x3F0ABAE38A0515AD, 'void', p0, p1)
end

--- @param p0 integer
--- @return number
natives.network_n0X3F2Ee18A3E294801 = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x3F2EE18A3E294801, 'int', p0)
    return call
end

--- @param toggle boolean
natives.network_setSocialMatchmakingAllowed = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x777D0571A466B520, 'void', toggle)
end

--- @return boolean
natives.network_getSocialMatchmakingAllowed = function()

    local call = natives.invoke(0xD0541EF28E9C4783, 'bool')
    return call
end

--- @param p0 userdata
--- @return boolean
natives.network_networkAwardHasReachedMaxclaim = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xFBE782B3165AC8EC, 'bool', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.network_n0X271F95E55C663B8B = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x271F95E55C663B8B, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @return any
natives.network_n0X64A36Ba85Ce01A81 = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x64A36BA85CE01A81, 'any', p0, p1, p2, p3)
    return call
end

--- @param p0 userdata
--- @return any
natives.network_n0Xe10F2D7715Ababec = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xE10F2D7715ABABEC, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.network_n0X7A8E8Df782B47Eb0 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x7A8E8DF782B47EB0, 'any', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.network_n0X77B299E8799B1332 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x77B299E8799B1332, 'any', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @return any
natives.network_n0X923346025512Dfb7 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x923346025512DFB7, 'any', p0)
    return call
end

--- @return number
natives.network_networkGetXp = function()

    local call = natives.invoke(0xDB438CC9BC6F4022, 'int')
    return call
end

--- @return number
natives.network_networkGetRank = function()

    local call = natives.invoke(0x32C90CDFAF40514C, 'int')
    return call
end

--- @param toggle boolean
natives.network_networkSetRecentGamersEnabled = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x29FE035D35B8589C, 'void', toggle)
end

--- @return boolean
natives.network_n0X273E04A3A7Ad1F2D = function()

    local call = natives.invoke(0x273E04A3A7AD1F2D, 'bool')
    return call
end

--- @param player integer
--- @param p1 integer
natives.network_networkAddPlayerToRecentGamersList = function(player, p1)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x157D8F3DE12B307F, 'void', player, p1)
end

--- @param p0 integer
--- @param playercount integer
--- @return boolean
natives.network_networkRequestRecentGamerNames = function(p0, playercount)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(playercount) == 'integer', 'Argument playercount must be of type integer.')

    local call = natives.invoke(0x6D206D383BB5F6B1, 'bool', p0, playercount)
    return call
end

--- @return boolean
natives.network_networkIsRecentGamerNamesRequestInProgress = function()

    local call = natives.invoke(0x4664D213A0CCAF40, 'bool')
    return call
end

--- @return boolean
natives.network_networkDidRecentGamerNamesRequestSucceed = function()

    local call = natives.invoke(0x12AEB56B489415C5, 'bool')
    return call
end

--- @return number
natives.network_networkGetNumRecentGamers = function()

    local call = natives.invoke(0x37A834AEC6A4F74A, 'int')
    return call
end

--- @param p0 integer
--- @param p1 integer
--- @param outdata userdata
--- @param datasize integer
--- @return boolean
natives.network_networkGetRecentGamerNames = function(p0, p1, outdata, datasize)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(outdata) == 'userdata', 'Argument outdata must be of type userdata.')
    assert(type(datasize) == 'integer', 'Argument datasize must be of type integer.')

    local call = natives.invoke(0xFEFCC345CE357453, 'bool', p0, p1, outdata, datasize)
    return call
end

natives.network_n0X49Cf17A564918E8D = function()

    local call = natives.invoke(0x49CF17A564918E8D, 'void')
end

--- @param p0 integer
natives.network_n0Xd637D327080Cd86E = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0xD637D327080CD86E, 'void', p0)
end

natives.network_n0X564552C6Af1Eeab1 = function()

    local call = natives.invoke(0x564552C6AF1EEAB1, 'void')
end

natives.network_networkActivityResetToIdle = function()

    local call = natives.invoke(0x3FE141FDB990E3D1, 'void')
end

--- @param netplaylistactivity integer
natives.network_networkActivitySetCurrent = function(netplaylistactivity)
    assert(type(netplaylistactivity) == 'integer', 'Argument netplaylistactivity must be of type integer.')

    local call = natives.invoke(0x9ADAC065D9F6706F, 'void', netplaylistactivity)
end

-- Returns CGameConfig->ConfigOnlineServices->RosTitleName (see gameconfig.xml)
--- @return string
natives.network_networkGetRosTitleName = function()

    local call = natives.invoke(0xAC6153A0722F524C, 'string')
    return call
end

--- @param player integer
--- @param reporttype integer
--- @param description string
--- @param horsename string
natives.network_reportPlayer = function(player, reporttype, description, horsename)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(reporttype) == 'integer', 'Argument reporttype must be of type integer.')
    assert(type(description) == 'string', 'Argument description must be of type string.')
    assert(type(horsename) == 'string', 'Argument horsename must be of type string.')

    local call = natives.invoke(0xA197C35F73AC0F12, 'void', player, reporttype, description, horsename)
end

--- @param modelhash integer
--- @param x number
--- @param y number
--- @param z number
--- @param isnetwork boolean
--- @param bscripthostobj boolean
--- @param dynamic boolean
--- @param p7 boolean
--- @param p8 boolean
--- @return number
natives.object_createObject = function(modelhash, x, y, z, isnetwork, bscripthostobj, dynamic, p7, p8)
    assert(type(modelhash) == 'integer', 'Argument modelhash must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(isnetwork) == 'boolean', 'Argument isnetwork must be of type boolean.')
    assert(type(bscripthostobj) == 'boolean', 'Argument bscripthostobj must be of type boolean.')
    assert(type(dynamic) == 'boolean', 'Argument dynamic must be of type boolean.')
    assert(type(p7) == 'boolean', 'Argument p7 must be of type boolean.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')

    local call = natives.invoke(0x509D5878EB39E842, 'integer', modelhash, x, y, z, isnetwork, bscripthostobj, dynamic, p7, p8)
    return call
end

--- @param modelhash integer
--- @param x number
--- @param y number
--- @param z number
--- @param isnetwork boolean
--- @param bscripthostobj boolean
--- @param dynamic boolean
--- @param p7 boolean
--- @return number
natives.object_createObjectNoOffset = function(modelhash, x, y, z, isnetwork, bscripthostobj, dynamic, p7)
    assert(type(modelhash) == 'integer', 'Argument modelhash must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(isnetwork) == 'boolean', 'Argument isnetwork must be of type boolean.')
    assert(type(bscripthostobj) == 'boolean', 'Argument bscripthostobj must be of type boolean.')
    assert(type(dynamic) == 'boolean', 'Argument dynamic must be of type boolean.')
    assert(type(p7) == 'boolean', 'Argument p7 must be of type boolean.')

    local call = natives.invoke(0x9A294B2138ABB884, 'integer', modelhash, x, y, z, isnetwork, bscripthostobj, dynamic, p7)
    return call
end

-- Deletes the specified object, then sets the handle pointed to by the pointer to NULL.
--- @param object integer
natives.object_deleteObject = function(object)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')

    local call = natives.invoke(0x931914268722C263, 'void', object)
end

--- @param object integer
--- @param p1 boolean
--- @return boolean
natives.object_placeObjectOnGroundProperly = function(object, p1)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x58A850EAEE20FAA3, 'bool', object, p1)
    return call
end

--- @param object integer
--- @param tox number
--- @param toy number
--- @param toz number
--- @param speedx number
--- @param speedy number
--- @param speedz number
--- @param collision boolean
--- @return boolean
natives.object_slideObject = function(object, tox, toy, toz, speedx, speedy, speedz, collision)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(tox) == 'number', 'Argument tox must be of type number.')
    assert(type(toy) == 'number', 'Argument toy must be of type number.')
    assert(type(toz) == 'number', 'Argument toz must be of type number.')
    assert(type(speedx) == 'number', 'Argument speedx must be of type number.')
    assert(type(speedy) == 'number', 'Argument speedy must be of type number.')
    assert(type(speedz) == 'number', 'Argument speedz must be of type number.')
    assert(type(collision) == 'boolean', 'Argument collision must be of type boolean.')

    local call = natives.invoke(0x2FDFF4107B8C1147, 'bool', object, tox, toy, toz, speedx, speedy, speedz, collision)
    return call
end

--- @param object integer
--- @param targettable boolean
natives.object_setObjectTargettable = function(object, targettable)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(targettable) == 'boolean', 'Argument targettable must be of type boolean.')

    local call = natives.invoke(0x8A7391690F5AFD81, 'void', object, targettable)
end

--- @param object integer
--- @param targettable boolean
natives.object_setObjectTargettable2 = function(object, targettable)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(targettable) == 'boolean', 'Argument targettable must be of type boolean.')

    local call = natives.invoke(0x581EDBE56E8D62C9, 'void', object, targettable)
end

-- When p1 and p2 are true you can focus on the object (similar to when you focus a ped)
--- @param object integer
--- @param p1 boolean
--- @param p2 boolean
natives.object_setObjectTargettableFocus = function(object, p1, p2)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xA22712E8471AA08E, 'void', object, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
natives.object_n0Xf6E88489B4E6Ebe5 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xF6E88489B4E6EBE5, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.object_n0Xe157A8A336C7F04A = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xE157A8A336C7F04A, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.object_n0X46Cbcf0E98A4E156 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x46CBCF0E98A4E156, 'void', p0, p1)
end

-- missionScriptObject - if true won't return mission script objects
-- scriptHostObject - if true won't return script host objects
-- networkObject - if true won't return networked objects
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param modelhash integer
--- @param missionscriptobject boolean
--- @param scripthostobject boolean
--- @param networkobject boolean
--- @return number
natives.object_getClosestObjectOfType = function(x, y, z, radius, modelhash, missionscriptobject, scripthostobject, networkobject)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(modelhash) == 'integer', 'Argument modelhash must be of type integer.')
    assert(type(missionscriptobject) == 'boolean', 'Argument missionscriptobject must be of type boolean.')
    assert(type(scripthostobject) == 'boolean', 'Argument scripthostobject must be of type boolean.')
    assert(type(networkobject) == 'boolean', 'Argument networkobject must be of type boolean.')

    local call = natives.invoke(0xE143FA2249364369, 'integer', x, y, z, radius, modelhash, missionscriptobject, scripthostobject, networkobject)
    return call
end

--- @param p0 userdata
--- @return boolean
natives.object_hasObjectBeenBroken = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x8ABFB70C49CC43E2, 'bool', p0)
    return call
end

--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param modelhash integer
--- @param p5 userdata
--- @return boolean
natives.object_hasClosestObjectOfTypeBeenBroken = function(p0, p1, p2, p3, modelhash, p5)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(modelhash) == 'integer', 'Argument modelhash must be of type integer.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0x761B0E69AC4D007E, 'bool', p0, p1, p2, p3, modelhash, p5)
    return call
end

-- Old name: _GET_OBJECT_OFFSET_FROM_COORDS
--- @param xpos number
--- @param ypos number
--- @param zpos number
--- @param heading number
--- @param xoffset number
--- @param yoffset number
--- @param zoffset number
--- @return number, number, number
natives.object_getOffsetFromCoordAndHeadingInWorldCoords = function(xpos, ypos, zpos, heading, xoffset, yoffset, zoffset)
    assert(type(xpos) == 'number', 'Argument xpos must be of type number.')
    assert(type(ypos) == 'number', 'Argument ypos must be of type number.')
    assert(type(zpos) == 'number', 'Argument zpos must be of type number.')
    assert(type(heading) == 'number', 'Argument heading must be of type number.')
    assert(type(xoffset) == 'number', 'Argument xoffset must be of type number.')
    assert(type(yoffset) == 'number', 'Argument yoffset must be of type number.')
    assert(type(zoffset) == 'number', 'Argument zoffset must be of type number.')

    local call = natives.invoke(0x163E252DE035A133, 'vector3', xpos, ypos, zpos, heading, xoffset, yoffset, zoffset)
    return call.x, call.y, call.z
end

-- Registers a door, hashes: https:--github.com/femga/rdr3_discoveries/tree/master/doorHashes
--- @param doorhash integer
--- @param p1 boolean
--- @param p2 boolean
--- @param p3 boolean
--- @param threadid integer
--- @param p5 integer
--- @param p6 boolean
natives.object_addDoorToSystemNew = function(doorhash, p1, p2, p3, threadid, p5, p6)
    assert(type(doorhash) == 'integer', 'Argument doorhash must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')
    assert(type(threadid) == 'integer', 'Argument threadid must be of type integer.')
    assert(type(p5) == 'integer', 'Argument p5 must be of type integer.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')

    local call = natives.invoke(0xD99229FE93B46286, 'void', doorhash, p1, p2, p3, threadid, p5, p6)
end

--- @param doorhash integer
--- @return boolean
natives.object_isDoorRegisteredWithNetwork = function(doorhash)
    assert(type(doorhash) == 'integer', 'Argument doorhash must be of type integer.')

    local call = natives.invoke(0xB5DED7B65C604FDF, 'bool', doorhash)
    return call
end

--- @param doorhash integer
natives.object_removeDoorFromSystem = function(doorhash)
    assert(type(doorhash) == 'integer', 'Argument doorhash must be of type integer.')

    local call = natives.invoke(0x464D8E1427156FE4, 'void', doorhash)
end

-- Door lock states:
-- enum eDoorState
-- {
-- 	DOORSTATE_INVALID = -1,
-- 	DOORSTATE_UNLOCKED,
-- 	DOORSTATE_LOCKED_UNBREAKABLE,
-- 	DOORSTATE_LOCKED_BREAKABLE,
-- 	DOORSTATE_HOLD_OPEN_POSITIVE,
-- 	DOORSTATE_HOLD_OPEN_NEGATIVE
-- };
--- @param doorhash integer
--- @param state integer
natives.object_doorSystemSetDoorState = function(doorhash, state)
    assert(type(doorhash) == 'integer', 'Argument doorhash must be of type integer.')
    assert(type(state) == 'integer', 'Argument state must be of type integer.')

    local call = natives.invoke(0x6BAB9442830C7F53, 'void', doorhash, state)
end

--- @param doorhash integer
--- @return number
natives.object_doorSystemGetDoorState = function(doorhash)
    assert(type(doorhash) == 'integer', 'Argument doorhash must be of type integer.')

    local call = natives.invoke(0x160AA1B32F6139B8, 'int', doorhash)
    return call
end

--- @param doorhash integer
--- @param rate number
natives.object_doorSystemSetAutomaticRate = function(doorhash, rate)
    assert(type(doorhash) == 'integer', 'Argument doorhash must be of type integer.')
    assert(type(rate) == 'number', 'Argument rate must be of type number.')

    local call = natives.invoke(0x03C27E13B42A0E82, 'void', doorhash, rate)
end

--- @param doorhash integer
--- @param distance number
natives.object_doorSystemSetAutomaticDistance = function(doorhash, distance)
    assert(type(doorhash) == 'integer', 'Argument doorhash must be of type integer.')
    assert(type(distance) == 'number', 'Argument distance must be of type number.')

    local call = natives.invoke(0x9BA001CB45CBF627, 'void', doorhash, distance)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.object_n0Xb3B1546D23Df8De1 = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0xB3B1546D23DF8DE1, 'void', p0, p1, p2, p3, p4)
end

-- Sets the ajar angle of a door.
-- Ranges from -1.0 to 1.0, and 0.0 is closed / default.
--- @param doorhash integer
--- @param ajar number
--- @param forceupdate boolean
natives.object_doorSystemSetOpenRatio = function(doorhash, ajar, forceupdate)
    assert(type(doorhash) == 'integer', 'Argument doorhash must be of type integer.')
    assert(type(ajar) == 'number', 'Argument ajar must be of type number.')
    assert(type(forceupdate) == 'boolean', 'Argument forceupdate must be of type boolean.')

    local call = natives.invoke(0xB6E6FBA95C7324AC, 'void', doorhash, ajar, forceupdate)
end

--- @param p0 userdata
--- @param p1 userdata
natives.object_n0X3A77Dae8B4Fd7586 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x3A77DAE8B4FD7586, 'void', p0, p1)
end

--- @param doorhash integer
--- @param p1 boolean
natives.object_doorSystemSetAbleToChangeOpenRatioWhileLocked = function(doorhash, p1)
    assert(type(doorhash) == 'integer', 'Argument doorhash must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x1F1FABFE9B2A1254, 'void', doorhash, p1)
end

-- Returns true if door is alredy registered with owner
--- @param doorhash integer
--- @return boolean
natives.object_isDoorRegisteredWithOwner = function(doorhash)
    assert(type(doorhash) == 'integer', 'Argument doorhash must be of type integer.')

    local call = natives.invoke(0x4F89DAD4156BA145, 'bool', doorhash)
    return call
end

--- @param doorhash integer
natives.object_doorSystemChangeScriptOwner = function(doorhash)
    assert(type(doorhash) == 'integer', 'Argument doorhash must be of type integer.')

    local call = natives.invoke(0x985767F5FA45BC44, 'void', doorhash)
end

--- @param doorhash integer
--- @return number
natives.object_doorSystemGetAutomaticRate = function(doorhash)
    assert(type(doorhash) == 'integer', 'Argument doorhash must be of type integer.')

    local call = natives.invoke(0x8433E1954BE323FC, 'float', doorhash)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.object_n0X6E2Aa80Bb0C03728 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x6E2AA80BB0C03728, 'any', p0, p1)
    return call
end

-- _ALLOW_* - _ATTACH_*
--- @param doorhash integer
--- @param disable boolean
natives.object_doorSystemSetAutomaticState = function(doorhash, disable)
    assert(type(doorhash) == 'integer', 'Argument doorhash must be of type integer.')
    assert(type(disable) == 'boolean', 'Argument disable must be of type boolean.')

    local call = natives.invoke(0x1BC47A9DEDC8DF5D, 'void', doorhash, disable)
end

--- @param doorhash integer
--- @return number
natives.object_doorSystemGetOpenRatio = function(doorhash)
    assert(type(doorhash) == 'integer', 'Argument doorhash must be of type integer.')

    local call = natives.invoke(0x65499865FCA6E5EC, 'float', doorhash)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.object_n0X7F458B543006C8Fe = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x7F458B543006C8FE, 'void', p0, p1)
end

--- @param p0 userdata
--- @return any
natives.object_n0Xacd4F9831Dfad7F5 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xACD4F9831DFAD7F5, 'any', p0)
    return call
end

--- @param p0 userdata
natives.object_n0X0C0A373D181Bf900 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x0C0A373D181BF900, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
natives.object_n0Xa93F925F1942E434 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xA93F925F1942E434, 'void', p0, p1)
end

--- @param p0 userdata
--- @return any
natives.object_n0X4D8611Dfe1126478 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x4D8611DFE1126478, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.object_n0X57C242543B7B8Fb9 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x57C242543B7B8FB9, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.object_n0X4Ae07Eba3462C5D5 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x4AE07EBA3462C5D5, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.object_n0X22031584496Cfb70 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x22031584496CFB70, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.object_n0Xc07B91B996C1De89 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xC07B91B996C1DE89, 'void', p0, p1)
end

--- @param doorhash integer
--- @return boolean
natives.object_isDoorRegisteredWithSystem = function(doorhash)
    assert(type(doorhash) == 'integer', 'Argument doorhash must be of type integer.')

    local call = natives.invoke(0xC153C43EA202C8C1, 'bool', doorhash)
    return call
end

--- @param doorhash integer
--- @return boolean
natives.object_isDoorClosed = function(doorhash)
    assert(type(doorhash) == 'integer', 'Argument doorhash must be of type integer.')

    local call = natives.invoke(0xC531EE8A1145A149, 'bool', doorhash)
    return call
end

-- Params: p1 = 23 in R* Scripts
--- @param object integer
--- @param p1 integer
--- @return any
natives.object_n0X0943113E02322164 = function(object, p1)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x0943113E02322164, 'any', object, p1)
    return call
end

--- @param p0 userdata
--- @return any
natives.object_n0X614D0B4533F842D3 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x614D0B4533F842D3, 'any', p0)
    return call
end

--- @param doorhash integer
--- @param p1 boolean
natives.object_doorSystemForceShut = function(doorhash, p1)
    assert(type(doorhash) == 'integer', 'Argument doorhash must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x276AAF0F1C7F2494, 'void', doorhash, p1)
end

--- @param p0 userdata
--- @return any
natives.object_n0Xeba314768Fb35D58 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xEBA314768FB35D58, 'any', p0)
    return call
end

--- @param p0 userdata
natives.object_n0X5230Bf34Eb0Ec645 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x5230BF34EB0EC645, 'void', p0)
end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param hash integer
--- @param p5 boolean
--- @return boolean
natives.object_doesObjectOfTypeExistAtCoords = function(x, y, z, radius, hash, p5)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(hash) == 'integer', 'Argument hash must be of type integer.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')

    local call = natives.invoke(0xBFA48E2FF417213F, 'bool', x, y, z, radius, hash, p5)
    return call
end

--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 number
--- @param p7 number
--- @param p8 number
--- @param p9 number
--- @param p10 boolean
--- @param p11 boolean
--- @return boolean
natives.object_isPointInAngledArea = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'number', 'Argument p6 must be of type number.')
    assert(type(p7) == 'number', 'Argument p7 must be of type number.')
    assert(type(p8) == 'number', 'Argument p8 must be of type number.')
    assert(type(p9) == 'number', 'Argument p9 must be of type number.')
    assert(type(p10) == 'boolean', 'Argument p10 must be of type boolean.')
    assert(type(p11) == 'boolean', 'Argument p11 must be of type boolean.')

    local call = natives.invoke(0x2A70BAE8883E4C81, 'bool', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11)
    return call
end

--- @param object integer
--- @param toggle boolean
natives.object_setObjectAllowLowLodBuoyancy = function(object, toggle)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x4D89D607CB3DD1D2, 'void', object, toggle)
end

-- Adjust the physics parameters of a prop, or otherwise known as "object". This is useful for simulated gravity.
-- 
-- Other parameters seem to be unknown.
-- 
-- p2: seems to be weight and gravity related. Higher value makes the obj fall faster. Very sensitive?
-- p3: seems similar to p2
-- p4: makes obj fall slower the higher the value
-- p5: similar to p4
--- @param object integer
--- @param weight number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param gravity number
--- @param p7 number
--- @param p8 number
--- @param p9 number
--- @param p10 number
--- @param buoyancy number
natives.object_setObjectPhysicsParams = function(object, weight, p2, p3, p4, p5, gravity, p7, p8, p9, p10, buoyancy)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(weight) == 'number', 'Argument weight must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(gravity) == 'number', 'Argument gravity must be of type number.')
    assert(type(p7) == 'number', 'Argument p7 must be of type number.')
    assert(type(p8) == 'number', 'Argument p8 must be of type number.')
    assert(type(p9) == 'number', 'Argument p9 must be of type number.')
    assert(type(p10) == 'number', 'Argument p10 must be of type number.')
    assert(type(buoyancy) == 'number', 'Argument buoyancy must be of type number.')

    local call = natives.invoke(0xF6DF6E90DE7DF90F, 'void', object, weight, p2, p3, p4, p5, gravity, p7, p8, p9, p10, buoyancy)
end

--- @param p0 userdata
--- @param p1 boolean
--- @return number
natives.object_getObjectFragmentDamageHealth = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xB6FBFD079B8D0596, 'float', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.object_n0X235C863Da77Bd88D = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x235C863DA77BD88D, 'any', p0, p1, p2)
    return call
end

--- @param object integer
--- @param toggle boolean
natives.object_setActivateObjectPhysicsAsSoonAsItIsUnfrozen = function(object, toggle)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x406137F8EF90EAF5, 'void', object, toggle)
end

--- @param object integer
--- @param p1 number
--- @param p2 boolean
natives.object_breakObjectFragmentChild = function(object, p1, p2)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xE7E4C198B0185900, 'void', object, p1, p2)
end

--- @param object integer
natives.object_breakAllObjectFragmentBones = function(object)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')

    local call = natives.invoke(0x8462BE2341A55B6F, 'void', object)
end

--- @param p0 userdata
--- @param p1 userdata
natives.object_n0Xaaacf33Cbf9B990A = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xAAACF33CBF9B990A, 'void', p0, p1)
end

--- @param object integer
--- @param bone integer
natives.object_damageBoneOnProp = function(object, bone)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(bone) == 'integer', 'Argument bone must be of type integer.')

    local call = natives.invoke(0xE4EFB315BCD2A838, 'void', object, bone)
end

--- @param object integer
natives.object_fixObjectFragment = function(object)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')

    local call = natives.invoke(0xF9C1681347C8BD15, 'void', object)
end

--- @param p0 userdata
--- @return any
natives.object_n0X58De624Fa7Fb0E7F = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x58DE624FA7FB0E7F, 'any', p0)
    return call
end

--- @param p0 userdata
natives.object_n0X491439Aef410A2Fc = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x491439AEF410A2FC, 'void', p0)
end

--- @param object integer
--- @param scale number
natives.object_setObjectBreakScale = function(object, scale)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(scale) == 'number', 'Argument scale must be of type number.')

    local call = natives.invoke(0xFFB99FFD17F65889, 'void', object, scale)
end

--- @param p0 userdata
--- @param p1 userdata
natives.object_n0Xceab54F4632C6Ef6 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xCEAB54F4632C6EF6, 'void', p0, p1)
end

--- @param object integer
natives.object_trackObjectVisibility = function(object)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')

    local call = natives.invoke(0xB252BC036B525623, 'void', object)
end

--- @param object integer
--- @return boolean
natives.object_isObjectVisible = function(object)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')

    local call = natives.invoke(0x8B32ACE6326A7546, 'bool', object)
    return call
end

--- @param object integer
--- @param enabled boolean
natives.object_setObjectTakesDamageFromCollidingWithBuildings = function(object, enabled)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(enabled) == 'boolean', 'Argument enabled must be of type boolean.')

    local call = natives.invoke(0xEB6F1A9B5510A5D2, 'void', object, enabled)
end

--- @param enabled boolean
natives.object_allowDamageEventsForNonNetworkedObjects = function(enabled)
    assert(type(enabled) == 'boolean', 'Argument enabled must be of type boolean.')

    local call = natives.invoke(0xE2B3B852B537C398, 'void', enabled)
end

--- @param p0 userdata
--- @param p1 userdata
natives.object_n0X6579860A5558524A = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x6579860A5558524A, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.object_n0Xdfa1237F5228263F = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xDFA1237F5228263F, 'void', p0, p1)
end

--- @param object integer
--- @return number
natives.object_getLightIntensityFromObject = function(object)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')

    local call = natives.invoke(0xFA3B61EC249B4674, 'float', object)
    return call
end

--- @param object integer
--- @param lightintensity number
natives.object_setLightIntensityForObject = function(object, lightintensity)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(lightintensity) == 'number', 'Argument lightintensity must be of type number.')

    local call = natives.invoke(0xF49574E2332A8F06, 'void', object, lightintensity)
end

-- Params: value = 0.0 - 586.67 (?)
--- @param object integer
--- @param value number
natives.object_setLightTranslucencyForObject = function(object, value)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0x63E39F09310F481F, 'void', object, value)
end

--- @param object integer
--- @param disable boolean
natives.object_setLightScatteringDisabledForObject = function(object, disable)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(disable) == 'boolean', 'Argument disable must be of type boolean.')

    local call = natives.invoke(0x04D1D4E411CE52D0, 'void', object, disable)
end

--- @param p0 userdata
--- @param p1 userdata
natives.object_n0X7Fcd49388Bc9B775 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x7FCD49388BC9B775, 'void', p0, p1)
end

--- @param p0 userdata
--- @return any
natives.object_n0Xfa99E8E575F2Fef8 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xFA99E8E575F2FEF8, 'any', p0)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param name string
--- @return number
natives.object_getRayfireMapObject = function(x, y, z, radius, name)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0xB48FCED898292E52, 'integer', x, y, z, radius, name)
    return call
end

--- @param object integer
--- @param state integer
natives.object_setStateOfRayfireMapObject = function(object, state)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(state) == 'integer', 'Argument state must be of type integer.')

    local call = natives.invoke(0x5C29F698D404C5E1, 'void', object, state)
end

--- @param object integer
--- @return number
natives.object_getStateOfRayfireMapObject = function(object)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')

    local call = natives.invoke(0x899BA936634A322E, 'int', object)
    return call
end

--- @param object integer
--- @return boolean
natives.object_doesRayfireMapObjectExist = function(object)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')

    local call = natives.invoke(0x52AF537A0C5B8AAD, 'bool', object)
    return call
end

--- @param object integer
--- @return number
natives.object_getRayfireMapObjectAnimPhase = function(object)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')

    local call = natives.invoke(0x260EE4FDBDF4DB01, 'float', object)
    return call
end

-- https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/Placement%20Flags
-- https:--github.com/femga/rdr3_discoveries/blob/master/objects/pickup_list.lua
--- @param pickuphash integer
--- @param x number
--- @param y number
--- @param z number
--- @param flags integer
--- @param p5 integer
--- @param p6 boolean
--- @param modelhash integer
--- @param p8 integer
--- @param p9 number
--- @param p10 userdata
--- @return number
natives.object_createPickup = function(pickuphash, x, y, z, flags, p5, p6, modelhash, p8, p9, p10)
    assert(type(pickuphash) == 'integer', 'Argument pickuphash must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')
    assert(type(p5) == 'integer', 'Argument p5 must be of type integer.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')
    assert(type(modelhash) == 'integer', 'Argument modelhash must be of type integer.')
    assert(type(p8) == 'integer', 'Argument p8 must be of type integer.')
    assert(type(p9) == 'number', 'Argument p9 must be of type number.')
    assert(type(p10) == 'userdata', 'Argument p10 must be of type userdata.')

    local call = natives.invoke(0xFBA08C503DD5FA58, 'int', pickuphash, x, y, z, flags, p5, p6, modelhash, p8, p9, p10)
    return call
end

-- flags: see CREATE_PICKUP
--- @param pickuphash integer
--- @param posx number
--- @param posy number
--- @param posz number
--- @param rotx number
--- @param roty number
--- @param rotz number
--- @param flags integer
--- @param p8 integer
--- @param p9 integer
--- @param p10 boolean
--- @param modelhash integer
--- @param p12 integer
--- @param p13 number
--- @param p14 userdata
--- @return number
natives.object_createPickupRotate = function(pickuphash, posx, posy, posz, rotx, roty, rotz, flags, p8, p9, p10, modelhash, p12, p13, p14)
    assert(type(pickuphash) == 'integer', 'Argument pickuphash must be of type integer.')
    assert(type(posx) == 'number', 'Argument posx must be of type number.')
    assert(type(posy) == 'number', 'Argument posy must be of type number.')
    assert(type(posz) == 'number', 'Argument posz must be of type number.')
    assert(type(rotx) == 'number', 'Argument rotx must be of type number.')
    assert(type(roty) == 'number', 'Argument roty must be of type number.')
    assert(type(rotz) == 'number', 'Argument rotz must be of type number.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')
    assert(type(p8) == 'integer', 'Argument p8 must be of type integer.')
    assert(type(p9) == 'integer', 'Argument p9 must be of type integer.')
    assert(type(p10) == 'boolean', 'Argument p10 must be of type boolean.')
    assert(type(modelhash) == 'integer', 'Argument modelhash must be of type integer.')
    assert(type(p12) == 'integer', 'Argument p12 must be of type integer.')
    assert(type(p13) == 'number', 'Argument p13 must be of type number.')
    assert(type(p14) == 'userdata', 'Argument p14 must be of type userdata.')

    local call = natives.invoke(0x891804727E0A98B7, 'int', pickuphash, posx, posy, posz, rotx, roty, rotz, flags, p8, p9, p10, modelhash, p12, p13, p14)
    return call
end

-- flags: see CREATE_PICKUP
--- @param pickuphash integer
--- @param x number
--- @param y number
--- @param z number
--- @param flags integer
--- @param value integer
--- @param modelhash integer
--- @param p7 boolean
--- @param p8 boolean
--- @param p9 integer
--- @param p10 number
--- @return number
natives.object_createAmbientPickup = function(pickuphash, x, y, z, flags, value, modelhash, p7, p8, p9, p10)
    assert(type(pickuphash) == 'integer', 'Argument pickuphash must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')
    assert(type(value) == 'integer', 'Argument value must be of type integer.')
    assert(type(modelhash) == 'integer', 'Argument modelhash must be of type integer.')
    assert(type(p7) == 'boolean', 'Argument p7 must be of type boolean.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')
    assert(type(p9) == 'integer', 'Argument p9 must be of type integer.')
    assert(type(p10) == 'number', 'Argument p10 must be of type number.')

    local call = natives.invoke(0x673966A0C0FD7171, 'integer', pickuphash, x, y, z, flags, value, modelhash, p7, p8, p9, p10)
    return call
end

--- @param pickuphash integer
--- @param x number
--- @param y number
--- @param z number
--- @param placeonground boolean
--- @param modelhash integer
--- @return number
natives.object_createPortablePickup = function(pickuphash, x, y, z, placeonground, modelhash)
    assert(type(pickuphash) == 'integer', 'Argument pickuphash must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(placeonground) == 'boolean', 'Argument placeonground must be of type boolean.')
    assert(type(modelhash) == 'integer', 'Argument modelhash must be of type integer.')

    local call = natives.invoke(0x2EAF1FDB2FB55698, 'integer', pickuphash, x, y, z, placeonground, modelhash)
    return call
end

--- @param pickupobject integer
--- @param ped integer
natives.object_attachPortablePickupToPed = function(pickupobject, ped)
    assert(type(pickupobject) == 'integer', 'Argument pickupobject must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x8DC39368BDD57755, 'void', pickupobject, ped)
end

--- @param pickupobject integer
natives.object_detachPortablePickupFromPed = function(pickupobject)
    assert(type(pickupobject) == 'integer', 'Argument pickupobject must be of type integer.')

    local call = natives.invoke(0xCF463D1E9A0AECB1, 'void', pickupobject)
end

--- @param pickupobject integer
--- @param toggle boolean
natives.object_hidePickupObject = function(pickupobject, toggle)
    assert(type(pickupobject) == 'integer', 'Argument pickupobject must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x2777150CC7D9365E, 'void', pickupobject, toggle)
end

--- @param modelhash integer
--- @param p1 integer
natives.object_setMaxNumPortablePickupsCarriedByPlayer = function(modelhash, p1)
    assert(type(modelhash) == 'integer', 'Argument modelhash must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x0BF3B3BD47D79C08, 'void', modelhash, p1)
end

--- @param p0 userdata
--- @return any
natives.object_n0X3E2616E7Ea539480 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x3E2616E7EA539480, 'any', p0)
    return call
end

--- @param toggle boolean
natives.object_setLocalPlayerCanCollectPortablePickups = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x78857FC65CADB909, 'void', toggle)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @return number, number, number
natives.object_getSafePickupCoords = function(p0, p1, p2, p3, p4, p5)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0x6E16BC2503FF1FF0, 'vector3', p0, p1, p2, p3, p4, p5)
    return call.x, call.y, call.z
end

--- @param pickup integer
--- @return number, number, number
natives.object_getPickupCoords = function(pickup)
    assert(type(pickup) == 'integer', 'Argument pickup must be of type integer.')

    local call = natives.invoke(0x225B8B35C88029B3, 'vector3', pickup)
    return call.x, call.y, call.z
end

--- @param pickuphash integer
natives.object_removeAllPickupsOfType = function(pickuphash)
    assert(type(pickuphash) == 'integer', 'Argument pickuphash must be of type integer.')

    local call = natives.invoke(0x27F9D613092159CF, 'void', pickuphash)
end

--- @param pickup integer
--- @return boolean
natives.object_hasPickupBeenCollected = function(pickup)
    assert(type(pickup) == 'integer', 'Argument pickup must be of type integer.')

    local call = natives.invoke(0x80EC48E6679313F9, 'bool', pickup)
    return call
end

--- @param pickup integer
natives.object_removePickup = function(pickup)
    assert(type(pickup) == 'integer', 'Argument pickup must be of type integer.')

    local call = natives.invoke(0x3288D8ACAECD2AB2, 'void', pickup)
end

--- @param pickupobject integer
natives.object_setPickupDoNotAutoPlaceOnGround = function(pickupobject)
    assert(type(pickupobject) == 'integer', 'Argument pickupobject must be of type integer.')

    local call = natives.invoke(0x634C19521485AB25, 'void', pickupobject)
end

--- @param pickup integer
--- @return boolean
natives.object_doesPickupExist = function(pickup)
    assert(type(pickup) == 'integer', 'Argument pickup must be of type integer.')

    local call = natives.invoke(0xAFC1CA75AD4074D1, 'bool', pickup)
    return call
end

--- @param pickupobject integer
--- @return boolean
natives.object_doesPickupObjectExist = function(pickupobject)
    assert(type(pickupobject) == 'integer', 'Argument pickupobject must be of type integer.')

    local call = natives.invoke(0xD9EFB6DBF7DAAEA3, 'bool', pickupobject)
    return call
end

--- @param pickup integer
--- @return number
natives.object_getPickupObject = function(pickup)
    assert(type(pickup) == 'integer', 'Argument pickup must be of type integer.')

    local call = natives.invoke(0x5099BC55630B25AE, 'integer', pickup)
    return call
end

--- @param object integer
--- @return boolean
natives.object_isObjectAPortablePickup = function(object)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')

    local call = natives.invoke(0x0378C08504160D0D, 'bool', object)
    return call
end

--- @param pickuphash integer
--- @return boolean
natives.object_isPickupTypeValid = function(pickuphash)
    assert(type(pickuphash) == 'integer', 'Argument pickuphash must be of type integer.')

    local call = natives.invoke(0x007BD043587F7C82, 'bool', pickuphash)
    return call
end

--- @param pickuphash integer
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @return boolean
natives.object_doesPickupOfTypeExistInArea = function(pickuphash, x, y, z, radius)
    assert(type(pickuphash) == 'integer', 'Argument pickuphash must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')

    local call = natives.invoke(0xF9C36251F6E48E33, 'bool', pickuphash, x, y, z, radius)
    return call
end

--- @param pickup integer
--- @param duration integer
natives.object_setPickupRegenerationTime = function(pickup, duration)
    assert(type(pickup) == 'integer', 'Argument pickup must be of type integer.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')

    local call = natives.invoke(0x78015C9B4B3ECC9D, 'void', pickup, duration)
end

--- @param p0 userdata
natives.object_forcePickupRegenerate = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x758A5C1B3B1E1990, 'void', p0)
end

-- Params: p2 controls whether to make pickups usable/collectable or not in networked games
--- @param player integer
--- @param pickuphash integer
--- @param isusable boolean
natives.object_setNetworkPickupUsableForPlayer = function(player, pickuphash, isusable)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(pickuphash) == 'integer', 'Argument pickuphash must be of type integer.')
    assert(type(isusable) == 'boolean', 'Argument isusable must be of type boolean.')

    local call = natives.invoke(0x94F3D956BFAEAE18, 'void', player, pickuphash, isusable)
end

-- Maximum amount of pickup models that can be disallowed is 10.
-- 
-- Old name: _SET_LOCAL_PLAYER_CAN_USE_PICKUPS_WITH_THIS_MODEL
--- @param modelhash integer
--- @param toggle boolean
natives.object_setLocalPlayerPermittedToCollectPickupsWithModel = function(modelhash, toggle)
    assert(type(modelhash) == 'integer', 'Argument modelhash must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x88EAEC617CD26926, 'void', modelhash, toggle)
end

--- @param p0 userdata
--- @param p1 userdata
natives.object_blockPickupFromPlayerCollection = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xB8F5062070BB6DBD, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.object_setPickupNotLootable = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x92E87F60F21A0C3A, 'void', p0, p1)
end

-- _SET_A(MBIENT_PICKUP_?)*
--- @param p0 boolean
natives.object_n0X1F5E07E14A86Fafc = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x1F5E07E14A86FAFC, 'void', p0)
end

--- @param object integer
--- @param p1 userdata
--- @param p2 boolean
natives.object_setTeamPickupObject = function(object, p1, p2)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x53E0DF1A2A3CF0CA, 'void', object, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.object_n0X9F52Ad67D1A91Bad = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x9F52AD67D1A91BAD, 'any', p0, p1)
    return call
end

--- @param object integer
--- @param p1 boolean
--- @param p2 boolean
natives.object_preventCollectionOfPortablePickup = function(object, p1, p2)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x92AEFB5F6E294023, 'void', object, p1, p2)
end

--- @param multiplier number
natives.object_setPickupGenerationRangeMultiplier = function(multiplier)
    assert(type(multiplier) == 'number', 'Argument multiplier must be of type number.')

    local call = natives.invoke(0x318516E02DE3ECE2, 'void', multiplier)
end

--- @param p0 userdata
--- @param p1 userdata
natives.object_setPickupUncollectable = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x4A8CB328CD6F1C9B, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.object_setPickupHiddenWhenUncollectable = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x81218CE01B672219, 'void', p0, p1)
end

--- @param lifetime integer
natives.object_setAmbientPickupLifetime = function(lifetime)
    assert(type(lifetime) == 'integer', 'Argument lifetime must be of type integer.')

    local call = natives.invoke(0xAC9AE68F0A463752, 'void', lifetime)
end

--- @param p0 userdata
--- @param p1 userdata
natives.object_setPickupParticleFxSpawn = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xEB9740A38FD6D634, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.object_setPickupParticleFxHighlight = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x1607C7D9B3021DF5, 'void', p0, p1)
end

--- @param rewardtype integer
--- @param suppress boolean
natives.object_suppressPickupRewardType = function(rewardtype, suppress)
    assert(type(rewardtype) == 'integer', 'Argument rewardtype must be of type integer.')
    assert(type(suppress) == 'boolean', 'Argument suppress must be of type boolean.')

    local call = natives.invoke(0xF92099527DB8E2A7, 'void', rewardtype, suppress)
end

--- @param p0 userdata
--- @return any
natives.object_n0X20135Af9C10D2A3D = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x20135AF9C10D2A3D, 'any', p0)
    return call
end

--- @param object integer
natives.object_setPickupCollectableOnMount = function(object)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')

    local call = natives.invoke(0x00EE08603EADEE92, 'void', object)
end

--- @param p0 userdata
--- @param p1 userdata
natives.object_n0Xde116Ecffdd4B997 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xDE116ECFFDD4B997, 'void', p0, p1)
end

--- @param pickuphash integer
--- @return number
natives.object_getWeaponTypeFromPickupType = function(pickuphash)
    assert(type(pickuphash) == 'integer', 'Argument pickuphash must be of type integer.')

    local call = natives.invoke(0x08F96CA6C551AD51, 'integer', pickuphash)
    return call
end

--- @param pickuphash integer
--- @return number
natives.object_getAmmoTypeFromPickupType = function(pickuphash)
    assert(type(pickuphash) == 'integer', 'Argument pickuphash must be of type integer.')

    local call = natives.invoke(0x44B09A23D728045A, 'integer', pickuphash)
    return call
end

-- Alt name: _SET_OBJECT_TINT
-- 
-- Old name: _SET_OBJECT_TEXTURE_VARIATION
--- @param object integer
--- @param texturevariation integer
natives.object_setObjectTintIndex = function(object, texturevariation)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(texturevariation) == 'integer', 'Argument texturevariation must be of type integer.')

    local call = natives.invoke(0x971DA0055324D033, 'void', object, texturevariation)
end

-- Returns float value to be used with _SET_LIGHT_INTENSITY_FOR_OBJECT
--- @param object integer
--- @return number
natives.object_getObjectLightIntensity = function(object)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')

    local call = natives.invoke(0x3397CD4E0353DFBA, 'float', object)
    return call
end

--- @param object integer
--- @param opacity number
natives.object_setObjectBurnOpacity = function(object, opacity)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(opacity) == 'number', 'Argument opacity must be of type number.')

    local call = natives.invoke(0x7D7285EFEAB5AF15, 'void', object, opacity)
end

--- @param object integer
--- @param intensity number
natives.object_setObjectBurnIntensity = function(object, intensity)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(intensity) == 'number', 'Argument intensity must be of type number.')

    local call = natives.invoke(0xC8E21C1677DC5E6F, 'void', object, intensity)
end

-- Seems to mostly have effect on wood-made objects https:--imgur.com/a/32oQvOn
--- @param object integer
--- @param burnlevel number
--- @param affectash boolean
natives.object_setObjectBurnLevel = function(object, burnlevel, affectash)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(burnlevel) == 'number', 'Argument burnlevel must be of type number.')
    assert(type(affectash) == 'boolean', 'Argument affectash must be of type boolean.')

    local call = natives.invoke(0x2797C633DCDBBAC5, 'void', object, burnlevel, affectash)
end

--- @param p0 userdata
natives.object_n0X9A74A9Cadfa8A598 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x9A74A9CADFA8A598, 'void', p0)
end

--- @param object integer
natives.object_resetObjectVelocity = function(object)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')

    local call = natives.invoke(0xF40AB58D83C35027, 'void', object)
end

-- p2 is usually the same as speed parameter
--- @param object integer
--- @param speed number
--- @param p2 number
natives.object_setObjectBurnSpeed = function(object, speed, p2)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(speed) == 'number', 'Argument speed must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')

    local call = natives.invoke(0x646564A3B7DF68F8, 'void', object, speed, p2)
end

--- @param p0 userdata
--- @param p1 userdata
natives.object_n0Xcbfbd38F2E0A263B = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xCBFBD38F2E0A263B, 'void', p0, p1)
end

-- Old name: _GET_PICKUP_HASH
--- @param pickuphash integer
--- @return number
natives.object_convertOldPickupTypeToNew = function(pickuphash)
    assert(type(pickuphash) == 'integer', 'Argument pickuphash must be of type integer.')

    local call = natives.invoke(0x5EAAD83F8CFB4575, 'integer', pickuphash)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @param p3 number
natives.object_setForceObjectThisFrame = function(x, y, z, p3)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')

    local call = natives.invoke(0xF538081986E49E9D, 'void', x, y, z, p3)
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.object_n0Xd91E55B6C005Eb09 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xD91E55B6C005EB09, 'any', p0, p1)
    return call
end

-- Old name: _MARK_OBJECT_FOR_DELETION
--- @param object integer
natives.object_onlyCleanUpObjectWhenOutOfRange = function(object)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')

    local call = natives.invoke(0xADBE4809F19F927A, 'void', object)
end

-- _SET_OBJECT_*
--- @param object integer
--- @param p1 userdata
natives.object_n0Xcaaf2Bccfef37F77 = function(object, p1)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xCAAF2BCCFEF37F77, 'void', object, p1)
end

--- @param p0 userdata
--- @return any
natives.object_n0X08C5825A2932Ea7B = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x08C5825A2932EA7B, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.object_n0X7D4411D6736Cd295 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x7D4411D6736CD295, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @return any
natives.object_n0X250Ebb11E81A10Be = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x250EBB11E81A10BE, 'any', p0)
    return call
end

--- @param p0 userdata
--- @return any
natives.object_n0X2Bf1953C0C21Ac88 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x2BF1953C0C21AC88, 'any', p0)
    return call
end

--- @param object integer
--- @return boolean
natives.object_createObjectSkeleton = function(object)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')

    local call = natives.invoke(0xB6CBD40F8EA69E8A, 'bool', object)
    return call
end

-- _PRE* or _Q* or _RE*
--- @param object integer
natives.object_makeItemCarriable = function(object)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')

    local call = natives.invoke(0x1461DF6DB886BE3F, 'void', object)
end

--- @param p0 userdata
--- @param p1 userdata
natives.object_n0Xf65Ede5D02A7A760 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xF65EDE5D02A7A760, 'void', p0, p1)
end

-- Sets object as auto-jumpable by horse.
--- @param object integer
--- @param p1 boolean
natives.object_setAutoJumpableByHorse = function(object, p1)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x98D2D9C053A1F449, 'void', object, p1)
end

-- Sets object as not jumpable by horse.
--- @param object integer
--- @param p1 boolean
natives.object_setNotJumpableByHorse = function(object, p1)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xE1C708BA4885796B, 'void', object, p1)
end

--- @param object integer
--- @param kickable boolean
natives.object_setObjectKickable = function(object, kickable)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(kickable) == 'boolean', 'Argument kickable must be of type boolean.')

    local call = natives.invoke(0xB7017DA4D498269F, 'void', object, kickable)
end

--- @param object integer
--- @param txdhash integer
--- @param p2 userdata
--- @param p3 userdata
natives.object_setCustomTexturesOnObject = function(object, txdhash, p2, p3)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(txdhash) == 'integer', 'Argument txdhash must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xE124889AE0521FCF, 'void', object, txdhash, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
natives.object_n0Xd503D6F0986D58Bc = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xD503D6F0986D58BC, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.object_n0Xaee6C800E124Cfe1 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xAEE6C800E124CFE1, 'void', p0, p1)
end

--- @param object integer
--- @param p1 userdata
natives.object_n0X3Df1A0A58498E209 = function(object, p1)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x3DF1A0A58498E209, 'void', object, p1)
end

-- Sets the current control context. Must be called every frame.
-- 
-- context: https:--alloc8or.re/rdr3/doc/misc/input_contexts.txt
-- For more information, see common:/data/control/settings.meta
-- https:--github.com/femga/rdr3_discoveries/tree/master/Controls
--- @param control integer
--- @param context integer
natives.pad_setControlContext = function(control, context)
    assert(type(control) == 'integer', 'Argument control must be of type integer.')
    assert(type(context) == 'integer', 'Argument context must be of type integer.')

    local call = natives.invoke(0x2804658EB7D8A50B, 'void', control, context)
end

-- Gets the current control context. See: _SET_CONTROL_CONTEXT
--- @param control integer
--- @return number
natives.pad_getCurrentControlContext = function(control)
    assert(type(control) == 'integer', 'Argument control must be of type integer.')

    local call = natives.invoke(0xDDCEB0F26C89C00F, 'integer', control)
    return call
end

--- @param action integer
--- @param control integer
--- @return boolean
natives.pad_isControlActionValid = function(action, control)
    assert(type(action) == 'integer', 'Argument action must be of type integer.')
    assert(type(control) == 'integer', 'Argument control must be of type integer.')

    local call = natives.invoke(0xBC0884BC590951C7, 'bool', action, control)
    return call
end

--- @param control integer
--- @param action integer
--- @return boolean
natives.pad_isControlEnabled = function(control, action)
    assert(type(control) == 'integer', 'Argument control must be of type integer.')
    assert(type(action) == 'integer', 'Argument action must be of type integer.')

    local call = natives.invoke(0x1CEA6BFDF248E5D9, 'bool', control, action)
    return call
end

--- @param control integer
--- @param action integer
--- @return boolean
natives.pad_isControlPressed = function(control, action)
    assert(type(control) == 'integer', 'Argument control must be of type integer.')
    assert(type(action) == 'integer', 'Argument action must be of type integer.')

    local call = natives.invoke(0xF3A21BCD95725A4A, 'bool', control, action)
    return call
end

--- @param control integer
--- @param action integer
--- @return boolean
natives.pad_isControlReleased = function(control, action)
    assert(type(control) == 'integer', 'Argument control must be of type integer.')
    assert(type(action) == 'integer', 'Argument action must be of type integer.')

    local call = natives.invoke(0x648EE3E7F38877DD, 'bool', control, action)
    return call
end

--- @param control integer
--- @param action integer
--- @return boolean
natives.pad_isControlJustPressed = function(control, action)
    assert(type(control) == 'integer', 'Argument control must be of type integer.')
    assert(type(action) == 'integer', 'Argument action must be of type integer.')

    local call = natives.invoke(0x580417101DDB492F, 'bool', control, action)
    return call
end

--- @param control integer
--- @param action integer
--- @return boolean
natives.pad_isControlJustReleased = function(control, action)
    assert(type(control) == 'integer', 'Argument control must be of type integer.')
    assert(type(action) == 'integer', 'Argument action must be of type integer.')

    local call = natives.invoke(0x50F940259D3841E6, 'bool', control, action)
    return call
end

--- @param control integer
--- @param action integer
--- @return number
natives.pad_getControlValue = function(control, action)
    assert(type(control) == 'integer', 'Argument control must be of type integer.')
    assert(type(action) == 'integer', 'Argument action must be of type integer.')

    local call = natives.invoke(0xD95E79E8686D2C27, 'int', control, action)
    return call
end

--- @param control integer
--- @param action integer
--- @return number
natives.pad_getControlNormal = function(control, action)
    assert(type(control) == 'integer', 'Argument control must be of type integer.')
    assert(type(action) == 'integer', 'Argument action must be of type integer.')

    local call = natives.invoke(0xEC3C9B8D5327B563, 'float', control, action)
    return call
end

--- @param control integer
--- @param action integer
--- @return number
natives.pad_getControlUnboundNormal = function(control, action)
    assert(type(control) == 'integer', 'Argument control must be of type integer.')
    assert(type(action) == 'integer', 'Argument action must be of type integer.')

    local call = natives.invoke(0x5B84D09CEC5209C5, 'float', control, action)
    return call
end

-- This is for simulating player input.
-- value is a float value from 0 - 1
-- 
-- control: see IS_CONTROL_ENABLED
-- 
-- Old name: _SET_CONTROL_NORMAL
--- @param control integer
--- @param action integer
--- @param value number
--- @return boolean
natives.pad_setControlValueNextFrame = function(control, action, value)
    assert(type(control) == 'integer', 'Argument control must be of type integer.')
    assert(type(action) == 'integer', 'Argument action must be of type integer.')
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0xE8A25867FBA3B05E, 'bool', control, action, value)
    return call
end

--- @param control integer
--- @param action integer
--- @return boolean
natives.pad_isDisabledControlPressed = function(control, action)
    assert(type(control) == 'integer', 'Argument control must be of type integer.')
    assert(type(action) == 'integer', 'Argument action must be of type integer.')

    local call = natives.invoke(0xE2587F8CBBD87B1D, 'bool', control, action)
    return call
end

--- @param control integer
--- @param action integer
--- @return boolean
natives.pad_isDisabledControlJustPressed = function(control, action)
    assert(type(control) == 'integer', 'Argument control must be of type integer.')
    assert(type(action) == 'integer', 'Argument action must be of type integer.')

    local call = natives.invoke(0x91AEF906BCA88877, 'bool', control, action)
    return call
end

--- @param control integer
--- @param action integer
--- @return boolean
natives.pad_isDisabledControlJustReleased = function(control, action)
    assert(type(control) == 'integer', 'Argument control must be of type integer.')
    assert(type(action) == 'integer', 'Argument action must be of type integer.')

    local call = natives.invoke(0x305C8DCD79DA8B0F, 'bool', control, action)
    return call
end

--- @param control integer
--- @param action integer
--- @return number
natives.pad_getDisabledControlNormal = function(control, action)
    assert(type(control) == 'integer', 'Argument control must be of type integer.')
    assert(type(action) == 'integer', 'Argument action must be of type integer.')

    local call = natives.invoke(0x11E65974A982637C, 'float', control, action)
    return call
end

--- @param control integer
--- @param action integer
--- @return number
natives.pad_getDisabledControlUnboundNormal = function(control, action)
    assert(type(control) == 'integer', 'Argument control must be of type integer.')
    assert(type(action) == 'integer', 'Argument action must be of type integer.')

    local call = natives.invoke(0x4F8A26A890FD62FB, 'float', control, action)
    return call
end

-- Returns time in ms since last input.
--- @param control integer
--- @return number
natives.pad_getControlHowLongAgo = function(control)
    assert(type(control) == 'integer', 'Argument control must be of type integer.')

    local call = natives.invoke(0xD7D22F5592AED8BA, 'int', control)
    return call
end

--- @param control integer
--- @return number
natives.pad_getDisabledControlHowLongAgo = function(control)
    assert(type(control) == 'integer', 'Argument control must be of type integer.')

    local call = natives.invoke(0x771DFCB24D19C2F6, 'int', control)
    return call
end

-- padIndex is not used
-- 
-- Old name: _IS_USING_KEYBOARD
--- @param control integer
--- @return boolean
natives.pad_isUsingKeyboardAndMouse = function(control)
    assert(type(control) == 'integer', 'Argument control must be of type integer.')

    local call = natives.invoke(0xA571D46727E2B718, 'bool', control)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.pad_n0X43F35Ddb2905D945 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x43F35DDB2905D945, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @return any
natives.pad_n0Xbd629C1C4F501C80 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xBD629C1C4F501C80, 'any', p0)
    return call
end

--- @param control integer
--- @return boolean
natives.pad_haveControlsChanged = function(control)
    assert(type(control) == 'integer', 'Argument control must be of type integer.')

    local call = natives.invoke(0x6CD79468A1E595C6, 'bool', control)
    return call
end

-- nullsub, doesn't do anything
-- 
-- Old name: _SET_CONTROL_GROUP_COLOR
--- @param control integer
--- @param red integer
--- @param green integer
--- @param blue integer
natives.pad_setControlLightEffectColor = function(control, red, green, blue)
    assert(type(control) == 'integer', 'Argument control must be of type integer.')
    assert(type(red) == 'integer', 'Argument red must be of type integer.')
    assert(type(green) == 'integer', 'Argument green must be of type integer.')
    assert(type(blue) == 'integer', 'Argument blue must be of type integer.')

    local call = natives.invoke(0x8290252FFF36ACB5, 'void', control, red, green, blue)
end

-- nullsub, doesn't do anything
--- @param control integer
natives.pad_clearControlLightEffect = function(control)
    assert(type(control) == 'integer', 'Argument control must be of type integer.')

    local call = natives.invoke(0xCB0360EFEFB2580D, 'void', control)
end

-- nullsub, doesn't do anything
--- @param control integer
--- @param red integer
--- @param green integer
--- @param blue integer
natives.pad_setControlLightEffectFlashingColor = function(control, red, green, blue)
    assert(type(control) == 'integer', 'Argument control must be of type integer.')
    assert(type(red) == 'integer', 'Argument red must be of type integer.')
    assert(type(green) == 'integer', 'Argument green must be of type integer.')
    assert(type(blue) == 'integer', 'Argument blue must be of type integer.')

    local call = natives.invoke(0xA45884DB10EC7EE3, 'void', control, red, green, blue)
end

-- Old name: SET_PAD_SHAKE
--- @param control integer
--- @param duration integer
--- @param frequency integer
natives.pad_setControlShake = function(control, duration, frequency)
    assert(type(control) == 'integer', 'Argument control must be of type integer.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')
    assert(type(frequency) == 'integer', 'Argument frequency must be of type integer.')

    local call = natives.invoke(0x48B3886C1358D0D5, 'void', control, duration, frequency)
end

-- nullsub, doesn't do anything
--- @param control integer
--- @param leftduration integer
--- @param leftfrequency integer
--- @param rightduration integer
--- @param rightfrequency integer
natives.pad_setControlTriggerShake = function(control, leftduration, leftfrequency, rightduration, rightfrequency)
    assert(type(control) == 'integer', 'Argument control must be of type integer.')
    assert(type(leftduration) == 'integer', 'Argument leftduration must be of type integer.')
    assert(type(leftfrequency) == 'integer', 'Argument leftfrequency must be of type integer.')
    assert(type(rightduration) == 'integer', 'Argument rightduration must be of type integer.')
    assert(type(rightfrequency) == 'integer', 'Argument rightfrequency must be of type integer.')

    local call = natives.invoke(0x14D29BB12D47F68C, 'void', control, leftduration, leftfrequency, rightduration, rightfrequency)
end

-- Old name: STOP_PAD_SHAKE
--- @param control integer
natives.pad_stopControlShake = function(control)
    assert(type(control) == 'integer', 'Argument control must be of type integer.')

    local call = natives.invoke(0x38C16A305E8CDC8D, 'void', control)
end

-- Old name: SET_PAD_SHAKE_SUPPRESSED_ID
--- @param control integer
--- @param uniqueid integer
natives.pad_setControlShakeSuppressedId = function(control, uniqueid)
    assert(type(control) == 'integer', 'Argument control must be of type integer.')
    assert(type(uniqueid) == 'integer', 'Argument uniqueid must be of type integer.')

    local call = natives.invoke(0xF239400E16C23E08, 'void', control, uniqueid)
end

-- Old name: _CLEAR_SUPPRESSED_PAD_RUMBLE
--- @param control integer
natives.pad_clearControlShakeSuppressedId = function(control)
    assert(type(control) == 'integer', 'Argument control must be of type integer.')

    local call = natives.invoke(0xA0CEFCEA390AAB9B, 'void', control)
end

--- @return boolean
natives.pad_isLookInverted = function()

    local call = natives.invoke(0x77B612531280010D, 'bool')
    return call
end

--- @param control integer
--- @param action integer
natives.pad_setInputExclusive = function(control, action)
    assert(type(control) == 'integer', 'Argument control must be of type integer.')
    assert(type(action) == 'integer', 'Argument action must be of type integer.')

    local call = natives.invoke(0xEDE476E5EE29EDB1, 'void', control, action)
end

--- @param control integer
--- @param action integer
--- @param disablerelatedactions boolean
natives.pad_disableControlAction = function(control, action, disablerelatedactions)
    assert(type(control) == 'integer', 'Argument control must be of type integer.')
    assert(type(action) == 'integer', 'Argument action must be of type integer.')
    assert(type(disablerelatedactions) == 'boolean', 'Argument disablerelatedactions must be of type boolean.')

    local call = natives.invoke(0xFE99B66D079CF6BC, 'void', control, action, disablerelatedactions)
end

--- @param control integer
--- @param action integer
--- @param enablerelatedactions boolean
natives.pad_enableControlAction = function(control, action, enablerelatedactions)
    assert(type(control) == 'integer', 'Argument control must be of type integer.')
    assert(type(action) == 'integer', 'Argument action must be of type integer.')
    assert(type(enablerelatedactions) == 'boolean', 'Argument enablerelatedactions must be of type boolean.')

    local call = natives.invoke(0x351220255D64C155, 'void', control, action, enablerelatedactions)
end

--- @param control integer
natives.pad_disableAllControlActions = function(control)
    assert(type(control) == 'integer', 'Argument control must be of type integer.')

    local call = natives.invoke(0x5F4B6931816E599B, 'void', control)
end

-- rumbleCurve: common_0/data/rumblecurves.meta
--- @param rumblecurve string
--- @param p1 number
natives.pad_n0X5F217Bc1190503D8 = function(rumblecurve, p1)
    assert(type(rumblecurve) == 'string', 'Argument rumblecurve must be of type string.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x5F217BC1190503D8, 'void', rumblecurve, p1)
end

natives.pad_n0X709Ba8C08C5C008D = function()

    local call = natives.invoke(0x709BA8C08C5C008D, 'void')
end

-- _IS_R* - _IS_S*
--- @return boolean
natives.pad_n0X1252C029Fc8Ebb4D = function()

    local call = natives.invoke(0x1252C029FC8EBB4D, 'bool')
    return call
end

--- @param p0 userdata
natives.pad_n0X52C68E92D6E23Add = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x52C68E92D6E23ADD, 'void', p0)
end

--- @param xmin number
--- @param ymin number
--- @param zmin number
--- @param xmax number
--- @param ymax number
--- @param zmax number
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
natives.pathfind_setRoadsInArea = function(xmin, ymin, zmin, xmax, ymax, zmax, p6, p7, p8)
    assert(type(xmin) == 'number', 'Argument xmin must be of type number.')
    assert(type(ymin) == 'number', 'Argument ymin must be of type number.')
    assert(type(zmin) == 'number', 'Argument zmin must be of type number.')
    assert(type(xmax) == 'number', 'Argument xmax must be of type number.')
    assert(type(ymax) == 'number', 'Argument ymax must be of type number.')
    assert(type(zmax) == 'number', 'Argument zmax must be of type number.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')

    local call = natives.invoke(0xBF1A602B5BA52FEE, 'void', xmin, ymin, zmin, xmax, ymax, zmax, p6, p7, p8)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
--- @param p9 userdata
--- @param p10 userdata
natives.pathfind_setRoadsInAngledArea = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')
    assert(type(p10) == 'userdata', 'Argument p10 must be of type userdata.')

    local call = natives.invoke(0x1A5AA1208AF5DB59, 'void', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)
end

--- @param volume integer
--- @param p1 boolean
--- @param p2 boolean
--- @param p3 boolean
natives.pathfind_setRoadsInVolume = function(volume, p1, p2, p3)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0xC1799FAFD2FDF52B, 'void', volume, p1, p2, p3)
end

--- @param volume integer
--- @param p1 boolean
natives.pathfind_resetRoadsInVolume = function(volume, p1)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xD17672447692478E, 'void', volume, p1)
end

--- @param xmin number
--- @param ymin number
--- @param zmin number
--- @param xmax number
--- @param ymax number
--- @param zmax number
--- @param p6 userdata
--- @param p7 userdata
natives.pathfind_setRoadsBackToOriginal = function(xmin, ymin, zmin, xmax, ymax, zmax, p6, p7)
    assert(type(xmin) == 'number', 'Argument xmin must be of type number.')
    assert(type(ymin) == 'number', 'Argument ymin must be of type number.')
    assert(type(zmin) == 'number', 'Argument zmin must be of type number.')
    assert(type(xmax) == 'number', 'Argument xmax must be of type number.')
    assert(type(ymax) == 'number', 'Argument ymax must be of type number.')
    assert(type(zmax) == 'number', 'Argument zmax must be of type number.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')

    local call = natives.invoke(0x1EE7063B80FFC77C, 'void', xmin, ymin, zmin, xmax, ymax, zmax, p6, p7)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
natives.pathfind_setRoadsBackToOriginalInAngledArea = function(p0, p1, p2, p3, p4, p5, p6, p7, p8)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')

    local call = natives.invoke(0x0027501B9F3B407E, 'void', p0, p1, p2, p3, p4, p5, p6, p7, p8)
end

--- @param xmin number
--- @param ymin number
--- @param zmin number
--- @param xmax number
--- @param ymax number
--- @param zmax number
--- @param p6 integer
--- @param p7 userdata
natives.pathfind_n0Xafe2Ae66F6251C66 = function(xmin, ymin, zmin, xmax, ymax, zmax, p6, p7)
    assert(type(xmin) == 'number', 'Argument xmin must be of type number.')
    assert(type(ymin) == 'number', 'Argument ymin must be of type number.')
    assert(type(zmin) == 'number', 'Argument zmin must be of type number.')
    assert(type(xmax) == 'number', 'Argument xmax must be of type number.')
    assert(type(ymax) == 'number', 'Argument ymax must be of type number.')
    assert(type(zmax) == 'number', 'Argument zmax must be of type number.')
    assert(type(p6) == 'integer', 'Argument p6 must be of type integer.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')

    local call = natives.invoke(0xAFE2AE66F6251C66, 'void', xmin, ymin, zmin, xmax, ymax, zmax, p6, p7)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
--- @param p9 userdata
natives.pathfind_n0X4358Bcf14C91761C = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')

    local call = natives.invoke(0x4358BCF14C91761C, 'void', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.pathfind_n0Xb03944057Fd735Ba = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xB03944057FD735BA, 'void', p0, p1, p2)
end

--- @param xmin number
--- @param ymin number
--- @param zmin number
--- @param xmax number
--- @param ymax number
--- @param zmax number
--- @param p6 userdata
--- @param p7 userdata
natives.pathfind_n0X6C3F12Eceb6D2E2A = function(xmin, ymin, zmin, xmax, ymax, zmax, p6, p7)
    assert(type(xmin) == 'number', 'Argument xmin must be of type number.')
    assert(type(ymin) == 'number', 'Argument ymin must be of type number.')
    assert(type(zmin) == 'number', 'Argument zmin must be of type number.')
    assert(type(xmax) == 'number', 'Argument xmax must be of type number.')
    assert(type(ymax) == 'number', 'Argument ymax must be of type number.')
    assert(type(zmax) == 'number', 'Argument zmax must be of type number.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')

    local call = natives.invoke(0x6C3F12ECEB6D2E2A, 'void', xmin, ymin, zmin, xmax, ymax, zmax, p6, p7)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.pathfind_n0X5A4E1A41E3A02Ad0 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x5A4E1A41E3A02AD0, 'void', p0, p1, p2)
end

--- @param x number
--- @param y number
--- @param z number
--- @param outposition integer
--- @param nodetype integer
--- @param p5 number
--- @param p6 number
--- @return boolean
natives.pathfind_getClosestVehicleNode = function(x, y, z, outposition, nodetype, p5, p6)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(outposition) == 'integer', 'Argument outposition must be of type integer.')
    assert(type(nodetype) == 'integer', 'Argument nodetype must be of type integer.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'number', 'Argument p6 must be of type number.')

    local call = natives.invoke(0x240A18690AE96513, 'bool', x, y, z, outposition, nodetype, p5, p6)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @return any
natives.pathfind_n0Xca27A86Caa4E98Ed = function(p0, p1, p2, p3, p4, p5, p6)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0xCA27A86CAA4E98ED, 'any', p0, p1, p2, p3, p4, p5, p6)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @param outposition integer
--- @param outheading integer
--- @param nodetype integer
--- @param p6 number
--- @param p7 number
--- @return boolean
natives.pathfind_getClosestVehicleNodeWithHeading = function(x, y, z, outposition, outheading, nodetype, p6, p7)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(outposition) == 'integer', 'Argument outposition must be of type integer.')
    assert(type(outheading) == 'integer', 'Argument outheading must be of type integer.')
    assert(type(nodetype) == 'integer', 'Argument nodetype must be of type integer.')
    assert(type(p6) == 'number', 'Argument p6 must be of type number.')
    assert(type(p7) == 'number', 'Argument p7 must be of type number.')

    local call = natives.invoke(0x23CFFD4CCB243354, 'bool', x, y, z, outposition, outheading, nodetype, p6, p7)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @param nthclosest integer
--- @param outposition integer
--- @param unknown1 integer
--- @param unknown2 number
--- @param unknown3 userdata
--- @return boolean
natives.pathfind_getNthClosestVehicleNode = function(x, y, z, nthclosest, outposition, unknown1, unknown2, unknown3)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(nthclosest) == 'integer', 'Argument nthclosest must be of type integer.')
    assert(type(outposition) == 'integer', 'Argument outposition must be of type integer.')
    assert(type(unknown1) == 'integer', 'Argument unknown1 must be of type integer.')
    assert(type(unknown2) == 'number', 'Argument unknown2 must be of type number.')
    assert(type(unknown3) == 'userdata', 'Argument unknown3 must be of type userdata.')

    local call = natives.invoke(0x5A6D8DF6FBC5D0C4, 'bool', x, y, z, nthclosest, outposition, unknown1, unknown2, unknown3)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @param nth integer
--- @param nodetype integer
--- @param p5 number
--- @param p6 number
--- @return number
natives.pathfind_getNthClosestVehicleNodeId = function(x, y, z, nth, nodetype, p5, p6)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(nth) == 'integer', 'Argument nth must be of type integer.')
    assert(type(nodetype) == 'integer', 'Argument nodetype must be of type integer.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'number', 'Argument p6 must be of type number.')

    local call = natives.invoke(0x116443008E5CEFC3, 'int', x, y, z, nth, nodetype, p5, p6)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @param nthclosest integer
--- @param outposition integer
--- @param heading integer
--- @param unknown1 userdata
--- @param unknown2 integer
--- @param unknown3 number
--- @param unknown4 number
--- @return boolean
natives.pathfind_getNthClosestVehicleNodeWithHeading = function(x, y, z, nthclosest, outposition, heading, unknown1, unknown2, unknown3, unknown4)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(nthclosest) == 'integer', 'Argument nthclosest must be of type integer.')
    assert(type(outposition) == 'integer', 'Argument outposition must be of type integer.')
    assert(type(heading) == 'integer', 'Argument heading must be of type integer.')
    assert(type(unknown1) == 'userdata', 'Argument unknown1 must be of type userdata.')
    assert(type(unknown2) == 'integer', 'Argument unknown2 must be of type integer.')
    assert(type(unknown3) == 'number', 'Argument unknown3 must be of type number.')
    assert(type(unknown4) == 'number', 'Argument unknown4 must be of type number.')

    local call = natives.invoke(0x591B40D4390DB54A, 'bool', x, y, z, nthclosest, outposition, heading, unknown1, unknown2, unknown3, unknown4)
    return call
end

-- Returns the nth closest vehicle node with a heading to a coord
--- @param x number
--- @param y number
--- @param z number
--- @param nthclosest integer
--- @param returnheading integer
--- @param returnnumlanes integer
--- @param nodeflags integer
--- @param zmeasuremult number
--- @param ztolerance number
--- @return number
natives.pathfind_getNthClosestVehicleNodeIdWithHeading = function(x, y, z, nthclosest, returnheading, returnnumlanes, nodeflags, zmeasuremult, ztolerance)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(nthclosest) == 'integer', 'Argument nthclosest must be of type integer.')
    assert(type(returnheading) == 'integer', 'Argument returnheading must be of type integer.')
    assert(type(returnnumlanes) == 'integer', 'Argument returnnumlanes must be of type integer.')
    assert(type(nodeflags) == 'integer', 'Argument nodeflags must be of type integer.')
    assert(type(zmeasuremult) == 'number', 'Argument zmeasuremult must be of type number.')
    assert(type(ztolerance) == 'number', 'Argument ztolerance must be of type number.')

    local call = natives.invoke(0x4114EAA8A7F7766D, 'int', x, y, z, nthclosest, returnheading, returnnumlanes, nodeflags, zmeasuremult, ztolerance)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @param desiredx number
--- @param desiredy number
--- @param desiredz number
--- @param nthclosest integer
--- @param outposition integer
--- @param outheading integer
--- @param nodetype integer
--- @param p10 userdata
--- @param p11 userdata
--- @return boolean
natives.pathfind_getNthClosestVehicleNodeFavourDirection = function(x, y, z, desiredx, desiredy, desiredz, nthclosest, outposition, outheading, nodetype, p10, p11)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(desiredx) == 'number', 'Argument desiredx must be of type number.')
    assert(type(desiredy) == 'number', 'Argument desiredy must be of type number.')
    assert(type(desiredz) == 'number', 'Argument desiredz must be of type number.')
    assert(type(nthclosest) == 'integer', 'Argument nthclosest must be of type integer.')
    assert(type(outposition) == 'integer', 'Argument outposition must be of type integer.')
    assert(type(outheading) == 'integer', 'Argument outheading must be of type integer.')
    assert(type(nodetype) == 'integer', 'Argument nodetype must be of type integer.')
    assert(type(p10) == 'userdata', 'Argument p10 must be of type userdata.')
    assert(type(p11) == 'userdata', 'Argument p11 must be of type userdata.')

    local call = natives.invoke(0x2FAC235A6062F14A, 'bool', x, y, z, desiredx, desiredy, desiredz, nthclosest, outposition, outheading, nodetype, p10, p11)
    return call
end

-- Returns true if the id is non zero.
--- @param vehiclenodeid integer
--- @return boolean
natives.pathfind_isVehicleNodeIdValid = function(vehiclenodeid)
    assert(type(vehiclenodeid) == 'integer', 'Argument vehiclenodeid must be of type integer.')

    local call = natives.invoke(0x5829A02AF4F0B3CB, 'bool', vehiclenodeid)
    return call
end

--- @param nodeid integer
--- @param outposition integer
natives.pathfind_getVehicleNodePosition = function(nodeid, outposition)
    assert(type(nodeid) == 'integer', 'Argument nodeid must be of type integer.')
    assert(type(outposition) == 'integer', 'Argument outposition must be of type integer.')

    local call = natives.invoke(0x8E8D72FF24DEE1FB, 'void', nodeid, outposition)
end

--- @param nodeid integer
--- @return boolean
natives.pathfind_getVehicleNodeIsSwitchedOff = function(nodeid)
    assert(type(nodeid) == 'integer', 'Argument nodeid must be of type integer.')

    local call = natives.invoke(0x28533DBDDF7C2C97, 'bool', nodeid)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @param p3 number
--- @param p4 integer
--- @param p5 integer
--- @param p6 integer
--- @param p7 userdata
--- @param p8 userdata
--- @param p9 integer
--- @param p10 boolean
--- @return any
natives.pathfind_getClosestRoad = function(x, y, z, p3, p4, p5, p6, p7, p8, p9, p10)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')
    assert(type(p5) == 'integer', 'Argument p5 must be of type integer.')
    assert(type(p6) == 'integer', 'Argument p6 must be of type integer.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'integer', 'Argument p9 must be of type integer.')
    assert(type(p10) == 'boolean', 'Argument p10 must be of type boolean.')

    local call = natives.invoke(0x132F52BBA570FE92, 'any', x, y, z, p3, p4, p5, p6, p7, p8, p9, p10)
    return call
end

--- @param x1 number
--- @param y1 number
--- @param x2 number
--- @param y2 number
--- @return boolean
natives.pathfind_areNodesLoadedForArea = function(x1, y1, x2, y2)
    assert(type(x1) == 'number', 'Argument x1 must be of type number.')
    assert(type(y1) == 'number', 'Argument y1 must be of type number.')
    assert(type(x2) == 'number', 'Argument x2 must be of type number.')
    assert(type(y2) == 'number', 'Argument y2 must be of type number.')

    local call = natives.invoke(0xF7B79A50B905A30D, 'bool', x1, y1, x2, y2)
    return call
end

-- Old name: REQUEST_PATHS_PREFER_ACCURATE_BOUNDINGSTRUCT
--- @param x1 number
--- @param y1 number
--- @param x2 number
--- @param y2 number
--- @return boolean
natives.pathfind_requestPathNodesInAreaThisFrame = function(x1, y1, x2, y2)
    assert(type(x1) == 'number', 'Argument x1 must be of type number.')
    assert(type(y1) == 'number', 'Argument y1 must be of type number.')
    assert(type(x2) == 'number', 'Argument x2 must be of type number.')
    assert(type(y2) == 'number', 'Argument y2 must be of type number.')

    local call = natives.invoke(0x07FB139B592FA687, 'bool', x1, y1, x2, y2)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param minlanes integer
--- @param avoiddeadends boolean
--- @param avoidhighways boolean
--- @param outposition integer
--- @param nodeid integer
--- @return boolean
natives.pathfind_getRandomVehicleNode = function(x, y, z, radius, minlanes, avoiddeadends, avoidhighways, outposition, nodeid)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(minlanes) == 'integer', 'Argument minlanes must be of type integer.')
    assert(type(avoiddeadends) == 'boolean', 'Argument avoiddeadends must be of type boolean.')
    assert(type(avoidhighways) == 'boolean', 'Argument avoidhighways must be of type boolean.')
    assert(type(outposition) == 'integer', 'Argument outposition must be of type integer.')
    assert(type(nodeid) == 'integer', 'Argument nodeid must be of type integer.')

    local call = natives.invoke(0x93E0DB8440B73A7D, 'bool', x, y, z, radius, minlanes, avoiddeadends, avoidhighways, outposition, nodeid)
    return call
end

--- @param nodeid integer
--- @param x number
--- @param y number
--- @param z number
--- @param outcoords integer
--- @param heading integer
natives.pathfind_getSpawnDataForRoadNode = function(nodeid, x, y, z, outcoords, heading)
    assert(type(nodeid) == 'integer', 'Argument nodeid must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(outcoords) == 'integer', 'Argument outcoords must be of type integer.')
    assert(type(heading) == 'integer', 'Argument heading must be of type integer.')

    local call = natives.invoke(0xA3791B915B8B84C6, 'void', nodeid, x, y, z, outcoords, heading)
end

-- Gets a value indicating whether the specified position is on a road.
--- @param x number
--- @param y number
--- @param z number
--- @param vehicle integer
--- @return boolean
natives.pathfind_isPointOnRoad = function(x, y, z, vehicle)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x125BF4ABFC536B09, 'bool', x, y, z, vehicle)
    return call
end

--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param unknown boolean
--- @param p7 userdata
natives.pathfind_setPedPathsInArea = function(x1, y1, z1, x2, y2, z2, unknown, p7)
    assert(type(x1) == 'number', 'Argument x1 must be of type number.')
    assert(type(y1) == 'number', 'Argument y1 must be of type number.')
    assert(type(z1) == 'number', 'Argument z1 must be of type number.')
    assert(type(x2) == 'number', 'Argument x2 must be of type number.')
    assert(type(y2) == 'number', 'Argument y2 must be of type number.')
    assert(type(z2) == 'number', 'Argument z2 must be of type number.')
    assert(type(unknown) == 'boolean', 'Argument unknown must be of type boolean.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')

    local call = natives.invoke(0x34F060F4BF92E018, 'void', x1, y1, z1, x2, y2, z2, unknown, p7)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.pathfind_n0Xe5Ef9De716Ff737E = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xE5EF9DE716FF737E, 'void', p0, p1, p2)
end

--- @param x number
--- @param y number
--- @param z number
--- @param onground boolean
--- @param outposition integer
--- @param flags integer
--- @return boolean
natives.pathfind_getSafeCoordForPed = function(x, y, z, onground, outposition, flags)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(onground) == 'boolean', 'Argument onground must be of type boolean.')
    assert(type(outposition) == 'integer', 'Argument outposition must be of type integer.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')

    local call = natives.invoke(0xB61C8E878A4199CA, 'bool', x, y, z, onground, outposition, flags)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
natives.pathfind_setPedPathsBackToOriginal = function(p0, p1, p2, p3, p4, p5, p6)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0xE04B48F2CC926253, 'void', p0, p1, p2, p3, p4, p5, p6)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.pathfind_n0Xcf213A5Fc3Abfc08 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xCF213A5FC3ABFC08, 'void', p0, p1, p2)
end

--- @param x number
--- @param y number
--- @param radius number
natives.pathfind_addNavmeshRequiredRegion = function(x, y, radius)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')

    local call = natives.invoke(0x387EAD7EE42F6685, 'void', x, y, radius)
end

-- Returns whether navmesh for the region is loaded.
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @return boolean
natives.pathfind_isNavmeshLoadedInArea = function(x1, y1, z1, x2, y2, z2)
    assert(type(x1) == 'number', 'Argument x1 must be of type number.')
    assert(type(y1) == 'number', 'Argument y1 must be of type number.')
    assert(type(z1) == 'number', 'Argument z1 must be of type number.')
    assert(type(x2) == 'number', 'Argument x2 must be of type number.')
    assert(type(y2) == 'number', 'Argument y2 must be of type number.')
    assert(type(z2) == 'number', 'Argument z2 must be of type number.')

    local call = natives.invoke(0xF813C7E63F9062A5, 'bool', x1, y1, z1, x2, y2, z2)
    return call
end

--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @return number
natives.pathfind_getNumNavmeshesExistingInArea = function(p0, p1, p2, p3, p4, p5)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')

    local call = natives.invoke(0x01708E8DD3FF8C65, 'int', p0, p1, p2, p3, p4, p5)
    return call
end

--- @param name string
--- @return boolean
natives.pathfind_navmeshActivateSwap = function(name)
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0x7C334FF4D9215912, 'bool', name)
    return call
end

--- @param name string
--- @return boolean
natives.pathfind_navmeshDeactivateSwap = function(name)
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0x527B97C203BB8606, 'bool', name)
    return call
end

--- @param name string
--- @return boolean
natives.pathfind_navmeshIsSwapActive = function(name)
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0x5AC0944C156E5F44, 'bool', name)
    return call
end

--- @param name string
--- @return boolean
natives.pathfind_navmeshDoesSwapExist = function(name)
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0x495CFAB2924237C7, 'bool', name)
    return call
end

--- @param p0 string
--- @return number
natives.pathfind_n0X5A3B54Addf5472A3 = function(p0)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')

    local call = natives.invoke(0x5A3B54ADDF5472A3, 'int', p0)
    return call
end

--- @param p0 string
--- @param p1 integer
--- @return any
natives.pathfind_n0Xa33914B00Ca55756 = function(p0, p1)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xA33914B00CA55756, 'any', p0, p1)
    return call
end

--- @param vehicle integer
--- @param navmeshname string
--- @return boolean
natives.pathfind_navmeshAssignNavmeshToVehicle = function(vehicle, navmeshname)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(navmeshname) == 'string', 'Argument navmeshname must be of type string.')

    local call = natives.invoke(0x44026E3DB3CED602, 'bool', vehicle, navmeshname)
    return call
end

--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 number
--- @param p7 boolean
--- @param p8 userdata
--- @return any
natives.pathfind_addNavmeshBlockingObject = function(p0, p1, p2, p3, p4, p5, p6, p7, p8)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'number', 'Argument p6 must be of type number.')
    assert(type(p7) == 'boolean', 'Argument p7 must be of type boolean.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')

    local call = natives.invoke(0xFCD5C8E06E502F5A, 'any', p0, p1, p2, p3, p4, p5, p6, p7, p8)
    return call
end

--- @param p0 userdata
natives.pathfind_removeNavmeshBlockingObject = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x46399A7895957C0E, 'void', p0)
end

--- @param p0 userdata
--- @return boolean
natives.pathfind_doesNavmeshBlockingObjectExist = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x0EAEB0DB4B132399, 'bool', p0)
    return call
end

--- @param volume integer
--- @param flags integer
--- @return boolean
natives.pathfind_addNavmeshBlockingVolume = function(volume, flags)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')

    local call = natives.invoke(0x19C7567D2F2287D6, 'bool', volume, flags)
    return call
end

--- @param volume integer
natives.pathfind_removeNavmeshBlockingVolume = function(volume)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')

    local call = natives.invoke(0x2C87C3E1C7B96EE2, 'void', volume)
end

--- @param volume integer
--- @return boolean
natives.pathfind_doesNavmeshBlockingVolumeExist = function(volume)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')

    local call = natives.invoke(0xDE0EA444735C1368, 'bool', volume)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.pathfind_n0X6Dad6630Ae4A74Cb = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x6DAD6630AE4A74CB, 'void', p0, p1)
end

-- Starts a nav mesh query for a path between coordinates with a given ped and returns a handle to be validated by _NAVMESH_REQUESTED_QUERY_STATUS and then _NAVMESH_REQUESTED_PATH_WAYPOINTS_FOUND
-- 
-- Only bit flag values used in scripts are 0, 23, and 29. 23 is used with dogs and horses. 29 with legendary animals.
--- @param ped integer
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param bitflag integer
--- @return number
natives.pathfind_navmeshRequestPath = function(ped, x1, y1, z1, x2, y2, z2, bitflag)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x1) == 'number', 'Argument x1 must be of type number.')
    assert(type(y1) == 'number', 'Argument y1 must be of type number.')
    assert(type(z1) == 'number', 'Argument z1 must be of type number.')
    assert(type(x2) == 'number', 'Argument x2 must be of type number.')
    assert(type(y2) == 'number', 'Argument y2 must be of type number.')
    assert(type(z2) == 'number', 'Argument z2 must be of type number.')
    assert(type(bitflag) == 'integer', 'Argument bitflag must be of type integer.')

    local call = natives.invoke(0x348F211CA2404039, 'int', ped, x1, y1, z1, x2, y2, z2, bitflag)
    return call
end

-- Called in scripts after finished with requested pathes. Immediately resets all values connected to the path handle except query status, which changes from 1 to 2 before eventually becoming fully invalidated to 0.
--- @param path integer
--- @return boolean
natives.pathfind_navmeshClearRequestedPath = function(path)
    assert(type(path) == 'integer', 'Argument path must be of type integer.')

    local call = natives.invoke(0x661BB1E1FF77742D, 'bool', path)
    return call
end

-- Returns eNavMeshQueryStatus
-- enum eNavMeshQueryStatus
-- {
-- 	QS_NOT_FOUND,
-- 	QS_COMPLETE,
-- 	QS_PENDING
-- };
-- 
-- It appears that the pending state of 2 is at least also used when cleaning up a request (_NAVMESH_CLEAR_REQUESTED_PATH) or if a request never completes. Eventually queries are invalidated and return 0.
-- 
-- Old name: _NAVMESH_QUERY_STATUS
--- @param path integer
--- @return number
natives.pathfind_navmeshRequestedQueryStatus = function(path)
    assert(type(path) == 'integer', 'Argument path must be of type integer.')

    local call = natives.invoke(0x3A0F82F6EE2291C8, 'int', path)
    return call
end

-- Returns true if a path of waypoints was found. Waypoints can be retrieved with _NAVMESH_REQUESTED_PATH_NUM_WAYPOINTS and _NAVMESH_REQUESTED_PATH_WAYPOINT_BY_INDEX
--- @param path integer
--- @return boolean
natives.pathfind_navmeshRequestedPathWaypointsFound = function(path)
    assert(type(path) == 'integer', 'Argument path must be of type integer.')

    local call = natives.invoke(0x8800776E410EB669, 'bool', path)
    return call
end

-- Returns a bit flag for seemingly terrain within the waypoints in the path. Checked against bit value 2 to match water in the path, seems to always contain at least 1 though regardless of location/ped.
--- @param path integer
--- @return number
natives.pathfind_navmeshRequestedPathWaypointsTerrain = function(path)
    assert(type(path) == 'integer', 'Argument path must be of type integer.')

    local call = natives.invoke(0xF61CFEDEAB627BFA, 'int', path)
    return call
end

-- Returns the number of waypoints for a requested path (NAVMESH_REQUEST_PATH) if the query is completed (_NAVMESH_REQUESTED_QUERY_STATUS). For use with _NAVMESH_REQUESTED_PATH_WAYPOINT_BY_INDEX
--- @param path integer
--- @return number
natives.pathfind_navmeshRequestedPathNumWaypoints = function(path)
    assert(type(path) == 'integer', 'Argument path must be of type integer.')

    local call = natives.invoke(0xD470725E0703D22F, 'int', path)
    return call
end

-- Returns a vector3 waypoint at the specified index for a path. Use _NAVMESH_REQUESTED_PATH_NUM_WAYPOINTS to get available indexes.
--- @param path integer
--- @param waypointindex integer
--- @return number, number, number
natives.pathfind_navmeshRequestedPathWaypointByIndex = function(path, waypointindex)
    assert(type(path) == 'integer', 'Argument path must be of type integer.')
    assert(type(waypointindex) == 'integer', 'Argument waypointindex must be of type integer.')

    local call = natives.invoke(0x430F8319AE56C8A9, 'vector3', path, waypointindex)
    return call.x, call.y, call.z
end

-- Returns CGameWorldHeightMap's minimum Z value at specified point (grid node).
--- @param x number
--- @param y number
--- @return number
natives.pathfind_getApproxFloorForPoint = function(x, y)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')

    local call = natives.invoke(0x336511A34F2E5185, 'float', x, y)
    return call
end

--- @param multiplier number
natives.pathfind_setAmbientPedRangeMultiplierThisFrame = function(multiplier)
    assert(type(multiplier) == 'number', 'Argument multiplier must be of type number.')

    local call = natives.invoke(0x0B919E1FB47CC4E0, 'void', multiplier)
end

-- nullsub, doesn't do anything
--- @param toggle boolean
natives.pathfind_setIgnoreNoGpsFlag = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x72751156E7678833, 'void', toggle)
end

--- @return number
natives.pathfind_getGpsBlipRouteLength = function()

    local call = natives.invoke(0xBBB45C3CF5C8AA85, 'int')
    return call
end

--- @param p0 userdata
--- @return any
natives.pathfind_n0Xefc535C9Faf563B3 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xEFC535C9FAF563B3, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.pathfind_n0X665B21666351Cb37 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x665B21666351CB37, 'any', p0, p1, p2)
    return call
end

--- @return boolean
natives.pathfind_getGpsBlipRouteFound = function()

    local call = natives.invoke(0x869DAACBBE9FA006, 'bool')
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @return any
natives.pathfind_n0X54F4D7B6670Fbb5A = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x54F4D7B6670FBB5A, 'any', p0, p1, p2, p3, p4)
    return call
end

--- @param p0 userdata
natives.pathfind_n0X34C9Af25649172D0 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x34C9AF25649172D0, 'void', p0)
end

-- GPS disabled zone: p1 = 0
-- Clearing GPS disabled zone: p1 = 1
--- @param volume integer
--- @param p1 integer
--- @param p2 integer
natives.pathfind_n0Xf2A2177Ac848B3A8 = function(volume, p1, p2)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0xF2A2177AC848B3A8, 'void', volume, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
natives.pathfind_n0X4Bdebea5702B97A9 = function(p0, p1, p2, p3, p4, p5)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0x4BDEBEA5702B97A9, 'void', p0, p1, p2, p3, p4, p5)
end

--- @param p0 userdata
natives.pathfind_n0X264E9A5Cd78C338F = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x264E9A5CD78C338F, 'void', p0)
end

--- @param p0 userdata
natives.pathfind_n0X869A7015Bd4606E9 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x869A7015BD4606E9, 'void', p0)
end

--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param p6 integer
--- @return any
natives.pathfind_simulatedRouteCreate = function(x1, y1, z1, x2, y2, z2, p6)
    assert(type(x1) == 'number', 'Argument x1 must be of type number.')
    assert(type(y1) == 'number', 'Argument y1 must be of type number.')
    assert(type(z1) == 'number', 'Argument z1 must be of type number.')
    assert(type(x2) == 'number', 'Argument x2 must be of type number.')
    assert(type(y2) == 'number', 'Argument y2 must be of type number.')
    assert(type(z2) == 'number', 'Argument z2 must be of type number.')
    assert(type(p6) == 'integer', 'Argument p6 must be of type integer.')

    local call = natives.invoke(0xFD5BB35AAB83FD48, 'any', x1, y1, z1, x2, y2, z2, p6)
    return call
end

--- @param p0 userdata
natives.pathfind_simulatedRouteDelete = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x4907D0E4FB26EE65, 'void', p0)
end

--- @param p0 userdata
--- @return boolean
natives.pathfind_simulatedRouteExists = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x65A8196B8D7F5E0B, 'bool', p0)
    return call
end

--- @param p0 userdata
--- @return boolean
natives.pathfind_simulatedRouteIsLoaded = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x240915043CB799D7, 'bool', p0)
    return call
end

--- @param p0 userdata
--- @param p1 number
--- @param p2 number
natives.pathfind_simulatedRouteTravelToPoint = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')

    local call = natives.invoke(0xA1A3DE1C215C7394, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @return number
natives.pathfind_simulatedRouteGetEta = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x2DD5F78D73B24172, 'float', p0)
    return call
end

--- @param modelhash integer
--- @param x number
--- @param y number
--- @param z number
--- @param heading number
--- @param isnetwork boolean
--- @param bscripthostped boolean
--- @param p7 boolean
--- @param p8 boolean
--- @return number
natives.ped_createPed = function(modelhash, x, y, z, heading, isnetwork, bscripthostped, p7, p8)
    assert(type(modelhash) == 'integer', 'Argument modelhash must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(heading) == 'number', 'Argument heading must be of type number.')
    assert(type(isnetwork) == 'boolean', 'Argument isnetwork must be of type boolean.')
    assert(type(bscripthostped) == 'boolean', 'Argument bscripthostped must be of type boolean.')
    assert(type(p7) == 'boolean', 'Argument p7 must be of type boolean.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')

    local call = natives.invoke(0xD49F9B0955C367DE, 'int', modelhash, x, y, z, heading, isnetwork, bscripthostped, p7, p8)
    return call
end

-- Deletes the specified ped, then sets the handle pointed to by the pointer to NULL.
--- @param ped integer
natives.ped_deletePed = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xCC0EF140F99365C5, 'void', ped)
end

--- @param ped integer
--- @param p1 integer
natives.ped_setRemovePedNetworked = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x39A2FC5AF55A52B1, 'void', ped, p1)
end

-- Only used in SP
-- _SET_REMOVE_PED*
--- @param ped integer
--- @param p1 number
natives.ped_n0X7C08E7Cb8D951B70 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x7C08E7CB8D951B70, 'void', ped, p1)
end

--- @param ped integer
--- @param p1 number
--- @param p2 number
--- @param p3 integer
--- @param p4 userdata
natives.ped_setPedToBeRemoved = function(ped, p1, p2, p3, p4)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x36E4B61DC56DE77C, 'void', ped, p1, p2, p3, p4)
end

--- @param ped integer
--- @param isnetwork boolean
--- @param bscripthostped boolean
--- @param copyheadblendflag boolean
--- @return number
natives.ped_clonePed = function(ped, isnetwork, bscripthostped, copyheadblendflag)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(isnetwork) == 'boolean', 'Argument isnetwork must be of type boolean.')
    assert(type(bscripthostped) == 'boolean', 'Argument bscripthostped must be of type boolean.')
    assert(type(copyheadblendflag) == 'boolean', 'Argument copyheadblendflag must be of type boolean.')

    local call = natives.invoke(0xEF29A16337FACADB, 'int', ped, isnetwork, bscripthostped, copyheadblendflag)
    return call
end

-- Copies ped's components and props to targetPed.
-- Can be used to clear anything from a ped by cloning it, including bullet holes.
--- @param ped integer
--- @param targetped integer
natives.ped_clonePedToTarget = function(ped, targetped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(targetped) == 'integer', 'Argument targetped must be of type integer.')

    local call = natives.invoke(0xE952D6431689AD9A, 'void', ped, targetped)
end

-- Gets a value indicating whether the specified ped is in the specified vehicle.
--- @param ped integer
--- @param vehicle integer
--- @param atgetin boolean
--- @return boolean
natives.ped_isPedInVehicle = function(ped, vehicle, atgetin)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(atgetin) == 'boolean', 'Argument atgetin must be of type boolean.')

    local call = natives.invoke(0xA3EE4A07279BB9DB, 'bool', ped, vehicle, atgetin)
    return call
end

--- @param ped integer
--- @param modelhash integer
--- @return boolean
natives.ped_isPedInModel = function(ped, modelhash)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(modelhash) == 'integer', 'Argument modelhash must be of type integer.')

    local call = natives.invoke(0x796D90EFB19AA332, 'bool', ped, modelhash)
    return call
end

-- Gets a value indicating whether the specified ped is in any vehicle.
--- @param ped integer
--- @param atgetin boolean
--- @return boolean
natives.ped_isPedInAnyVehicle = function(ped, atgetin)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(atgetin) == 'boolean', 'Argument atgetin must be of type boolean.')

    local call = natives.invoke(0x997ABD671D25CA0B, 'bool', ped, atgetin)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @param p3 number
--- @param p4 integer
--- @param p5 userdata
natives.ped_n0X9851De7Aec10B4E1 = function(x, y, z, p3, p4, p5)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0x9851DE7AEC10B4E1, 'void', x, y, z, p3, p4, p5)
end

-- Gets a value indicating whether this ped's health is below its injured threshold.
-- 
-- The default threshold is 100.
--- @param ped integer
--- @return boolean
natives.ped_isPedInjured = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x84A2DD9AC37C35C1, 'bool', ped)
    return call
end

-- Gets a value indicating whether this ped's health is below its fatally injured threshold. The default threshold is 100.
-- If the handle is invalid, the function returns true.
--- @param ped integer
--- @return boolean
natives.ped_isPedFatallyInjured = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xD839450756ED5A80, 'bool', ped)
    return call
end

--- @param ped integer
--- @param p1 boolean
--- @return boolean
natives.ped_isPedDeadOrDying = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x3317DEDB88C95038, 'bool', ped, p1)
    return call
end

-- Bleedout profiles:
-- Animal_FastBleedout
-- Animal_Generic
-- Human_FastBleedout
-- Human_Generic
-- Human_Mission
-- 
-- For more information, see common/data/ai/peddamageinfo.meta
--- @param ped integer
--- @param bleedoutprofile integer
natives.ped_setPedBleedoutProfile = function(ped, bleedoutprofile)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(bleedoutprofile) == 'integer', 'Argument bleedoutprofile must be of type integer.')

    local call = natives.invoke(0x66C047719B0E80E1, 'void', ped, bleedoutprofile)
end

--- @param ped integer
--- @return boolean
natives.ped_isPedAimingFromCover = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x3998B1276A3300E5, 'bool', ped)
    return call
end

-- Returns whether the specified ped is reloading.
--- @param ped integer
--- @return boolean
natives.ped_isPedReloading = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x24B100C68C645951, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedAPlayer = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x12534C348C6CB68B, 'bool', ped)
    return call
end

-- Returns true only if it's a player ped and an animal as well.
-- _IS_ANY_* - _IS_CONTROL_*
--- @param ped integer
--- @return boolean
natives.ped_isAnimalControlledByAPlayer = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x0E2F43516F998269, 'bool', ped)
    return call
end

-- seatIndex:
-- enum eVehicleSeat
-- {
-- 	VS_ANY_PASSENGER = -2,
-- 	VS_DRIVER,
-- 	VS_FRONT_RIGHT,
-- 	VS_BACK_LEFT,
-- 	VS_BACK_RIGHT,
-- 	VS_EXTRA_LEFT_1,
-- 	VS_EXTRA_RIGHT_1,
-- 	VS_EXTRA_LEFT_2,
-- 	VS_EXTRA_RIGHT_2,
-- 	VS_EXTRA_LEFT_3,
-- 	VS_EXTRA_RIGHT_3,
-- 	VS_NUM_SEATS
-- };
--- @param vehicle integer
--- @param modelhash integer
--- @param seatindex integer
--- @param p3 boolean
--- @param p4 boolean
--- @param p5 boolean
--- @return number
natives.ped_createPedInsideVehicle = function(vehicle, modelhash, seatindex, p3, p4, p5)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(modelhash) == 'integer', 'Argument modelhash must be of type integer.')
    assert(type(seatindex) == 'integer', 'Argument seatindex must be of type integer.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')

    local call = natives.invoke(0x7DD959874C1FD534, 'int', vehicle, modelhash, seatindex, p3, p4, p5)
    return call
end

--- @param ped integer
--- @param heading number
natives.ped_setPedDesiredHeading = function(ped, heading)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(heading) == 'number', 'Argument heading must be of type number.')

    local call = natives.invoke(0xAA5A7ECE2AA8FE70, 'void', ped, heading)
end

-- Old name: _FREEZE_PED_CAMERA_ROTATION
--- @param ped integer
natives.ped_forceAllHeadingValuesToAlign = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xFF287323B0E2C69A, 'void', ped)
end

-- angle is ped's view cone
--- @param ped integer
--- @param otherped integer
--- @param angle number
--- @return boolean
natives.ped_isPedFacingPed = function(ped, otherped, angle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(otherped) == 'integer', 'Argument otherped must be of type integer.')
    assert(type(angle) == 'number', 'Argument angle must be of type number.')

    local call = natives.invoke(0xD71649DB0A545AA3, 'bool', ped, otherped, angle)
    return call
end

-- Notes: The function only returns true while the ped is: 
-- A.) Swinging a random melee attack (including pistol-whipping)
-- 
-- B.) Reacting to being hit by a melee attack (including pistol-whipping)
-- 
-- C.) Is locked-on to an enemy (arms up, strafing/skipping in the default fighting-stance, ready to dodge+counter). 
-- 
-- You don't have to be holding the melee-targeting button to be in this stance; you stay in it by default for a few seconds after swinging at someone. If you do a sprinting punch, it returns true for the duration of the punch animation and then returns false again, even if you've punched and made-angry many peds
--- @param ped integer
--- @return boolean
natives.ped_isPedInMeleeCombat = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x4E209B2C1EAD5159, 'bool', ped)
    return call
end

-- Only used in R* SP Script winter1: p1 = 5000
-- _SET_PED_M*
--- @param ped integer
--- @param p1 integer
--- @return any
natives.ped_n0X6Db875Afc584Fa32 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x6DB875AFC584FA32, 'any', ped, p1)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedStopped = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x530944F6F4B8A214, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedSitting = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x84D0BF2B21862059, 'bool', ped)
    return call
end

--- @param ped integer
--- @param p1 integer
--- @return boolean
natives.ped_n0X09D7Afd3716Da8E1 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x09D7AFD3716DA8E1, 'bool', ped, p1)
    return call
end

-- If returned true: CHECK_SHOT_NEAR: Succeeded shot near
-- If returned false: CHECK_SHOT_NEAR: Failed shot near
--- @param player integer
--- @param ped integer
--- @param shotnearrecentlytime integer
--- @return boolean
natives.ped_n0X9C81338B2E62Ce0A = function(player, ped, shotnearrecentlytime)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(shotnearrecentlytime) == 'integer', 'Argument shotnearrecentlytime must be of type integer.')

    local call = natives.invoke(0x9C81338B2E62CE0A, 'bool', player, ped, shotnearrecentlytime)
    return call
end

--- @param ped integer
--- @param p1 number
--- @return boolean
natives.ped_n0Xb7Dbb2986B87E230 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0xB7DBB2986B87E230, 'bool', ped, p1)
    return call
end

--- @param ped integer
--- @param p1 number
--- @return boolean
natives.ped_n0Xd355E2F1Bb41087E = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0xD355E2F1BB41087E, 'bool', ped, p1)
    return call
end

--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param p6 boolean
--- @param p7 boolean
--- @return boolean
natives.ped_isAnyPedShootingInArea = function(x1, y1, z1, x2, y2, z2, p6, p7)
    assert(type(x1) == 'number', 'Argument x1 must be of type number.')
    assert(type(y1) == 'number', 'Argument y1 must be of type number.')
    assert(type(z1) == 'number', 'Argument z1 must be of type number.')
    assert(type(x2) == 'number', 'Argument x2 must be of type number.')
    assert(type(y2) == 'number', 'Argument y2 must be of type number.')
    assert(type(z2) == 'number', 'Argument z2 must be of type number.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')
    assert(type(p7) == 'boolean', 'Argument p7 must be of type boolean.')

    local call = natives.invoke(0xA0D3D71EA1086C55, 'bool', x1, y1, z1, x2, y2, z2, p6, p7)
    return call
end

-- Returns whether the specified ped is shooting.
--- @param ped integer
--- @return boolean
natives.ped_isPedShooting = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x34616828CD07F1A1, 'bool', ped)
    return call
end

-- Returns time since the specified ped last shot, in seconds. (fPlayerJustShotTime)
--- @param ped integer
--- @return number
natives.ped_timeSincePedLastShot = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x285D36C5C72B0569, 'float', ped)
    return call
end

-- accuracy = 0-100, 100 being perfectly accurate
--- @param ped integer
--- @param accuracy integer
natives.ped_setPedAccuracy = function(ped, accuracy)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(accuracy) == 'integer', 'Argument accuracy must be of type integer.')

    local call = natives.invoke(0x7AEFB85C1D49DEB6, 'void', ped, accuracy)
end

--- @param ped integer
--- @return number
natives.ped_getPedAccuracy = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x37F4AD56ECBC0CD6, 'int', ped)
    return call
end

--- @param ped integer
--- @param modelhash integer
--- @return boolean
natives.ped_isPedModel = function(ped, modelhash)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(modelhash) == 'integer', 'Argument modelhash must be of type integer.')

    local call = natives.invoke(0xC9D55B1A358A5BF7, 'bool', ped, modelhash)
    return call
end

-- Forces the ped to fall back and kills it.
-- 
-- It doesn't really explode the ped's head but it kills the ped
--- @param ped integer
--- @param weaponhash integer
natives.ped_explodePedHead = function(ped, weaponhash)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0x2D05CED3A38D0F3A, 'void', ped, weaponhash)
end

-- Same as SET_PED_ARMOUR, but ADDS 'amount' to the armor the Ped already has.
--- @param ped integer
--- @param amount integer
natives.ped_addArmourToPed = function(ped, amount)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(amount) == 'integer', 'Argument amount must be of type integer.')

    local call = natives.invoke(0x5BA652A0CD14DF2F, 'void', ped, amount)
end

-- Used in Script Function MP_MAIN_OFFLINE__INITIALIZE_FLOW & PROCESS_GENERIC_PLAYER_INITIALIZATION
--- @param ped integer
--- @param p1 integer
natives.ped_n0X5Ca20Fbe49891Bbd = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x5CA20FBE49891BBD, 'void', ped, p1)
end

-- Ped: The ped to warp.
-- vehicle: The vehicle to warp the ped into.
-- seatIndex: see CREATE_PED_INSIDE_VEHICLE
--- @param ped integer
--- @param vehicle integer
--- @param seatindex integer
natives.ped_setPedIntoVehicle = function(ped, vehicle, seatindex)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(seatindex) == 'integer', 'Argument seatindex must be of type integer.')

    local call = natives.invoke(0xF75B0D629E1C063D, 'void', ped, vehicle, seatindex)
end

--- @param ped integer
natives.ped_setPedMoveAnimsBlendOut = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x9E8C908F41584ECD, 'void', ped)
end

-- Not implemented.
--- @param ped integer
--- @param p1 userdata
natives.ped_n0X606D529Dada3C940 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x606D529DADA3C940, 'void', ped, p1)
end

-- Returns true/false if the ped is/isn't male.
--- @param ped integer
--- @return boolean
natives.ped_isPedMale = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x6D9F5FAA7488BA46, 'bool', ped)
    return call
end

-- Returns true/false if the ped is/isn't humanoid.
--- @param ped integer
--- @return boolean
natives.ped_isPedHuman = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xB980061DA992779D, 'bool', ped)
    return call
end

-- Gets the vehicle the specified Ped is in.
-- 
-- If the Ped is not in a vehicle and includeLastVehicle is true, the vehicle they were last in is returned.
--- @param ped integer
--- @param lastvehicle boolean
--- @return number
natives.ped_getVehiclePedIsIn = function(ped, lastvehicle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(lastvehicle) == 'boolean', 'Argument lastvehicle must be of type boolean.')

    local call = natives.invoke(0x9A9112A0FE9A4713, 'int', ped, lastvehicle)
    return call
end

-- Resets the value for the last vehicle driven by the Ped.
--- @param ped integer
natives.ped_resetPedLastVehicle = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xBB8DE8CF6A8DD8BB, 'void', ped)
end

--- @param p0 boolean
natives.ped_n0Xc6136B40Fffb778B = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0xC6136B40FFFB778B, 'void', p0)
end

-- Only used in SP R* Script train_robbery3: p1 = CLIPSET@VEH_TRAIN@HANDCART@BASE_PANIC & CLIPSET@VEH_TRAIN@HANDCART@BASE_PANIC_JOHN
--- @param ped integer
--- @param clipset string
natives.ped_n0X6E8B87139854022D = function(ped, clipset)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(clipset) == 'string', 'Argument clipset must be of type string.')

    local call = natives.invoke(0x6E8B87139854022D, 'void', ped, clipset)
end

--- @return number
natives.ped_getNumFreeSlotsInPedPool = function()

    local call = natives.invoke(0x313778EDCA9158E2, 'int')
    return call
end

--- @param numpeds integer
natives.ped_reserveAmbientPeds = function(numpeds)
    assert(type(numpeds) == 'integer', 'Argument numpeds must be of type integer.')

    local call = natives.invoke(0xED9582B3DA8F02B4, 'void', numpeds)
end

--- @param numpeds integer
natives.ped_reserveAmbientPedsTotal = function(numpeds)
    assert(type(numpeds) == 'integer', 'Argument numpeds must be of type integer.')

    local call = natives.invoke(0xF008E0BA1FE1D644, 'void', numpeds)
end

--- @param numpeds integer
natives.ped_unreserveAmbientPeds = function(numpeds)
    assert(type(numpeds) == 'integer', 'Argument numpeds must be of type integer.')

    local call = natives.invoke(0x7D4E70A67A651C71, 'void', numpeds)
end

--- @return number
natives.ped_getNumReservedAmbientPedsDesired = function()

    local call = natives.invoke(0x62DE46F061CAA468, 'int')
    return call
end

--- @return number
natives.ped_getNumReservedAmbientPedsReady = function()

    local call = natives.invoke(0x5C16855277819BBF, 'int')
    return call
end

--- @return boolean
natives.ped_areAllAmbientPedReservationsReady = function()

    local call = natives.invoke(0x5E420FF293EE5472, 'bool')
    return call
end

--- @param multiplier number
natives.ped_setScenarioPedRangeMultiplierThisFrame = function(multiplier)
    assert(type(multiplier) == 'number', 'Argument multiplier must be of type number.')

    local call = natives.invoke(0xA77FA7BE9312F8C0, 'void', multiplier)
end

-- Only used in SP R* Script loanshark_hunter
--- @param volume integer
natives.ped_n0X9E3842E5Dad69F80 = function(volume)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')

    local call = natives.invoke(0x9E3842E5DAD69F80, 'void', volume)
end

--- @param multiplier number
natives.ped_setAmbientPedDensityMultiplierThisFrame = function(multiplier)
    assert(type(multiplier) == 'number', 'Argument multiplier must be of type number.')

    local call = natives.invoke(0xAB0D553FE20A6E25, 'void', multiplier)
end

--- @param multiplier number
natives.ped_setScenarioPedDensityMultiplierThisFrame = function(multiplier)
    assert(type(multiplier) == 'number', 'Argument multiplier must be of type number.')

    local call = natives.invoke(0x7A556143A1C03898, 'void', multiplier)
end

--- @param multiplier number
natives.ped_setAmbientAnimalDensityMultiplierThisFrame = function(multiplier)
    assert(type(multiplier) == 'number', 'Argument multiplier must be of type number.')

    local call = natives.invoke(0xC0258742B034DFAF, 'void', multiplier)
end

--- @param multiplier number
natives.ped_setAmbientHumanDensityMultiplierThisFrame = function(multiplier)
    assert(type(multiplier) == 'number', 'Argument multiplier must be of type number.')

    local call = natives.invoke(0xBA0980B5C0A11924, 'void', multiplier)
end

--- @param multiplier number
natives.ped_setScenarioAnimalDensityMultiplierThisFrame = function(multiplier)
    assert(type(multiplier) == 'number', 'Argument multiplier must be of type number.')

    local call = natives.invoke(0xDB48E99F8E064E56, 'void', multiplier)
end

--- @param multiplier number
natives.ped_setScenarioHumanDensityMultiplierThisFrame = function(multiplier)
    assert(type(multiplier) == 'number', 'Argument multiplier must be of type number.')

    local call = natives.invoke(0x28CB6391ACEDD9DB, 'void', multiplier)
end

-- Sets the scenario ped density to the given config.
-- 
-- Valid configs:
-- - BLACKWATER
-- - DEFAULT
-- - NEWBORDEAUX
-- - RHODES
-- - STRAWBERRY
-- - TUMBLEWEED
-- - VALENTINE
-- - VANHORN
-- 
-- See common/data/ai/densityscoringconfigs.meta for more information.
--- @param confighash integer
natives.ped_setScenarioPedDensityThisFrame = function(confighash)
    assert(type(confighash) == 'integer', 'Argument confighash must be of type integer.')

    local call = natives.invoke(0x95423627A9CA598E, 'void', confighash)
end

natives.ped_instantlyFillPedPopulation = function()

    local call = natives.invoke(0x4759CC730F947C81, 'void')
end

-- Only used in R* Script tg_p (CLIENT__AMBIENT_POPULATION - Player starts the populate in region)
natives.ped_n0Xbfa6B7731C3Baf02 = function()

    local call = natives.invoke(0xBFA6B7731C3BAF02, 'void')
end

--- @return boolean
natives.ped_isInstantlyFillPedPopulationFinished = function()

    local call = natives.invoke(0x0EE3F0D7FECCC54F, 'bool')
    return call
end

-- The distance between these points, is the diagonal of a box (remember it's 3D).
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
natives.ped_setPedNonCreationArea = function(x1, y1, z1, x2, y2, z2)
    assert(type(x1) == 'number', 'Argument x1 must be of type number.')
    assert(type(y1) == 'number', 'Argument y1 must be of type number.')
    assert(type(z1) == 'number', 'Argument z1 must be of type number.')
    assert(type(x2) == 'number', 'Argument x2 must be of type number.')
    assert(type(y2) == 'number', 'Argument y2 must be of type number.')
    assert(type(z2) == 'number', 'Argument z2 must be of type number.')

    local call = natives.invoke(0xEE01041D559983EA, 'void', x1, y1, z1, x2, y2, z2)
end

natives.ped_clearPedNonCreationArea = function()

    local call = natives.invoke(0x2E05208086BA0651, 'void')
end

--- @param volume integer
--- @param entity integer
--- @param offsetx number
--- @param offsety number
--- @param offsetz number
--- @param rotx number
--- @param roty number
--- @param rotz number
--- @param p8 integer
--- @param p9 boolean
natives.ped_attachVolumeToEntity = function(volume, entity, offsetx, offsety, offsetz, rotx, roty, rotz, p8, p9)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(offsetx) == 'number', 'Argument offsetx must be of type number.')
    assert(type(offsety) == 'number', 'Argument offsety must be of type number.')
    assert(type(offsetz) == 'number', 'Argument offsetz must be of type number.')
    assert(type(rotx) == 'number', 'Argument rotx must be of type number.')
    assert(type(roty) == 'number', 'Argument roty must be of type number.')
    assert(type(rotz) == 'number', 'Argument rotz must be of type number.')
    assert(type(p8) == 'integer', 'Argument p8 must be of type integer.')
    assert(type(p9) == 'boolean', 'Argument p9 must be of type boolean.')

    local call = natives.invoke(0x7C00CFC48A782DC0, 'void', volume, entity, offsetx, offsety, offsetz, rotx, roty, rotz, p8, p9)
end

--- @param volume integer
--- @param entity integer
natives.ped_detachVolumeFromEntity = function(volume, entity)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x19C975B81BE53C28, 'void', volume, entity)
end

--- @param ped integer
--- @param mount integer
--- @param seatindex integer
--- @param p3 boolean
natives.ped_setPedOntoMount = function(ped, mount, seatindex, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(mount) == 'integer', 'Argument mount must be of type integer.')
    assert(type(seatindex) == 'integer', 'Argument seatindex must be of type integer.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0x028F76B6E78246EB, 'void', ped, mount, seatindex, p3)
end

--- @param ped integer
--- @param p1 boolean
--- @param p2 boolean
natives.ped_removePedFromMount = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x5337B721C51883A9, 'void', ped, p1, p2)
end

--- @param mount integer
--- @param modelhash integer
--- @param index integer
--- @param p3 boolean
--- @param p4 boolean
--- @param p5 boolean
--- @param p6 boolean
--- @return number
natives.ped_createPedOnMount = function(mount, modelhash, index, p3, p4, p5, p6)
    assert(type(mount) == 'integer', 'Argument mount must be of type integer.')
    assert(type(modelhash) == 'integer', 'Argument modelhash must be of type integer.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')

    local call = natives.invoke(0xF89AA2BD01FC06B7, 'int', mount, modelhash, index, p3, p4, p5, p6)
    return call
end

--- @param mount integer
--- @param seat integer
--- @return boolean
natives.ped_isMountSeatFree = function(mount, seat)
    assert(type(mount) == 'integer', 'Argument mount must be of type integer.')
    assert(type(seat) == 'integer', 'Argument seat must be of type integer.')

    local call = natives.invoke(0xAAB0FE202E9FC9F0, 'bool', mount, seat)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedOnMount = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x460BC76A0E10655E, 'bool', ped)
    return call
end

--- @param ped integer
--- @param p1 boolean
--- @return boolean
natives.ped_isPedFullyOnMount = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x95CBC65780DE7EB1, 'bool', ped, p1)
    return call
end

--- @param ped integer
--- @return number
natives.ped_getMount = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xE7E11B8DCBED1058, 'int', ped)
    return call
end

-- Returns last horse the ped was leading
--- @param ped integer
--- @return number
natives.ped_getLastLedMount = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x693126B5D0457D0D, 'int', ped)
    return call
end

--- @param ped integer
--- @return number
natives.ped_getLastMount = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x4C8B59171957BCF7, 'int', ped)
    return call
end

-- Only used in R* Script nb_stalking_hunter
--- @param ped1 integer
--- @param ped2 integer
natives.ped_n0Xed1C764997A86D5A = function(ped1, ped2)
    assert(type(ped1) == 'integer', 'Argument ped1 must be of type integer.')
    assert(type(ped2) == 'integer', 'Argument ped2 must be of type integer.')

    local call = natives.invoke(0xED1C764997A86D5A, 'void', ped1, ped2)
end

-- _SET_HO*
--- @param ped integer
--- @param p1 boolean
natives.ped_n0Xb8Ab265426Cfe6Dd = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xB8AB265426CFE6DD, 'void', ped, p1)
end

-- Returns dismounted timestamp
--- @param mount integer
--- @param player integer
--- @return number
natives.ped_n0Xe8D1Ccb9375C101B = function(mount, player)
    assert(type(mount) == 'integer', 'Argument mount must be of type integer.')
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xE8D1CCB9375C101B, 'int', mount, player)
    return call
end

--- @param mount integer
--- @param player integer
--- @param dismountedtimestamp integer
natives.ped_n0Xa691C10054275290 = function(mount, player, dismountedtimestamp)
    assert(type(mount) == 'integer', 'Argument mount must be of type integer.')
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(dismountedtimestamp) == 'integer', 'Argument dismountedtimestamp must be of type integer.')

    local call = natives.invoke(0xA691C10054275290, 'void', mount, player, dismountedtimestamp)
end

--- @param player integer
--- @param horseslot integer
natives.ped_n0X6734F0A6A52C371C = function(player, horseslot)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(horseslot) == 'integer', 'Argument horseslot must be of type integer.')

    local call = natives.invoke(0x6734F0A6A52C371C, 'void', player, horseslot)
end

--- @param ped integer
--- @param p1 boolean
natives.ped_n0X024Ec9B649111915 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x024EC9B649111915, 'void', ped, p1)
end

--- @param ped integer
--- @param animal integer
--- @param p2 boolean
natives.ped_setPedOwnsAnimal = function(ped, animal, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(animal) == 'integer', 'Argument animal must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x931B241409216C1F, 'void', ped, animal, p2)
end

--- @param animal integer
--- @return number
natives.ped_getActiveAnimalOwner = function(animal)
    assert(type(animal) == 'integer', 'Argument animal must be of type integer.')

    local call = natives.invoke(0xF103823FFE72BB49, 'int', animal)
    return call
end

-- Used in Script Functions PLAYER_HORSE_RELEASE_HORSE_TO_AMBIENT_WORLD (p1 = true), HORSE_SETUP_PLAYER_HORSE_ATTRIBUTES (p1 = false)
-- Set to false for player horse in scripts and seems it's only true when releasing/changing a player horse? Cannot determine what effect it has, but it doesn't seem to affect _GET_HORSE_TAMING_STATE
--- @param horse integer
--- @param clear boolean
natives.ped_clearActiveAnimalOwner = function(horse, clear)
    assert(type(horse) == 'integer', 'Argument horse must be of type integer.')
    assert(type(clear) == 'boolean', 'Argument clear must be of type boolean.')

    local call = natives.invoke(0xBCC76708E5677E1D, 'void', horse, clear)
end

-- Returns an int based on enum eTamingState
-- 
-- enum eTamingState
-- {
-- 	ATS_INVALID = 0,
-- 	ATS_INACTIVE,
-- 	ATS_TARGET_DETECTED,
-- 	ATS_CALLED_OUT,
-- 	ATS_MOUNTABLE,
-- 	ATS_BEING_PATTED,
-- 	ATS_BREAKING_ACTIVE,
-- 	ATS_SPOOKED,
-- 	ATS_RETREATING,
-- 	ATS_FLEEING
-- };
--- @param horse integer
--- @return number
natives.ped_getHorseTamingState = function(horse)
    assert(type(horse) == 'integer', 'Argument horse must be of type integer.')

    local call = natives.invoke(0x454AD4DA6C41B5BD, 'int', horse)
    return call
end

--- @param animal integer
--- @param p2 number
natives.ped_n0X54D3Cd482742C482 = function(animal, p2)
    assert(type(animal) == 'integer', 'Argument animal must be of type integer.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')

    local call = natives.invoke(0x54D3CD482742C482, 'void', animal, p2)
end

--- @param animal integer
--- @param p2 number
natives.ped_n0X5Cb2Ebb467Be3Ed6 = function(animal, p2)
    assert(type(animal) == 'integer', 'Argument animal must be of type integer.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')

    local call = natives.invoke(0x5CB2EBB467BE3ED6, 'void', animal, p2)
end

--- @param animal integer
--- @param p2 number
natives.ped_n0X9F0F28B42C4Ee80A = function(animal, p2)
    assert(type(animal) == 'integer', 'Argument animal must be of type integer.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')

    local call = natives.invoke(0x9F0F28B42C4EE80A, 'void', animal, p2)
end

--- @param ped integer
--- @param bondinglevel integer
natives.ped_setMountBondingLevel = function(ped, bondinglevel)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(bondinglevel) == 'integer', 'Argument bondinglevel must be of type integer.')

    local call = natives.invoke(0xA69899995997A63B, 'void', ped, bondinglevel)
end

-- Note: this native was added in build 1232.40
--- @param ped integer
--- @param toggle boolean
natives.ped_setMountSecurityEnabled = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x11E6B9629C46D6EC, 'void', ped, toggle)
end

-- Only used in SP R* Script winter1: p1 = Winter1Mount
--- @param ped integer
--- @param p1 string
natives.ped_n0X9B65444C07B782Bf = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')

    local call = natives.invoke(0x9B65444C07B782BF, 'void', ped, p1)
end

--- @param ped integer
--- @param animal integer
--- @return boolean
natives.ped_isAnimalInteractionPossible = function(ped, animal)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(animal) == 'integer', 'Argument animal must be of type integer.')

    local call = natives.invoke(0xD543D3A8FDE4F185, 'bool', ped, animal)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isAnimalInteractionRunning = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x7FC84E85D98F063D, 'bool', ped)
    return call
end

-- Used in Script Function NET_CAMP_DOG_CLIENT_HANDLE_ANIMAL_INTERACTION
--- @param ped integer
--- @return number
natives.ped_n0X8Be24D74D74C6E9B = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x8BE24D74D74C6E9B, 'int', ped)
    return call
end

-- _IS_I* - _IS_L*
--- @param ped integer
--- @return boolean
natives.ped_n0X77243Ed4F7Caaa55 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x77243ED4F7CAAA55, 'bool', ped)
    return call
end

-- Gets a value indicating whether the specified ped is on top of any vehicle.
-- 
-- Return 1 when ped is on vehicle.
-- Return 0 when ped is not on a vehicle.
--- @param ped integer
--- @param p1 boolean
--- @return boolean
natives.ped_isPedOnVehicle = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x67722AEB798E5FAB, 'bool', ped, p1)
    return call
end

--- @param ped integer
--- @param vehicle integer
--- @return boolean
natives.ped_isPedOnSpecificVehicle = function(ped, vehicle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0xEC5F66E459AF3BB2, 'bool', ped, vehicle)
    return call
end

--- @param ped integer
natives.ped_warpPedOutOfVehicle = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xE0B61ED8BB37712F, 'void', ped)
end

--- @param ped integer
--- @param amount integer
natives.ped_setPedMoney = function(ped, amount)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(amount) == 'integer', 'Argument amount must be of type integer.')

    local call = natives.invoke(0xA9C8960E8684C1B5, 'void', ped, amount)
end

--- @param ped integer
--- @return number
natives.ped_getPedMoney = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x3F69145BBA87BAE7, 'int', ped)
    return call
end

--- @param p0 boolean
natives.ped_setBlockingOfNonTemporaryEventsForAmbientPedsThisFrame = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x9911F4A24485F653, 'void', p0)
end

--- @param ped integer
--- @param p1 userdata
natives.ped_n0X34Eddd59364Ad74A = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x34EDDD59364AD74A, 'void', ped, p1)
end

--- @param ped integer
natives.ped_n0X2D976Dbdc731Df80 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x2D976DBDC731DF80, 'void', ped)
end

-- Detect if ped is sitting in the specified vehicle
-- [True/False]
--- @param ped integer
--- @param vehicle integer
--- @return boolean
natives.ped_isPedSittingInVehicle = function(ped, vehicle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0xA808AA1D79230FC2, 'bool', ped, vehicle)
    return call
end

-- Detect if ped is in any vehicle
-- [True/False]
--- @param ped integer
--- @return boolean
natives.ped_isPedSittingInAnyVehicle = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x826AA586EDB9FEF8, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedOnFoot = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x01FEE67DB37F59B2, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedPlantingBomb = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xC70B5FAE151982D8, 'bool', ped)
    return call
end

--- @param ped integer
--- @param p1 number
--- @param p2 number
--- @return number, number, number
natives.ped_getDeadPedPickupCoords = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')

    local call = natives.invoke(0xCD5003B097200F36, 'vector3', ped, p1, p2)
    return call.x, call.y, call.z
end

--- @param ped integer
--- @return boolean
natives.ped_isPedInAnyBoat = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x2E0E1C2B4F6CB339, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedInAnyHeli = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x298B91AE825E5705, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedInAnyPlane = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x5FFF4CFC74D8FB80, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedInFlyingVehicle = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x9134873537FA419C, 'bool', ped)
    return call
end

-- _IS_PED_FL* - _IS_PED_FU*
--- @param ped integer
--- @return boolean
natives.ped_n0X256Edd55C6Be1482 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x256EDD55C6BE1482, 'bool', ped)
    return call
end

--- @param ped integer
--- @param outbone integer
--- @return boolean
natives.ped_getPedLastDamageBone = function(ped, outbone)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(outbone) == 'integer', 'Argument outbone must be of type integer.')

    local call = natives.invoke(0xD75960F6BD9EA49C, 'bool', ped, outbone)
    return call
end

--- @param ped integer
natives.ped_clearPedLastDamageBone = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x8EF6B7AC68E2F01B, 'void', ped)
end

-- enum ePedDamageCleanliness
-- {
-- 	PED_DAMAGE_CLEANLINESS_POOR,
-- 	PED_DAMAGE_CLEANLINESS_GOOD,
-- 	PED_DAMAGE_CLEANLINESS_PERFECT
-- };
--- @param ped integer
--- @return number
natives.ped_getPedDamageCleanliness = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x88EFFED5FE8B0B4A, 'int', ped)
    return call
end

-- damageCleanliness: see _GET_PED_DAMAGE_CLEANLINESS
--- @param ped integer
--- @param damagecleanliness integer
natives.ped_setPedDamageCleanliness = function(ped, damagecleanliness)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(damagecleanliness) == 'integer', 'Argument damagecleanliness must be of type integer.')

    local call = natives.invoke(0x7528720101A807A5, 'void', ped, damagecleanliness)
end

-- Returns true if _GET_PED_DAMAGE_CLEANLINESS was ever lower than 2
--- @param ped integer
--- @return boolean
natives.ped_getPedDamaged = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x6CFC373008A1EDAF, 'bool', ped)
    return call
end

--- @param ped integer
--- @param damaged boolean
natives.ped_setPedDamaged = function(ped, damaged)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(damaged) == 'boolean', 'Argument damaged must be of type boolean.')

    local call = natives.invoke(0xDACE03C65C6666DB, 'void', ped, damaged)
end

-- Animal Skin Quality Modifier
-- Params: p2 = 2, p3 = 3 in R* Scripts
--- @param player integer
--- @param modifier number
--- @param p2 integer
--- @param p3 integer
--- @return any
natives.ped_setPlayerCurrentAnimalDamageModifier = function(player, modifier, p2, p3)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(modifier) == 'number', 'Argument modifier must be of type number.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')

    local call = natives.invoke(0x9EFF3C91DF38304F, 'any', player, modifier, p2, p3)
    return call
end

--- @param player integer
natives.ped_updateAnimalDamageModifier = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x0F9E754EBE8FDBFA, 'void', player)
end

-- Returns animal skin quality modifier
--- @param player integer
--- @return number
natives.ped_getPlayerCurrentAnimalDamageModifier = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xEE2D5C819A65BF26, 'float', player)
    return call
end

-- Used in Script Function SATCHEL_COUNT_BREAKDOWN_COMPONENTS
--- @param p0 userdata
--- @param model integer
--- @param damagecleanliness integer
--- @param p3 integer
--- @return any
natives.ped_n0Xb29C553Ba582D09E = function(p0, model, damagecleanliness, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(model) == 'integer', 'Argument model must be of type integer.')
    assert(type(damagecleanliness) == 'integer', 'Argument damagecleanliness must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')

    local call = natives.invoke(0xB29C553BA582D09E, 'any', p0, model, damagecleanliness, p3)
    return call
end

--- @param p0 userdata
--- @param ped integer
--- @param damagecleanliness integer
--- @param p3 integer
--- @return boolean
natives.ped_n0X101B45C5F56D970F = function(p0, ped, damagecleanliness, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(damagecleanliness) == 'integer', 'Argument damagecleanliness must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')

    local call = natives.invoke(0x101B45C5F56D970F, 'bool', p0, ped, damagecleanliness, p3)
    return call
end

-- Related to dead animals items/loots
-- Notice: skinningQuality is partially calculated using pedQuality
--- @param outinventoryitemarray userdata
--- @param ped integer
--- @param damagecleanliness integer
--- @param skinningquality integer
--- @return number
natives.ped_computeSatchelItemForPedCarcass = function(outinventoryitemarray, ped, damagecleanliness, skinningquality)
    assert(type(outinventoryitemarray) == 'userdata', 'Argument outinventoryitemarray must be of type userdata.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(damagecleanliness) == 'integer', 'Argument damagecleanliness must be of type integer.')
    assert(type(skinningquality) == 'integer', 'Argument skinningquality must be of type integer.')

    local call = natives.invoke(0x6B89FAA36FC909A3, 'int', outinventoryitemarray, ped, damagecleanliness, skinningquality)
    return call
end

--- @param p0 userdata
--- @param pedattached integer
--- @param damagecleanliness integer
--- @return boolean
natives.ped_computeSatchelItemForPedDamage = function(p0, pedattached, damagecleanliness)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(pedattached) == 'integer', 'Argument pedattached must be of type integer.')
    assert(type(damagecleanliness) == 'integer', 'Argument damagecleanliness must be of type integer.')

    local call = natives.invoke(0x9E7738B291706746, 'bool', p0, pedattached, damagecleanliness)
    return call
end

--- @param value number
natives.ped_setAiWeaponDamageModifier = function(value)
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0x1B1E2A40A65B8521, 'void', value)
end

natives.ped_resetAiWeaponDamageModifier = function()

    local call = natives.invoke(0xEA16670E7BA4743C, 'void')
end

-- _SET_W(EAPON?)*
--- @param ped integer
--- @param totaldamage number
natives.ped_setTotalPedDamageFromAi = function(ped, totaldamage)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(totaldamage) == 'number', 'Argument totaldamage must be of type number.')

    local call = natives.invoke(0x73B6F907B913C860, 'void', ped, totaldamage)
end

-- _DELETE_*
--- @param ped integer
natives.ped_n0Xa6D6F03095C88F59 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xA6D6F03095C88F59, 'void', ped)
end

-- _GET_WA*
--- @param ped integer
--- @return number
natives.ped_getTotalPedDamageFromAi = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x92C8EACA29F6BED6, 'float', ped)
    return call
end

-- Old name: _SET_PED_DAMAGE_MODIFIER
--- @param ped integer
--- @param damagemodifier number
natives.ped_setPedToPlayerWeaponDamageModifier = function(ped, damagemodifier)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(damagemodifier) == 'number', 'Argument damagemodifier must be of type number.')

    local call = natives.invoke(0xD77AE48611B7B10A, 'void', ped, damagemodifier)
end

--- @param ped integer
--- @return number
natives.ped_getPedToPlayerWeaponDamageModifier = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x936E7CAD0AE2EE14, 'float', ped)
    return call
end

--- @param horse integer
--- @param modifier number
natives.ped_setCurrentDefenseAgainstPlayersModifier = function(horse, modifier)
    assert(type(horse) == 'integer', 'Argument horse must be of type integer.')
    assert(type(modifier) == 'number', 'Argument modifier must be of type number.')

    local call = natives.invoke(0x069EDDF1FD4DEB0A, 'void', horse, modifier)
end

-- Used in Script Function NB_EVENT_OVERRIDE__HANDLE__EVENT_DAMAGE_ENTITY
--- @param ped integer
--- @return number
natives.ped_n0X763Fa8A9D76Ee3A7 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x763FA8A9D76EE3A7, 'float', ped)
    return call
end

--- @param modifier number
natives.ped_setAiMeleeWeaponDamageModifier = function(modifier)
    assert(type(modifier) == 'number', 'Argument modifier must be of type number.')

    local call = natives.invoke(0x66460DEDDD417254, 'void', modifier)
end

--- @param ped integer
--- @param modifier number
natives.ped_setAccuracyAgainstLocalPlayerModifier = function(ped, modifier)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(modifier) == 'number', 'Argument modifier must be of type number.')

    local call = natives.invoke(0xC2266AA617668AD3, 'void', ped, modifier)
end

--- @param ped integer
--- @return number
natives.ped_getAccuracyAgainstLocalPlayerModifier = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xDC9273D95976BA22, 'float', ped)
    return call
end

--- @param ped integer
--- @param multiplier number
natives.ped_setPedHeadshotDamageMultiplier = function(ped, multiplier)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(multiplier) == 'number', 'Argument multiplier must be of type number.')

    local call = natives.invoke(0x2BA918C823B8BA56, 'void', ped, multiplier)
end

--- @param ped integer
--- @param p1 integer
--- @param p2 boolean
natives.ped_n0Xdee8D30Aa5C2E28D = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xDEE8D30AA5C2E28D, 'void', ped, p1, p2)
end

--- @param ped integer
--- @param p1 integer
--- @param p2 boolean
natives.ped_n0Xe1B3Be07D3Aadded = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xE1B3BE07D3AADDED, 'void', ped, p1, p2)
end

--- @param ped integer
--- @param p1 integer
--- @param p2 boolean
natives.ped_n0X32Ceda9A0Ab4Cef7 = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x32CEDA9A0AB4CEF7, 'void', ped, p1, p2)
end

--- @param ped integer
--- @param p1 integer
--- @param p2 boolean
natives.ped_n0X52A24D8A1Da89658 = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x52A24D8A1DA89658, 'void', ped, p1, p2)
end

--- @param ped integer
--- @param p1 integer
--- @param p2 boolean
natives.ped_n0X34B5Ceac180A5D6E = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x34B5CEAC180A5D6E, 'void', ped, p1, p2)
end

--- @param ped integer
--- @param p1 integer
--- @param p2 boolean
natives.ped_n0X4F27603E44A8E4C0 = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x4F27603E44A8E4C0, 'void', ped, p1, p2)
end

-- Changes health bar around heart core icon
-- INITIALISE_NEW_ROLE - Applying Super Jump buffs: p1 = 10, p2 = 0.0f
-- INITIALISE_NEW_ROLE - Clearing up Super Jump buffs: p1 = 10, p2 = 1.0f
-- _SET_D*
--- @param ped integer
--- @param p1 integer
--- @param p2 number
natives.ped_n0X3Fdcc1F8C17E303E = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')

    local call = natives.invoke(0x3FDCC1F8C17E303E, 'void', ped, p1, p2)
end

-- _SET_D*
--- @param ped integer
--- @param p1 integer
--- @param p2 number
natives.ped_n0Xe50C9816B3F22D8B = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')

    local call = natives.invoke(0xE50C9816B3F22D8B, 'void', ped, p1, p2)
end

--- @param ped integer
--- @param modifier number
natives.ped_setDefenseModifierForPed = function(ped, modifier)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(modifier) == 'number', 'Argument modifier must be of type number.')

    local call = natives.invoke(0x9B6808EC46BE849B, 'void', ped, modifier)
end

--- @param ped integer
--- @param healthamount number
natives.ped_setMinPedHealthThreshold = function(ped, healthamount)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(healthamount) == 'number', 'Argument healthamount must be of type number.')

    local call = natives.invoke(0x7883AA809DF43D98, 'void', ped, healthamount)
end

-- _SET_H* - _SET_I*
--- @param ped integer
--- @param p1 boolean
natives.ped_n0Xc5B78E41Dcf8227C = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xC5B78E41DCF8227C, 'void', ped, p1)
end

--- @param ped integer
--- @param toggle boolean
natives.ped_setPedCanBeTargetted = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x63F58F7C80513AAD, 'void', ped, toggle)
end

--- @param ped integer
--- @param team integer
--- @param toggle boolean
natives.ped_setPedCanBeTargettedByTeam = function(ped, team, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(team) == 'integer', 'Argument team must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xBF1CA77833E58F2C, 'void', ped, team, toggle)
end

--- @param ped integer
--- @param player integer
--- @param toggle boolean
natives.ped_setPedCanBeTargettedByPlayer = function(ped, player, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x66B57B72E0836A76, 'void', ped, player, toggle)
end

--- @param ped integer
--- @param player integer
--- @param flag integer
--- @param enable boolean
natives.ped_setInteractionLockonFlag = function(ped, player, flag, enable)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')
    assert(type(enable) == 'boolean', 'Argument enable must be of type boolean.')

    local call = natives.invoke(0xFECA2081F61ED2CD, 'void', ped, player, flag, enable)
end

--- @param ped integer
--- @return boolean
natives.ped_isPedFalling = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xFB92A102F1C4DFA3, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedSliding = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xD6740E14E4CEFC0B, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedJumping = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xCEDABC5900A0BF97, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedClimbing = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x53E8CB4F48BFE623, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedClimbingLadder = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x59643424B68D52B5, 'bool', ped)
    return call
end

-- _IS_PED_C* - _IS_PED_D*
--- @param ped integer
--- @return boolean
natives.ped_n0X577C60Ba06D0Ea64 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x577C60BA06D0EA64, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedVaulting = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x117C70D1F5730B5E, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedDiving = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x5527B8246FEF9B11, 'bool', ped)
    return call
end

-- Returns true if the ped is currently opening a door (CTaskOpenDoor).
-- 
-- Old name: _IS_PED_OPENING_A_DOOR
--- @param ped integer
--- @return boolean
natives.ped_isPedOpeningDoor = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x26AF0E8E30BD2A2C, 'bool', ped)
    return call
end

-- _IS_PED_IN*
--- @param ped integer
--- @return boolean
natives.ped_n0X5C6C7C70Ca302801 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x5C6C7C70CA302801, 'bool', ped)
    return call
end

-- _IS_PED_J* - _IS_PED_L*
--- @param ped integer
--- @return boolean
natives.ped_n0Xb91Ab3Be7F655D49 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xB91AB3BE7F655D49, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedInAnyTaxi = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x6E575D6A898AB852, 'bool', ped)
    return call
end

--- @param ped integer
--- @param value number
natives.ped_setPedIdRange = function(ped, value)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0xF107E836A70DCE05, 'void', ped, value)
end

--- @param ped integer
--- @return number
natives.ped_getPedIdRange = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x31167ED4324B758D, 'float', ped)
    return call
end

--- @param ped integer
--- @param toggle boolean
natives.ped_setPedHighlyPerceptive = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x52D59AB61DDC05DD, 'void', ped, toggle)
end

--- @param ped integer
--- @param unk number
natives.ped_setPedInjuredOnGroundBehaviour = function(ped, unk)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(unk) == 'number', 'Argument unk must be of type number.')

    local call = natives.invoke(0xEC4B4B3B9908052A, 'void', ped, unk)
end

--- @param ped integer
natives.ped_disablePedInjuredOnGroundBehaviour = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x733C87D4CE22BEA2, 'void', ped)
end

-- _SET_ST* - _SET_SW*
--- @param ped integer
natives.ped_n0X028E7B3Bba0Bd2Fc = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x028E7B3BBA0BD2FC, 'void', ped)
end

-- _HAS_PED_*
--- @param ped integer
--- @return boolean
natives.ped_n0Xfa8C10Dce0706D43 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xFA8C10DCE0706D43, 'bool', ped)
    return call
end

--- @param ped integer
--- @param modifier number
natives.ped_setPedAnimalDetectionModifier = function(ped, modifier)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(modifier) == 'number', 'Argument modifier must be of type number.')

    local call = natives.invoke(0x43CA928E892CFDB8, 'void', ped, modifier)
end

-- Used in Script Function CHECK_IS_PLAYER_SEEN
-- _GET_PED_*
--- @param ped integer
--- @return number
natives.ped_n0X2Ba9D7Bf629F920C = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x2BA9D7BF629F920C, 'float', ped)
    return call
end

--- @param ped integer
--- @param value number
natives.ped_setPedSeeingRange = function(ped, value)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0xF29CF591C4BF6CEE, 'void', ped, value)
end

-- Used in Script Function AGGRO_SHOULD_PED_HEAR_DEATH
-- _GET_PED_*
--- @param ped integer
--- @return number
natives.ped_n0X900Ca00Ce703E1E2 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x900CA00CE703E1E2, 'float', ped)
    return call
end

--- @param ped integer
--- @param value number
natives.ped_setPedHearingRange = function(ped, value)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0x33A8F7F7D5F7F33C, 'void', ped, value)
end

--- @param ped integer
--- @param value number
natives.ped_setPedVisualFieldMinAngle = function(ped, value)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0x2DB492222FB21E26, 'void', ped, value)
end

--- @param ped integer
--- @param value number
natives.ped_setPedVisualFieldMaxAngle = function(ped, value)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0x70793BDCA1E854D4, 'void', ped, value)
end

--- @param ped integer
--- @param range number
natives.ped_setPedVisualFieldPeripheralRange = function(ped, range)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(range) == 'number', 'Argument range must be of type number.')

    local call = natives.invoke(0x9C74B0BC831B753A, 'void', ped, range)
end

--- @param ped integer
--- @param angle number
natives.ped_setPedVisualFieldCenterAngle = function(ped, angle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(angle) == 'number', 'Argument angle must be of type number.')

    local call = natives.invoke(0x3B6405E8AB34A907, 'void', ped, angle)
end

-- _SET_PED_M*
--- @param ped integer
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
natives.ped_n0X9Ab33Cb5834885B3 = function(ped, p1, p2, p3, p4)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')

    local call = natives.invoke(0x9AB33CB5834885B3, 'void', ped, p1, p2, p3, p4)
end

-- _SET_PED_O*
--- @param ped integer
--- @param p1 number
natives.ped_n0X899Dfa0009Ac93De = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x899DFA0009AC93DE, 'void', ped, p1)
end

-- _SET_PED_MO*
--- @param ped integer
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
natives.ped_n0X3A5697B80Fed5Ebe = function(ped, p1, p2, p3, p4)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')

    local call = natives.invoke(0x3A5697B80FED5EBE, 'void', ped, p1, p2, p3, p4)
end

-- Not implemented.
--- @param ped integer
--- @param toggle boolean
--- @param p2 userdata
--- @param p3 userdata
natives.ped_setPedStealthMovement = function(ped, toggle, p2, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x88CBB5CEB96B7BD2, 'void', ped, toggle, p2, p3)
end

-- Returns whether the entity is in stealth mode
--- @param ped integer
--- @return boolean
natives.ped_getPedStealthMovement = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x7C2AC9CA66575FBF, 'bool', ped)
    return call
end

--- @param ped integer
--- @param state boolean
--- @param p2 integer
--- @param immediately boolean
natives.ped_setPedCrouchMovement = function(ped, state, p2, immediately)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(state) == 'boolean', 'Argument state must be of type boolean.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(immediately) == 'boolean', 'Argument immediately must be of type boolean.')

    local call = natives.invoke(0x7DE9692C6F64CFE8, 'void', ped, state, p2, immediately)
end

--- @param ped integer
--- @return boolean
natives.ped_getPedCrouchMovement = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xD5FE956C70FF370B, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_getPedIsDoingCombatRoll = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xC48A9EB0D499B3E5, 'bool', ped)
    return call
end

-- Creates a new ped group.
-- Groups can contain up to 8 peds.
-- 
-- The parameter is unused.
-- 
-- Returns a handle to the created group, or 0 if a group couldn't be created.
--- @param taskallocator integer
--- @return number
natives.ped_createGroup = function(taskallocator)
    assert(type(taskallocator) == 'integer', 'Argument taskallocator must be of type integer.')

    local call = natives.invoke(0x90370EBE0FEE1A3D, 'int', taskallocator)
    return call
end

--- @param ped integer
--- @param groupid integer
--- @param p2 boolean
natives.ped_setPedAsGroupLeader = function(ped, groupid, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x2A7819605465FBCE, 'void', ped, groupid, p2)
end

--- @param ped integer
--- @param groupid integer
natives.ped_setPedAsGroupMember = function(ped, groupid)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')

    local call = natives.invoke(0x9F3480FE65DB31B5, 'void', ped, groupid)
end

-- This only will teleport the ped to the group leader if the group leader teleports (sets coords).
-- 
-- Only works in singleplayer
--- @param pedhandle integer
--- @param groupid integer
--- @param toggle boolean
natives.ped_setPedCanTeleportToGroupLeader = function(pedhandle, groupid, toggle)
    assert(type(pedhandle) == 'integer', 'Argument pedhandle must be of type integer.')
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x2E2F4240B3F24647, 'void', pedhandle, groupid, toggle)
end

--- @param groupid integer
natives.ped_removeGroup = function(groupid)
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')

    local call = natives.invoke(0x8EB2F69076AF7053, 'void', groupid)
end

--- @param ped integer
natives.ped_removePedFromGroup = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xED74007FFB146BC2, 'void', ped)
end

--- @param ped integer
--- @param groupid integer
--- @param p2 boolean
--- @return boolean
natives.ped_isPedGroupMember = function(ped, groupid, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x9BB01E3834671191, 'bool', ped, groupid, p2)
    return call
end

--- @param ped integer
--- @param groupid integer
--- @return boolean
natives.ped_isPedGroupLeader = function(ped, groupid)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')

    local call = natives.invoke(0x878B68960C1C2A35, 'bool', ped, groupid)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedHangingOnToVehicle = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x1C86D8AEF8254B78, 'bool', ped)
    return call
end

-- Sets the range at which members will automatically leave the group.
--- @param groupid integer
--- @param separationrange number
natives.ped_setGroupSeparationRange = function(groupid, separationrange)
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')
    assert(type(separationrange) == 'number', 'Argument separationrange must be of type number.')

    local call = natives.invoke(0x4102C7858CFEE4E4, 'void', groupid, separationrange)
end

-- _SET_C*
--- @param groupid integer
--- @param p1 integer
natives.ped_n0X89E59Dbd15E21177 = function(groupid, p1)
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x89E59DBD15E21177, 'void', groupid, p1)
end

--- @param ped integer
--- @return boolean
natives.ped_isPedProne = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xD6A86331A537A7B9, 'bool', ped)
    return call
end

-- _IS_PED_IN*
--- @param ped integer
--- @return boolean
natives.ped_isPedInvestigating = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x7583A9D35248B83F, 'bool', ped)
    return call
end

--- @param ped integer
--- @param target integer
--- @return boolean
natives.ped_isPedInCombat = function(ped, target)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(target) == 'integer', 'Argument target must be of type integer.')

    local call = natives.invoke(0x4859F1FC66A6278E, 'bool', ped, target)
    return call
end

--- @param ped integer
--- @param target integer
--- @return boolean
natives.ped_canPedInCombatSeeTarget = function(ped, target)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(target) == 'integer', 'Argument target must be of type integer.')

    local call = natives.invoke(0xEAD42DE3610D0721, 'bool', ped, target)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedJacking = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x4AE4FF911DFB61DA, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedBeingJacked = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x9A497FE2DF198913, 'bool', ped)
    return call
end

--- @param ped integer
--- @param weapontype integer
--- @return boolean
natives.ped_isPedBeingStunned = function(ped, weapontype)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weapontype) == 'integer', 'Argument weapontype must be of type integer.')

    local call = natives.invoke(0x4FBACCE3B4138EE8, 'bool', ped, weapontype)
    return call
end

--- @param ped integer
--- @return number
natives.ped_getPedsJacker = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x9B128DC36C1E04CF, 'int', ped)
    return call
end

--- @param ped integer
--- @return number
natives.ped_getJackTarget = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x5486A79D9FBD342D, 'int', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedFleeing = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xBBCCE00B381F8482, 'bool', ped)
    return call
end

--- @param ped integer
--- @param p1 boolean
--- @param p2 boolean
--- @return boolean
natives.ped_isPedInCover = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x60DFD0691A170B88, 'bool', ped, p1, p2)
    return call
end

-- _IS_PED_M* - _IS_PED_O*
--- @param ped1 integer
--- @param ped2 integer
--- @param p2 number
--- @return boolean
natives.ped_n0X2Dd4E0E26Dfad97D = function(ped1, ped2, p2)
    assert(type(ped1) == 'integer', 'Argument ped1 must be of type integer.')
    assert(type(ped2) == 'integer', 'Argument ped2 must be of type integer.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')

    local call = natives.invoke(0x2DD4E0E26DFAD97D, 'bool', ped1, ped2, p2)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_pedWasKilledByHeadshot = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x06FA94C835787C64, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_pedDuelingDidPlayerHeadshotOpponent = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xBD6B242B8BD5543A, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedInCoverFacingLeft = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x845333B3150583AB, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedGoingIntoCover = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x9F65DBC537E59AD5, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedRespondingToThreat = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x77525BBF433F2CD6, 'bool', ped)
    return call
end

-- Returns kneeling, sitting, squating, and sleeping scenario hashes
--- @param ped integer
--- @return number
natives.ped_getActiveDynamicScenario2 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xC22AA08A8ADB87D4, 'integer', ped)
    return call
end

-- Returns kneeling, sitting, squating, and sleeping scenario hashes
--- @param ped integer
--- @return number
natives.ped_getActiveDynamicScenario = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x569F1E1237508DEB, 'integer', ped)
    return call
end

--- @param ped integer
--- @param object integer
--- @param conditionalanim string
--- @param p3 string
--- @param p4 string
--- @param p5 boolean
--- @return boolean
natives.ped_givePedScenarioProp = function(ped, object, conditionalanim, p3, p4, p5)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(conditionalanim) == 'string', 'Argument conditionalanim must be of type string.')
    assert(type(p3) == 'string', 'Argument p3 must be of type string.')
    assert(type(p4) == 'string', 'Argument p4 must be of type string.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')

    local call = natives.invoke(0x3BBDD6143FF16F98, 'bool', ped, object, conditionalanim, p3, p4, p5)
    return call
end

--- @param ped integer
--- @param object integer
--- @param conditionalanim string
--- @param scenariotype integer
--- @param p4 integer
--- @param p5 boolean
--- @return boolean
natives.ped_givePedHashScenarioProp = function(ped, object, conditionalanim, scenariotype, p4, p5)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(conditionalanim) == 'string', 'Argument conditionalanim must be of type string.')
    assert(type(scenariotype) == 'integer', 'Argument scenariotype must be of type integer.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')

    local call = natives.invoke(0x2B02DB082258625F, 'bool', ped, object, conditionalanim, scenariotype, p4, p5)
    return call
end

-- Only used in SP R* Script rcm_jack2
--- @param ped integer
--- @param object integer
--- @param p2 string
--- @param p3 string
--- @param p4 boolean
--- @return boolean
natives.ped_givePedScenarioPropDynamic = function(ped, object, p2, p3, p4)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(p2) == 'string', 'Argument p2 must be of type string.')
    assert(type(p3) == 'string', 'Argument p3 must be of type string.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')

    local call = natives.invoke(0xA0774E388CE4A679, 'bool', ped, object, p2, p3, p4)
    return call
end

--- @param ped integer
--- @param object integer
--- @param p2 string
--- @param p3 string
--- @param p4 string
--- @param p5 boolean
--- @return any
natives.ped_requestPropScenarioPed = function(ped, object, p2, p3, p4, p5)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(p2) == 'string', 'Argument p2 must be of type string.')
    assert(type(p3) == 'string', 'Argument p3 must be of type string.')
    assert(type(p4) == 'string', 'Argument p4 must be of type string.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')

    local call = natives.invoke(0xBEC65C6049B3219D, 'any', ped, object, p2, p3, p4, p5)
    return call
end

--- @param ped integer
--- @param object integer
--- @param p2 string
--- @param scenariotype integer
--- @param p4 string
--- @param p5 boolean
--- @return any
natives.ped_requestPedForScenarioType = function(ped, object, p2, scenariotype, p4, p5)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(p2) == 'string', 'Argument p2 must be of type string.')
    assert(type(scenariotype) == 'integer', 'Argument scenariotype must be of type integer.')
    assert(type(p4) == 'string', 'Argument p4 must be of type string.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')

    local call = natives.invoke(0xBDED916A9F9B0604, 'any', ped, object, p2, scenariotype, p4, p5)
    return call
end

-- Gets a registered/attached prop entity for a particular ped. Second parameter will detach the prop entity from the ped if true. Props primarily appear to come from scenarios, such as a broom or hay bale.
-- 
-- Known props: https:--pastebin.com/ap2NEJqB
--- @param ped integer
--- @param propname string
--- @param detachprop boolean
--- @return number
natives.ped_getPedRegisterProp = function(ped, propname, detachprop)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(propname) == 'string', 'Argument propname must be of type string.')
    assert(type(detachprop) == 'boolean', 'Argument detachprop must be of type boolean.')

    local call = natives.invoke(0x4D0D2E3D8BC000EB, 'int', ped, propname, detachprop)
    return call
end

--- @param ped integer
--- @return number
natives.ped_getSeatPedIsTryingToEnter = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x6F4C85ACD641BCD2, 'int', ped)
    return call
end

-- Returns the entity that killed the ped
-- 
-- It is best to check if the Ped is dead before asking for its killer.
--- @param ped integer
--- @return number
natives.ped_getPedSourceOfDeath = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x93C8B64DEB84728C, 'int', ped)
    return call
end

-- Returns the hash of the weapon/model/object that killed the ped.
--- @param ped integer
--- @return number
natives.ped_getPedCauseOfDeath = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x16FFE42AB2D2DC59, 'integer', ped)
    return call
end

--- @param ped integer
--- @return number
natives.ped_getPedTimeOfDeath = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x1E98817B311AE98A, 'int', ped)
    return call
end

--- @param ped integer
--- @param flag integer
--- @return number
natives.ped_countPedsInCombatWithTarget = function(ped, flag)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')

    local call = natives.invoke(0x5407B7288D0478B7, 'int', ped, flag)
    return call
end

--- @param ped integer
--- @param itemset integer
--- @param flag integer
--- @return number
natives.ped_getPedsInCombatWithTarget = function(ped, itemset, flag)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(itemset) == 'integer', 'Argument itemset must be of type integer.')
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')

    local call = natives.invoke(0x7BE607DAFF382FD2, 'int', ped, itemset, flag)
    return call
end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param flag integer
--- @return number
natives.ped_countPedsInCombatWithTargetWithinRadius = function(ped, x, y, z, radius, flag)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')

    local call = natives.invoke(0x336B3D200AB007CB, 'int', ped, x, y, z, radius, flag)
    return call
end

--- @param ped integer
--- @return number
natives.ped_getCurrentTargetForPed = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xCD66FEA29400A0B5, 'int', ped)
    return call
end

--- @param ped integer
--- @param hash integer
natives.ped_setPedRelationshipGroupDefaultHash = function(ped, hash)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(hash) == 'integer', 'Argument hash must be of type integer.')

    local call = natives.invoke(0xADB3F206518799E8, 'void', ped, hash)
end

--- @param modelhash integer
--- @return number
natives.ped_getDefaultRelationshipGroupHash = function(modelhash)
    assert(type(modelhash) == 'integer', 'Argument modelhash must be of type integer.')

    local call = natives.invoke(0x3CC4A718C258BDD0, 'integer', modelhash)
    return call
end

--- @param ped integer
--- @param relationshipgroup integer
natives.ped_setPedRelationshipGroupHash = function(ped, relationshipgroup)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(relationshipgroup) == 'integer', 'Argument relationshipgroup must be of type integer.')

    local call = natives.invoke(0xC80A74AC829DDD92, 'void', ped, relationshipgroup)
end

--- @param relationship integer
--- @param group1 integer
--- @param group2 integer
natives.ped_setRelationshipBetweenGroups = function(relationship, group1, group2)
    assert(type(relationship) == 'integer', 'Argument relationship must be of type integer.')
    assert(type(group1) == 'integer', 'Argument group1 must be of type integer.')
    assert(type(group2) == 'integer', 'Argument group2 must be of type integer.')

    local call = natives.invoke(0xBF25EB89375A37AD, 'void', relationship, group1, group2)
end

--- @param relationship integer
--- @param group1 integer
--- @param group2 integer
natives.ped_clearRelationshipBetweenGroups = function(relationship, group1, group2)
    assert(type(relationship) == 'integer', 'Argument relationship must be of type integer.')
    assert(type(group1) == 'integer', 'Argument group1 must be of type integer.')
    assert(type(group2) == 'integer', 'Argument group2 must be of type integer.')

    local call = natives.invoke(0x5E29243FB56FC6D4, 'void', relationship, group1, group2)
end

-- The hash of the created relationship group is output in the second parameter.
--- @param name string
--- @param grouphash integer
--- @return boolean
natives.ped_addRelationshipGroup = function(name, grouphash)
    assert(type(name) == 'string', 'Argument name must be of type string.')
    assert(type(grouphash) == 'integer', 'Argument grouphash must be of type integer.')

    local call = natives.invoke(0xF372BC22FCB88606, 'bool', name, grouphash)
    return call
end

--- @param grouphash integer
natives.ped_removeRelationshipGroup = function(grouphash)
    assert(type(grouphash) == 'integer', 'Argument grouphash must be of type integer.')

    local call = natives.invoke(0xB6BA2444AB393DA2, 'void', grouphash)
end

--- @param ped1 integer
--- @param ped2 integer
--- @return number
natives.ped_getRelationshipBetweenPeds = function(ped1, ped2)
    assert(type(ped1) == 'integer', 'Argument ped1 must be of type integer.')
    assert(type(ped2) == 'integer', 'Argument ped2 must be of type integer.')

    local call = natives.invoke(0xEBA5AD3A0EAF7121, 'int', ped1, ped2)
    return call
end

--- @param ped integer
--- @return number
natives.ped_getPedRelationshipGroupDefaultHash = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x42FDD0F017B1E38E, 'integer', ped)
    return call
end

--- @param ped integer
--- @return number
natives.ped_getPedRelationshipGroupHash = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x7DBDD04862D95F04, 'integer', ped)
    return call
end

--- @param group1 integer
--- @param group2 integer
--- @return number
natives.ped_getRelationshipBetweenGroups = function(group1, group2)
    assert(type(group1) == 'integer', 'Argument group1 must be of type integer.')
    assert(type(group2) == 'integer', 'Argument group2 must be of type integer.')

    local call = natives.invoke(0x9E6B70061662AE5C, 'int', group1, group2)
    return call
end

-- Used in Script Function MP_MAIN_OFFLINE__INITIALIZE_GAME
-- _SET_RELATIONSHIP_*
--- @param group integer
--- @param p1 boolean
natives.ped_n0Xdc91F22F09Bc6C2F = function(group, p1)
    assert(type(group) == 'integer', 'Argument group must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xDC91F22F09BC6C2F, 'void', group, p1)
end

--- @param group integer
--- @param p1 boolean
natives.ped_n0X9629Faf6460D35Cb = function(group, p1)
    assert(type(group) == 'integer', 'Argument group must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x9629FAF6460D35CB, 'void', group, p1)
end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param p4 number
--- @param relationshipgroup integer
natives.ped_n0X4E68C7Ef706Df35D = function(ped, x, y, z, p4, relationshipgroup)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(relationshipgroup) == 'integer', 'Argument relationshipgroup must be of type integer.')

    local call = natives.invoke(0x4E68C7EF706DF35D, 'void', ped, x, y, z, p4, relationshipgroup)
end

-- Used in R* Script net_fetch (NET_FETCH_UPDATE_RECIPIENT_PROP_ILO_IN_COMBAT) and various SP Scripts
-- Params: p1 = 4/5/6, p5 = 40.f/100.f, coords = Player ped
-- Perhaps returns some distance (Clearing that the local player is able to use ILO while in combat because they are near the recipient but also near hated peds)
-- _GET_NUM_M* - _GET_PEDS_J*
--- @param ped integer
--- @param p1 integer
--- @param x number
--- @param y number
--- @param z number
--- @param p5 number
--- @param itemset integer
--- @return number
natives.ped_n0X3Acce14Dfa6Ba8C2 = function(ped, p1, x, y, z, p5, itemset)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(itemset) == 'integer', 'Argument itemset must be of type integer.')

    local call = natives.invoke(0x3ACCE14DFA6BA8C2, 'int', ped, p1, x, y, z, p5, itemset)
    return call
end

--- @param ped integer
--- @param radius number
--- @param maxfriends integer
natives.ped_setPedToInformRespectedFriends = function(ped, radius, maxfriends)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(maxfriends) == 'integer', 'Argument maxfriends must be of type integer.')

    local call = natives.invoke(0x112942C6E708F70B, 'void', ped, radius, maxfriends)
end

-- _IS_PED_RE*
--- @param ped integer
--- @return boolean
natives.ped_n0X40C9155Af8Bc13F3 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x40C9155AF8BC13F3, 'bool', ped)
    return call
end

-- Only used in SP Scripts
-- Returns count / index
-- _C*
--- @param shockingevent integer
--- @param x number
--- @param y number
--- @param z number
--- @param p4 number
--- @param p5 integer
--- @return number
natives.ped_n0Xf4860514Ad354226 = function(shockingevent, x, y, z, p4, p5)
    assert(type(shockingevent) == 'integer', 'Argument shockingevent must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'integer', 'Argument p5 must be of type integer.')

    local call = natives.invoke(0xF4860514AD354226, 'int', shockingevent, x, y, z, p4, p5)
    return call
end

-- eventType: https:--alloc8or.re/rdr3/doc/enums/eEventType.txt
--- @param ped integer
--- @param eventtype integer
--- @return boolean
natives.ped_isPedRespondingToEvent = function(ped, eventtype)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(eventtype) == 'integer', 'Argument eventtype must be of type integer.')

    local call = natives.invoke(0x625B774D75C87068, 'bool', ped, eventtype)
    return call
end

-- Only used in R* SP Scripts
-- _GET_PED_IN*
--- @param ped integer
--- @param eventtype integer
--- @return number
natives.ped_n0X5E9Faf6C513347B4 = function(ped, eventtype)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(eventtype) == 'integer', 'Argument eventtype must be of type integer.')

    local call = natives.invoke(0x5E9FAF6C513347B4, 'int', ped, eventtype)
    return call
end

-- Only used in R* SP Script short_update
-- _GET_TARGET_* - _GET_TRACKED*
--- @param ped integer
--- @param eventtype integer
--- @return any
natives.ped_n0X326F7951Ef0D7F75 = function(ped, eventtype)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(eventtype) == 'integer', 'Argument eventtype must be of type integer.')

    local call = natives.invoke(0x326F7951EF0D7F75, 'any', ped, eventtype)
    return call
end

-- Used for AUDIO / ANIMSCENE (REFERENCE_REGIONAL_CHARACTER)
-- Params: p1 = 0
-- _GET_PED_IN*
--- @param perscharmodel integer
--- @param p1 integer
--- @return number
natives.ped_n0Xe76687023D8C8505 = function(perscharmodel, p1)
    assert(type(perscharmodel) == 'integer', 'Argument perscharmodel must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xE76687023D8C8505, 'int', perscharmodel, p1)
    return call
end

-- Only used in R* SP Scripts
-- _GET_PLAYER_W* - _GET_RANDOM_*
--- @param ped integer
--- @param eventtype integer
--- @param coords integer
--- @return boolean
natives.ped_n0Xcb8F4C9343Ebe240 = function(ped, eventtype, coords)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(eventtype) == 'integer', 'Argument eventtype must be of type integer.')
    assert(type(coords) == 'integer', 'Argument coords must be of type integer.')

    local call = natives.invoke(0xCB8F4C9343EBE240, 'bool', ped, eventtype, coords)
    return call
end

-- Used in various R* MP & SP Scripts
--- @param ped integer
--- @param patternhash integer
natives.ped_setPedFiringPattern = function(ped, patternhash)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(patternhash) == 'integer', 'Argument patternhash must be of type integer.')

    local call = natives.invoke(0x9AC577F5A12AD8A9, 'void', ped, patternhash)
end

-- Used in R* MP Script fm_mission_controller and various R* SP Scripts for ambush*
--- @param ped integer
--- @param patternhash integer
natives.ped_setPedFiringPattern2 = function(ped, patternhash)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(patternhash) == 'integer', 'Argument patternhash must be of type integer.')

    local call = natives.invoke(0x20E54854DEF6A54A, 'void', ped, patternhash)
end

-- Only used in R* MP Script fm_mission_controller
--- @param ped integer
--- @param patternhash integer
natives.ped_setPedFiringPattern3 = function(ped, patternhash)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(patternhash) == 'integer', 'Argument patternhash must be of type integer.')

    local call = natives.invoke(0x244E8C282188E40F, 'void', ped, patternhash)
end

-- Params: shootRate = 0 - 1000
--- @param ped integer
--- @param shootrate integer
natives.ped_setPedShootRate = function(ped, shootrate)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(shootrate) == 'integer', 'Argument shootrate must be of type integer.')

    local call = natives.invoke(0x614DA022990752DC, 'void', ped, shootrate)
end

-- _SET_PED_TA* - _SET_PED_TO_*
--- @param ped integer
--- @param p1 integer
--- @param p2 integer
natives.ped_n0X3C529A827998F9B3 = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x3C529A827998F9B3, 'void', ped, p1, p2)
end

-- Only used in SP R* Scripts
-- Params: p2 = same as p2 of 0x3C529A827998F9B3
-- _SET_PED_TA* - _SET_PED_TO_*
--- @param ped integer
--- @param p1 number
--- @param p2 integer
natives.ped_n0X1F44B7E283C09Ede = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x1F44B7E283C09EDE, 'void', ped, p1, p2)
end

-- combatType can be between 0-14. See GET_COMBAT_FLOAT below for a list of possible parameters.
-- https:--github.com/femga/rdr3_discoveries/tree/master/AI/COMBAT_FLOATS
--- @param ped integer
--- @param combattype integer
--- @param newvalue number
natives.ped_setCombatFloat = function(ped, combattype, newvalue)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(combattype) == 'integer', 'Argument combattype must be of type integer.')
    assert(type(newvalue) == 'number', 'Argument newvalue must be of type number.')

    local call = natives.invoke(0xFF41B4B141ED981C, 'void', ped, combattype, newvalue)
end

--- @param ped integer
--- @param combattype integer
--- @return number
natives.ped_getCombatFloat = function(ped, combattype)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(combattype) == 'integer', 'Argument combattype must be of type integer.')

    local call = natives.invoke(0x52DFF8A10508090A, 'float', ped, combattype)
    return call
end

--- @param groupid integer
--- @param hasleader integer
--- @param numberoffollowers integer
natives.ped_getGroupSize = function(groupid, hasleader, numberoffollowers)
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')
    assert(type(hasleader) == 'integer', 'Argument hasleader must be of type integer.')
    assert(type(numberoffollowers) == 'integer', 'Argument numberoffollowers must be of type integer.')

    local call = natives.invoke(0x8DE69FE35CA09A45, 'void', groupid, hasleader, numberoffollowers)
end

--- @param groupid integer
--- @return boolean
natives.ped_doesGroupExist = function(groupid)
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')

    local call = natives.invoke(0x7C6B0C22F9F40BBE, 'bool', groupid)
    return call
end

-- _DOES_GROUP_* - _DOES_N*
--- @param groupid integer
--- @return boolean
natives.ped_n0X0455546F23Ff08E4 = function(groupid)
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')

    local call = natives.invoke(0x0455546F23FF08E4, 'bool', groupid)
    return call
end

--- @param groupid integer
--- @return boolean
natives.ped_isGroupLocallyControlled = function(groupid)
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')

    local call = natives.invoke(0x909AD9E9A92A10DF, 'bool', groupid)
    return call
end

-- Returns the groupId of which the specified ped is a member of.
--- @param ped integer
--- @return number
natives.ped_getPedGroupIndex = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xF162E133B4E7A675, 'int', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedInGroup = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x5891CAC5D4ACFF74, 'bool', ped)
    return call
end

-- _IS_PED_L* - _IS_PED_M*
--- @param ped integer
--- @return boolean
natives.ped_isPedLeadingAnyGroup = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x917760CFE7A0E0F1, 'bool', ped)
    return call
end

--- @param ped integer
--- @return number
natives.ped_getPlayerPedIsFollowing = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x6A3975DEA89F9A17, 'int', ped)
    return call
end

-- eFormationType
-- 
-- 0: Default
-- 1: Circle Around Leader
-- 2: Alternative Circle Around Leader
-- 3: Line, with Leader at center
--- @param groupid integer
--- @param formationtype integer
natives.ped_setGroupFormation = function(groupid, formationtype)
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')
    assert(type(formationtype) == 'integer', 'Argument formationtype must be of type integer.')

    local call = natives.invoke(0xCE2F5FC3AF7E8C1E, 'void', groupid, formationtype)
end

--- @param groupid integer
--- @return number
natives.ped_getGroupFormation = function(groupid)
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')

    local call = natives.invoke(0x13A1B061007C906B, 'int', groupid)
    return call
end

--- @param groupid integer
--- @param p1 number
--- @param p2 number
--- @param p3 number
natives.ped_setGroupFormationSpacing = function(groupid, p1, p2, p3)
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')

    local call = natives.invoke(0x1D9D45004C28C916, 'void', groupid, p1, p2, p3)
end

--- @param groupid integer
natives.ped_resetGroupFormationDefaultSpacing = function(groupid)
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')

    local call = natives.invoke(0x63DAB4CCB3273205, 'void', groupid)
end

-- Used to set up bad guy groups in nb_kidnapped R* Script (MP_RE_KIDNAPPED): p1 = 4.f
-- _SET_FORMATION_*
--- @param groupid integer
--- @param p1 number
--- @return boolean
natives.ped_n0Xb05Cc690Cde8A4A9 = function(groupid, p1)
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0xB05CC690CDE8A4A9, 'bool', groupid, p1)
    return call
end

--- @param groupid integer
--- @param x number
--- @param y number
--- @param z number
--- @param position integer
natives.ped_addCustomFormationLocation = function(groupid, x, y, z, position)
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(position) == 'integer', 'Argument position must be of type integer.')

    local call = natives.invoke(0x4E23CD07BD161E06, 'void', groupid, x, y, z, position)
end

--- @param groupid integer
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @return boolean
natives.ped_addFormationLocation = function(groupid, p1, p2, p3)
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')

    local call = natives.invoke(0xB05945C1E9E60D91, 'bool', groupid, p1, p2, p3)
    return call
end

--- @param groupid integer
--- @param radius number
--- @return boolean
natives.ped_setFormationPositionsTargetRadius = function(groupid, radius)
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')

    local call = natives.invoke(0x7CC7D3B7AF7FB71F, 'bool', groupid, radius)
    return call
end

--- @param groupid integer
--- @param toggle boolean
natives.ped_setFormationAutoAssignPosition = function(groupid, toggle)
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x478F6B9920446CE2, 'void', groupid, toggle)
end

--- @param ped integer
--- @param position integer
--- @param toggle boolean
natives.ped_setPedFormationPosition = function(ped, position, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(position) == 'integer', 'Argument position must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x0E9E95FDEDCC9D35, 'void', ped, position, toggle)
end

-- Returns offset (0 < 32) to be used with MISC::SET_BIT
-- _GET_PED_CR*
--- @param groupid integer
--- @param ped integer
--- @return number
natives.ped_n0X8Af8E647D6B2A649 = function(groupid, ped)
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x8AF8E647D6B2A649, 'int', groupid, ped)
    return call
end

-- _CLEAR_PED_E* - _CLEAR_PED_L*
--- @param ped integer
natives.ped_n0X87C2724A56F66020 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x87C2724A56F66020, 'void', ped)
end

-- _SET_FORMATION_*
--- @param groupid integer
--- @param p1 boolean
natives.ped_n0Xd5Bd1B5318A81994 = function(groupid, p1)
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xD5BD1B5318A81994, 'void', groupid, p1)
end

-- _SET_PLAYER_CAN_B* - _SET_PLAYER_CAN_U*
--- @param ped integer
--- @param p1 boolean
natives.ped_n0X9Bbeaf8B0C007F1E = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x9BBEAF8B0C007F1E, 'void', ped, p1)
end

-- _SET_PLAYER_N* - _SET_PLAYER_S*
--- @param ped integer
--- @param p1 boolean
natives.ped_n0Xc99F104Bdf8C7F5A = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xC99F104BDF8C7F5A, 'void', ped, p1)
end

-- _SET_PLAYER_SN* - _SET_PLAYER_STAMINA*
--- @param ped integer
--- @param p1 number
natives.ped_n0X02E741E19E39628C = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x02E741E19E39628C, 'void', ped, p1)
end

-- _SET_SCENARIO_PED_* - _SET_SPAWNER_*
--- @param groupid integer
--- @param p1 boolean
natives.ped_n0X97C475212B327666 = function(groupid, p1)
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x97C475212B327666, 'void', groupid, p1)
end

-- _SET_SCENARIO_PED_* - _SET_SPAWNER_*
--- @param groupid integer
--- @param p1 boolean
natives.ped_n0X154B7E841Ac7412F = function(groupid, p1)
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x154B7E841AC7412F, 'void', groupid, p1)
end

-- _SET_FORMATION_*
--- @param groupid integer
--- @param p1 boolean
natives.ped_n0X8Afccc0F18D70018 = function(groupid, p1)
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x8AFCCC0F18D70018, 'void', groupid, p1)
end

-- _SET_FORMATION_P*
--- @param groupid integer
--- @param p1 number
--- @param p2 number
natives.ped_n0Xe1103300F3456De7 = function(groupid, p1, p2)
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')

    local call = natives.invoke(0xE1103300F3456DE7, 'void', groupid, p1, p2)
end

-- _SET_ENABLE_B* - _SET_ENABLE_H*
--- @param groupid integer
--- @param p1 boolean
natives.ped_n0Xa8A95Cecb1906Ea2 = function(groupid, p1)
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xA8A95CECB1906EA2, 'void', groupid, p1)
end

-- _SET_FORMATION_P*
--- @param groupid integer
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
natives.ped_n0Xddfad4Deaa7Fa362 = function(groupid, p1, p2, p3, p4)
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')

    local call = natives.invoke(0xDDFAD4DEAA7FA362, 'void', groupid, p1, p2, p3, p4)
end

-- _SET_FORMATION_P*
--- @param groupid integer
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
natives.ped_n0X966De09688A1De39 = function(groupid, p1, p2, p3, p4)
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')

    local call = natives.invoke(0x966DE09688A1DE39, 'void', groupid, p1, p2, p3, p4)
end

-- _SET_FORMATION_P*
--- @param groupid integer
--- @param p1 integer
natives.ped_n0X7E5185B979706210 = function(groupid, p1)
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x7E5185B979706210, 'void', groupid, p1)
end

-- _SET_SCENARIO_PED_* - _SET_SPAWNER_*
--- @param groupid integer
--- @param p1 boolean
natives.ped_n0X40C3524D4Ed83554 = function(groupid, p1)
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x40C3524D4ED83554, 'void', groupid, p1)
end

--- @param groupid integer
--- @param p1 boolean
natives.ped_n0X86Fafc18E3D4380C = function(groupid, p1)
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x86FAFC18E3D4380C, 'void', groupid, p1)
end

--- @param groupid integer
--- @param p1 boolean
natives.ped_n0X07Ea5B053Fa60Ac7 = function(groupid, p1)
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x07EA5B053FA60AC7, 'void', groupid, p1)
end

-- Used in Script Function PLAYER_HEAD_TRACKING_MAINTAIN
--- @param ped integer
--- @param targetentity integer
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 number
--- @param p7 number
--- @param p8 number
--- @param p9 string
natives.ped_n0Xf9Cbd46433E36713 = function(ped, targetentity, p2, p3, p4, p5, p6, p7, p8, p9)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(targetentity) == 'integer', 'Argument targetentity must be of type integer.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'number', 'Argument p6 must be of type number.')
    assert(type(p7) == 'number', 'Argument p7 must be of type number.')
    assert(type(p8) == 'number', 'Argument p8 must be of type number.')
    assert(type(p9) == 'string', 'Argument p9 must be of type string.')

    local call = natives.invoke(0xF9CBD46433E36713, 'void', ped, targetentity, p2, p3, p4, p5, p6, p7, p8, p9)
end

--- @param ped integer
--- @return number
natives.ped_getVehiclePedIsUsing = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x6094AD011A2EA87D, 'int', ped)
    return call
end

--- @param ped integer
--- @return number
natives.ped_getVehiclePedIsEntering = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xF92691AED837A5FC, 'int', ped)
    return call
end

--- @param horse integer
--- @return number
natives.ped_getVehicleDraftHorseIsAttachedTo = function(horse)
    assert(type(horse) == 'integer', 'Argument horse must be of type integer.')

    local call = natives.invoke(0xE4770DA1B8FF4FD1, 'int', horse)
    return call
end

--- @param horse integer
--- @return number
natives.ped_getLastVehicleDraftHorseWasAttachedTo = function(horse)
    assert(type(horse) == 'integer', 'Argument horse must be of type integer.')

    local call = natives.invoke(0x5064DB5083C29921, 'int', horse)
    return call
end

--- @param ped integer
--- @return number
natives.ped_getSeatPedIsUsing = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x4E76CB57222A00E5, 'int', ped)
    return call
end

--- @param ped integer
--- @return number
natives.ped_getTransportPedIsSeatedOn = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x849BD6C6314793D0, 'int', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedEnteringAnyTransport = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x1D46B417F926D34D, 'bool', ped)
    return call
end

--- @param ped integer
--- @param toggle boolean
natives.ped_setPedGravity = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x9FF447B6B6AD960A, 'void', ped, toggle)
end

-- Only used in R* Script mob4 combined with SET_ANIMAL_TUNING_BOOL_PARAM
-- _SET_PED_S* - _SET_PED_TARGET_*
--- @param animal integer
--- @param toggle boolean
natives.ped_n0X96595B36D6A2279B = function(animal, toggle)
    assert(type(animal) == 'integer', 'Argument animal must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x96595B36D6A2279B, 'void', animal, toggle)
end

-- Only used in R* Script beat_sharp_shooter
-- Blocks ped from swimming underwater
--- @param ped integer
--- @param toggle boolean
natives.ped_setPedImmersionFlag = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x7FB0088E8769CDDB, 'void', ped, toggle)
end

-- Only used in R* Script mob4 and rcm_mason4
-- _SET_PED_DEFENSIVE_* - _SET_PED_DESIRED_*
--- @param animal integer
--- @param p1 boolean
--- @param p2 number
--- @param p3 number
natives.ped_n0Xa90684Ed185Ccb4B = function(animal, p1, p2, p3)
    assert(type(animal) == 'integer', 'Argument animal must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')

    local call = natives.invoke(0xA90684ED185CCB4B, 'void', animal, p1, p2, p3)
end

--- @param ped integer
--- @param enabled boolean
natives.ped_fakeSetPedLocoInjured = function(ped, enabled)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(enabled) == 'boolean', 'Argument enabled must be of type boolean.')

    local call = natives.invoke(0x8B3CB08158E98481, 'void', ped, enabled)
end

--- @param ped integer
--- @param pedkiller integer
--- @param weapon integer
natives.ped_forcePedDeath = function(ped, pedkiller, weapon)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(pedkiller) == 'integer', 'Argument pedkiller must be of type integer.')
    assert(type(weapon) == 'integer', 'Argument weapon must be of type integer.')

    local call = natives.invoke(0x1CE875505D45338A, 'void', ped, pedkiller, weapon)
end

-- damages a ped with the given amount
--- @param ped integer
--- @param damageamount integer
--- @param damagearmour boolean
--- @param boneid integer
--- @param pedkiller integer
natives.ped_applyDamageToPed = function(ped, damageamount, damagearmour, boneid, pedkiller)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(damageamount) == 'integer', 'Argument damageamount must be of type integer.')
    assert(type(damagearmour) == 'boolean', 'Argument damagearmour must be of type boolean.')
    assert(type(boneid) == 'integer', 'Argument boneid must be of type integer.')
    assert(type(pedkiller) == 'integer', 'Argument pedkiller must be of type integer.')

    local call = natives.invoke(0x697157CED63F18D4, 'void', ped, damageamount, damagearmour, boneid, pedkiller)
end

-- _SET_PED_D*
--- @param ped integer
--- @param p1 boolean
natives.ped_n0Xbad2A311667A50D7 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xBAD2A311667A50D7, 'void', ped, p1)
end

--- @param ped integer
--- @return number
natives.ped_getPedType = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xFF059E1E4C01E63C, 'int', ped)
    return call
end

-- Turns the desired ped into a cop. If you use this on the player ped, you will become almost invisible to cops dispatched for you. You will also report your own crimes, get a generic cop voice, get a cop-vision-cone on the radar, and you will be unable to shoot at other cops. Toggling ped as "false" has no effect; you must change p0's ped model to disable the effect.
-- toggle = bSetRelGroup
--- @param ped integer
--- @param toggle boolean
natives.ped_setPedAsCop = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xBB03C38DD3FB7FFD, 'void', ped, toggle)
end

-- _SET_PED_A*
--- @param ped integer
--- @param p1 boolean
natives.ped_n0X405180B14Da5A935 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x405180B14DA5A935, 'void', ped, p1)
end

-- personality (script_mp_rel): NONE, AGGRESSIVE, TIMID (non-aggressive), CRIPPS, SCRIPTEDINTIMIDATION, MAGGIE, MARCEL, SCRIPTEDSALOON
-- personality (script_rel): AVOID, SCRIPTEDOUTLAW, TIMIDGUARDDOG, SCRIPTEDTIMIDROB, AGGRESSIVECAMPER, LAZYDOG, KIERANTIEDUP, SCRIPTEDGALA
--- @param ped integer
--- @param personality integer
natives.ped_setPedInteractionPersonality = function(ped, personality)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(personality) == 'integer', 'Argument personality must be of type integer.')

    local call = natives.invoke(0x24C82EF607105FAA, 'void', ped, personality)
end

--- @param ped integer
--- @return number
natives.ped_getPedInteractionPersonality = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xD7AD3C7EBAF88C92, 'integer', ped)
    return call
end

-- Hashes: STANDARD_PED_AGRO_GUARD, BOUNTY_HUNTER, PLAYER_HORSE, LAW_POLICE, GUARD_DOG, ATTACK_DOG
-- Personalities can also be found in common:/data/ai/interactionpersonalities
--- @param ped integer
--- @param personality integer
natives.ped_setPedPersonality = function(ped, personality)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(personality) == 'integer', 'Argument personality must be of type integer.')

    local call = natives.invoke(0xB8B6430EAD2D2437, 'void', ped, personality)
end

-- _SET_PED_P* - _SET_PED_R*
--- @param ped integer
natives.ped_n0X329772C47Dbb2Fbc = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x329772C47DBB2FBC, 'void', ped)
end

-- Returns true if ped is in a dispute another ped (pedInDisputeWith can also be 0)
--- @param ped integer
--- @param pedindisputewith integer
--- @return boolean
natives.ped_getIsPedInDisputeWithPed = function(ped, pedindisputewith)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(pedindisputewith) == 'integer', 'Argument pedindisputewith must be of type integer.')

    local call = natives.invoke(0x331550B212014B92, 'bool', ped, pedindisputewith)
    return call
end

-- _GET_IS_PED_*
--- @param ped integer
--- @return boolean
natives.ped_n0X94132D7C8D3575C4 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x94132D7C8D3575C4, 'bool', ped)
    return call
end

-- _SET_PED_IN*
--- @param ped integer
--- @param speechparams integer
natives.ped_n0X8Af46E5159A5B620 = function(ped, speechparams)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(speechparams) == 'integer', 'Argument speechparams must be of type integer.')

    local call = natives.invoke(0x8AF46E5159A5B620, 'void', ped, speechparams)
end

-- _SET_PED_IN*
--- @param ped integer
--- @param p1 string
natives.ped_n0X45Fea6D5539Bd474 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')

    local call = natives.invoke(0x45FEA6D5539BD474, 'void', ped, p1)
end

--- @param ped integer
--- @param speech string
natives.ped_setPedInteractionPositiveResponse = function(ped, speech)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(speech) == 'string', 'Argument speech must be of type string.')

    local call = natives.invoke(0x20C5459379D75C1C, 'void', ped, speech)
end

-- _SET_PED_IN*
--- @param ped integer
--- @param p1 string
natives.ped_n0Xe37Acee15Ac50C7E = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')

    local call = natives.invoke(0xE37ACEE15AC50C7E, 'void', ped, p1)
end

--- @param ped integer
--- @param speech string
natives.ped_setPedInteractionNegativeResponse = function(ped, speech)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(speech) == 'string', 'Argument speech must be of type string.')

    local call = natives.invoke(0xA3C53CDE922BC78B, 'void', ped, speech)
end

-- _SET_PED_IN*
--- @param ped integer
--- @param p1 string
natives.ped_n0X41C23A8E6B344867 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')

    local call = natives.invoke(0x41C23A8E6B344867, 'void', ped, p1)
end

--- @param ped integer
--- @param player integer
--- @return boolean
natives.ped_getIsPedRespondingToPositiveInteraction = function(ped, player)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x9337183FDA2E9035, 'bool', ped, player)
    return call
end

--- @param ped integer
--- @param player integer
--- @return boolean
natives.ped_getIsPedRespondingToNegativeInteraction = function(ped, player)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xA454D234E45BB6E5, 'bool', ped, player)
    return call
end

-- _CLEAR_PED_B* - _CLEAR_PED_C*
--- @param ped integer
natives.ped_n0Xa7Dc9266Ed6A4E51 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xA7DC9266ED6A4E51, 'void', ped)
end

-- _GET_PED_B* - _GET_PED_C*
--- @param ped integer
--- @return any
natives.ped_n0X89816B58C3466262 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x89816B58C3466262, 'any', ped)
    return call
end

-- _CLEAR*
--- @param ped1 integer
--- @param ped2 integer
natives.ped_n0X97B06669Ac569003 = function(ped1, ped2)
    assert(type(ped1) == 'integer', 'Argument ped1 must be of type integer.')
    assert(type(ped2) == 'integer', 'Argument ped2 must be of type integer.')

    local call = natives.invoke(0x97B06669AC569003, 'void', ped1, ped2)
end

-- Used in Script Function SKCS_PLAYER_ROBBING
-- _SET_PED_A*
--- @param ped integer
--- @param p1 number
natives.ped_n0X85F500F4E24Ca43E = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x85F500F4E24CA43E, 'void', ped, p1)
end

-- Used in Script Function SKCS_PLAYER_ROBBING
-- _SET_PED_SHOULD_PLAY_* - _SET_PED_SW*
--- @param ped integer
--- @param p1 number
natives.ped_n0X9B9B9Fa0Ea283E3D = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x9B9B9FA0EA283E3D, 'void', ped, p1)
end

-- _SET_C*
--- @param ped integer
--- @param p1 number
natives.ped_n0Xec60D1D225Bc50Aa = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0xEC60D1D225BC50AA, 'void', ped, p1)
end

-- _SET_A* - _SET_B*
--- @param ped integer
--- @param p1 number
natives.ped_n0X12F2D161Bf4031Fc = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x12F2D161BF4031FC, 'void', ped, p1)
end

natives.ped_n0X0Ada3Ec589E1736E = function()

    local call = natives.invoke(0x0ADA3EC589E1736E, 'void')
end

-- If p2 is false, then this native will return true until the interaction is complete. If true, the native will return true until player pockets robbery item.
-- _GET_IS_PED_[M-R]*
--- @param ped integer
--- @param player integer
--- @param trueuntilplayerpocketsitem boolean
--- @return boolean
natives.ped_getIsPedBeingRobbed = function(ped, player, trueuntilplayerpocketsitem)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(trueuntilplayerpocketsitem) == 'boolean', 'Argument trueuntilplayerpocketsitem must be of type boolean.')

    local call = natives.invoke(0xE33F98BD76490ABC, 'bool', ped, player, trueuntilplayerpocketsitem)
    return call
end

-- Used in Script Function LA_CHECK_ALERTED
-- _GET_IS_PED_*
--- @param legendaryanimal integer
--- @return boolean
natives.ped_n0Xd55Db4466D00A258 = function(legendaryanimal)
    assert(type(legendaryanimal) == 'integer', 'Argument legendaryanimal must be of type integer.')

    local call = natives.invoke(0xD55DB4466D00A258, 'bool', legendaryanimal)
    return call
end

-- Sets the maximum health of a ped.
--- @param ped integer
--- @param value integer
natives.ped_setPedMaxHealth = function(ped, value)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(value) == 'integer', 'Argument value must be of type integer.')

    local call = natives.invoke(0xF5F6378C4F3419D3, 'void', ped, value)
end

--- @param ped integer
--- @return number
natives.ped_getPedMaxHealth = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x4700A416E8324EF3, 'int', ped)
    return call
end

-- configHash: see pedhealth.meta
--- @param ped integer
--- @param confighash integer
natives.ped_setPedHealthConfig = function(ped, confighash)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(confighash) == 'integer', 'Argument confighash must be of type integer.')

    local call = natives.invoke(0xF6B82FCE03B43A37, 'void', ped, confighash)
end

--- @param ped integer
natives.ped_initPedDefaultHealth = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x7DD7FB3480D8083E, 'void', ped)
end

--- @param ped integer
--- @param value number
natives.ped_setPedMaxTimeInWater = function(ped, value)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0x43C851690662113D, 'void', ped, value)
end

--- @param ped integer
--- @param value number
natives.ped_setPedMaxTimeUnderwater = function(ped, value)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0x6BA428C528D9E522, 'void', ped, value)
end

-- _CLEAR_PED_D*
--- @param ped integer
--- @param p1 boolean
--- @param p2 boolean
--- @param p3 boolean
natives.ped_n0Xaf041C10756C30Fb = function(ped, p1, p2, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0xAF041C10756C30FB, 'void', ped, p1, p2, p3)
end

-- _SET_C*
--- @param ped1 integer
--- @param ped2 integer
natives.ped_n0X5Af24Ca9C974E51A = function(ped1, ped2)
    assert(type(ped1) == 'integer', 'Argument ped1 must be of type integer.')
    assert(type(ped2) == 'integer', 'Argument ped2 must be of type integer.')

    local call = natives.invoke(0x5AF24CA9C974E51A, 'void', ped1, ped2)
end

-- state:
-- enum eKnockOffVehicle
-- {
-- 	KNOCKOFFVEHICLE_DEFAULT,
-- 	KNOCKOFFVEHICLE_NEVER,
-- 	KNOCKOFFVEHICLE_EASY,
-- 	KNOCKOFFVEHICLE_HARD
-- };
--- @param ped integer
--- @param state integer
natives.ped_setPedCanBeKnockedOffVehicle = function(ped, state)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(state) == 'integer', 'Argument state must be of type integer.')

    local call = natives.invoke(0x7A6535691B477C48, 'void', ped, state)
end

--- @param ped integer
--- @return boolean
natives.ped_canKnockPedOffVehicle = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x51AC07A44D4F5B8A, 'bool', ped)
    return call
end

--- @param ped integer
natives.ped_knockPedOffVehicle = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x45BBCBA77C29A841, 'void', ped)
end

--- @param groupid integer
--- @param membernumber integer
--- @return number
natives.ped_getPedAsGroupMember = function(groupid, membernumber)
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')
    assert(type(membernumber) == 'integer', 'Argument membernumber must be of type integer.')

    local call = natives.invoke(0x51455483CF23ED97, 'int', groupid, membernumber)
    return call
end

--- @param groupid integer
--- @return number
natives.ped_getPedAsGroupLeader = function(groupid)
    assert(type(groupid) == 'integer', 'Argument groupid must be of type integer.')

    local call = natives.invoke(0x5CCE68DBD5FE93EC, 'int', groupid)
    return call
end

--- @param ped integer
--- @param toggle boolean
natives.ped_setPedKeepTask = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x971D38760FBC02EF, 'void', ped, toggle)
end

--- @param ped integer
--- @return boolean
natives.ped_isPedSwimming = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x9DE327631295B4C2, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedSwimmingUnderWater = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xC024869A53992F34, 'bool', ped)
    return call
end

-- _IS_PED_IN_* (near water?)
-- Returns true if ped is swimming in water
--- @param ped integer
--- @return boolean
natives.ped_n0Xdc88D06719070C39 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xDC88D06719070C39, 'bool', ped)
    return call
end

--- @param toggle boolean
natives.ped_setCreateRandomCops = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x102E68B2024D536D, 'void', toggle)
end

--- @param ped integer
--- @return boolean
natives.ped_isPedInAnyTrain = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x6F972C1AB75A1ED0, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedGettingIntoAVehicle = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xBB062B2B5722478E, 'bool', ped)
    return call
end

-- _HAS_PED_*
--- @param ped1 integer
--- @param ped2 integer
--- @return boolean
natives.ped_n0X550Cb89Dd7F4Fa3D = function(ped1, ped2)
    assert(type(ped1) == 'integer', 'Argument ped1 must be of type integer.')
    assert(type(ped2) == 'integer', 'Argument ped2 must be of type integer.')

    local call = natives.invoke(0x550CB89DD7F4FA3D, 'bool', ped1, ped2)
    return call
end

-- Ped can not pull out a weapon when true
--- @param ped integer
--- @param p1 boolean
--- @param p2 boolean
natives.ped_setEnableHandcuffs = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xDF1AF8B5D56542FA, 'void', ped, p1, p2)
end

--- @param ped integer
--- @param toggle boolean
natives.ped_setEnableBoundAnkles = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xC52E0F855C58FC2E, 'void', ped, toggle)
end

-- If returned true, SET_ENABLE_BOUND_ANKLES is called in R* Script guama2
-- _GET_D* - _GET_E*
--- @param ped integer
--- @return boolean
natives.ped_n0X8822F139408B8D0A = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x8822F139408B8D0A, 'bool', ped)
    return call
end

-- Only used in R* Script train_robbery4
-- _SET_PED_D*
--- @param ped integer
--- @param p1 boolean
natives.ped_n0X8822F124788B8D0A = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x8822F124788B8D0A, 'void', ped, p1)
end

--- @param ped integer
natives.ped_resetPedWeaponMovementClipset = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x97B0DB5B4AA74E77, 'void', ped)
end

--- @param ped integer
--- @param animname string
--- @param p2 boolean
natives.ped_setPedGetupAnimation = function(ped, animname, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(animname) == 'string', 'Argument animname must be of type string.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x3AE3552E7C207CC5, 'void', ped, animname, p2)
end

-- Used in R* Script generic_weight_control_item
-- _CLEAR_PED_E* - CLEAR_PED_(G?)L*
--- @param ped integer
natives.ped_n0X88A95Bb640Fc186F = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x88A95BB640FC186F, 'void', ped)
end

--- @param ped integer
natives.ped_resetPedInVehicleContext = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x22EF8FF8778030EB, 'void', ped)
end

--- @param vehicle integer
--- @param p1 integer
natives.ped_n0X878E8104Fa27Cdae = function(vehicle, p1)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x878E8104FA27CDAE, 'void', vehicle, p1)
end

--- @param ped integer
--- @param gesture string
--- @param p2 integer
natives.ped_setPedGestureGroup = function(ped, gesture, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(gesture) == 'string', 'Argument gesture must be of type string.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0xDDF803377F94AAA8, 'void', ped, gesture, p2)
end

-- Seems to set the ped's loco type.
-- Values used in the scripts:
-- algie
-- angry_female
-- arthur_healthy
-- cowboy
-- cowboy_f
-- default
-- default_female
-- free_slave_01
-- free_slave_02
-- gold_panner
-- guard_lantern
-- injured_general
-- john_marston
-- lilly_millet
-- lone_prisoner
-- lost_man
-- mp_ova_hunter
-- mp_ova_hunter_female
-- murfree
-- old_female
-- primate
-- rally
-- waiter
-- war_veteran
--- @param ped integer
--- @param locomotionarchetype string
natives.ped_setPedDesiredLocoForModel = function(ped, locomotionarchetype)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(locomotionarchetype) == 'string', 'Argument locomotionarchetype must be of type string.')

    local call = natives.invoke(0x923583741DC87BCE, 'void', ped, locomotionarchetype)
end

-- Clears locomotion archetype
--- @param ped integer
natives.ped_clearPedDesiredLocoForModel = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x4FD80C3DD84B817B, 'void', ped)
end

-- Sets peds motion type
--- @param ped integer
--- @param locomotiontype string
natives.ped_setPedDesiredLocoMotionType = function(ped, locomotiontype)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(locomotiontype) == 'string', 'Argument locomotiontype must be of type string.')

    local call = natives.invoke(0x89F5E7ADECCCB49C, 'void', ped, locomotiontype)
end

--- @param ped integer
natives.ped_clearPedDesiredLocoMotionType = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x58F7DB5BD8FA2288, 'void', ped)
end

--- @param ped integer
natives.ped_n0X2371C39D4F91C288 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x2371C39D4F91C288, 'void', ped)
end

-- Known get up animation types: REAR, FRONT
--- @param ped integer
--- @param getuptype string
natives.ped_requestPedGetupAnimation = function(ped, getuptype)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(getuptype) == 'string', 'Argument getuptype must be of type string.')

    local call = natives.invoke(0xEAA8242C8479C27D, 'void', ped, getuptype)
end

--- @param ped integer
--- @param ped2 integer
natives.ped_pedCowerInPlace = function(ped, ped2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(ped2) == 'integer', 'Argument ped2 must be of type integer.')

    local call = natives.invoke(0xF6E1E9F47A7686F8, 'void', ped, ped2)
end

--- @param ped integer
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param ped2 integer
--- @param p5 number
natives.ped_pedCowerMoveToPoint = function(ped, p1, p2, p3, ped2, p5)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(ped2) == 'integer', 'Argument ped2 must be of type integer.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')

    local call = natives.invoke(0x1E4C940233FC0C6F, 'void', ped, p1, p2, p3, ped2, p5)
end

-- _PED_COWER_M*
--- @param ped integer
natives.ped_n0X16F798A05Bb9E3B5 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x16F798A05BB9E3B5, 'void', ped)
end

-- target: 0 affects everyone
-- duration: -1 indefinite
-- flag: always 4 in R* Scripts
--- @param ped integer
--- @param presetname string
--- @param targetped integer
--- @param duration integer
--- @param flag integer
natives.ped_pedEmotionalPresetLocoMotion = function(ped, presetname, targetped, duration, flag)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(presetname) == 'string', 'Argument presetname must be of type string.')
    assert(type(targetped) == 'integer', 'Argument targetped must be of type integer.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')

    local call = natives.invoke(0xAAB050DA48B57978, 'void', ped, presetname, targetped, duration, flag)
end

--- @param ped integer
natives.ped_pedClearLocoMotion = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x935CF6E42BAF7F4D, 'void', ped)
end

-- _STOP_(?)*
--- @param ped integer
natives.ped_n0X32Ccad8A981B53D3 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x32CCAD8A981B53D3, 'void', ped)
end

-- SOBER = 0.0f, SLIGHTLY_DRUNK = 0.25f, MODERATELY_DRUNK = 0.5f, VERY_DRUNK = 1.0f
--- @param ped integer
--- @param enabled boolean
--- @param drunknesslevel number
natives.ped_setPedDrunkness = function(ped, enabled, drunknesslevel)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(enabled) == 'boolean', 'Argument enabled must be of type boolean.')
    assert(type(drunknesslevel) == 'number', 'Argument drunknesslevel must be of type number.')

    local call = natives.invoke(0x406CCF555B04FAD3, 'void', ped, enabled, drunknesslevel)
end

--- @param ped integer
--- @return boolean
natives.ped_isPedDrunk = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x50F124E6EF188B22, 'bool', ped)
    return call
end

-- Returns ped drunk level
-- _H* or _I*
--- @param ped integer
--- @return number
natives.ped_getPedDrunkness = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x6FB76442469ABD68, 'float', ped)
    return call
end

--- @param animdict string
--- @param animname string
--- @param x number
--- @param y number
--- @param z number
--- @param xrot number
--- @param yrot number
--- @param zrot number
--- @param p8 number
--- @param p9 integer
--- @return number, number, number
natives.ped_getAnimInitialOffsetPosition = function(animdict, animname, x, y, z, xrot, yrot, zrot, p8, p9)
    assert(type(animdict) == 'string', 'Argument animdict must be of type string.')
    assert(type(animname) == 'string', 'Argument animname must be of type string.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(xrot) == 'number', 'Argument xrot must be of type number.')
    assert(type(yrot) == 'number', 'Argument yrot must be of type number.')
    assert(type(zrot) == 'number', 'Argument zrot must be of type number.')
    assert(type(p8) == 'number', 'Argument p8 must be of type number.')
    assert(type(p9) == 'integer', 'Argument p9 must be of type integer.')

    local call = natives.invoke(0xBE22B26DD764C040, 'vector3', animdict, animname, x, y, z, xrot, yrot, zrot, p8, p9)
    return call.x, call.y, call.z
end

--- @param animdict string
--- @param animname string
--- @param x number
--- @param y number
--- @param z number
--- @param xrot number
--- @param yrot number
--- @param zrot number
--- @param p8 number
--- @param p9 integer
--- @return number, number, number
natives.ped_getAnimInitialOffsetRotation = function(animdict, animname, x, y, z, xrot, yrot, zrot, p8, p9)
    assert(type(animdict) == 'string', 'Argument animdict must be of type string.')
    assert(type(animname) == 'string', 'Argument animname must be of type string.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(xrot) == 'number', 'Argument xrot must be of type number.')
    assert(type(yrot) == 'number', 'Argument yrot must be of type number.')
    assert(type(zrot) == 'number', 'Argument zrot must be of type number.')
    assert(type(p8) == 'number', 'Argument p8 must be of type number.')
    assert(type(p9) == 'integer', 'Argument p9 must be of type integer.')

    local call = natives.invoke(0x4B805E6046EE9E47, 'vector3', animdict, animname, x, y, z, xrot, yrot, zrot, p8, p9)
    return call.x, call.y, call.z
end

--- @param ped integer
--- @param p1 integer
natives.ped_setPedRandomComponentVariation = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xC8A9481A01E63C28, 'void', ped, p1)
end

--- @param ped integer
--- @param p1 boolean
--- @param p2 boolean
--- @param p3 boolean
--- @param p4 boolean
natives.ped_knockOffPedProp = function(ped, p1, p2, p3, p4)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')

    local call = natives.invoke(0x6FD7816A36615F48, 'void', ped, p1, p2, p3, p4)
end

--- @param ped integer
--- @param toggle boolean
natives.ped_setBlockingOfNonTemporaryEvents = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x9F8AA94D6D97DBF4, 'void', ped, toggle)
end

--- @param ped integer
--- @return boolean
natives.ped_getBlockingOfNonTemporaryEvents = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x268B3AEBF032A88D, 'bool', ped)
    return call
end

-- _SET_PED_P* - _SET_PED_R*
--- @param entity integer
--- @param boneid integer
--- @param p2 number
--- @param p3 number
--- @param p4 number
natives.ped_n0Xc17A94Cc8Fc3C61A = function(entity, boneid, p2, p3, p4)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(boneid) == 'integer', 'Argument boneid must be of type integer.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')

    local call = natives.invoke(0xC17A94CC8FC3C61A, 'void', entity, boneid, p2, p3, p4)
end

--- @param ped integer
--- @param scale number
natives.ped_setPedScale = function(ped, scale)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(scale) == 'number', 'Argument scale must be of type number.')

    local call = natives.invoke(0x25ACFC650B65C538, 'void', ped, scale)
end

-- _GET_PED_M*
--- @param ped integer
--- @return number
natives.ped_n0X134775B093Ad5C38 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x134775B093AD5C38, 'float', ped)
    return call
end

--- @param ped integer
--- @return number
natives.ped_getPedHeight = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x1D491CCF7211FB74, 'float', ped)
    return call
end

-- PS_SMALL = 0,
-- PS_MEDIUM,
-- PS_MEDIUM_LARGE,
-- PS_LARGE,
-- PS_EXTRA_LARGE
--- @param modelhash integer
--- @return number
natives.ped_getPedModelSizeFromHash = function(modelhash)
    assert(type(modelhash) == 'integer', 'Argument modelhash must be of type integer.')

    local call = natives.invoke(0xA65AA1ACE81E5A77, 'int', modelhash)
    return call
end

--- @param ped integer
--- @param targetped integer
--- @param p2 boolean
natives.ped_registerTarget = function(ped, targetped, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(targetped) == 'integer', 'Argument targetped must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x2F25D9AEFA34FBA2, 'void', ped, targetped, p2)
end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
natives.ped_registerHatedTargetsInArea = function(ped, x, y, z, radius)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')

    local call = natives.invoke(0xD8736EFDA38EDC5C, 'void', ped, x, y, z, radius)
end

-- Based on TASK_COMBAT_HATED_TARGETS_AROUND_PED, the parameters are likely similar (PedHandle, and area to attack in).
--- @param ped integer
--- @param radius number
natives.ped_registerHatedTargetsAroundPed = function(ped, radius)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')

    local call = natives.invoke(0x9222F300BF8354FE, 'void', ped, radius)
end

--- @param ped integer
--- @param targetped integer
--- @return boolean
natives.ped_isTarget = function(ped, targetped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(targetped) == 'integer', 'Argument targetped must be of type integer.')

    local call = natives.invoke(0x6E5CBCB3941D7D08, 'bool', ped, targetped)
    return call
end

--- @param ped integer
--- @param targetped integer
natives.ped_removeTarget = function(ped, targetped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(targetped) == 'integer', 'Argument targetped must be of type integer.')

    local call = natives.invoke(0x4707E9C23D8CA3FE, 'void', ped, targetped)
end

-- Gets the closest ped in a radius.
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param p4 boolean
--- @param p5 boolean
--- @param outped integer
--- @param p7 boolean
--- @param p8 boolean
--- @param p9 boolean
--- @param pedtype integer
--- @return boolean
natives.ped_getClosestPed = function(x, y, z, radius, p4, p5, outped, p7, p8, p9, pedtype)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')
    assert(type(outped) == 'integer', 'Argument outped must be of type integer.')
    assert(type(p7) == 'boolean', 'Argument p7 must be of type boolean.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')
    assert(type(p9) == 'boolean', 'Argument p9 must be of type boolean.')
    assert(type(pedtype) == 'integer', 'Argument pedtype must be of type integer.')

    local call = natives.invoke(0xC33AB876A77F8164, 'bool', x, y, z, radius, p4, p5, outped, p7, p8, p9, pedtype)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_canPedRagdoll = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x128F79EDCECE4FD5, 'bool', ped)
    return call
end

-- nmTaskMessageParameterName: See physicstasks.ymt. Search for DraggedByCart or 0xD00820D7 (Used in R* SP Script marston8)
--- @param ped integer
--- @param timemin integer
--- @param timemax integer
--- @param ragdolltype integer
--- @param abortifinjured boolean
--- @param abortifdead boolean
--- @param nmtaskmessageparametername string
--- @return boolean
natives.ped_setPedToRagdoll = function(ped, timemin, timemax, ragdolltype, abortifinjured, abortifdead, nmtaskmessageparametername)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(timemin) == 'integer', 'Argument timemin must be of type integer.')
    assert(type(timemax) == 'integer', 'Argument timemax must be of type integer.')
    assert(type(ragdolltype) == 'integer', 'Argument ragdolltype must be of type integer.')
    assert(type(abortifinjured) == 'boolean', 'Argument abortifinjured must be of type boolean.')
    assert(type(abortifdead) == 'boolean', 'Argument abortifdead must be of type boolean.')
    assert(type(nmtaskmessageparametername) == 'string', 'Argument nmtaskmessageparametername must be of type string.')

    local call = natives.invoke(0xAE99FB955581844A, 'bool', ped, timemin, timemax, ragdolltype, abortifinjured, abortifdead, nmtaskmessageparametername)
    return call
end

--- @param ped integer
--- @param timemin integer
--- @param timemax integer
--- @param ragdolltype integer
--- @param falldirx number
--- @param falldiry number
--- @param falldirz number
--- @param p7 number
--- @param p8 number
--- @param p9 number
--- @param p10 number
--- @param p11 number
--- @param p12 number
--- @param p13 number
--- @return boolean
natives.ped_setPedToRagdollWithFall = function(ped, timemin, timemax, ragdolltype, falldirx, falldiry, falldirz, p7, p8, p9, p10, p11, p12, p13)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(timemin) == 'integer', 'Argument timemin must be of type integer.')
    assert(type(timemax) == 'integer', 'Argument timemax must be of type integer.')
    assert(type(ragdolltype) == 'integer', 'Argument ragdolltype must be of type integer.')
    assert(type(falldirx) == 'number', 'Argument falldirx must be of type number.')
    assert(type(falldiry) == 'number', 'Argument falldiry must be of type number.')
    assert(type(falldirz) == 'number', 'Argument falldirz must be of type number.')
    assert(type(p7) == 'number', 'Argument p7 must be of type number.')
    assert(type(p8) == 'number', 'Argument p8 must be of type number.')
    assert(type(p9) == 'number', 'Argument p9 must be of type number.')
    assert(type(p10) == 'number', 'Argument p10 must be of type number.')
    assert(type(p11) == 'number', 'Argument p11 must be of type number.')
    assert(type(p12) == 'number', 'Argument p12 must be of type number.')
    assert(type(p13) == 'number', 'Argument p13 must be of type number.')

    local call = natives.invoke(0xD76632D99E4966C8, 'bool', ped, timemin, timemax, ragdolltype, falldirx, falldiry, falldirz, p7, p8, p9, p10, p11, p12, p13)
    return call
end

-- Causes Ped to ragdoll on collision with any object (e.g Running into trashcan). If applied to player you will sometimes trip on the sidewalk.
--- @param ped integer
--- @param toggle boolean
--- @param p2 boolean
natives.ped_setPedRagdollOnCollision = function(ped, toggle, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xF0A4F1BBF4FA7497, 'void', ped, toggle, p2)
end

--- @param ped integer
--- @param toggle boolean
natives.ped_setPedToDisableRagdoll = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x221F4D9912B7FE86, 'void', ped, toggle)
end

-- If the ped handle passed through the parenthesis is in a ragdoll state this will return true.
--- @param ped integer
--- @return boolean
natives.ped_isPedRagdoll = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x47E4E977581C5B55, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedRunningRagdollTask = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xE3B6097CC25AA69E, 'bool', ped)
    return call
end

--- @param ped integer
natives.ped_setPedRagdollForceFall = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x01F6594B923B9251, 'void', ped)
end

-- _SET_PED_T* - SET_PED_U*
--- @param ped integer
--- @param p1 integer
--- @param p2 boolean
natives.ped_n0X8Cb2553C559102C1 = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x8CB2553C559102C1, 'void', ped, p1, p2)
end

-- _DISABLE_A* - _DISABLE_C*
--- @param ped integer
--- @param p1 integer
natives.ped_n0Xfd3C31A2E45671E7 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xFD3C31A2E45671E7, 'void', ped, p1)
end

--- @param ped integer
natives.ped_resetPedRagdollTimer = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x9FA4664CF62E47E8, 'void', ped)
end

--- @param ped integer
--- @param toggle boolean
natives.ped_setPedCanRagdoll = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xB128377056A54E2A, 'void', ped, toggle)
end

-- _IS_PED_R*
--- @param ped integer
--- @return boolean
natives.ped_n0X3Aec4A410Ecaf30D = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x3AEC4A410ECAF30D, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedRunningMobilePhoneTask = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x2AFE52F782F25775, 'bool', ped)
    return call
end

-- https:--github.com/femga/rdr3_discoveries/tree/master/AI/RAGDOLL_BLOCKING_FLAGS
-- 
-- flags:
-- enum eRagdollBlockingFlags
-- {
-- 	RBF_BULLET_IMPACT = (1 << 0),
-- 	RBF_VEHICLE_IMPACT = (1 << 1),
-- 	RBF_FIRE = (1 << 2),
-- 	RBF_ELECTROCUTION = (1 << 3),
-- 	RBF_PLAYER_IMPACT = (1 << 4),
-- 	RBF_EXPLOSION = (1 << 5),
-- 	RBF_IMPACT_OBJECT = (1 << 6),
-- 	RBF_MELEE = (1 << 7),
-- 	RBF_RUBBER_BULLET = (1 << 8),
-- 	RBF_FALLING = (1 << 9),
-- 	RBF_WATER_JET = (1 << 10),
-- 	RBF_DROWNING = (1 << 11),
-- 	RBF_0x9F52E2C4 = (1 << 12),
-- 	RBF_PLAYER_BUMP = (1 << 13),
-- 	RBF_PLAYER_RAGDOLL_BUMP = (1 << 14),
-- 	RBF_PED_RAGDOLL_BUMP = (1 << 15),
-- 	RBF_VEHICLE_GRAB = (1 << 16),
-- 	RBF_SMOKE_GRENADE = (1 << 17),
-- 	RBF_HORSE_BUMP = (1 << 18),
-- 	RBF_ACTIVATE_ON_COLLISION = (1 << 19)
-- };
--- @param ped integer
--- @param flags integer
natives.ped_setRagdollBlockingFlags = function(ped, flags)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')

    local call = natives.invoke(0x26695EC767728D84, 'void', ped, flags)
end

-- flags: see SET_RAGDOLL_BLOCKING_FLAGS
--- @param ped integer
--- @param flags integer
natives.ped_clearRagdollBlockingFlags = function(ped, flags)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')

    local call = natives.invoke(0xD86D101FCFD00A4B, 'void', ped, flags)
end

--- @param ped integer
--- @param p1 number
--- @param p2 number
--- @param p3 number
natives.ped_n0X9F933E0985E12C51 = function(ped, p1, p2, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')

    local call = natives.invoke(0x9F933E0985E12C51, 'void', ped, p1, p2, p3)
end

--- @param ped integer
--- @param p1 number
natives.ped_n0X88B2026A3B0Be33D = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x88B2026A3B0BE33D, 'void', ped, p1)
end

--- @param ped integer
--- @param volume integer
--- @param p2 boolean
--- @param p3 boolean
--- @param p4 boolean
natives.ped_setPedDefensiveAreaVolume = function(ped, volume, p2, p3, p4)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')

    local call = natives.invoke(0xFC3DB99C8144CD81, 'void', ped, volume, p2, p3, p4)
end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param p5 boolean
--- @param p6 boolean
--- @param p7 boolean
natives.ped_setPedSphereDefensiveArea = function(ped, x, y, z, radius, p5, p6, p7)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')
    assert(type(p7) == 'boolean', 'Argument p7 must be of type boolean.')

    local call = natives.invoke(0x9D3151A373974804, 'void', ped, x, y, z, radius, p5, p6, p7)
end

--- @param ped integer
--- @param entity integer
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param p6 integer
--- @param p7 boolean
natives.ped_setPedDefensiveSphereAttachedToEntity = function(ped, entity, x, y, z, radius, p6, p7)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(p6) == 'integer', 'Argument p6 must be of type integer.')
    assert(type(p7) == 'boolean', 'Argument p7 must be of type boolean.')

    local call = natives.invoke(0x1854217C640B39EC, 'void', ped, entity, x, y, z, radius, p6, p7)
end

-- _SET_PED_(A?)*
--- @param ped integer
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param p7 userdata
--- @param p8 boolean
--- @param p9 boolean
--- @param entity integer
--- @param p11 boolean
natives.ped_setPedDefensiveAreaToAngledArea = function(ped, x1, y1, z1, x2, y2, z2, p7, p8, p9, entity, p11)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x1) == 'number', 'Argument x1 must be of type number.')
    assert(type(y1) == 'number', 'Argument y1 must be of type number.')
    assert(type(z1) == 'number', 'Argument z1 must be of type number.')
    assert(type(x2) == 'number', 'Argument x2 must be of type number.')
    assert(type(y2) == 'number', 'Argument y2 must be of type number.')
    assert(type(z2) == 'number', 'Argument z2 must be of type number.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')
    assert(type(p9) == 'boolean', 'Argument p9 must be of type boolean.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p11) == 'boolean', 'Argument p11 must be of type boolean.')

    local call = natives.invoke(0xEB2BFE5D009F0331, 'void', ped, x1, y1, z1, x2, y2, z2, p7, p8, p9, entity, p11)
end

--- @param ped integer
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 boolean
natives.ped_setPedDefensiveAreaDirection = function(ped, p1, p2, p3, p4)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')

    local call = natives.invoke(0x413C6C763A4AFFAD, 'void', ped, p1, p2, p3, p4)
end

-- Ped will no longer get angry when you stay near him.
--- @param ped integer
--- @param toggle boolean
natives.ped_removePedDefensiveArea = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x74D4E028107450A9, 'void', ped, toggle)
end

--- @param ped integer
--- @param p1 boolean
--- @return number, number, number
natives.ped_getPedDefensiveAreaPosition = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x3C06B8786DD94CD1, 'vector3', ped, p1)
    return call.x, call.y, call.z
end

--- @param ped integer
--- @param p1 boolean
--- @return boolean
natives.ped_isPedDefensiveAreaActive = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xBA63D9FE45412247, 'bool', ped, p1)
    return call
end

--- @param ped integer
--- @param p1 userdata
--- @return number
natives.ped_getPedDefensiveVolume = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xEF2E6F870783369B, 'integer', ped, p1)
    return call
end

-- _SET_PED_A*
--- @param ped integer
--- @param p1 boolean
natives.ped_n0X4Ec4Ea2F72B36358 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x4EC4EA2F72B36358, 'void', ped, p1)
end

-- _SET_PED_COMBAT_*
--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
natives.ped_n0Xcf0B19806473D324 = function(ped, x, y, z)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0xCF0B19806473D324, 'void', ped, x, y, z)
end

-- _RESET_PED_C*
--- @param ped integer
natives.ped_n0Xb4B7C92Fce7347B7 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xB4B7C92FCE7347B7, 'void', ped)
end

--- @param ped integer
natives.ped_reviveInjuredPed = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x8D8ACD8388CD99CE, 'void', ped)
end

-- This function will simply bring the dead ped back to life.
-- 
-- Before calling this function, you may want to declare the position, where your Resurrected ped to be spawn at because theres a chance the ped will fall through the map
-- 
-- Also, disabling any assigned task immediately helped in the number of scenarios, where If you want peds to perform certain decided tasks.
--- @param ped integer
natives.ped_resurrectPed = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x71BC8E838B9C6035, 'void', ped)
end

-- nullsub, doesn't do anything
--- @param ped integer
--- @param name string
natives.ped_setPedNameDebug = function(ped, name)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0x98EFA132A4117BE1, 'void', ped, name)
end

--- @param ped integer
--- @param p1 boolean
natives.ped_specialFunctionDoNotUse = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xF9ACF4A08098EA25, 'void', ped, p1)
end

-- _HAS_*
--- @param ped integer
--- @return boolean
natives.ped_n0X7020839C7302D8Ac = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x7020839C7302D8AC, 'bool', ped)
    return call
end

-- _C*
--- @param ped integer
--- @param entity integer
--- @param boneindex1 integer
--- @param boneindex2 integer
--- @param x number
--- @param y number
--- @param z number
--- @param p7 number
--- @param p8 boolean
--- @param p9 boolean
--- @param p10 integer
natives.ped_n0Xe1Aadd0055D76603 = function(ped, entity, boneindex1, boneindex2, x, y, z, p7, p8, p9, p10)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(boneindex1) == 'integer', 'Argument boneindex1 must be of type integer.')
    assert(type(boneindex2) == 'integer', 'Argument boneindex2 must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p7) == 'number', 'Argument p7 must be of type number.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')
    assert(type(p9) == 'boolean', 'Argument p9 must be of type boolean.')
    assert(type(p10) == 'integer', 'Argument p10 must be of type integer.')

    local call = natives.invoke(0xE1AADD0055D76603, 'void', ped, entity, boneindex1, boneindex2, x, y, z, p7, p8, p9, p10)
end

-- _C*
--- @param ped integer
natives.ped_n0X5A1A929C8B729B4A = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x5A1A929C8B729B4A, 'void', ped)
end

-- _SET_PED_D*
--- @param ped integer
--- @param p1 boolean
natives.ped_n0X97A38B65Ebda3D50 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x97A38B65EBDA3D50, 'void', ped, p1)
end

-- _GET_PED_D*
--- @param ped integer
--- @return boolean
natives.ped_n0X06A10B4D7F50B0C3 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x06A10B4D7F50B0C3, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_n0X88A5564B19C15391 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x88A5564B19C15391, 'bool', ped)
    return call
end

--- @param ped integer
--- @return number
natives.ped_n0X354Ca4Dddeec397A = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x354CA4DDDEEC397A, 'int', ped)
    return call
end

-- METAPED_PLAYER_COMPONENTS_SET_META_TYPE_TO_BE_BYPASSED: Setting visibility
-- _SET_M* - _SET_P*
--- @param ped integer
--- @param p1 boolean
natives.ped_n0Xfea6126C34Df2532 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xFEA6126C34DF2532, 'void', ped, p1)
end

-- _SET_PED_P* - _SET_PED_R*
--- @param ped integer
--- @param p1 boolean
natives.ped_n0Xa967D6A8Ed2D713B = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xA967D6A8ED2D713B, 'void', ped, p1)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 userdata
--- @param p7 number
--- @param p8 userdata
natives.ped_applyPedBloodSpecific = function(ped, p1, p2, p3, p4, p5, p6, p7, p8)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'number', 'Argument p7 must be of type number.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')

    local call = natives.invoke(0xEF0D582CBF2D9B0F, 'void', ped, p1, p2, p3, p4, p5, p6, p7, p8)
end

--- @param ped integer
--- @param boneid integer
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 number
--- @param p7 number
--- @param p8 string
natives.ped_n0X58D32261Ae0F0843 = function(ped, boneid, p2, p3, p4, p5, p6, p7, p8)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(boneid) == 'integer', 'Argument boneid must be of type integer.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'number', 'Argument p6 must be of type number.')
    assert(type(p7) == 'number', 'Argument p7 must be of type number.')
    assert(type(p8) == 'string', 'Argument p8 must be of type string.')

    local call = natives.invoke(0x58D32261AE0F0843, 'void', ped, boneid, p2, p3, p4, p5, p6, p7, p8)
end

-- _SET_PED_F*
--- @param ped integer
--- @param p1 boolean
natives.ped_n0X735662994E60A710 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x735662994E60A710, 'void', ped, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.ped_n0X91Bab9E064F036Cd = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x91BAB9E064F036CD, 'void', p0, p1)
end

--- @param ped integer
--- @param p1 integer
--- @param p2 number
--- @param p3 number
--- @param p4 number
natives.ped_n0X897934E868Eddd6C = function(ped, p1, p2, p3, p4)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')

    local call = natives.invoke(0x897934E868EDDD6C, 'void', ped, p1, p2, p3, p4)
end

-- bloodFountainPressure: visible effect from 0.0 till 20.0
-- yaw: visible effect from -3.0 till 3.0
-- bloodFountainDirection: 1.0 left side, -1.0 right side
-- bloodFountainPulse: from 0.1 (low) till 1.0 (fast)
-- make blood fountain from your stomach: _SET_PED_ACTIVATE_WOUND_EFFECT(ped, unk, 2, 14411, 0.0, 0.1, 0.0, 0.0, 3.0, -1.0, 1.0)
--- @param ped integer
--- @param p1 integer
--- @param boneid integer
--- @param movewoundleftright number
--- @param bloodfountainpressure number
--- @param yaw number
--- @param bloodfountaindirection number
--- @param bloodfountainpulse number
--- @param p8 number
--- @param p9 number
natives.ped_setPedActivateWoundEffect = function(ped, p1, boneid, movewoundleftright, bloodfountainpressure, yaw, bloodfountaindirection, bloodfountainpulse, p8, p9)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(boneid) == 'integer', 'Argument boneid must be of type integer.')
    assert(type(movewoundleftright) == 'number', 'Argument movewoundleftright must be of type number.')
    assert(type(bloodfountainpressure) == 'number', 'Argument bloodfountainpressure must be of type number.')
    assert(type(yaw) == 'number', 'Argument yaw must be of type number.')
    assert(type(bloodfountaindirection) == 'number', 'Argument bloodfountaindirection must be of type number.')
    assert(type(bloodfountainpulse) == 'number', 'Argument bloodfountainpulse must be of type number.')
    assert(type(p8) == 'number', 'Argument p8 must be of type number.')
    assert(type(p9) == 'number', 'Argument p9 must be of type number.')

    local call = natives.invoke(0xFFD54D9FE71B966A, 'void', ped, p1, boneid, movewoundleftright, bloodfountainpressure, yaw, bloodfountaindirection, bloodfountainpulse, p8, p9)
end

-- Params: 0.0f to remove wound effects
--- @param ped integer
--- @param value number
natives.ped_updatePedWoundEffect = function(ped, value)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0x66B1CB778D911F49, 'void', ped, value)
end

-- https:--github.com/femga/rdr3_discoveries/blob/master/peds_customization/ped_decals.lua
--- @param ped integer
--- @param damagepack string
--- @param damage number
--- @param mult number
natives.ped_applyPedDamagePack = function(ped, damagepack, damage, mult)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(damagepack) == 'string', 'Argument damagepack must be of type string.')
    assert(type(damage) == 'number', 'Argument damage must be of type number.')
    assert(type(mult) == 'number', 'Argument mult must be of type number.')

    local call = natives.invoke(0x46DF918788CB093F, 'void', ped, damagepack, damage, mult)
end

--- @param ped integer
natives.ped_clearPedBloodDamage = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x8FE22675A5A45817, 'void', ped)
end

--- @param ped integer
--- @param p1 integer
natives.ped_clearPedBloodDamageByZone = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x56E3B78C5408D9F4, 'void', ped, p1)
end

--- @param ped integer
--- @param p1 integer
--- @param p2 string
natives.ped_clearPedDamageDecalByZone = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'string', 'Argument p2 must be of type string.')

    local call = natives.invoke(0x523C79AEEFCC4A2A, 'void', ped, p1, p2)
end

--- @param ped integer
--- @param p1 integer
natives.ped_clearPedBloodDamageFacial = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x7F5D88333EE8A86F, 'void', ped, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.ped_n0X34C11114887150Fd = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x34C11114887150FD, 'void', p0, p1)
end

-- METAPED_PLAYER_COMPONENTS_SET_META_TYPE_TO_BE_BYPASSED: Setting visibility
-- p1 is mostly 10
-- _CLEAR_PED_N* - _CLEAR_PED_W*
--- @param ped integer
--- @param p1 integer
natives.ped_n0Xd8544F6260F5F01E = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xD8544F6260F5F01E, 'void', ped, p1)
end

-- Washing player's face/hands now
-- _FA* - _FI*
--- @param ped integer
--- @param p1 integer
--- @param p2 string
--- @param p3 number
natives.ped_n0Xeb8886E1065654Cd = function(ped, p1, p2, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'string', 'Argument p2 must be of type string.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')

    local call = natives.invoke(0xEB8886E1065654CD, 'void', ped, p1, p2, p3)
end

--- @param ped integer
natives.ped_fadeAndDestroyPed = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x7043D0681285BA2D, 'void', ped)
end

--- @param ped integer
--- @return boolean
natives.ped_isPedQueuedForDeletion = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x8D9BFCE3352DE47F, 'bool', ped)
    return call
end

-- It clears the wetness of the selected Ped/Player. Clothes have to be wet to notice the difference.
--- @param ped integer
natives.ped_clearPedWetness = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x9C720776DAA43E7E, 'void', ped)
end

-- It adds the wetness level to the player clothing/outfit. As if player just got out from water surface.
--- @param ped integer
--- @param height number
natives.ped_setPedWetnessHeight = function(ped, height)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(height) == 'number', 'Argument height must be of type number.')

    local call = natives.invoke(0x44CB6447D2571AA0, 'void', ped, height)
end

-- _SET_PED_WETNESS*
--- @param ped integer
--- @param p1 number
natives.ped_n0Xf9Cff5Bb70E8A2Cb = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0xF9CFF5BB70E8A2CB, 'void', ped, p1)
end

-- combined with PED::SET_PED_WETNESS_HEIGHT(), this native makes the ped drenched in water up to the height specified in the other function
--- @param ped integer
natives.ped_setPedWetnessEnabledThisFrame = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xB5485E4907B53019, 'void', ped)
end

-- Washing player's face/hands now
-- _CLEAR_PED_E* - _CLEAR_PED_L*
--- @param ped integer
natives.ped_n0Xa7A806677F8De138 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xA7A806677F8DE138, 'void', ped)
end

--- @param p0 userdata
natives.ped_n0Xa064Bbabb064446F = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xA064BBABB064446F, 'void', p0)
end

--- @param ped integer
natives.ped_clearPedEnvDirt = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x6585D955A68452A5, 'void', ped)
end

--- @param ped integer
--- @param sweat number
natives.ped_setPedSweat = function(ped, sweat)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(sweat) == 'number', 'Argument sweat must be of type number.')

    local call = natives.invoke(0x27B0405F59637D1F, 'void', ped, sweat)
end

--- @param ped integer
natives.ped_clearPedDecorations = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x0E5173C163976E38, 'void', ped)
end

-- Despite this function's name, it simply returns whether the specified handle is a Ped.
--- @param ped integer
--- @return boolean
natives.ped_wasPedSkeletonUpdated = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x11B499C1E0FF8559, 'bool', ped)
    return call
end

-- Gets the position of the specified bone of the specified ped.
-- 
-- ped: The ped to get the position of a bone from.
-- boneId: The ID of the bone to get the position from. This is NOT the index.
-- offsetX: The X-component of the offset to add to the position relative to the bone's rotation.
-- offsetY: The Y-component of the offset to add to the position relative to the bone's rotation.
-- offsetZ: The Z-component of the offset to add to the position relative to the bone's rotation.
--- @param ped integer
--- @param boneid integer
--- @param offsetx number
--- @param offsety number
--- @param offsetz number
--- @return number, number, number
natives.ped_getPedBoneCoords = function(ped, boneid, offsetx, offsety, offsetz)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(boneid) == 'integer', 'Argument boneid must be of type integer.')
    assert(type(offsetx) == 'number', 'Argument offsetx must be of type number.')
    assert(type(offsety) == 'number', 'Argument offsety must be of type number.')
    assert(type(offsetz) == 'number', 'Argument offsetz must be of type number.')

    local call = natives.invoke(0x17C07FC640E86B4E, 'vector3', ped, boneid, offsetx, offsety, offsetz)
    return call.x, call.y, call.z
end

-- blockingFlags: https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eScenarioBlockingFlags
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param p6 boolean
--- @param blockingflags integer
--- @return number
natives.ped_addScenarioBlockingArea = function(x1, y1, z1, x2, y2, z2, p6, blockingflags)
    assert(type(x1) == 'number', 'Argument x1 must be of type number.')
    assert(type(y1) == 'number', 'Argument y1 must be of type number.')
    assert(type(z1) == 'number', 'Argument z1 must be of type number.')
    assert(type(x2) == 'number', 'Argument x2 must be of type number.')
    assert(type(y2) == 'number', 'Argument y2 must be of type number.')
    assert(type(z2) == 'number', 'Argument z2 must be of type number.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')
    assert(type(blockingflags) == 'integer', 'Argument blockingflags must be of type integer.')

    local call = natives.invoke(0x1B5C85C612E5256E, 'int', x1, y1, z1, x2, y2, z2, p6, blockingflags)
    return call
end

natives.ped_removeScenarioBlockingAreas = function()

    local call = natives.invoke(0xD37401D78A929A49, 'void')
end

--- @param p0 userdata
--- @param p1 boolean
natives.ped_removeScenarioBlockingArea = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x31D16B74C6E29D66, 'void', p0, p1)
end

-- flag: see ADD_SCENARIO_BLOCKING_AREA
--- @param volume integer
--- @param p1 boolean
--- @param flag integer
--- @return any
natives.ped_addScenarioBlockingVolume = function(volume, p1, flag)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')

    local call = natives.invoke(0x4C39C95AE5DB1329, 'any', volume, p1, flag)
    return call
end

--- @param p0 userdata
--- @return any
natives.ped_n0X6F46F8Acb44C4Fc1 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x6F46F8ACB44C4FC1, 'any', p0)
    return call
end

--- @param p0 userdata
--- @return boolean
natives.ped_isScenarioBlockingAreaValid = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x91A5F9CBEBB9D936, 'bool', p0)
    return call
end

-- Equivalent to IS_PED_USING_SCENARIO from V but takes a hash instead of a string.
--- @param ped integer
--- @param scenariohash integer
--- @return boolean
natives.ped_isPedUsingScenarioHash = function(ped, scenariohash)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(scenariohash) == 'integer', 'Argument scenariohash must be of type integer.')

    local call = natives.invoke(0x34D6AC1157C8226C, 'bool', ped, scenariohash)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedUsingAnyScenario = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x57AB4A3080F85143, 'bool', ped)
    return call
end

--- @param ped integer
--- @param scenario integer
--- @return boolean
natives.ped_isPedUsingThisScenario = function(ped, scenario)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(scenario) == 'integer', 'Argument scenario must be of type integer.')

    local call = natives.invoke(0x9C54041BB66BCF9E, 'bool', ped, scenario)
    return call
end

-- p2 is always 0, p3 is always 0, p4 is always 1
--- @param ped integer
--- @param scenario integer
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @return boolean
natives.ped_canPedUseScenarioPoint = function(ped, scenario, p2, p3, p4)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(scenario) == 'integer', 'Argument scenario must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0xAB643407D0B26F07, 'bool', ped, scenario, p2, p3, p4)
    return call
end

-- _CAN_PED_SEE* - _CAN_PED_USE_(SCENARIO_HASH?)*
--- @param ped integer
--- @param p1 integer
--- @param p2 integer
--- @return boolean
natives.ped_n0X1148F706Cf4Ebdda = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x1148F706CF4EBDDA, 'bool', ped, p1, p2)
    return call
end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @return boolean
natives.ped_setPedPanicExitScenario = function(ped, x, y, z)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0xFE07FF6495D52E2A, 'bool', ped, x, y, z)
    return call
end

-- If toggle is true, when the ped is using a scenario he will stop it and become scared
-- If toggle is false, the ped will not be scared anymore and continue his scenario
-- 
-- Old name: _SET_PED_SCARED_WHEN_USING_SCENARIO
--- @param ped integer
--- @param toggle boolean
natives.ped_toggleScenarioPedCowerInPlace = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x9A77DFD295E29B09, 'void', ped, toggle)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
natives.ped_n0Xd8Ceeed54C672B5D = function(p0, p1, p2, p3, p4, p5, p6)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0xD8CEEED54C672B5D, 'void', p0, p1, p2, p3, p4, p5, p6)
end

-- Old name: _SET_PED_SHOULD_PLAY_DIRECTED_SCENARIO_EXIT
--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @return boolean
natives.ped_setPedShouldPlayDirectedNormalScenarioExit = function(ped, x, y, z)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0xEC6935EBE0847B90, 'bool', ped, x, y, z)
    return call
end

--- @param ped integer
natives.ped_setPedShouldPlayNormalScenarioExit = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xA3A9299C4F2ADB98, 'void', ped)
end

--- @param ped integer
natives.ped_setPedShouldPlayImmediateScenarioExit = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xF1C03A5352243A30, 'void', ped)
end

-- lookIntensity:
-- 0 - REACT_LOOK_NONE
-- 1 - REACT_LOOK_LOW
-- 2 - REACT_LOOK_MEDIUM
-- 3 - REACT_LOOK_HIGH
--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param lookintensity integer
--- @return boolean
natives.ped_setPedShouldPlayFleeScenarioExit = function(ped, x, y, z, lookintensity)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(lookintensity) == 'integer', 'Argument lookintensity must be of type integer.')

    local call = natives.invoke(0xEEED8FAFEC331A70, 'bool', ped, x, y, z, lookintensity)
    return call
end

-- lookIntensity: see SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT
--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param lookintensity integer
--- @return boolean
natives.ped_setPedShouldPlayCombatScenarioExit = function(ped, x, y, z, lookintensity)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(lookintensity) == 'integer', 'Argument lookintensity must be of type integer.')

    local call = natives.invoke(0x802092B07E3B1EEA, 'bool', ped, x, y, z, lookintensity)
    return call
end

-- lookIntensity: see SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT
--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param lookintensity integer
--- @param p5 boolean
--- @return boolean
natives.ped_setPedShouldPlayEmotionalScenarioExit = function(ped, x, y, z, lookintensity, p5)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(lookintensity) == 'integer', 'Argument lookintensity must be of type integer.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')

    local call = natives.invoke(0x62FDAD5E01D2DD47, 'bool', ped, x, y, z, lookintensity, p5)
    return call
end

-- lookIntensity: see SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT
--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param lookintensity integer
--- @param p5 boolean
--- @return boolean
natives.ped_setPedShouldPlayQuickScenarioExit = function(ped, x, y, z, lookintensity, p5)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(lookintensity) == 'integer', 'Argument lookintensity must be of type integer.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')

    local call = natives.invoke(0x463803429297117C, 'bool', ped, x, y, z, lookintensity, p5)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_n0Xf9331B3A314Eb49D = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xF9331B3A314EB49D, 'bool', ped)
    return call
end

--- @param p0 userdata
natives.ped_n0Xe735A7Da22E88359 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xE735A7DA22E88359, 'void', p0)
end

--- @param p0 userdata
--- @return any
natives.ped_n0X82Cb0F3F0C7785E5 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x82CB0F3F0C7785E5, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.ped_n0Xca95C156C14B2054 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xCA95C156C14B2054, 'void', p0, p1)
end

--- @param ped integer
--- @param animname string
--- @param animdict string
natives.ped_setFacialIdleAnimOverride = function(ped, animname, animdict)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(animname) == 'string', 'Argument animname must be of type string.')
    assert(type(animdict) == 'string', 'Argument animdict must be of type string.')

    local call = natives.invoke(0xFFC24B988B938B38, 'void', ped, animname, animdict)
end

--- @param ped integer
natives.ped_clearFacialIdleAnimOverride = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x726256CC1EEB182F, 'void', ped)
end

-- mood: https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/fwFacialAnimRequest__Mood
-- Params: p2 = 6 in R* Scripts
--- @param ped integer
--- @param mood integer
--- @param p2 integer
natives.ped_requestPedFacialMoodThisFrame = function(ped, mood, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(mood) == 'integer', 'Argument mood must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x8B3B71C80A29A4BB, 'void', ped, mood, p2)
end

--- @param p0 userdata
--- @param p1 userdata
natives.ped_n0Xd2F0Fe8805D91647 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xD2F0FE8805D91647, 'void', p0, p1)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
natives.ped_setPedCanPlayGestureAnims = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xBAF20C5432058024, 'void', ped, p1, p2)
end

-- Only used in R* Script net_moonshine_property
-- _A* - _B*
--- @param ped integer
natives.ped_n0X7Edb3C766B0D073F = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x7EDB3C766B0D073F, 'void', ped)
end

--- @param ped integer
--- @param toggle boolean
natives.ped_setPedCanPlayAmbientAnims = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x6373D1349925A70E, 'void', ped, toggle)
end

--- @param ped integer
--- @param toggle boolean
natives.ped_setPedCanPlayAmbientBaseAnims = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x0EB0585D15254740, 'void', ped, toggle)
end

-- Only used in R* Script shop_harriet
-- _SET_PED_F*
--- @param ped integer
--- @param p1 boolean
natives.ped_n0X4F63433Ce3C08230 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x4F63433CE3C08230, 'void', ped, p1)
end

--- @param ped integer
--- @param toggle boolean
natives.ped_setPedCanArmIk = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x6C3B4D6D13B4C841, 'void', ped, toggle)
end

-- _SET_PED_CAN_(?)_IK*
--- @param ped integer
--- @param toggle boolean
natives.ped_setPedCanUnkBodypartIk = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xEE9DF765990E8D1D, 'void', ped, toggle)
end

--- @param ped integer
--- @param toggle boolean
natives.ped_setPedCanHeadIk = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xC11C18092C5530DC, 'void', ped, toggle)
end

--- @param ped integer
--- @param toggle boolean
natives.ped_setPedCanLegIk = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x73518ECE2485412B, 'void', ped, toggle)
end

--- @param ped integer
--- @param toggle boolean
natives.ped_setPedCanTorsoIk = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xF2B7106D37947CE0, 'void', ped, toggle)
end

--- @param ped integer
--- @param toggle boolean
natives.ped_setPedCanTorsoReactIk = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xF5846EDB26A98A24, 'void', ped, toggle)
end

--- @param ped integer
--- @param toggle boolean
natives.ped_setPedCanTorsoVehicleIk = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x6647C5F6F5792496, 'void', ped, toggle)
end

--- @param ped integer
--- @param toggle boolean
natives.ped_setPedCanUseAutoConversationLookat = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xEC4686EC06434678, 'void', ped, toggle)
end

--- @param ped1 integer
--- @param ped2 integer
--- @return boolean
natives.ped_isPedHeadtrackingPed = function(ped1, ped2)
    assert(type(ped1) == 'integer', 'Argument ped1 must be of type integer.')
    assert(type(ped2) == 'integer', 'Argument ped2 must be of type integer.')

    local call = natives.invoke(0x5CD3CB88A7F8850D, 'bool', ped1, ped2)
    return call
end

--- @param ped integer
--- @param entity integer
--- @return boolean
natives.ped_isPedHeadtrackingEntity = function(ped, entity)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x813A0A7C9D2E831F, 'bool', ped, entity)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.ped_disableAmbientLookAtRequests = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x80038740C96AD17F, 'void', p0, p1)
end

--- @param ped integer
--- @param p1 integer
natives.ped_disableAllLookAtRequests = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xE1965A380342BE1F, 'void', ped, p1)
end

-- _SET_PED_R* - _SET_PED_S*
--- @param ped integer
--- @param p1 boolean
natives.ped_n0Xcd9E5F94A2F38683 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xCD9E5F94A2F38683, 'void', ped, p1)
end

-- Old name: SET_PED_CLOTH_PACKAGE_INDEX
--- @param ped integer
--- @param p1 boolean
natives.ped_setPedClothPinFrames = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x78C4E9961DB3EB5B, 'void', ped, p1)
end

-- _SET_PED_CA* - _SET_PED_CO*
--- @param ped integer
--- @param p1 integer
natives.ped_n0X1D4636C90Bbefacb = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x1D4636C90BBEFACB, 'void', ped, p1)
end

-- _ADD_*
--- @param ped integer
natives.ped_n0Xef371232Bc6053E1 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xEF371232BC6053E1, 'void', ped)
end

-- _SET_PED_*
--- @param ped integer
--- @param p1 boolean
natives.ped_n0X86F0B6730C32Ac14 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x86F0B6730C32AC14, 'void', ped, p1)
end

-- _ATTACH_*
--- @param ped integer
--- @param ropeid integer
natives.ped_n0X8101Ba1C0B462412 = function(ped, ropeid)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')

    local call = natives.invoke(0x8101BA1C0B462412, 'void', ped, ropeid)
end

-- flagId: https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/ePedScriptConfigFlags
-- https:--alloc8or.re/rdr3/doc/enums/ePedScriptConfigFlags.txt
-- https:--github.com/femga/rdr3_discoveries/tree/master/AI/CPED_CONFIG_FLAGS
--- @param ped integer
--- @param flagid integer
--- @param value boolean
natives.ped_setPedConfigFlag = function(ped, flagid, value)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(flagid) == 'integer', 'Argument flagid must be of type integer.')
    assert(type(value) == 'boolean', 'Argument value must be of type boolean.')

    local call = natives.invoke(0x1913FE4CBF41C463, 'void', ped, flagid, value)
end

-- Needs to be called every frame
-- 
-- flagid:https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/ePedScriptResetFlags
-- https:--github.com/femga/rdr3_discoveries/tree/master/AI/CPED_RESET_FLAGS
--- @param ped integer
--- @param flagid integer
--- @param doreset boolean
natives.ped_setPedResetFlag = function(ped, flagid, doreset)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(flagid) == 'integer', 'Argument flagid must be of type integer.')
    assert(type(doreset) == 'boolean', 'Argument doreset must be of type boolean.')

    local call = natives.invoke(0xC1E8A365BF3B29F2, 'void', ped, flagid, doreset)
end

-- flagId: see SET_PED_CONFIG_FLAG
--- @param ped integer
--- @param flagid integer
--- @param p2 boolean
--- @return boolean
natives.ped_getPedConfigFlag = function(ped, flagid, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(flagid) == 'integer', 'Argument flagid must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x7EE53118C892B513, 'bool', ped, flagid, p2)
    return call
end

--- @param ped integer
--- @param flagid integer
--- @return boolean
natives.ped_getPedResetFlag = function(ped, flagid)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(flagid) == 'integer', 'Argument flagid must be of type integer.')

    local call = natives.invoke(0xAF9E59B1B1FBF2A0, 'bool', ped, flagid)
    return call
end

--- @param p0 userdata
natives.ped_n0Xc6981Aff6D2A71C2 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xC6981AFF6D2A71C2, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
natives.ped_n0Xe0Fe107Ab174D64A = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xE0FE107AB174D64A, 'void', p0, p1)
end

--- @param ped integer
--- @param index integer
natives.ped_setPedGroupMemberPassengerIndex = function(ped, index)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0x0BDDB8D9EC6BCF3C, 'void', ped, index)
end

-- Presumably returns the Entity that the Ped is currently diving out of the way of.
--- @param ped integer
--- @param evadingentity integer
--- @return boolean
natives.ped_isPedEvasiveDiving = function(ped, evadingentity)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(evadingentity) == 'integer', 'Argument evadingentity must be of type integer.')

    local call = natives.invoke(0x414641C26E105898, 'bool', ped, evadingentity)
    return call
end

-- Triggers a gunshot
-- Params: p5 = -1 in R* Scripts
--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param p4 integer
--- @param p5 number
--- @param p6 integer
--- @param p7 number
--- @return any
natives.ped_shootTriggerAtCoords = function(ped, x, y, z, p4, p5, p6, p7)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'integer', 'Argument p6 must be of type integer.')
    assert(type(p7) == 'number', 'Argument p7 must be of type number.')

    local call = natives.invoke(0x4C57F27D1554E6B0, 'any', ped, x, y, z, p4, p5, p6, p7)
    return call
end

--- @param model integer
--- @return boolean
natives.ped_isThisModelAHorse = function(model)
    assert(type(model) == 'integer', 'Argument model must be of type integer.')

    local call = natives.invoke(0x772A1969F649E902, 'bool', model)
    return call
end

--- @param model integer
--- @param toggle boolean
natives.ped_setPedModelIsSuppressed = function(model, toggle)
    assert(type(model) == 'integer', 'Argument model must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xE163A4BCE4DE6F11, 'void', model, toggle)
end

--- @param model integer
--- @return boolean
natives.ped_isPedModelSuppressed = function(model)
    assert(type(model) == 'integer', 'Argument model must be of type integer.')

    local call = natives.invoke(0xAA9F048DCF69B6DC, 'bool', model)
    return call
end

--- @param ped integer
--- @param p1 boolean
natives.ped_n0X7Abbd9E449E0Db00 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x7ABBD9E449E0DB00, 'void', ped, p1)
end

-- Disables being able to kick move ped.
--- @param ped integer
--- @param disable boolean
natives.ped_setPedDisableKickMove = function(ped, disable)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(disable) == 'boolean', 'Argument disable must be of type boolean.')

    local call = natives.invoke(0xADD31A5C7A5FAA73, 'void', ped, disable)
end

--- @param ped integer
--- @param toggle boolean
natives.ped_setPedCanRagdollFromPlayerImpact = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xDF993EE5E90ABA25, 'void', ped, toggle)
end

--- @param p0 userdata
natives.ped_n0Xe6Cb36F43A95D75F = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xE6CB36F43A95D75F, 'void', p0)
end

--- @param ped integer
--- @param mode integer
natives.ped_setPedLegIkMode = function(ped, mode)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(mode) == 'integer', 'Argument mode must be of type integer.')

    local call = natives.invoke(0xC396F5B86FF9FEBD, 'void', ped, mode)
end

-- If returned true: There are enemy peds near friendly turn in ped. Going to aggro.
-- If returned false: Moving back to idle as there aren't any remaining enemy peds near ped
-- _IS_PED_IN_*
--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param p5 boolean
--- @return boolean
natives.ped_isPedInPoint = function(ped, x, y, z, radius, p5)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')

    local call = natives.invoke(0x078076AB50FB117F, 'bool', ped, x, y, z, radius, p5)
    return call
end

-- SET_PED_CAN_*
--- @param ped integer
--- @param toggle boolean
natives.ped_setPedCanBeLassoed = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xFD6943B6DF77E449, 'void', ped, toggle)
end

-- 0 - Stationary (Will just stand in place)
-- 1 - Defensive (Will try to find cover and very likely to blind fire)
-- 2 - Offensive (Will attempt to charge at enemy but take cover as well)
-- 3 - Suicidal Offensive (Will try to flank enemy in a suicidal attack)
--- @param ped integer
--- @param combatmovement integer
natives.ped_setPedCombatMovement = function(ped, combatmovement)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(combatmovement) == 'integer', 'Argument combatmovement must be of type integer.')

    local call = natives.invoke(0x4D9CA1009AFBD057, 'void', ped, combatmovement)
end

--- @param ped integer
--- @return number
natives.ped_getPedCombatMovement = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xDEA92412FCAEB3F5, 'int', ped)
    return call
end

-- _SET_PED_COMBAT_R - _SET_PED_C*
--- @param ped integer
--- @param p1 integer
natives.ped_n0X815C0074A1Bc0D93 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x815C0074A1BC0D93, 'void', ped, p1)
end

-- _GET_PED_COMBAT_M* - _GET_PED_C*
--- @param ped integer
--- @return number
natives.ped_n0Xffde295662405B25 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xFFDE295662405B25, 'int', ped)
    return call
end

-- abilityLevel:
-- enum eCombatAbilityLevel
-- {
-- 	CAL_POOR,
-- 	CAL_AVERAGE,
-- 	CAL_PROFESSIONAL
-- };
--- @param ped integer
--- @param abilitylevel integer
natives.ped_setPedCombatAbility = function(ped, abilitylevel)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(abilitylevel) == 'integer', 'Argument abilitylevel must be of type integer.')

    local call = natives.invoke(0xC7622C0D36B2FDA8, 'void', ped, abilitylevel)
end

-- range:
-- enum eCombatRange
-- {
-- 	CR_NEAR,
-- 	CR_MEDIUM,
-- 	CR_FAR,
-- 	CR_VERY_FAR
-- };
--- @param ped integer
--- @param range integer
natives.ped_setPedCombatRange = function(ped, range)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(range) == 'integer', 'Argument range must be of type integer.')

    local call = natives.invoke(0x3C606747B23E497B, 'void', ped, range)
end

-- attributeIndex: https:--alloc8or.re/rdr3/doc/enums/eCombatAttribute.txt
-- https:--github.com/femga/rdr3_discoveries/tree/master/AI/COMBAT_ATTRIBUTES
--- @param ped integer
--- @param attributeindex integer
--- @param enabled boolean
natives.ped_setPedCombatAttributes = function(ped, attributeindex, enabled)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(attributeindex) == 'integer', 'Argument attributeindex must be of type integer.')
    assert(type(enabled) == 'boolean', 'Argument enabled must be of type boolean.')

    local call = natives.invoke(0x9F7794730795E019, 'void', ped, attributeindex, enabled)
end

--- @param ped integer
--- @param attributeindex integer
--- @return boolean
natives.ped_getPedCombatAttribute = function(ped, attributeindex)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(attributeindex) == 'integer', 'Argument attributeindex must be of type integer.')

    local call = natives.invoke(0xCC2B20596E29E4E3, 'bool', ped, attributeindex)
    return call
end

-- Hashes: GUARD, COMBAT_ANIMAL, LAW, LAW_SHERIFF
-- _SET_PED_COMBAT_A* - _SET_PED_COMBAT_M*
--- @param ped integer
--- @param p1 integer
natives.ped_setPedCombatAttributeHash = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xBD75500141E4725C, 'void', ped, p1)
end

-- TLR_ExitTask = 0,
-- TLR_NeverLoseTarget,
-- TLR_SearchForTarget
--- @param ped integer
--- @param responsetype integer
natives.ped_setPedTargetLossResponse = function(ped, responsetype)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(responsetype) == 'integer', 'Argument responsetype must be of type integer.')

    local call = natives.invoke(0x0703B9079823DA4A, 'void', ped, responsetype)
end

--- @param p0 userdata
--- @param p1 userdata
natives.ped_n0X0A4618Ffd517E24D = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x0A4618FFD517E24D, 'void', p0, p1)
end

-- _SET_PED_MO*
--- @param ped integer
--- @param p1 integer
natives.ped_n0X712B2C2B2471B493 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x712B2C2B2471B493, 'void', ped, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.ped_n0X00B380Ff2Df6Ab7A = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x00B380FF2DF6AB7A, 'void', p0, p1)
end

-- https:--github.com/femga/rdr3_discoveries/tree/master/AI/COMBAT_STYLES
-- Params: p2 is usually 1, sometimes 0 or 2
-- duration in seconds, -1.0 = forever
--- @param ped integer
--- @param combatstylehash integer
--- @param p2 integer
--- @param duration number
natives.ped_setPedCombatStyle = function(ped, combatstylehash, p2, duration)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(combatstylehash) == 'integer', 'Argument combatstylehash must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(duration) == 'number', 'Argument duration must be of type number.')

    local call = natives.invoke(0x8ACC0506743A8A5C, 'void', ped, combatstylehash, p2, duration)
end

-- Params: p1 = 1 in R* Scripts
--- @param ped integer
--- @param p1 integer
natives.ped_clearPedCombatStyle = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x78815FC52832B690, 'void', ped, p1)
end

-- duration in seconds, -1.0 = forever
--- @param ped integer
--- @param combatstylemodhash integer
--- @param duration number
natives.ped_setPedCombatStyleMod = function(ped, combatstylemodhash, duration)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(combatstylemodhash) == 'integer', 'Argument combatstylemodhash must be of type integer.')
    assert(type(duration) == 'number', 'Argument duration must be of type number.')

    local call = natives.invoke(0x8B1E8E35A6E814EA, 'void', ped, combatstylemodhash, duration)
end

-- _CLEAR_PED_COMBAT_*
--- @param ped integer
--- @param combatstylemodhash integer
natives.ped_clearPedCombatStyleMod = function(ped, combatstylemodhash)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(combatstylemodhash) == 'integer', 'Argument combatstylemodhash must be of type integer.')

    local call = natives.invoke(0x1FA132CBCD7CB239, 'void', ped, combatstylemodhash)
end

-- _IS_PED_B* - _IS_PED_C*
--- @param ped integer
--- @return boolean
natives.ped_n0X5Bf0B9D9A8E227A0 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x5BF0B9D9A8E227A0, 'bool', ped)
    return call
end

-- _SET_PED_M*
--- @param ped integer
--- @param p1 integer
natives.ped_n0X642720D8D69328B6 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x642720D8D69328B6, 'void', ped, p1)
end

--- @param ped integer
--- @param p1 integer
--- @param p2 integer
--- @return boolean
natives.ped_isPedPerformingMeleeAction = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0xDCCA191DF9980FD7, 'bool', ped, p1, p2)
    return call
end

-- _CAN_PED_*
--- @param ped1 integer
--- @param ped2 integer
--- @param p2 integer
--- @return boolean
natives.ped_n0X99Df2639Da76C1Dc = function(ped1, ped2, p2)
    assert(type(ped1) == 'integer', 'Argument ped1 must be of type integer.')
    assert(type(ped2) == 'integer', 'Argument ped2 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x99DF2639DA76C1DC, 'bool', ped1, ped2, p2)
    return call
end

--- @param ped integer
--- @return number
natives.ped_getPedMeleeActionPhase = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x6127F25ED21C533C, 'float', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedBeingStealthKilled = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x863B23EFDE9C5DF2, 'bool', ped)
    return call
end

--- @param ped integer
--- @return number
natives.ped_getMeleeTargetForPed = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x18A3E9EE1297FD39, 'int', ped)
    return call
end

--- @param p0 userdata
natives.ped_n0Xdedbed3020Da49Dc = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xDEDBED3020DA49DC, 'void', p0)
end

--- @param p0 userdata
natives.ped_n0Xa405Bf9F01960C16 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xA405BF9F01960C16, 'void', p0)
end

--- @param ped integer
--- @return number
natives.ped_getPedBrawlingStyle = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xEC6B59BE445FEC51, 'integer', ped)
    return call
end

-- brawlingStyle:
-- enum eBrawlingStyle : Hash
-- {
-- 	BS_AI = 0x802C604D,
-- 	BS_AI_BARBRAWL = 0x4FF5F0C7,
-- 	BS_AI_DEFENSIVE = 0xD888F2FD,
-- 	BS_AI_MOONSHINE_BARBRAWL = 0xA01B433A,
-- 	BS_ALLIGATOR = 0x7A5548ED,
-- 	BS_ALLIGATOR_LARGE = 0x368EC7CB,
-- 	BS_ALLY = 0x69C76C14,
-- 	BS_ANIMAL = 0xD777C754,
-- 	BS_BADGER = 0x7E7C3F53,
-- 	BS_BEAR = 0x0BC66E35,
-- 	BS_BEAVER = 0x4E313783,
-- 	BS_BOAR = 0x176A5831,
-- 	BS_BOUNTY_HUNTER = 0x3900654C,
-- 	BS_BRUISER = 0x4514DB61,
-- 	BS_BULL = 0x4E50C5D2,
-- 	BS_COUGAR = 0x9DAA7CCB,
-- 	BS_COW = 0xB0E91295,
-- 	BS_COYOTE = 0xA448EB69,
-- 	BS_DEER = 0xA781E6B3,
-- 	BS_DOG = 0x5A4155C4,
-- 	BS_ELK = 0x408697F0,
-- 	BS_FEMALE = 0x6A3BB2C2,
-- 	BS_FEMALE_STRONG = 0x4DAFDD84,
-- 	BS_GANGUP = 0xD0CECFF2,
-- 	BS_GOAT = 0x078E649F,
-- 	BS_HORSE = 0xF6B775F3,
-- 	BS_MICAH_FINALE = 0x1F0BB27A,
-- 	BS_MOOSE = 0x968917AB,
-- 	BS_MUSKRAT = 0x1EDC33AC,
-- 	BS_NO_MELEE = 0x25B5F931,
-- 	BS_PIG = 0x22EAD110,
-- 	BS_PLAYER = 0x78BAEF07,
-- 	BS_PLAYER_FINALE = 0xF9E77D2D,
-- 	BS_PLAYER_MOONSHINER = 0x687BF19F,
-- 	BS_PLAYER_WINTER1 = 0x3C6A802F,
-- 	BS_QUICK = 0xC4CABB1B,
-- 	BS_RACCOON = 0x505F8917,
-- 	BS_SHEEP = 0x6827CCCF,
-- 	BS_SNAKE = 0x82BEBC4B,
-- 	BS_TIMID = 0x431AEF77,
-- 	BS_WOLF = 0xA8F023D4
-- };
--- @param ped integer
--- @param brawlingstyle integer
natives.ped_setPedBrawlingStyle = function(ped, brawlingstyle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(brawlingstyle) == 'integer', 'Argument brawlingstyle must be of type integer.')

    local call = natives.invoke(0x8BA83CC4288CD56D, 'void', ped, brawlingstyle)
end

-- _RESET_PED_*
--- @param ped integer
natives.ped_n0X9D8Dfe2De9Cb4Dfc = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x9D8DFE2DE9CB4DFC, 'void', ped)
end

-- _SET_PED_M*
--- @param ped integer
--- @param grapple integer
--- @return any
natives.ped_n0Xc48Af420371C7407 = function(ped, grapple)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(grapple) == 'integer', 'Argument grapple must be of type integer.')

    local call = natives.invoke(0xC48AF420371C7407, 'any', ped, grapple)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.ped_n0X5Efa8A3D8A60D662 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x5EFA8A3D8A60D662, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @return any
natives.ped_n0X242Edf85D4E87B65 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x242EDF85D4E87B65, 'any', p0)
    return call
end

--- @param ped integer
--- @param behaviour integer
natives.ped_setPedCombatBehaviour = function(ped, behaviour)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(behaviour) == 'integer', 'Argument behaviour must be of type integer.')

    local call = natives.invoke(0x9238A3D970BBB0A9, 'void', ped, behaviour)
end

--- @param p0 userdata
natives.ped_n0X9A4Ac116Cc1Eee14 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x9A4AC116CC1EEE14, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
natives.ped_n0Xe20027B414Bfe6C7 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xE20027B414BFE6C7, 'void', p0, p1)
end

-- NET_FETCH_CLIENT_UPDATE_PED_FIGHT_PROFICIENCY: Changing parry multiplier for ped
--- @param ped integer
--- @param p1 number
natives.ped_setPedBeatMultiplier = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x6DBF2D78709AD70B, 'void', ped, p1)
end

-- https:--github.com/femga/rdr3_discoveries/tree/master/AI/COMBAT_ACTION_DISABLE_FLAGS
--- @param ped integer
--- @param actiondisableflag integer
natives.ped_setPedActionDisableFlag = function(ped, actiondisableflag)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(actiondisableflag) == 'integer', 'Argument actiondisableflag must be of type integer.')

    local call = natives.invoke(0xB8DE69D9473B7593, 'void', ped, actiondisableflag)
end

--- @param ped integer
--- @param actiondisableflag integer
natives.ped_clearPedActionDisableFlag = function(ped, actiondisableflag)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(actiondisableflag) == 'integer', 'Argument actiondisableflag must be of type integer.')

    local call = natives.invoke(0x949B2F9ED2917F5D, 'void', ped, actiondisableflag)
end

--- @param ped integer
--- @param actiondisableflag integer
--- @return boolean
natives.ped_isPedActionDisableFlagEnabled = function(ped, actiondisableflag)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(actiondisableflag) == 'integer', 'Argument actiondisableflag must be of type integer.')

    local call = natives.invoke(0xB346C85D49CC998E, 'bool', ped, actiondisableflag)
    return call
end

--- @param ped integer
--- @param actiondisableflag integer
natives.ped_setPedTargetActionDisableFlag = function(ped, actiondisableflag)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(actiondisableflag) == 'integer', 'Argument actiondisableflag must be of type integer.')

    local call = natives.invoke(0xC163DAC52AC975D3, 'void', ped, actiondisableflag)
end

--- @param ped integer
--- @param actiondisableflag integer
natives.ped_clearPedTargetActionDisableFlag = function(ped, actiondisableflag)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(actiondisableflag) == 'integer', 'Argument actiondisableflag must be of type integer.')

    local call = natives.invoke(0xBBF6D1D07C02D00A, 'void', ped, actiondisableflag)
end

--- @param ped integer
--- @param actiondisableflag integer
--- @return boolean
natives.ped_isPedTargetActionDisableFlagEnabled = function(ped, actiondisableflag)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(actiondisableflag) == 'integer', 'Argument actiondisableflag must be of type integer.')

    local call = natives.invoke(0x02AA2096FE00F3E1, 'bool', ped, actiondisableflag)
    return call
end

-- _SET_PED_M*
--- @param ped integer
--- @param p1 integer
natives.ped_n0X57F35552E771Be9D = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x57F35552E771BE9D, 'void', ped, p1)
end

-- _CLEAR_PED_M*
--- @param ped integer
--- @param p1 integer
natives.ped_n0X7C10221Ce718Aa72 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x7C10221CE718AA72, 'void', ped, p1)
end

-- _IS_PED_M*
--- @param ped integer
--- @param p1 integer
--- @return boolean
natives.ped_n0X0D3B1568917Ebda0 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x0D3B1568917EBDA0, 'bool', ped, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.ped_n0X29F3539189D3E277 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x29F3539189D3E277, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.ped_n0Xe9E06Ea514A69061 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xE9E06EA514A69061, 'void', p0, p1)
end

--- @param ped integer
--- @param writhingduration1 number
--- @param writhingduration2 number
--- @param p3 integer
natives.ped_setPedWrithingDuration = function(ped, writhingduration1, writhingduration2, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(writhingduration1) == 'number', 'Argument writhingduration1 must be of type number.')
    assert(type(writhingduration2) == 'number', 'Argument writhingduration2 must be of type number.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')

    local call = natives.invoke(0x4DB9D03AC4E1FA84, 'void', ped, writhingduration1, writhingduration2, p3)
end

-- normalized / non normalized
-- 0.0        / 1000.0         STARTED IN WRITHE STAGE
-- 1.0        / 0.0            END OF WRITHE, DEAD
-- -1.0                        DEAD
-- 
-- Returns some value from AI task 562 (unknown).
--- @param ped integer
--- @param normalized boolean
--- @return number
natives.ped_getPedRemainingRevivalTime = function(ped, normalized)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(normalized) == 'boolean', 'Argument normalized must be of type boolean.')

    local call = natives.invoke(0xEBE89623EB861271, 'float', ped, normalized)
    return call
end

--- @param ped integer
--- @param toggle boolean
natives.ped_setPausePedWritheBleedout = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x925A160133003AC6, 'void', ped, toggle)
end

-- _GET_IS_PED_(BLEEDING_OUT?)*
--- @param ped integer
--- @return boolean
natives.ped_n0X12Eb4E31F092C9B3 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x12EB4E31F092C9B3, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_getPedIsGrappling = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x0E99E3BF11BB6367, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_getPedIsBeingGrappled = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x3BDFCF25B58B0415, 'bool', ped)
    return call
end

--- @param ped integer
--- @return number
natives.ped_getPedGrappler = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xD0B7AEB56229D317, 'int', ped)
    return call
end

--- @param ped integer
--- @return number
natives.ped_getPedGrappleState = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x2311F15D971AA680, 'int', ped)
    return call
end

--- @param ped integer
--- @return number
natives.ped_getPedGrappleStyle = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x753B15AD0FD6F3E3, 'integer', ped)
    return call
end

-- Hashes: GS_DRAGGING, GS_FACE_TO_BACK, GS_FACE_TO_FACE, GS_FACE_TO_FACE_WALL, GS_MOUNTED
--- @param ped integer
--- @param style integer
--- @return any
natives.ped_setPedGrappleStyle = function(ped, style)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(style) == 'integer', 'Argument style must be of type integer.')

    local call = natives.invoke(0x630E7B01F091A197, 'any', ped, style)
    return call
end

--- @param ped integer
--- @param grapplesequence string
natives.ped_setPedGrappleSequence = function(ped, grapplesequence)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(grapplesequence) == 'string', 'Argument grapplesequence must be of type string.')

    local call = natives.invoke(0x604190F0CF0DF158, 'void', ped, grapplesequence)
end

--- @param ped integer
--- @param flag integer
--- @param enable boolean
natives.ped_setPedGrappleFlag = function(ped, flag, enable)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')
    assert(type(enable) == 'boolean', 'Argument enable must be of type boolean.')

    local call = natives.invoke(0x789DABD18E9024DB, 'void', ped, flag, enable)
end

--- @param ped integer
--- @param flag integer
natives.ped_clearPedGrappleFlag = function(ped, flag)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')

    local call = natives.invoke(0xEAE3B5B019C8D23F, 'void', ped, flag)
end

--- @param ped integer
--- @return number
natives.ped_getPedGrappleFlag = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xF3C873ED0C595109, 'int', ped)
    return call
end

--- @param ped integer
--- @param grappleaction integer
natives.ped_setPedGrappleAction = function(ped, grappleaction)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(grappleaction) == 'integer', 'Argument grappleaction must be of type integer.')

    local call = natives.invoke(0x8301D87B1B89E219, 'void', ped, grappleaction)
end

--- @param ped integer
--- @param multiplier number
--- @return any
natives.ped_setPedGrappleEffectMultiplier = function(ped, multiplier)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(multiplier) == 'number', 'Argument multiplier must be of type number.')

    local call = natives.invoke(0x99A6E246C315BF60, 'any', ped, multiplier)
    return call
end

--- @param ped integer
--- @param grappleanim integer
natives.ped_setPedGrappleAnimation = function(ped, grappleanim)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(grappleanim) == 'integer', 'Argument grappleanim must be of type integer.')

    local call = natives.invoke(0x56E9C26CD29D1ED6, 'void', ped, grappleanim)
end

-- https:--github.com/femga/rdr3_discoveries/tree/master/AI/FLEE_ATTRIBUTES
-- 
-- attributeFlags:
-- enum eFleeAttribute
-- {
-- 	FA_FORCE_EXIT_VEHICLE = (1 << 16),
-- 	FA_DISABLE_MOUNT_USAGE = (1 << 20),
-- 	FA_DISABLE_ENTER_VEHICLES = (1 << 22),
-- };
--- @param ped integer
--- @param attributeflags integer
--- @param enable boolean
natives.ped_setPedFleeAttributes = function(ped, attributeflags, enable)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(attributeflags) == 'integer', 'Argument attributeflags must be of type integer.')
    assert(type(enable) == 'boolean', 'Argument enable must be of type boolean.')

    local call = natives.invoke(0x70A2D1137C8ED7C9, 'void', ped, attributeflags, enable)
end

--- @param ped integer
--- @return boolean
natives.ped_isPedCowering = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xB086C8C0F5701D14, 'bool', ped)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @return boolean
natives.ped_isAnyPedNearPoint = function(x, y, z, radius)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')

    local call = natives.invoke(0x083961498679DC9F, 'bool', x, y, z, radius)
    return call
end

--- @param ped integer
--- @param p1 boolean
--- @param p2 boolean
natives.ped_forcePedAiAndAnimationUpdate = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x2208438012482A1A, 'void', ped, p1, p2)
end

-- _FORCE_PED_*
--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 boolean
natives.ped_n0Xc2722B252C79E641 = function(ped, p1, p2, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0xC2722B252C79E641, 'void', ped, p1, p2, p3)
end

--- @param ped integer
--- @return boolean
natives.ped_isPedDoingScenarioTransition = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xC488B8C0E52560D8, 'bool', ped)
    return call
end

-- _IS_PED_D*
--- @param ped integer
--- @return boolean
natives.ped_n0X2Dc0E8Dcbd3546E9 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x2DC0E8DCBD3546E9, 'bool', ped)
    return call
end

-- Forces transition now, called together with 0xD65FDC686A031C83
--- @param ped integer
natives.ped_addScenarioTransition = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x6D07B371E9439019, 'void', ped)
end

-- Ped Command Hash are special commands, that can be activated to change conditional anim variations or trigger transitions between conditional anims.
-- https:--github.com/femga/rdr3_discoveries/blob/master/animations/scenarios
--- @param ped integer
--- @param commandhash integer
--- @param activationduration number
natives.ped_givePedHashCommand = function(ped, commandhash, activationduration)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(commandhash) == 'integer', 'Argument commandhash must be of type integer.')
    assert(type(activationduration) == 'number', 'Argument activationduration must be of type number.')

    local call = natives.invoke(0xD65FDC686A031C83, 'void', ped, commandhash, activationduration)
end

--- @param ped integer
--- @param commandhash integer
--- @return boolean
natives.ped_getIsPedCommandHashPresent = function(ped, commandhash)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(commandhash) == 'integer', 'Argument commandhash must be of type integer.')

    local call = natives.invoke(0x68821369A2CEADD5, 'bool', ped, commandhash)
    return call
end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param p4 number
--- @return boolean
natives.ped_isPedHeadingTowardsPosition = function(ped, x, y, z, p4)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')

    local call = natives.invoke(0xFCF37A457CB96DC0, 'bool', ped, x, y, z, p4)
    return call
end

-- Not implemented.
--- @param ped integer
natives.ped_n0X600Bbdd29820370C = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x600BBDD29820370C, 'void', ped)
end

--- @param ped integer
natives.ped_requestPedVisibilityTracking = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x7D7A2E43E74E2EB8, 'void', ped)
end

--- @param ped integer
natives.ped_releasePedVisibilityTracking = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x3088634CF8C819CF, 'void', ped)
end

--- @param ped integer
--- @param p1 boolean
natives.ped_requestPedVehicleVisibilityTracking = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x2BC338A7B21F4608, 'void', ped, p1)
end

--- @param ped integer
--- @param p1 boolean
natives.ped_requestPedUseSmallBboxVisibilityTracking = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x75BA1CB3B7D40CAF, 'void', ped, p1)
end

--- @param ped integer
--- @return number
natives.ped_getTrackedPedPixelcount = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x511F1A683387C7E2, 'int', ped)
    return call
end

-- Returns whether or not a ped is visible within your FOV, not this check auto's to false after a certain distance.
-- Target needs to be tracked first, won't work otherwise.
--- @param ped integer
--- @return boolean
natives.ped_isTrackedPedVisible = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x91C8E617F64188AC, 'bool', ped)
    return call
end

--- @param ped integer
--- @param percent number
--- @return boolean
natives.ped_isTrackedPedVisibilityPercentageNotLessThan = function(ped, percent)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(percent) == 'number', 'Argument percent must be of type number.')

    local call = natives.invoke(0x164CECC59E70DF86, 'bool', ped, percent)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedVisibilityTracked = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x5102307CE88798EB, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_canPedBeMounted = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x2D64376CF437363E, 'bool', ped)
    return call
end

-- Returns true if given ped is a fish.
-- _IS_ME* - _IS_MO*
--- @param ped integer
--- @return boolean
natives.ped_isMetaPedFish = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x118D476A6F1A13F1, 'bool', ped)
    return call
end

--- @param ped integer
--- @param eventtype integer
--- @return boolean
natives.ped_isEventInQueue = function(ped, eventtype)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(eventtype) == 'integer', 'Argument eventtype must be of type integer.')

    local call = natives.invoke(0xC8D523BF5BBD3808, 'bool', ped, eventtype)
    return call
end

-- Returns:
-- 0 - CTR_CANNOT_TARGET
-- 1 - CTR_CAN_TARGET
-- 2 - CTR_NOT_SURE_YET
--- @param ped integer
--- @param targetentity integer
--- @param p2 boolean
--- @param p3 boolean
--- @return number
natives.ped_canPedSeeEntity = function(ped, targetentity, p2, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(targetentity) == 'integer', 'Argument targetentity must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0x7F9B9791D4CB71F6, 'int', ped, targetentity, p2, p3)
    return call
end

--- @param ped integer
--- @param targetped integer
--- @param p2 boolean
--- @return number
natives.ped_canPedSeePedCached = function(ped, targetped, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(targetped) == 'integer', 'Argument targetped must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x9D9473CB82D83A30, 'int', ped, targetped, p2)
    return call
end

-- _CAN_PED_B* - _CAN_PED_I*
--- @param ped1 integer
--- @param ped2 integer
--- @param p2 boolean
--- @return number
natives.ped_n0X0Ea9Eacba3B01601 = function(ped1, ped2, p2)
    assert(type(ped1) == 'integer', 'Argument ped1 must be of type integer.')
    assert(type(ped2) == 'integer', 'Argument ped2 must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x0EA9EACBA3B01601, 'float', ped1, ped2, p2)
    return call
end

-- no bone = -1
--- @param ped integer
--- @param boneid integer
--- @return number
natives.ped_getPedBoneIndex = function(ped, boneid)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(boneid) == 'integer', 'Argument boneid must be of type integer.')

    local call = natives.invoke(0x3F428D08BE5AAE31, 'int', ped, boneid)
    return call
end

-- Returns boneIndex
-- _GET_PED_N* - _GET_PED_R*
--- @param ped integer
--- @param p1 integer
--- @return number
natives.ped_n0Xc5303F460A40D21D = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xC5303F460A40D21D, 'int', ped, p1)
    return call
end

-- _SET_PED_R* -_SET_PED_S*
--- @param horse integer
natives.ped_n0Xe29D8Cd66553Dbaa = function(horse)
    assert(type(horse) == 'integer', 'Argument horse must be of type integer.')

    local call = natives.invoke(0xE29D8CD66553DBAA, 'void', horse)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.ped_n0Xb06F5F1Def417216 = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xB06F5F1DEF417216, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.ped_n0Xfc23348F0F4E245F = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xFC23348F0F4E245F, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
natives.ped_n0X9184788Bff1Edad7 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x9184788BFF1EDAD7, 'void', p0, p1)
end

-- Params: ped, 0f, -1, true, true in R* MP Scripts
-- _SET_PED_DE* - _SET_PED_F*
--- @param ped integer
--- @param p1 number
--- @param p2 integer
--- @param p3 boolean
--- @param p4 boolean
natives.ped_setPedDirtCleaned = function(ped, p1, p2, p3, p4)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')

    local call = natives.invoke(0xE3144B932DFDFF65, 'void', ped, p1, p2, p3, p4)
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.ped_n0X0105Fee8F9091255 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x0105FEE8F9091255, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.ped_n0Xd049920Cd29F6Cc8 = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0xD049920CD29F6CC8, 'void', p0, p1, p2, p3, p4)
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.ped_n0Xbb3E5370Ebb6Be28 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xBB3E5370EBB6BE28, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.ped_n0X2Fa568Bfa725F8D6 = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x2FA568BFA725F8D6, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.ped_n0X56E4Bad93D33453C = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x56E4BAD93D33453C, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.ped_n0X75A082563B4452E5 = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x75A082563B4452E5, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.ped_n0X16802C32B2Fca06B = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x16802C32B2FCA06B, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.ped_n0X8Ba0C65Ac15A7D33 = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x8BA0C65AC15A7D33, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
natives.ped_n0X0Ffdf937E5C11382 = function(p0, p1, p2, p3, p4, p5)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0x0FFDF937E5C11382, 'void', p0, p1, p2, p3, p4, p5)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.ped_n0X5Fcf25D584065Bfd = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x5FCF25D584065BFD, 'void', p0, p1, p2, p3)
end

-- _SET_PED_*
--- @param ped integer
--- @param inverted boolean
natives.ped_n0Xa2116C1E4Ed85C24 = function(ped, inverted)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(inverted) == 'boolean', 'Argument inverted must be of type boolean.')

    local call = natives.invoke(0xA2116C1E4ED85C24, 'void', ped, inverted)
end

-- motionStateHash: https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/FORCE_PED_MOTION_STATE
--- @param ped integer
--- @param motionstatehash integer
--- @param p2 boolean
--- @param p3 integer
--- @param p4 boolean
--- @return boolean
natives.ped_forcePedMotionState = function(ped, motionstatehash, p2, p3, p4)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(motionstatehash) == 'integer', 'Argument motionstatehash must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')

    local call = natives.invoke(0xF28965D04F570DCA, 'bool', ped, motionstatehash, p2, p3, p4)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.ped_n0X75D3333409Cd33Ce = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x75D3333409CD33CE, 'void', p0, p1, p2)
end

-- Old name: _GET_PED_CURRENT_MOVEMENT_SPEED
--- @param ped integer
--- @param speedx integer
--- @param speedy integer
--- @return boolean
natives.ped_getPedCurrentMoveBlendRatio = function(ped, speedx, speedy)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(speedx) == 'integer', 'Argument speedx must be of type integer.')
    assert(type(speedy) == 'integer', 'Argument speedy must be of type integer.')

    local call = natives.invoke(0xF60165E1D2C5370B, 'bool', ped, speedx, speedy)
    return call
end

--- @param ped integer
--- @param value number
natives.ped_setPedMaxMoveBlendRatio = function(ped, value)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0x433083750C5E064A, 'void', ped, value)
end

--- @param ped integer
--- @param value number
natives.ped_setPedMinMoveBlendRatio = function(ped, value)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0x01A898D26E2333DD, 'void', ped, value)
end

--- @param p0 userdata
natives.ped_n0Xbc1Dc48270468444 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xBC1DC48270468444, 'void', p0)
end

-- Returns vehicle (desired) speed
-- _COMPUTE_(VEHICLE_SPEED_USING_BLEND_RATIO?)*
--- @param ped integer
--- @param maxmoveblendratio number
--- @return number
natives.ped_n0X46Bf2A810679D6E6 = function(ped, maxmoveblendratio)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(maxmoveblendratio) == 'number', 'Argument maxmoveblendratio must be of type number.')

    local call = natives.invoke(0x46BF2A810679D6E6, 'float', ped, maxmoveblendratio)
    return call
end

-- Returns vehicle speed
-- _COMPUTE_*
--- @param ped integer
--- @param p1 number
--- @return number
natives.ped_n0Xca95924C893A0C91 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0xCA95924C893A0C91, 'float', ped, p1)
    return call
end

-- _H* - _I*
--- @param mount integer
--- @param kickoffrider boolean
natives.ped_horseAgitate = function(mount, kickoffrider)
    assert(type(mount) == 'integer', 'Argument mount must be of type integer.')
    assert(type(kickoffrider) == 'boolean', 'Argument kickoffrider must be of type boolean.')

    local call = natives.invoke(0xBAE08F00021BFFB2, 'void', mount, kickoffrider)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.ped_n0X413697Ec260Aabbf = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x413697EC260AABBF, 'void', p0, p1, p2)
end

--- @param ped integer
natives.ped_n0Xcac43D060099Ea72 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xCAC43D060099EA72, 'void', ped)
end

--- @param ped integer
natives.ped_n0Xc9151483Cc06A414 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xC9151483CC06A414, 'void', ped)
end

--- @param p0 userdata
--- @param p1 userdata
natives.ped_n0Xad3330E3C3E98007 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xAD3330E3C3E98007, 'void', p0, p1)
end

--- @param p0 userdata
--- @return any
natives.ped_n0Xb8E2D655E1D5Bd39 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xB8E2D655E1D5BD39, 'any', p0)
    return call
end

--- @param p0 userdata
--- @return any
natives.ped_n0X7Bb810E8B343Ac7B = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x7BB810E8B343AC7B, 'any', p0)
    return call
end

-- Min: 0.0f
-- Max: 1.15f
--- @param ped integer
--- @param value number
natives.ped_setPedMoveRateOverride = function(ped, value)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0x085BF80FA50A39D1, 'void', ped, value)
end

--- @param ped integer
--- @param sizeandvehs userdata
--- @return number
natives.ped_getPedNearbyVehicles = function(ped, sizeandvehs)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(sizeandvehs) == 'userdata', 'Argument sizeandvehs must be of type userdata.')

    local call = natives.invoke(0xCFF869CBFA210D82, 'int', ped, sizeandvehs)
    return call
end

--- @param ped integer
--- @param sizeandpeds userdata
--- @param ignoredpedtype integer
--- @param p3 integer
--- @return number
natives.ped_getPedNearbyPeds = function(ped, sizeandpeds, ignoredpedtype, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(sizeandpeds) == 'userdata', 'Argument sizeandpeds must be of type userdata.')
    assert(type(ignoredpedtype) == 'integer', 'Argument ignoredpedtype must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')

    local call = natives.invoke(0x23F8F5FC7E8C4A6B, 'int', ped, sizeandpeds, ignoredpedtype, p3)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedReadyToRender = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xA0BC8FAED8CFEB3C, 'bool', ped)
    return call
end

--- @param p0 userdata
natives.ped_n0X6A489892E813951A = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x6A489892E813951A, 'void', p0)
end

--- @param ped integer
--- @return boolean
natives.ped_isPedUsingActionMode = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x00E73468D085F745, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedUsingActionMode2 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xEBB208D6AE712C03, 'bool', ped)
    return call
end

--- @param ped integer
--- @param bactionmodeenabled boolean
--- @param p2 integer
--- @param action string
natives.ped_setPedUsingActionMode = function(ped, bactionmodeenabled, p2, action)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(bactionmodeenabled) == 'boolean', 'Argument bactionmodeenabled must be of type boolean.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(action) == 'string', 'Argument action must be of type string.')

    local call = natives.invoke(0xD75ACCF5E0FB5367, 'void', ped, bactionmodeenabled, p2, action)
end

-- Overrides the ped's collision capsule radius for the current tick.
-- Must be called every tick to be effective.
-- 
-- Setting this to 0.001 will allow warping through some objects.
--- @param ped integer
--- @param value number
natives.ped_setPedCapsule = function(ped, value)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0x364DF566EC833DE2, 'void', ped, value)
end

--- @param mount integer
--- @param p1 boolean
--- @return number
natives.ped_getRiderOfMount = function(mount, p1)
    assert(type(mount) == 'integer', 'Argument mount must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xB676EFDA03DADA52, 'int', mount, p1)
    return call
end

-- Params: p4 = 35.f, duration = 5000 in R* Scripts
--- @param x number
--- @param y number
--- @param z number
--- @param width number
--- @param p4 number
--- @param spawnpointsflag integer
--- @param p6 number
--- @param duration integer
--- @param p8 number
natives.ped_spawnpointsStartSearch = function(x, y, z, width, p4, spawnpointsflag, p6, duration, p8)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(width) == 'number', 'Argument width must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(spawnpointsflag) == 'integer', 'Argument spawnpointsflag must be of type integer.')
    assert(type(p6) == 'number', 'Argument p6 must be of type number.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')
    assert(type(p8) == 'number', 'Argument p8 must be of type number.')

    local call = natives.invoke(0x2DF9038C90AD5264, 'void', x, y, z, width, p4, spawnpointsflag, p6, duration, p8)
end

-- Searching area between coords 1 and 2
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param width number
--- @param spawnpointsflag integer
--- @param p8 number
--- @param duration integer
--- @param p10 number
natives.ped_spawnpointsStartSearchInAngledArea = function(x1, y1, z1, x2, y2, z2, width, spawnpointsflag, p8, duration, p10)
    assert(type(x1) == 'number', 'Argument x1 must be of type number.')
    assert(type(y1) == 'number', 'Argument y1 must be of type number.')
    assert(type(z1) == 'number', 'Argument z1 must be of type number.')
    assert(type(x2) == 'number', 'Argument x2 must be of type number.')
    assert(type(y2) == 'number', 'Argument y2 must be of type number.')
    assert(type(z2) == 'number', 'Argument z2 must be of type number.')
    assert(type(width) == 'number', 'Argument width must be of type number.')
    assert(type(spawnpointsflag) == 'integer', 'Argument spawnpointsflag must be of type integer.')
    assert(type(p8) == 'number', 'Argument p8 must be of type number.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')
    assert(type(p10) == 'number', 'Argument p10 must be of type number.')

    local call = natives.invoke(0xB2AFF10216DEFA2F, 'void', x1, y1, z1, x2, y2, z2, width, spawnpointsflag, p8, duration, p10)
end

--- @param volume integer
--- @param spawnpointsflag integer
--- @param p2 number
--- @param duration integer
--- @param p4 number
natives.ped_spawnpointsStartSearchWithVolume = function(volume, spawnpointsflag, p2, duration, p4)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(spawnpointsflag) == 'integer', 'Argument spawnpointsflag must be of type integer.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')

    local call = natives.invoke(0x83ED1FC9DF3411F5, 'void', volume, spawnpointsflag, p2, duration, p4)
end

natives.ped_spawnpointsCancelSearch = function()

    local call = natives.invoke(0xFEE4A5459472A9F8, 'void')
end

--- @return boolean
natives.ped_spawnpointsIsSearchActive = function()

    local call = natives.invoke(0x3C67506996001F5E, 'bool')
    return call
end

--- @return boolean
natives.ped_spawnpointsIsSearchComplete = function()

    local call = natives.invoke(0xA586FBEB32A53DBB, 'bool')
    return call
end

--- @return boolean
natives.ped_spawnpointsIsSearchFailed = function()

    local call = natives.invoke(0xF445DE8DA80A1792, 'bool')
    return call
end

--- @return number
natives.ped_spawnpointsGetNumSearchResults = function()

    local call = natives.invoke(0xA635C11B8C44AFC2, 'int')
    return call
end

--- @param randomint integer
--- @param x integer
--- @param y userdata
--- @param z integer
natives.ped_spawnpointsGetSearchResult = function(randomint, x, y, z)
    assert(type(randomint) == 'integer', 'Argument randomint must be of type integer.')
    assert(type(x) == 'integer', 'Argument x must be of type integer.')
    assert(type(y) == 'userdata', 'Argument y must be of type userdata.')
    assert(type(z) == 'integer', 'Argument z must be of type integer.')

    local call = natives.invoke(0x280C7E3AC7F56E90, 'void', randomint, x, y, z)
end

--- @param p0 userdata
--- @param p1 userdata
natives.ped_spawnpointsGetSearchResultFlags = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xB782F8238512BAD5, 'void', p0, p1)
end

--- @param ped integer
--- @param ikindex integer
--- @param entitylookat integer
--- @param bonelookat integer
--- @param offsetx number
--- @param offsety number
--- @param offsetz number
--- @param p7 userdata
--- @param blendinduration integer
--- @param blendoutduration integer
natives.ped_setIkTarget = function(ped, ikindex, entitylookat, bonelookat, offsetx, offsety, offsetz, p7, blendinduration, blendoutduration)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(ikindex) == 'integer', 'Argument ikindex must be of type integer.')
    assert(type(entitylookat) == 'integer', 'Argument entitylookat must be of type integer.')
    assert(type(bonelookat) == 'integer', 'Argument bonelookat must be of type integer.')
    assert(type(offsetx) == 'number', 'Argument offsetx must be of type number.')
    assert(type(offsety) == 'number', 'Argument offsety must be of type number.')
    assert(type(offsetz) == 'number', 'Argument offsetz must be of type number.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(blendinduration) == 'integer', 'Argument blendinduration must be of type integer.')
    assert(type(blendoutduration) == 'integer', 'Argument blendoutduration must be of type integer.')

    local call = natives.invoke(0xC32779C16FCEECD9, 'void', ped, ikindex, entitylookat, bonelookat, offsetx, offsety, offsetz, p7, blendinduration, blendoutduration)
end

-- For more information, see common:/data/emotional_presets.meta
--- @param ped integer
--- @param name string
natives.ped_requestPedEmotionalPreset = function(ped, name)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0x5C3C55EAAD19915F, 'void', ped, name)
end

-- See _REQUEST_PED_EMOTIONAL_PRESET
--- @param ped integer
--- @param name string
--- @return boolean
natives.ped_hasPedEmotionalPresetLoaded = function(ped, name)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0xDE3904B22695D9F9, 'bool', ped, name)
    return call
end

-- See _REQUEST_PED_EMOTIONAL_PRESET
--- @param ped integer
--- @param name string
natives.ped_removePedEmotionalPreset = function(ped, name)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0xFC3BAB1801A8255A, 'void', ped, name)
end

--- @param namehash integer
--- @param ped integer
natives.ped_requestMotionTypeAsset = function(namehash, ped)
    assert(type(namehash) == 'integer', 'Argument namehash must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xF7EA250B9A919E03, 'void', namehash, ped)
end

--- @param namehash integer
--- @param ped integer
--- @return boolean
natives.ped_hasMotionTypeAssetLoaded = function(namehash, ped)
    assert(type(namehash) == 'integer', 'Argument namehash must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x854BC9B1A1CCD034, 'bool', namehash, ped)
    return call
end

--- @param namehash integer
--- @param ped integer
natives.ped_removeMotionTypeAsset = function(namehash, ped)
    assert(type(namehash) == 'integer', 'Argument namehash must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xDE7B2B4144906CDF, 'void', namehash, ped)
end

-- _IS_PED_L* - _IS_PED_M*
--- @param ped integer
--- @return boolean
natives.ped_n0X290B2E6Ccde532E1 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x290B2E6CCDE532E1, 'bool', ped)
    return call
end

-- _IS_PED_L* - _IS_PED_M*
--- @param ped integer
--- @return boolean
natives.ped_n0X0Eef7A81C17679Db = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x0EEF7A81C17679DB, 'bool', ped)
    return call
end

--- @param ped integer
--- @param multiplier number
natives.ped_setPedLodMultiplier = function(ped, multiplier)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(multiplier) == 'number', 'Argument multiplier must be of type number.')

    local call = natives.invoke(0xDC2C5C242AAC342B, 'void', ped, multiplier)
end

--- @param ped integer
--- @return number
natives.ped_getPedLodMultiplier = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x1B710E6F4AB69341, 'float', ped)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.ped_n0Xa218D2Bbcaa7388C = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xA218D2BBCAA7388C, 'any', p0, p1)
    return call
end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @return boolean
natives.ped_isAnyHostilePedNearPoint = function(ped, x, y, z, radius)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')

    local call = natives.invoke(0x68772DB2B2526F9F, 'bool', ped, x, y, z, radius)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.ped_n0Xcbde59C48F2B06F5 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xCBDE59C48F2B06F5, 'void', p0, p1, p2)
end

--- @param p0 userdata
natives.ped_n0X6A190B94C2541A99 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x6A190B94C2541A99, 'void', p0)
end

-- Returns true if ped is in perception (focused and looking at target ped)
-- Most float params are -1.f in R* Scripts
--- @param ped integer
--- @param targetped integer
--- @param p2 number
--- @param customdistance number
--- @param p4 number
--- @param p5 number
--- @return boolean
natives.ped_isTargetPedInPerceptionArea = function(ped, targetped, p2, customdistance, p4, p5)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(targetped) == 'integer', 'Argument targetped must be of type integer.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(customdistance) == 'number', 'Argument customdistance must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')

    local call = natives.invoke(0x06087579E7AA85A9, 'bool', ped, targetped, p2, customdistance, p4, p5)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.ped_setPopControlSphereThisFrame = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0xD8C3BE3EE94CAF2D, 'void', p0, p1, p2, p3, p4)
end

--- @param ped integer
--- @return boolean
natives.ped_isPedHogtied = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x3AA24CCC0D451379, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedBeingHogtied = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xD453BB601D4A606E, 'bool', ped)
    return call
end

--- @param ped integer
--- @return number
natives.ped_n0X3D9F958834Ab9C30 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x3D9F958834AB9C30, 'int', ped)
    return call
end

-- _IS_PED_S* - _IS_PED_U*
--- @param ped integer
--- @return boolean
natives.ped_n0X913D04A5176F84C9 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x913D04A5176F84C9, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedHogtying = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x42429C674B61238B, 'bool', ped)
    return call
end

-- https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/Lasso%20Hogtie%20Flags
-- https:--github.com/femga/rdr3_discoveries/tree/master/AI/LASSO_HOGTIE_FLAG
--- @param ped integer
--- @param flagid integer
--- @return boolean
natives.ped_getPedLassoHogtieFlag = function(ped, flagid)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(flagid) == 'integer', 'Argument flagid must be of type integer.')

    local call = natives.invoke(0x2C76FA0E01681F8D, 'bool', ped, flagid)
    return call
end

--- @param ped integer
--- @param flagid integer
--- @param value boolean
natives.ped_setPedLassoHogtieFlag = function(ped, flagid, value)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(flagid) == 'integer', 'Argument flagid must be of type integer.')
    assert(type(value) == 'boolean', 'Argument value must be of type boolean.')

    local call = natives.invoke(0xAE6004120C18DF97, 'void', ped, flagid, value)
end

--- @param ped integer
--- @param p1 integer
--- @param p2 userdata
--- @param p3 integer
--- @param p4 integer
--- @return number
natives.ped_n0X4642182A298187D0 = function(ped, p1, p2, p3, p4)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')

    local call = natives.invoke(0x4642182A298187D0, 'int', ped, p1, p2, p3, p4)
    return call
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 integer
--- @param p3 boolean
natives.ped_n0X6B67320E0D57856A = function(ped, p1, p2, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0x6B67320E0D57856A, 'void', ped, p1, p2, p3)
end

--- @param ped integer
--- @return number
natives.ped_getFirstEntityPedIsCarrying = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xD806CD2A4F2C2996, 'int', ped)
    return call
end

--- @param ped integer
--- @param p1 integer
natives.ped_n0Xaa6C49Ae90A32299 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xAA6C49AE90A32299, 'void', ped, p1)
end

--- @param entity integer
--- @return number
natives.ped_getCarrierAsPed = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x09B83E68DE004CD4, 'int', entity)
    return call
end

--- @param entity integer
--- @return number
natives.ped_getCarrierAsMount = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xA033D7E4BBF9844D, 'int', entity)
    return call
end

--- @param entity integer
--- @return number
natives.ped_getCarrierAsHuman = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x79443D56C8DF45EE, 'int', entity)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @return any
natives.ped_getCarriedAttachedInfoForSlot = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x608BC6A6AACD5036, 'any', p0, p1, p2, p3)
    return call
end

--- @param entity integer
--- @param p1 boolean
--- @param p2 boolean
natives.ped_detachCarriableEntity = function(entity, p1, p2)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xED00D72F81CF7278, 'void', entity, p1, p2)
end

--- @param ped integer
--- @param itemset integer
natives.ped_findAllAttachedCarriableEntities = function(ped, itemset)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(itemset) == 'integer', 'Argument itemset must be of type integer.')

    local call = natives.invoke(0xB5ACE8B23A438EC0, 'void', ped, itemset)
end

--- @param ped integer
--- @return boolean
natives.ped_isPedCarryingSomething = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xA911EE21EDF69DAF, 'bool', ped)
    return call
end

--- @param ped integer
--- @param p1 integer
--- @return boolean
natives.ped_n0Xb65927F861E7Ae39 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xB65927F861E7AE39, 'bool', ped, p1)
    return call
end

--- @param volume integer
--- @return boolean
natives.ped_n0Xa1Fbac56D38563E2 = function(volume)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')

    local call = natives.invoke(0xA1FBAC56D38563E2, 'bool', volume)
    return call
end

--- @param ped integer
--- @param p1 userdata
--- @return any
natives.ped_n0X6F43C351A5D51E2F = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x6F43C351A5D51E2F, 'any', ped, p1)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedLassoed = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x9682F850056C9ADE, 'bool', ped)
    return call
end

-- _IS_PED_S* - _IS_PED_U*
--- @param ped integer
--- @return number
natives.ped_getLassoerOfPed = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x833F0053340EF413, 'int', ped)
    return call
end

--- @param ped integer
--- @return number
natives.ped_getLassoTarget = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xB65A4DAB460A19BD, 'int', ped)
    return call
end

--- @param ped integer
--- @return number
natives.ped_getLassoedLassoer = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x0C31C51168E80365, 'int', ped)
    return call
end

-- https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/CLootingFlags__Flags
-- https:--github.com/femga/rdr3_discoveries/tree/master/AI/LOOTING_FLAGS
-- 
-- lootFlag:
-- enum eLootFlag
-- {
-- 	LOOT_FLAG_IS_CRITICAL_LOOT_TARGET = 7,
-- 	LOOT_FLAG_IGNORE_WATER_CHECKS = 8,
-- 	LOOT_FLAG_ANIMAL_FLAGGED_FOR_TAGGING = 23,
-- };
--- @param ped integer
--- @param lootflag integer
--- @param enabled boolean
natives.ped_setLootingFlag = function(ped, lootflag, enabled)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(lootflag) == 'integer', 'Argument lootflag must be of type integer.')
    assert(type(enabled) == 'boolean', 'Argument enabled must be of type boolean.')

    local call = natives.invoke(0x6569F31A01B4C097, 'void', ped, lootflag, enabled)
end

-- lootFlag: see SET_LOOTING_FLAG
--- @param ped integer
--- @param lootflag integer
--- @return boolean
natives.ped_getLootingFlag = function(ped, lootflag)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(lootflag) == 'integer', 'Argument lootflag must be of type integer.')

    local call = natives.invoke(0xE4C11F104620DDCE, 'bool', ped, lootflag)
    return call
end

-- Returns loot state
-- enum eLootState
-- {
-- 	LAP_NONE,
-- 	LAP_RESUMING,
-- 	LAP_GETTING_ON_FOOT,
-- 	LAP_DISTANT_NAV,
-- 	LAP_CHOOSING_ACTION,
-- 	LAP_APPROACHING,
-- 	LAP_ENTERING,
-- 	LAP_LOOTING,
-- 	LAP_EXITING
-- };
-- 
-- _POSSE_* - _REGISTER_HATED*
--- @param ped integer
--- @param p1 integer
--- @param loottarget integer
--- @param p3 integer
--- @param p4 integer
--- @return number
natives.ped_refreshLootStateForPed = function(ped, p1, loottarget, p3, p4)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(loottarget) == 'integer', 'Argument loottarget must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')

    local call = natives.invoke(0x5463C962BC7777C3, 'int', ped, p1, loottarget, p3, p4)
    return call
end

-- enum ePedLootStatus
-- {
-- 	PLS_NONE,
-- 	PLS_PRE_LOOT,
-- 	PLS_SAMPLING,
-- 	PLS_SKINNING
-- };
--- @param ped integer
--- @return number
natives.ped_getPedLootStatusMp = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xC737697C41628340, 'int', ped)
    return call
end

--- @param ped integer
--- @return number
natives.ped_n0X4B19F171450E0D4F = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x4B19F171450E0D4F, 'int', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_n0X758F081Db204Ddde = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x758F081DB204DDDE, 'bool', ped)
    return call
end

--- @param ped integer
--- @return number
natives.ped_getLootingPickupTargetEntity = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x14169FA823679E41, 'int', ped)
    return call
end

--- @param p0 userdata
--- @return any
natives.ped_n0X7B5C293238Ee4F20 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x7B5C293238EE4F20, 'any', p0)
    return call
end

--- @param p0 userdata
natives.ped_n0Xae6B68A83Abbe7C0 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xAE6B68A83ABBE7C0, 'void', p0)
end

--- @param ped integer
--- @return boolean
natives.ped_n0Xa4B6432E3880F2F9 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xA4B6432E3880F2F9, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_addPedSubscribeToLegendaryBlips = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xE37287EE358939C3, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_removePedSubscribeToLegendaryBlips = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x011A42FD923D41CA, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedIncapacitated = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xB655DB7582AEC805, 'bool', ped)
    return call
end

--- @param ped integer
--- @param canbeincapacitated boolean
--- @param threshold integer
--- @param bleedouttime integer
--- @param p4 integer
natives.ped_setPedIncapacitationModifiers = function(ped, canbeincapacitated, threshold, bleedouttime, p4)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(canbeincapacitated) == 'boolean', 'Argument canbeincapacitated must be of type boolean.')
    assert(type(threshold) == 'integer', 'Argument threshold must be of type integer.')
    assert(type(bleedouttime) == 'integer', 'Argument bleedouttime must be of type integer.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')

    local call = natives.invoke(0x39ED303390DDEAC7, 'void', ped, canbeincapacitated, threshold, bleedouttime, p4)
end

--- @param ped integer
--- @return boolean
natives.ped_getPedCanBeIncapacitatedThisFrame = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x7A4E00364B5D727B, 'bool', ped)
    return call
end

-- When set on a player ped, its just like when you die in RDO
--- @param ped integer
--- @param toggle boolean
natives.ped_setPedCanBeIncapacitated = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x5240864E847C691C, 'void', ped, toggle)
end

--- @param ped integer
--- @return number
natives.ped_getPedIncapacitationHealth = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x89BFDF6D53145545, 'int', ped)
    return call
end

--- @param ped integer
--- @param duration number
natives.ped_setPedIncapacitationTotalBleedOutDuration = function(ped, duration)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(duration) == 'number', 'Argument duration must be of type number.')

    local call = natives.invoke(0x2890418B39BC8FFF, 'void', ped, duration)
end

--- @param ped integer
natives.ped_resetPedIncapacitationBleedOutDuration = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x4B9668DB91DC39B8, 'void', ped)
end

--- @param ped integer
--- @param flags integer
natives.ped_setPedIncapacitationFlags = function(ped, flags)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')

    local call = natives.invoke(0xD67B6F3BCF81BA47, 'void', ped, flags)
end

--- @param p0 userdata
--- @param p1 userdata
natives.ped_n0X92A1B55A59720395 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x92A1B55A59720395, 'void', p0, p1)
end

--- @param ped integer
--- @param ped2 integer
natives.ped_incapacitatedRevive = function(ped, ped2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(ped2) == 'integer', 'Argument ped2 must be of type integer.')

    local call = natives.invoke(0xF6262491C7704A63, 'void', ped, ped2)
end

--- @param ped integer
--- @return number
natives.ped_getIncapacitationTimeRemaining = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x88D9D76D78065487, 'int', ped)
    return call
end

--- @param ped integer
--- @param p1 number
natives.ped_setPedKnockedByOneHit = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x5BCF0B79D4F5DBA3, 'void', ped, p1)
end

--- @param ped integer
--- @param p1 integer
natives.ped_n0X2E5B5D1F1453E08E = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x2E5B5D1F1453E08E, 'void', ped, p1)
end

-- _SET_PED_K* or _SET_PED_L*
--- @param ped integer
--- @param p1 number
natives.ped_n0X29924Eb8Ee9Db926 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x29924EB8EE9DB926, 'void', ped, p1)
end

-- Params: hash - ARTHUR or JOHN
-- _SET_PED_(A-D)*
--- @param ped integer
--- @param playertype integer
natives.ped_setPedActivePlayerType = function(ped, playertype)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(playertype) == 'integer', 'Argument playertype must be of type integer.')

    local call = natives.invoke(0xB285AD0EC870B2DF, 'void', ped, playertype)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @return any
natives.ped_n0Xcb86D3E3E3708901 = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0xCB86D3E3E3708901, 'any', p0, p1, p2, p3, p4)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.ped_n0X633F83B301C87994 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x633F83B301C87994, 'void', p0, p1)
end

--- @param ped integer
--- @param p1 integer
--- @param p2 integer
--- @return boolean
natives.ped_n0X5203038Ff8Bae577 = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x5203038FF8BAE577, 'bool', ped, p1, p2)
    return call
end

--- @param ped integer
--- @param p1 integer
--- @return boolean
natives.ped_n0X7F090958Ae95B61B = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x7F090958AE95B61B, 'bool', ped, p1)
    return call
end

-- [WARDROBE] Player took off their disguise: p1 = 13
-- [WARDROBE] Player put on a disguise: p1 = 0
--- @param ped integer
--- @param p1 integer
natives.ped_n0Xc494C76A34266E82 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xC494C76A34266E82, 'void', ped, p1)
end

-- _GET_PED_G* - _GET_PED_I*
--- @param ped integer
--- @param p1 integer
--- @param p2 integer
--- @return boolean
natives.ped_n0Xc3995D396F1D97B6 = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0xC3995D396F1D97B6, 'bool', ped, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.ped_n0X15F4732C357B1D6D = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x15F4732C357B1D6D, 'void', p0, p1, p2)
end

-- flags: https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/0x947E43F544B6AB34
-- _GET_PED_G* - _GET_PED_I(NTERACTION?)*
--- @param ped integer
--- @param player integer
--- @param flag integer
--- @param ms integer
--- @return boolean
natives.ped_n0X947E43F544B6Ab34 = function(ped, player, flag, ms)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')
    assert(type(ms) == 'integer', 'Argument ms must be of type integer.')

    local call = natives.invoke(0x947E43F544B6AB34, 'bool', ped, player, flag, ms)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.ped_n0X32417Cb860A3Bdc4 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x32417CB860A3BDC4, 'any', p0, p1)
    return call
end

-- Only used in R* Script nb_animal_attack: p2 = 120000
-- _SET_PED_SH* - _SET_PED_SP*
--- @param ped integer
--- @param player integer
--- @param p2 integer
natives.ped_n0Xe737D5F14304A2Ec = function(ped, player, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0xE737D5F14304A2EC, 'void', ped, player, p2)
end

--- @param p0 userdata
--- @param p1 userdata
natives.ped_n0Xebd49472Bccf7642 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xEBD49472BCCF7642, 'void', p0, p1)
end

--- @param ped integer
--- @param player integer
--- @param duration integer
natives.ped_setPlayerGreetDisabledForPed = function(ped, player, duration)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')

    local call = natives.invoke(0x19173C3F15367B54, 'void', ped, player, duration)
end

--- @param ped integer
--- @param player integer
--- @param duration integer
natives.ped_setPlayerAntagonizeDisabledForPed = function(ped, player, duration)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')

    local call = natives.invoke(0x5708EDD71B50C008, 'void', ped, player, duration)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.ped_n0Xb9Bdfae609Dfb7C5 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xB9BDFAE609DFB7C5, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.ped_n0Xf7327Acc7A89Aef1 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xF7327ACC7A89AEF1, 'any', p0, p1, p2)
    return call
end

-- AI_ATTITUDE_NEUTRAL = 0,
-- AI_ATTITUDE_FRIENDLY,
-- AI_ATTITUDE_WARY,
-- AI_ATTITUDE_COMBATIVE,
-- AI_ATTITUDE_NEVER_MET
--- @param ped integer
--- @param player integer
--- @return number
natives.ped_getPedAttitude = function(ped, player)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x7CC2186C32D3540A, 'int', ped, player)
    return call
end

--- @param ped integer
--- @param p1 integer
--- @return boolean
natives.ped_n0X1E017404784Aa6A3 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x1E017404784AA6A3, 'bool', ped, p1)
    return call
end

--- @param ped integer
--- @param p1 integer
natives.ped_n0X2B4Ce170De09F346 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x2B4CE170DE09F346, 'void', ped, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.ped_n0X7C8Aa850617651D9 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x7C8AA850617651D9, 'any', p0, p1)
    return call
end

-- If targetPed is set to 0 the ped motivationState affects everyone
--- @param ped integer
--- @param motivationstate integer
--- @param targetped integer
--- @return number
natives.ped_getPedMotivation = function(ped, motivationstate, targetped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(motivationstate) == 'integer', 'Argument motivationstate must be of type integer.')
    assert(type(targetped) == 'integer', 'Argument targetped must be of type integer.')

    local call = natives.invoke(0x42688E94E96FD9B4, 'float', ped, motivationstate, targetped)
    return call
end

-- enum eMotivationState
-- {
-- 	TOILET_STATE,
-- 	FEAR_STATE,
-- 	ANGRY_STATE,
-- 	AGITATION_STATE,
-- 	HUNGRY_STATE,
-- 	TIRED_STATE,
-- 	SAD_STATE,
-- 	BRAVE_STATE,
-- 	OFFER_ITEM_STATE,
-- 	SUSPICION,
-- 	DRUNK_STATE
-- };
-- 
-- If targetPed is set to 0 the ped motivationState affects everyone
--- @param ped integer
--- @param motivationstate integer
--- @param threshold number
--- @param targetped integer
natives.ped_setPedMotivation = function(ped, motivationstate, threshold, targetped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(motivationstate) == 'integer', 'Argument motivationstate must be of type integer.')
    assert(type(threshold) == 'number', 'Argument threshold must be of type number.')
    assert(type(targetped) == 'integer', 'Argument targetped must be of type integer.')

    local call = natives.invoke(0x06D26A96CA1BCA75, 'void', ped, motivationstate, threshold, targetped)
end

--- @param ped integer
--- @param p1 integer
--- @param p2 number
--- @param p3 userdata
natives.ped_n0X23Bde06596A22Cec = function(ped, p1, p2, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x23BDE06596A22CEC, 'void', ped, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.ped_n0Xcdfb8C04D4C95D9B = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xCDFB8C04D4C95D9B, 'void', p0, p1, p2, p3)
end

-- motivationState: see _SET_PED_MOTIVATION
--- @param ped integer
--- @param motivationstate integer
--- @return boolean
natives.ped_getIsPedMotivationStateEnabled = function(ped, motivationstate)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(motivationstate) == 'integer', 'Argument motivationstate must be of type integer.')

    local call = natives.invoke(0x33FA048675821DA7, 'bool', ped, motivationstate)
    return call
end

-- motivationState: see _SET_PED_MOTIVATION
--- @param ped integer
--- @param motivationstate integer
--- @param enabled boolean
natives.ped_setPedMotivationStateOverride = function(ped, motivationstate, enabled)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(motivationstate) == 'integer', 'Argument motivationstate must be of type integer.')
    assert(type(enabled) == 'boolean', 'Argument enabled must be of type boolean.')

    local call = natives.invoke(0x2EB75FB86C41F026, 'void', ped, motivationstate, enabled)
end

-- The higher the modifier, the slower the motivationState value will decrease
--- @param ped integer
--- @param motivationstate integer
--- @param modifier number
natives.ped_setPedMotivationModifier = function(ped, motivationstate, modifier)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(motivationstate) == 'integer', 'Argument motivationstate must be of type integer.')
    assert(type(modifier) == 'number', 'Argument modifier must be of type number.')

    local call = natives.invoke(0xA1EB5D029E0191D3, 'void', ped, motivationstate, modifier)
end

--- @param p0 userdata
--- @param p1 userdata
natives.ped_n0Xfd8E853F0Bc2E942 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xFD8E853F0BC2E942, 'void', p0, p1)
end

-- 0.0 - 1.0
-- Modifies the "scent line" on the ped's body when using Eagle Eye.
--- @param ped integer
--- @param scent number
natives.ped_setPedScent = function(ped, scent)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(scent) == 'number', 'Argument scent must be of type number.')

    local call = natives.invoke(0x01B21B81865E2A1F, 'void', ped, scent)
end

--- @param ped integer
--- @param p1 number
natives.ped_setPedLadderMovementSpeedModifier = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x05CE6AF4DF071D23, 'void', ped, p1)
end

--- @param ped integer
natives.ped_resetPedLadderMovementSpeedModifier = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x801917E7D7BCE418, 'void', ped)
end

--- @param p0 userdata
--- @param p1 userdata
natives.ped_n0Xc6C4E15Cf7D52Fea = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xC6C4E15CF7D52FEA, 'void', p0, p1)
end

-- _SET_PED_S* - _SET_PED_T*
--- @param ped integer
--- @param volume number
natives.ped_setPedVoiceVolume = function(ped, volume)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(volume) == 'number', 'Argument volume must be of type number.')

    local call = natives.invoke(0xD05AD61F242C626B, 'void', ped, volume)
end

--- @param p0 userdata
--- @param p1 userdata
natives.ped_n0X0F967019Cc853Bcc = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x0F967019CC853BCC, 'void', p0, p1)
end

--- @param ped integer
--- @return boolean
natives.ped_isPedDragging = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x226CF9B159E38F42, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedBeingDragged = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xEF3A8772F085B4AA, 'bool', ped)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.ped_n0X070A3841406C43D5 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x070A3841406C43D5, 'void', p0, p1)
end

--- @param ped integer
--- @param volume integer
--- @return boolean
natives.ped_addPedStayOutVolume = function(ped, volume)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')

    local call = natives.invoke(0xE9B168527B337BF0, 'bool', ped, volume)
    return call
end

--- @param ped integer
--- @param volume integer
--- @return boolean
natives.ped_removePedStayOutVolume = function(ped, volume)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')

    local call = natives.invoke(0x0CAB404CD2DB41F5, 'bool', ped, volume)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.ped_n0X9E66708B2B41F14A = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x9E66708B2B41F14A, 'void', p0, p1)
end

--- @param ped integer
--- @param p1 userdata
natives.ped_n0Xf634E2892220Ef34 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xF634E2892220EF34, 'void', ped, p1)
end

--- @param ped integer
--- @param targetped integer
natives.ped_n0Xaac0Ee3B4999Abb5 = function(ped, targetped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(targetped) == 'integer', 'Argument targetped must be of type integer.')

    local call = natives.invoke(0xAAC0EE3B4999ABB5, 'void', ped, targetped)
end

--- @param ped integer
--- @return number
natives.ped_getPedMotionFocusEntity = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x243E1B4607040057, 'int', ped)
    return call
end

-- Sets MetaPedExpression at index specified. Morphs components, such as changing body size or facial features.
-- 
-- Note: You have to update the ped's variation (using 0xCC8CA3E88256E58F) after calling this native
-- 
-- index = MetaPedExpression IDs
-- List of face features: https:--pastebin.com/9jb88FXW
-- Full list of MetaPedExpressions: https:--pastebin.com/Ld76cAn7
-- value: -1.0 to 1.0 (values beyond this likely won't sync to other clients)
-- 
-- This native also allows you to change a horse's gender.
-- 
-- Old name: _SET_PED_FACE_FEATURE
--- @param ped integer
--- @param index integer
--- @param value number
natives.ped_setCharExpression = function(ped, index, value)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0x5653AB26C82938CF, 'void', ped, index, value)
end

-- Gets MetaPedExpression at index specified
-- 
-- For index, see: _SET_CHAR_EXPRESSION
-- 
-- Old name: _GET_PED_FACE_FEATURE
--- @param ped integer
--- @param index integer
--- @return number
natives.ped_getCharExpression = function(ped, index)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0xFD1BA1EEF7985BB8, 'float', ped, index)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.ped_n0X5Bb04Bc74A474B47 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x5BB04BC74A474B47, 'void', p0, p1)
end

--- @param p0 userdata
natives.ped_n0X9078Fb0557364099 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x9078FB0557364099, 'void', p0)
end

--- @param ped integer
--- @return boolean
natives.ped_isPedFallingOver = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x3E592D0486DEC0F6, 'bool', ped)
    return call
end

--- @param ped integer
--- @param ms integer
--- @return boolean
natives.ped_hasPedBeenShovedRecently = function(ped, ms)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(ms) == 'integer', 'Argument ms must be of type integer.')

    local call = natives.invoke(0x29FCE825613FEFCA, 'bool', ped, ms)
    return call
end

--- @param ped integer
--- @return number
natives.ped_getPedTranquilizer = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x65C75FDCCAC86464, 'int', ped)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.ped_n0X0D497Aa69059Fe40 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x0D497AA69059FE40, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.ped_n0Xd7D2F45C56A4F4Df = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xD7D2F45C56A4F4DF, 'void', p0, p1, p2)
end

-- The higher the multiplier the less the engine renders culls (https:--docs.unity3d.com/Manual/OcclusionCulling.html)
--- @param ped integer
--- @param p1 number
--- @param p2 number
natives.ped_setPedCullRange = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')

    local call = natives.invoke(0x8AC1D721B2097B6E, 'void', ped, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
natives.ped_n0X1D23D3F70606D788 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x1D23D3F70606D788, 'void', p0, p1)
end

-- enum eMetaPedType
-- {
-- 	MPT_MALE,
-- 	MPT_FEMALE,
-- 	MPT_TEEN,
-- 	MPT_ANIMAL,
-- 	MPT_NONE
-- };
--- @param ped integer
--- @return number
natives.ped_getMetaPedType = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xEC9A1261BF0CE510, 'int', ped)
    return call
end

--- @param ped integer
--- @param component integer
--- @return boolean
natives.ped_isMetaPedUsingComponent = function(ped, component)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(component) == 'integer', 'Argument component must be of type integer.')

    local call = natives.invoke(0xFB4891BD7578CDC1, 'bool', ped, component)
    return call
end

-- _IS_PED_M* - _IS_PED_O*
--- @param ped integer
--- @return boolean
natives.ped_n0Xbd0E4F52F6D95242 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xBD0E4F52F6D95242, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_isPedChild = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x137772000DAF42C5, 'bool', ped)
    return call
end

--- @param ped integer
--- @param p1 integer
natives.ped_n0Xffa1594703Ed27Ca = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xFFA1594703ED27CA, 'void', ped, p1)
end

-- Use to apply metaped player components
-- Replaces asset, alternatively you can remove assets using REMOVE_TAG_FROM_META_PED
--- @param ped integer
--- @param drawable integer
--- @param albedo integer
--- @param normal integer
--- @param material integer
--- @param palette integer
--- @param tint0 integer
--- @param tint1 integer
--- @param tint2 integer
natives.ped_setMetaPedTag = function(ped, drawable, albedo, normal, material, palette, tint0, tint1, tint2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(drawable) == 'integer', 'Argument drawable must be of type integer.')
    assert(type(albedo) == 'integer', 'Argument albedo must be of type integer.')
    assert(type(normal) == 'integer', 'Argument normal must be of type integer.')
    assert(type(material) == 'integer', 'Argument material must be of type integer.')
    assert(type(palette) == 'integer', 'Argument palette must be of type integer.')
    assert(type(tint0) == 'integer', 'Argument tint0 must be of type integer.')
    assert(type(tint1) == 'integer', 'Argument tint1 must be of type integer.')
    assert(type(tint2) == 'integer', 'Argument tint2 must be of type integer.')

    local call = natives.invoke(0xBC6DF00D7A4A6819, 'void', ped, drawable, albedo, normal, material, palette, tint0, tint1, tint2)
end

--- @param ped integer
--- @param component integer
--- @param p2 integer
natives.ped_removeTagFromMetaPed = function(ped, component, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(component) == 'integer', 'Argument component must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0xD710A5007C2AC539, 'void', ped, component, p2)
end

--- @param p0 userdata
--- @param p1 userdata
natives.ped_n0Xa2B8E47442C76Cec = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xA2B8E47442C76CEC, 'void', p0, p1)
end

-- Works similar to 0x90403E8107B60E81 (_GET_NUM_COMPONENTS_IN_PED) but is used to get category hashes instead
--- @param ped integer
--- @return number
natives.ped_getNumComponentCategoriesInPed = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xA622E66EEE92A08D, 'int', ped)
    return call
end

-- Returns category hash that each ped component has. Hash examples: MASKS, HATS, HEADS, HORSE_MANES
--- @param ped integer
--- @param index integer
--- @return number
natives.ped_getPedComponentCategoryByIndex = function(ped, index)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0xCCB97B51893C662F, 'integer', ped, index)
    return call
end

--- @param ped integer
--- @return number
natives.ped_getNumComponentsInPed = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x90403E8107B60E81, 'int', ped)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.ped_n0X9B90842304C938A7 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x9B90842304C938A7, 'any', p0, p1, p2)
    return call
end

-- Update variation on ped, needed after first creation, or when component or texture/overlay is changed
--- @param ped integer
--- @param p1 boolean
--- @param p2 boolean
--- @param p3 boolean
--- @param p4 boolean
--- @param p5 boolean
natives.ped_updatePedVariation = function(ped, p1, p2, p3, p4, p5)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')

    local call = natives.invoke(0xCC8CA3E88256E58F, 'void', ped, p1, p2, p3, p4, p5)
end

--- @param p0 userdata
--- @param p1 userdata
natives.ped_n0Xcb1A3864C524F784 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xCB1A3864C524F784, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.ped_n0Xfa0D206B489A6846 = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0xFA0D206B489A6846, 'void', p0, p1, p2, p3, p4)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.ped_n0Xa4Ac05B1A364Ebc5 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xA4AC05B1A364EBC5, 'any', p0, p1, p2)
    return call
end

--- @param p0 userdata
natives.ped_n0X1298B3D8E4C2409F = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x1298B3D8E4C2409F, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.ped_n0Xa274F51Ef7E34B95 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xA274F51EF7E34B95, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @return any
natives.ped_n0Xc2Ef407645Beecdc = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xC2EF407645BEECDC, 'any', p0)
    return call
end

-- Note: you have to update your ped's variation after calling (using 0xCC8CA3E88256E58F)
-- 
-- Body Types:
-- MPCREATOR_NEUTRAL
-- MPCREATOR_SKINNY
-- MPCREATOR_SKINNY_MUSCULAR
-- MPCREATOR_HEAVY
-- MPCREATOR_HEAVY_MUSCULAR
-- 
-- eBodyWeightOutfit (pedattributes.ymt):
-- -2045421226 (smallest)
-- -1745814259
-- -325933489
-- -1065791927
-- -844699484
-- -1273449080
-- 927185840
-- 149872391
-- 399015098
-- -644349862
-- 1745919061 (default)
-- 1004225511
-- 1278600348
-- 502499352
-- -2093198664
-- -1837436619
-- 1736416063
-- 2040610690
-- -1173634986
-- -867801909
-- 1960266524 (biggest)
-- 
-- https:--github.com/femga/rdr3_discoveries/blob/master/peds_customization/ped_outfits.lua
-- 
-- Alt name: _EQUIP_META_PED_OUTFIT_COMPONENT
--- @param ped integer
--- @param hash integer
natives.ped_equipMetaPedOutfit = function(ped, hash)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(hash) == 'integer', 'Argument hash must be of type integer.')

    local call = natives.invoke(0x1902C4CFCC5BE57C, 'void', ped, hash)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.ped_n0Xfa742B82D093D848 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xFA742B82D093D848, 'void', p0, p1, p2)
end

--- @param ped integer
--- @return number
natives.ped_getPedMetaOutfitHash = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x30569F348D126A5A, 'integer', ped)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.ped_n0Xa2F8B3B5Fedfc100 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xA2F8B3B5FEDFC100, 'void', p0, p1)
end

--- @param ped integer
--- @param suboutfit integer
--- @param p2 integer
natives.ped_equipMetaPedSuboutfit = function(ped, suboutfit, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(suboutfit) == 'integer', 'Argument suboutfit must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x66FF395445A88A6E, 'void', ped, suboutfit, p2)
end

--- @param outfit integer
--- @param model integer
--- @return boolean
natives.ped_doesMetaPedOutfitExistForPedModel = function(outfit, model)
    assert(type(outfit) == 'integer', 'Argument outfit must be of type integer.')
    assert(type(model) == 'integer', 'Argument model must be of type integer.')

    local call = natives.invoke(0xC0E880B7A441164D, 'bool', outfit, model)
    return call
end

--- @param outfit integer
--- @param suboutfit integer
--- @param model integer
--- @return boolean
natives.ped_doesMetaPedSuboutfitExistForPedModel = function(outfit, suboutfit, model)
    assert(type(outfit) == 'integer', 'Argument outfit must be of type integer.')
    assert(type(suboutfit) == 'integer', 'Argument suboutfit must be of type integer.')
    assert(type(model) == 'integer', 'Argument model must be of type integer.')

    local call = natives.invoke(0x4FF3C2B4E6A196C1, 'bool', outfit, suboutfit, model)
    return call
end

-- Returns p1 value for 0x8E84119A23C16623
--- @param entity integer
--- @param p1 userdata
--- @return any
natives.ped_n0X62Fdf4E678E40Cc6 = function(entity, p1)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x62FDF4E678E40CC6, 'any', entity, p1)
    return call
end

--- @param ped integer
natives.ped_resetPedComponents = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x0BFA1BD465CDFEFD, 'void', ped)
end

-- _RESET_PED_*
--- @param ped integer
--- @param p1 boolean
natives.ped_n0X370A973252741Ac4 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x370A973252741AC4, 'void', ped, p1)
end

--- @param ped integer
--- @param p1 boolean
natives.ped_setRandomOutfitVariation = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x283978A15512B2FE, 'void', ped, p1)
end

--- @param ped integer
--- @return number
natives.ped_getNumMetaPedOutfits = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x10C70A515BC03707, 'int', ped)
    return call
end

-- Sets the outfit preset for the ped. The presetId is an index which determines its preset outfit. p2 is always false in the scripts.
-- If p2 is true as player, then certain components like facial hair and hair will not be removed.
-- Old name: _SET_PED_OUTFIT_PRESET
--- @param ped integer
--- @param presetid integer
--- @param p2 boolean
natives.ped_equipMetaPedOutfitPreset = function(ped, presetid, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(presetid) == 'integer', 'Argument presetid must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x77FF8D35EEC6BBC4, 'void', ped, presetid, p2)
end

-- Changes Multiplayer ped face and body type components, they can be stacked
-- Params: p3 = 1
-- Body shape for mp_male from 124 - 128, 110 - 115 for mp_female
-- Face shape for mp_male from 110 - 123, 96 - 109 for mp_female
-- Cloth type for mp_male from 0 - 109, 0 - 95 for mp_female
--- @param ped integer
--- @param component integer
--- @param p2 userdata
--- @param p3 userdata
natives.ped_equipMetaPedOutfitExtra = function(ped, component, p2, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(component) == 'integer', 'Argument component must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xA5BAE410B03E7371, 'void', ped, component, p2, p3)
end

-- Used in script function HORSE_IS_META_PED_OUTFIT_SADDLE_EQUIPPED
--- @param ped integer
--- @param outfit integer
--- @return boolean
natives.ped_isMetaPedOutfitEquipped = function(ped, outfit)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(outfit) == 'integer', 'Argument outfit must be of type integer.')

    local call = natives.invoke(0x98082246107A6ACF, 'bool', ped, outfit)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.ped_n0X851966E1E35Af491 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x851966E1E35AF491, 'void', p0, p1)
end

-- Used in script function METAPED_CLOTHING__XML__APPLY_OUTFIT_TINTS_TO_PED
--- @param ped integer
--- @param componentcategory integer
--- @param palette integer
--- @param tint0 integer
--- @param tint1 integer
--- @param tint2 integer
natives.ped_setTextureOutfitTints = function(ped, componentcategory, palette, tint0, tint1, tint2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(componentcategory) == 'integer', 'Argument componentcategory must be of type integer.')
    assert(type(palette) == 'integer', 'Argument palette must be of type integer.')
    assert(type(tint0) == 'integer', 'Argument tint0 must be of type integer.')
    assert(type(tint1) == 'integer', 'Argument tint1 must be of type integer.')
    assert(type(tint2) == 'integer', 'Argument tint2 must be of type integer.')

    local call = natives.invoke(0x4EFC1F8FF1AD94DE, 'void', ped, componentcategory, palette, tint0, tint1, tint2)
end

-- Returns requestId
-- Params: p1 = 1 in R* Scripts (Used in SP only)
--- @param model integer
--- @param p1 integer
--- @return number
natives.ped_requestMetaPed = function(model, p1)
    assert(type(model) == 'integer', 'Argument model must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xF97C34C33487D569, 'int', model, p1)
    return call
end

--- @param requestid integer
--- @return boolean
natives.ped_hasMetaPedRequestLoaded = function(requestid)
    assert(type(requestid) == 'integer', 'Argument requestid must be of type integer.')

    local call = natives.invoke(0xC0940AC858C1E126, 'bool', requestid)
    return call
end

--- @param requestid integer
--- @return boolean
natives.ped_isMetaPedRequestValid = function(requestid)
    assert(type(requestid) == 'integer', 'Argument requestid must be of type integer.')

    local call = natives.invoke(0x43E4DA469541A9C9, 'bool', requestid)
    return call
end

-- Only used in SP scripts, for example odriscolls1: BOOLS: true, true, true, false, false
--- @param requestid integer
--- @param x number
--- @param y number
--- @param z number
--- @param heading number
--- @param p5 boolean
--- @param p6 boolean
--- @param p7 boolean
--- @param p8 boolean
--- @param p9 boolean
--- @return number
natives.ped_createMetaPed = function(requestid, x, y, z, heading, p5, p6, p7, p8, p9)
    assert(type(requestid) == 'integer', 'Argument requestid must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(heading) == 'number', 'Argument heading must be of type number.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')
    assert(type(p7) == 'boolean', 'Argument p7 must be of type boolean.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')
    assert(type(p9) == 'boolean', 'Argument p9 must be of type boolean.')

    local call = natives.invoke(0x0BCD4091C8EABA42, 'int', requestid, x, y, z, heading, p5, p6, p7, p8, p9)
    return call
end

--- @param requestid integer
natives.ped_releaseMetaPedRequest = function(requestid)
    assert(type(requestid) == 'integer', 'Argument requestid must be of type integer.')

    local call = natives.invoke(0x3972F78A78B5D9DF, 'void', requestid)
end

-- https:--github.com/femga/rdr3_discoveries/blob/master/clothes/metaped_outfits.lua
-- Returns requestId, to be used with 0x74F512E29CB717E2
--- @param model integer
--- @param outfit integer
--- @return number
natives.ped_requestMetaPedOutfit = function(model, outfit)
    assert(type(model) == 'integer', 'Argument model must be of type integer.')
    assert(type(outfit) == 'integer', 'Argument outfit must be of type integer.')

    local call = natives.invoke(0x13154A76CE0CF9AB, 'int', model, outfit)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.ped_n0X27E8A84C12B0B7D1 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x27E8A84C12B0B7D1, 'any', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.ped_n0X273915Ce30780986 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x273915CE30780986, 'any', p0, p1)
    return call
end

--- @param requestid integer
natives.ped_releaseMetaPedOutfitRequest = function(requestid)
    assert(type(requestid) == 'integer', 'Argument requestid must be of type integer.')

    local call = natives.invoke(0x4592B8B9B0EF5F48, 'void', requestid)
end

-- Used for script function PROCESS_PLAYER_HAT_EVENT
-- Returns requestId to be used with 0x13E7320C762F0477
--- @param drawable integer
--- @param albedo integer
--- @param normal integer
--- @param material integer
--- @param p4 userdata
--- @return number
natives.ped_n0X3Fcbb5Fcfd968698 = function(drawable, albedo, normal, material, p4)
    assert(type(drawable) == 'integer', 'Argument drawable must be of type integer.')
    assert(type(albedo) == 'integer', 'Argument albedo must be of type integer.')
    assert(type(normal) == 'integer', 'Argument normal must be of type integer.')
    assert(type(material) == 'integer', 'Argument material must be of type integer.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x3FCBB5FCFD968698, 'int', drawable, albedo, normal, material, p4)
    return call
end

-- Returns requestId
-- Params: p1 = 1 in R* Scripts
--- @param asset integer
--- @param p1 integer
--- @return number
natives.ped_requestMetaPedAssetBundle = function(asset, p1)
    assert(type(asset) == 'integer', 'Argument asset must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x91FE941F9FCFB702, 'int', asset, p1)
    return call
end

--- @param metapedtype integer
--- @param p1 userdata
--- @param p2 integer
--- @param p3 integer
--- @param p4 integer
--- @return any
natives.ped_requestMetaPedComponent = function(metapedtype, p1, p2, p3, p4)
    assert(type(metapedtype) == 'integer', 'Argument metapedtype must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')

    local call = natives.invoke(0xF6D9E1F3560CBF8E, 'any', metapedtype, p1, p2, p3, p4)
    return call
end

--- @param requestid integer
natives.ped_releaseMetaPedAssetRequest = function(requestid)
    assert(type(requestid) == 'integer', 'Argument requestid must be of type integer.')

    local call = natives.invoke(0x13E7320C762F0477, 'void', requestid)
end

--- @param requestid integer
--- @return boolean
natives.ped_hasMetaPedAssetLoaded = function(requestid)
    assert(type(requestid) == 'integer', 'Argument requestid must be of type integer.')

    local call = natives.invoke(0xB0B2C6D170B0E8E5, 'bool', requestid)
    return call
end

--- @param requestid integer
--- @return boolean
natives.ped_isMetaPedAssetValid = function(requestid)
    assert(type(requestid) == 'integer', 'Argument requestid must be of type integer.')

    local call = natives.invoke(0x93FFD92F05EC32FD, 'bool', requestid)
    return call
end

-- Creates prop from metaped asset bundle
-- https:--github.com/femga/rdr3_discoveries/blob/master/objects/metaped_asset_bundles_list.lua
-- Creates a pickup-able metaped component. asset doesn't seems to be related to component hashes. Hash example : 0xD20354AB (https :--i.imgur.com/dzHkcDb.png)
--- @param asset integer
--- @param posx number
--- @param posy number
--- @param posz number
--- @param rotx number
--- @param roty number
--- @param rotz number
--- @param p7 boolean
--- @param p8 boolean
--- @param p9 boolean
--- @return number
natives.ped_createMetaPedAsset = function(asset, posx, posy, posz, rotx, roty, rotz, p7, p8, p9)
    assert(type(asset) == 'integer', 'Argument asset must be of type integer.')
    assert(type(posx) == 'number', 'Argument posx must be of type number.')
    assert(type(posy) == 'number', 'Argument posy must be of type number.')
    assert(type(posz) == 'number', 'Argument posz must be of type number.')
    assert(type(rotx) == 'number', 'Argument rotx must be of type number.')
    assert(type(roty) == 'number', 'Argument roty must be of type number.')
    assert(type(rotz) == 'number', 'Argument rotz must be of type number.')
    assert(type(p7) == 'boolean', 'Argument p7 must be of type boolean.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')
    assert(type(p9) == 'boolean', 'Argument p9 must be of type boolean.')

    local call = natives.invoke(0x9641A9A20310F6B8, 'int', asset, posx, posy, posz, rotx, roty, rotz, p7, p8, p9)
    return call
end

--- @param requestid integer
--- @return boolean
natives.ped_hasMetaPedOutfitLoaded = function(requestid)
    assert(type(requestid) == 'integer', 'Argument requestid must be of type integer.')

    local call = natives.invoke(0x610438375E5D1801, 'bool', requestid)
    return call
end

--- @param requestid integer
--- @return boolean
natives.ped_isMetaPedOutfitRequestValid = function(requestid)
    assert(type(requestid) == 'integer', 'Argument requestid must be of type integer.')

    local call = natives.invoke(0xB25E57FC8E37114D, 'bool', requestid)
    return call
end

-- Creates metaped from ped outfit requestId. See _REQUEST_METAPED_OUTFIT
--- @param requestid integer
--- @param x number
--- @param y number
--- @param z number
--- @param heading number
--- @param p5 boolean
--- @param p6 boolean
--- @param p7 boolean
--- @param p8 boolean
--- @return number
natives.ped_createMetaPedOutfitPed = function(requestid, x, y, z, heading, p5, p6, p7, p8)
    assert(type(requestid) == 'integer', 'Argument requestid must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(heading) == 'number', 'Argument heading must be of type number.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')
    assert(type(p7) == 'boolean', 'Argument p7 must be of type boolean.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')

    local call = natives.invoke(0xEAF682A14F8E5F53, 'int', requestid, x, y, z, heading, p5, p6, p7, p8)
    return call
end

-- https:--github.com/femga/rdr3_discoveries/blob/master/clothes/metaped_outfits.lua
--- @param requestid integer
--- @param ped integer
--- @param p2 boolean
--- @param p3 boolean
--- @return boolean
natives.ped_applyPedMetaPedOutfit = function(requestid, ped, p2, p3)
    assert(type(requestid) == 'integer', 'Argument requestid must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0x74F512E29CB717E2, 'bool', requestid, ped, p2, p3)
    return call
end

-- Sets ped eye redness, weariness: 0.f to 1.f
--- @param ped integer
--- @param weariness number
natives.ped_setMetaPedWeariness = function(ped, weariness)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weariness) == 'number', 'Argument weariness must be of type number.')

    local call = natives.invoke(0x314C5465195F3B30, 'void', ped, weariness)
end

-- Used in Script Function MOONSHINE_BAND_CLIENT_PATRON_UPDATE
--- @param ped integer
--- @param danceintensity integer
natives.ped_n0Xf47D54B986F0A346 = function(ped, danceintensity)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(danceintensity) == 'integer', 'Argument danceintensity must be of type integer.')

    local call = natives.invoke(0xF47D54B986F0A346, 'void', ped, danceintensity)
end

--- @param p0 userdata
natives.ped_n0X3Efed081B4834Ba1 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x3EFED081B4834BA1, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.ped_n0X0Fb1Ba7Ff73B41E1 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x0FB1BA7FF73B41E1, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @return any
natives.ped_n0Xb292203008Ebbaac = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xB292203008EBBAAC, 'any', p0)
    return call
end

--- @param ped integer
--- @return boolean
natives.ped_n0Xd4D403Ea031F351C = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xD4D403EA031F351C, 'bool', ped)
    return call
end

-- Returns peltId
--- @param horse integer
--- @param index integer
--- @return number
natives.ped_getPeltFromHorse = function(horse, index)
    assert(type(horse) == 'integer', 'Argument horse must be of type integer.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0x0CEEB6F4780B1F2F, 'int', horse, index)
    return call
end

--- @param horse integer
--- @param peltid integer
natives.ped_setPeltForHorse = function(horse, peltid)
    assert(type(horse) == 'integer', 'Argument horse must be of type integer.')
    assert(type(peltid) == 'integer', 'Argument peltid must be of type integer.')

    local call = natives.invoke(0xA73F50E8796150D5, 'void', horse, peltid)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.ped_n0Xc412Aa1C73111Fe0 = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0xC412AA1C73111FE0, 'void', p0, p1, p2, p3, p4)
end

--- @param horse integer
--- @param peltid integer
natives.ped_clearPeltFromHorse = function(horse, peltid)
    assert(type(horse) == 'integer', 'Argument horse must be of type integer.')
    assert(type(peltid) == 'integer', 'Argument peltid must be of type integer.')

    local call = natives.invoke(0x627F7F3A0C4C51FF, 'void', horse, peltid)
end

--- @param ped integer
--- @param toggle boolean
natives.ped_setPedLights = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x13A210949FCBD92B, 'void', ped, toggle)
end

--- @param ped integer
--- @param p1 integer
--- @param p2 number
natives.ped_n0Xd049Fdaf089Fddb0 = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')

    local call = natives.invoke(0xD049FDAF089FDDB0, 'void', ped, p1, p2)
end

--- @param ped integer
--- @param p1 integer
--- @param r number
--- @param g number
--- @param b number
natives.ped_n0Xdd9540E7B1C9714F = function(ped, p1, r, g, b)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(r) == 'number', 'Argument r must be of type number.')
    assert(type(g) == 'number', 'Argument g must be of type number.')
    assert(type(b) == 'number', 'Argument b must be of type number.')

    local call = natives.invoke(0xDD9540E7B1C9714F, 'void', ped, p1, r, g, b)
end

--- @param p0 userdata
--- @param p1 userdata
natives.ped_n0X55546004A244302A = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x55546004A244302A, 'void', p0, p1)
end

--- @param ped integer
--- @param multiplier integer
natives.ped_setHealthRechargeMultiplier = function(ped, multiplier)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(multiplier) == 'integer', 'Argument multiplier must be of type integer.')

    local call = natives.invoke(0xDE1B1907A83A1550, 'void', ped, multiplier)
end

--- @param ped integer
--- @return number
natives.ped_getHealthRechargeMultiplier = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x95B8E397B8F4360F, 'float', ped)
    return call
end

--- @param ped integer
--- @param multiplier integer
natives.ped_setStaminaDepletionMultiplier = function(ped, multiplier)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(multiplier) == 'integer', 'Argument multiplier must be of type integer.')

    local call = natives.invoke(0xEF5A3D2285D8924B, 'void', ped, multiplier)
end

--- @param ped integer
--- @return number
natives.ped_getStaminaDepletionMultiplier = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x825F6DD559A0895B, 'float', ped)
    return call
end

--- @param ped integer
--- @param multiplier integer
natives.ped_setStaminaRechargeMultiplier = function(ped, multiplier)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(multiplier) == 'integer', 'Argument multiplier must be of type integer.')

    local call = natives.invoke(0x345C9F993A8AB4A4, 'void', ped, multiplier)
end

--- @param ped integer
--- @return number
natives.ped_getStaminaRechargeMultiplier = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xE7687EB2F634ABF0, 'float', ped)
    return call
end

-- Alters entity's stamina by 'amount'. Can be negative (to drain stamina). float amount: -1000.0 - 1000.0
--- @param ped integer
--- @param amount number
--- @return boolean
natives.ped_changePedStamina = function(ped, amount)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(amount) == 'number', 'Argument amount must be of type number.')

    local call = natives.invoke(0xC3D4B754C0E86B9E, 'bool', ped, amount)
    return call
end

--- @param ped integer
--- @return number
natives.ped_getPedStamina = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x775A1CA7893AA8B5, 'float', ped)
    return call
end

-- Returns stamina normalizedValue / normalizedUnlockedMax
--- @param ped integer
--- @return number
natives.ped_getPedStaminaNormalized = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x22F2A386D43048A9, 'float', ped)
    return call
end

--- @param ped integer
--- @return number
natives.ped_getPedMaxStamina = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xCB42AFE2B613EE55, 'float', ped)
    return call
end

-- _RESET_PED_*
--- @param p0 userdata
natives.ped_n0X36513Affc703C60D = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x36513AFFC703C60D, 'void', p0)
end

-- 0.0 <= stamina <= 100.0
--- @param ped integer
--- @param stamina number
natives.ped_restorePedStamina = function(ped, stamina)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(stamina) == 'number', 'Argument stamina must be of type number.')

    local call = natives.invoke(0x675680D089BFA21F, 'void', ped, stamina)
end

--- @param ped integer
--- @return number
natives.ped_n0Xfc3B580C4380B5B7 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xFC3B580C4380B5B7, 'int', ped)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.ped_n0Xea8763E505Afd49A = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xEA8763E505AFD49A, 'void', p0, p1, p2)
end

--- @param p0 userdata
natives.ped_n0Xe4Ef4382E22C780C = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xE4EF4382E22C780C, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.ped_n0Xd61Fcf9Fcfd515B7 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xD61FCF9FCFD515B7, 'void', p0, p1, p2)
end

--- @param p0 userdata
natives.ped_n0X8D9Db115Fba8E23D = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x8D9DB115FBA8E23D, 'void', p0)
end

--- @param ped integer
--- @return any
natives.ped_getNumReservedHealth = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x16F2C8C084AB2092, 'any', ped)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @return any
natives.ped_n0Xd97Bc27Ac039F681 = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xD97BC27AC039F681, 'any', p0, p1, p2, p3)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @return any
natives.ped_n0Xf6A8C4B4A11Ae89C = function(p0, p1, p2, p3, p4, p5)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0xF6A8C4B4A11AE89C, 'any', p0, p1, p2, p3, p4, p5)
    return call
end

--- @param ped integer
--- @param p1 userdata
natives.ped_n0Xe4C95E0Ae31C6512 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xE4C95E0AE31C6512, 'void', ped, p1)
end

--- @param ped integer
--- @return number
natives.ped_getPedLastDroppedHat = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x1F714E7A9DADFC42, 'integer', ped)
    return call
end

-- Related to ped hat
-- _SET_PED_LA* - _SET_PED_LE*
--- @param ped integer
--- @param p1 boolean
natives.ped_n0X5D4Cd22A8C82A81A = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x5D4CD22A8C82A81A, 'void', ped, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.ped_n0Xbf567Df2Bef211A6 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xBF567DF2BEF211A6, 'void', p0, p1)
end

-- Creates a handle to an instance of "CScriptResource_GravityWell", this system forces local ped to target specified position when moving, however player still can interrupt this.
-- Can be useful to "point" player at some specific position.
-- Only works while on-foot.
-- 
-- _CREATE_[P-Z]
--- @param xpos number
--- @param ypos number
--- @param zpos number
--- @param heading number
--- @param radius number
--- @param p5 number
--- @param p6 number
--- @param p7 number
--- @param stopatdestination boolean
--- @return number
natives.ped_createGravityWell = function(xpos, ypos, zpos, heading, radius, p5, p6, p7, stopatdestination)
    assert(type(xpos) == 'number', 'Argument xpos must be of type number.')
    assert(type(ypos) == 'number', 'Argument ypos must be of type number.')
    assert(type(zpos) == 'number', 'Argument zpos must be of type number.')
    assert(type(heading) == 'number', 'Argument heading must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'number', 'Argument p6 must be of type number.')
    assert(type(p7) == 'number', 'Argument p7 must be of type number.')
    assert(type(stopatdestination) == 'boolean', 'Argument stopatdestination must be of type boolean.')

    local call = natives.invoke(0x4F5EBE70081E5A20, 'int', xpos, ypos, zpos, heading, radius, p5, p6, p7, stopatdestination)
    return call
end

-- Removes gravity well by handle returned from 0x4F5EBE70081E5A20
--- @param handle integer
natives.ped_removeGravityWell = function(handle)
    assert(type(handle) == 'integer', 'Argument handle must be of type integer.')

    local call = natives.invoke(0x87247BC60B60BED8, 'void', handle)
end

--- @param ped integer
--- @return boolean
natives.ped_isPedIntimidated = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x57779B55B83E2BEA, 'bool', ped)
    return call
end

-- _IS_PED_H* - _IS_PED_I*
--- @param ped integer
--- @return boolean
natives.ped_n0X7Ee3A8660F38797E = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x7EE3A8660F38797E, 'bool', ped)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.ped_n0Xa180Fbd502A03125 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xA180FBD502A03125, 'any', p0, p1, p2)
    return call
end

-- Creates a texture override data for ped and returns it's index.
-- So you can replace any texture of any ped's component.
-- Also, you can add overlays on it, such as aging, lipstick and more.
-- Textures can be reused by multiple peds at once.
-- You can keep only 32 textures at once(including other peds).
-- 
-- https:--github.com/femga/rdr3_discoveries/blob/master/clothes/change_overlays_script.lua
-- materialHash: https:--github.com/femga/rdr3_discoveries/blob/master/clothes/cloth_drawable_albedo_normal_material_TEMPORARY.lua
--- @param albedohash integer
--- @param normalhash integer
--- @param materialhash integer
--- @return number
natives.ped_requestTexture = function(albedohash, normalhash, materialhash)
    assert(type(albedohash) == 'integer', 'Argument albedohash must be of type integer.')
    assert(type(normalhash) == 'integer', 'Argument normalhash must be of type integer.')
    assert(type(materialhash) == 'integer', 'Argument materialhash must be of type integer.')

    local call = natives.invoke(0xC5E7204F322E49EB, 'int', albedohash, normalhash, materialhash)
    return call
end

--- @param ped integer
--- @param componenthash integer
--- @param textureid integer
natives.ped_applyTextureOnPed = function(ped, componenthash, textureid)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(componenthash) == 'integer', 'Argument componenthash must be of type integer.')
    assert(type(textureid) == 'integer', 'Argument textureid must be of type integer.')

    local call = natives.invoke(0x0B46E25761519058, 'void', ped, componenthash, textureid)
end

-- Removes a texture created by 0xC5E7204F322E49EB.
--- @param textureid integer
natives.ped_releaseTexture = function(textureid)
    assert(type(textureid) == 'integer', 'Argument textureid must be of type integer.')

    local call = natives.invoke(0x6BEFAA907B076859, 'void', textureid)
end

-- Should be called at least once for any new texture override.
-- Otherwise component textures will be just black.
-- Also needs to be called for updating any ped overlays to apply the changes.
--- @param textureid integer
natives.ped_updatePedTexture = function(textureid)
    assert(type(textureid) == 'integer', 'Argument textureid must be of type integer.')

    local call = natives.invoke(0x92DAABA2C1C10B0E, 'void', textureid)
end

-- Removes every texture layer but the base layer
-- Clearing texture's data: setting params to default values, but keep overlays.
--- @param textureid integer
natives.ped_resetPedTexture = function(textureid)
    assert(type(textureid) == 'integer', 'Argument textureid must be of type integer.')

    local call = natives.invoke(0x8472A1789478F82F, 'void', textureid)
end

--- @param textureid integer
--- @return boolean
natives.ped_isTextureValid = function(textureid)
    assert(type(textureid) == 'integer', 'Argument textureid must be of type integer.')

    local call = natives.invoke(0x31DC8D3F216D8509, 'bool', textureid)
    return call
end

-- Creates ped overlay in texture override data and returns it's index.
-- This index are used for further overlay editing.
-- 
-- albedoHash: a hash of overlay's albedo texture
-- colorType: a color type(from 0 to 2). 0 is used for overlays with RGB colors usually.
--- @param textureid integer
--- @param albedohash integer
--- @param normalhash integer
--- @param materialhash integer
--- @param blendtype integer
--- @param texalpha number
--- @param sheetgridindex integer
--- @return number
natives.ped_addTextureLayer = function(textureid, albedohash, normalhash, materialhash, blendtype, texalpha, sheetgridindex)
    assert(type(textureid) == 'integer', 'Argument textureid must be of type integer.')
    assert(type(albedohash) == 'integer', 'Argument albedohash must be of type integer.')
    assert(type(normalhash) == 'integer', 'Argument normalhash must be of type integer.')
    assert(type(materialhash) == 'integer', 'Argument materialhash must be of type integer.')
    assert(type(blendtype) == 'integer', 'Argument blendtype must be of type integer.')
    assert(type(texalpha) == 'number', 'Argument texalpha must be of type number.')
    assert(type(sheetgridindex) == 'integer', 'Argument sheetgridindex must be of type integer.')

    local call = natives.invoke(0x86BB5FF45F193A02, 'int', textureid, albedohash, normalhash, materialhash, blendtype, texalpha, sheetgridindex)
    return call
end

--- @param textureid integer
--- @param overlayid integer
natives.ped_removePedOverlay = function(textureid, overlayid)
    assert(type(textureid) == 'integer', 'Argument textureid must be of type integer.')
    assert(type(overlayid) == 'integer', 'Argument overlayid must be of type integer.')

    local call = natives.invoke(0x96C349DE04C49011, 'void', textureid, overlayid)
end

--- @param textureid integer
--- @param layerid integer
--- @param sheetgridindex integer
natives.ped_setTextureLayerSheetGridIndex = function(textureid, layerid, sheetgridindex)
    assert(type(textureid) == 'integer', 'Argument textureid must be of type integer.')
    assert(type(layerid) == 'integer', 'Argument layerid must be of type integer.')
    assert(type(sheetgridindex) == 'integer', 'Argument sheetgridindex must be of type integer.')

    local call = natives.invoke(0x3329AAE2882FC8E4, 'void', textureid, layerid, sheetgridindex)
end

--- @param textureid integer
--- @param layerid integer
--- @param texalpha number
natives.ped_setTextureLayerAlpha = function(textureid, layerid, texalpha)
    assert(type(textureid) == 'integer', 'Argument textureid must be of type integer.')
    assert(type(layerid) == 'integer', 'Argument layerid must be of type integer.')
    assert(type(texalpha) == 'number', 'Argument texalpha must be of type number.')

    local call = natives.invoke(0x6C76BC24F8BB709A, 'void', textureid, layerid, texalpha)
end

--- @param textureid integer
--- @param layerid integer
--- @param texrough number
natives.ped_setTextureLayerRoughness = function(textureid, layerid, texrough)
    assert(type(textureid) == 'integer', 'Argument textureid must be of type integer.')
    assert(type(layerid) == 'integer', 'Argument layerid must be of type integer.')
    assert(type(texrough) == 'number', 'Argument texrough must be of type number.')

    local call = natives.invoke(0x057C4F092E2298BE, 'void', textureid, layerid, texrough)
end

-- paletteHash: https:--raw.githubusercontent.com/femga/rdr3_discoveries/master/clothes/cloth_color_palletes.lua
--- @param textureid integer
--- @param layerid integer
--- @param palettehash integer
natives.ped_setTextureLayerPallete = function(textureid, layerid, palettehash)
    assert(type(textureid) == 'integer', 'Argument textureid must be of type integer.')
    assert(type(layerid) == 'integer', 'Argument layerid must be of type integer.')
    assert(type(palettehash) == 'integer', 'Argument palettehash must be of type integer.')

    local call = natives.invoke(0x1ED8588524AC9BE1, 'void', textureid, layerid, palettehash)
end

-- Seem color is not RGB or HSV
--- @param textureid integer
--- @param layerid integer
--- @param tint0 integer
--- @param tint1 integer
--- @param tint2 integer
natives.ped_setTextureLayerTint = function(textureid, layerid, tint0, tint1, tint2)
    assert(type(textureid) == 'integer', 'Argument textureid must be of type integer.')
    assert(type(layerid) == 'integer', 'Argument layerid must be of type integer.')
    assert(type(tint0) == 'integer', 'Argument tint0 must be of type integer.')
    assert(type(tint1) == 'integer', 'Argument tint1 must be of type integer.')
    assert(type(tint2) == 'integer', 'Argument tint2 must be of type integer.')

    local call = natives.invoke(0x2DF59FFE6FFD6044, 'void', textureid, layerid, tint0, tint1, tint2)
end

--- @param textureid integer
--- @param layerid integer
--- @param modtexturehash integer
--- @param modalpha number
--- @param modchannel integer
natives.ped_setTextureLayerMod = function(textureid, layerid, modtexturehash, modalpha, modchannel)
    assert(type(textureid) == 'integer', 'Argument textureid must be of type integer.')
    assert(type(layerid) == 'integer', 'Argument layerid must be of type integer.')
    assert(type(modtexturehash) == 'integer', 'Argument modtexturehash must be of type integer.')
    assert(type(modalpha) == 'number', 'Argument modalpha must be of type number.')
    assert(type(modchannel) == 'integer', 'Argument modchannel must be of type integer.')

    local call = natives.invoke(0xF2EA041F1146D75B, 'void', textureid, layerid, modtexturehash, modalpha, modchannel)
end

--- @param textureid integer
--- @param layerid integer
--- @param albedohash integer
--- @param normalhash integer
--- @param materialhash integer
natives.ped_setTextureLayerTextureMap = function(textureid, layerid, albedohash, normalhash, materialhash)
    assert(type(textureid) == 'integer', 'Argument textureid must be of type integer.')
    assert(type(layerid) == 'integer', 'Argument layerid must be of type integer.')
    assert(type(albedohash) == 'integer', 'Argument albedohash must be of type integer.')
    assert(type(normalhash) == 'integer', 'Argument normalhash must be of type integer.')
    assert(type(materialhash) == 'integer', 'Argument materialhash must be of type integer.')

    local call = natives.invoke(0x253A63B5BADBC398, 'void', textureid, layerid, albedohash, normalhash, materialhash)
end

-- Removes every texture layer
-- Old Name: _RESET_PED_TEXTURE_2
--- @param textureid integer
natives.ped_clearPedTexture = function(textureid)
    assert(type(textureid) == 'integer', 'Argument textureid must be of type integer.')

    local call = natives.invoke(0xB63B9178D0F58D82, 'void', textureid)
end

-- Not implemented.
--- @param ped integer
--- @param p1 userdata
natives.ped_n0Xc991Ef46Fe323867 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xC991EF46FE323867, 'void', ped, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.ped_n0X1F8215D0E446F593 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x1F8215D0E446F593, 'void', p0, p1, p2)
end

--- @param ped integer
--- @param p1 number
--- @return boolean
natives.ped_isLocationSpawnSafe = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0xFB1E7998B8595825, 'bool', ped, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.ped_n0X53Ba7D96B9A421D9 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x53BA7D96B9A421D9, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.ped_n0X96C7B659854De629 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x96C7B659854DE629, 'void', p0, p1)
end

-- -1 - HORSE_ASSIST__NO_CHANGE
--  0 - HORSE_ASSIST__MANUAL
--  1 - HORSE_ASSIST__SEMIASSIST
--  2 - HORSE_ASSIST__FULLASSIST
--- @param horse integer
--- @param avoidancelevel integer
natives.ped_setHorseAvoidanceLevel = function(horse, avoidancelevel)
    assert(type(horse) == 'integer', 'Argument horse must be of type integer.')
    assert(type(avoidancelevel) == 'integer', 'Argument avoidancelevel must be of type integer.')

    local call = natives.invoke(0xDDCF6FEA5D7ACC17, 'void', horse, avoidancelevel)
end

--- @param horse integer
natives.ped_resetHorseAvoidanceLevelToDefault = function(horse)
    assert(type(horse) == 'integer', 'Argument horse must be of type integer.')

    local call = natives.invoke(0x2A5AFD2B8381A6E1, 'void', horse)
end

-- Doesn't actually return anything.
--- @param ped integer
--- @param toggle boolean
--- @return any
natives.ped_setPedUseHorseMapCollision = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xEB72453B6F5B45B0, 'any', ped, toggle)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.ped_n0X5B73975B4F12F7F3 = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x5B73975B4F12F7F3, 'void', p0, p1, p2, p3, p4)
end

-- This is a way to get what drawables a ped has equipped
-- Example: you are able to tell if the ped has the drawable PLAYER_ZERO_HAT_017 attached
-- Note: this works with non shop components, direct .ydd files.
--- @param ped integer
--- @param index integer
--- @param drawable integer
--- @param albedo integer
--- @param normal integer
--- @param material integer
--- @return boolean
natives.ped_getMetaPedAssetGuids = function(ped, index, drawable, albedo, normal, material)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')
    assert(type(drawable) == 'integer', 'Argument drawable must be of type integer.')
    assert(type(albedo) == 'integer', 'Argument albedo must be of type integer.')
    assert(type(normal) == 'integer', 'Argument normal must be of type integer.')
    assert(type(material) == 'integer', 'Argument material must be of type integer.')

    local call = natives.invoke(0xA9C28516A6DC9D56, 'bool', ped, index, drawable, albedo, normal, material)
    return call
end

--- @param ped integer
--- @param index integer
--- @param pallete integer
--- @param tint0 integer
--- @param tint1 integer
--- @param tint2 integer
--- @return boolean
natives.ped_getMetaPedAssetTint = function(ped, index, pallete, tint0, tint1, tint2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')
    assert(type(pallete) == 'integer', 'Argument pallete must be of type integer.')
    assert(type(tint0) == 'integer', 'Argument tint0 must be of type integer.')
    assert(type(tint1) == 'integer', 'Argument tint1 must be of type integer.')
    assert(type(tint2) == 'integer', 'Argument tint2 must be of type integer.')

    local call = natives.invoke(0xE7998FEC53A33BBE, 'bool', ped, index, pallete, tint0, tint1, tint2)
    return call
end

-- https:--github.com/femga/rdr3_discoveries/tree/master/AI/BLACKBOARDS
-- Blackboard natives allow you to apply and check certain data to/for peds.
-- Blackboard bools, floats and strings are subdivided into 6 sections: "all", "animation", "any", "code", "global" and "script"
-- Most changes are only visible for "script" blackboards, some "script" blackboards change ped motions
-- "removeTimer" is self-removal timer, can be "-1" so your data will not be removed by the game (forever); 100 = 1 second
--- @param ped integer
--- @param variablename string
--- @param value integer
--- @param removetimer integer
natives.ped_setPedBlackboardInt = function(ped, variablename, value, removetimer)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(variablename) == 'string', 'Argument variablename must be of type string.')
    assert(type(value) == 'integer', 'Argument value must be of type integer.')
    assert(type(removetimer) == 'integer', 'Argument removetimer must be of type integer.')

    local call = natives.invoke(0x5F53010C4C3F6BAF, 'void', ped, variablename, value, removetimer)
end

--- @param ped integer
--- @param variablename string
--- @param value boolean
--- @param removetimer integer
natives.ped_setPedBlackboardBool = function(ped, variablename, value, removetimer)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(variablename) == 'string', 'Argument variablename must be of type string.')
    assert(type(value) == 'boolean', 'Argument value must be of type boolean.')
    assert(type(removetimer) == 'integer', 'Argument removetimer must be of type integer.')

    local call = natives.invoke(0xCB9401F918CB0F75, 'void', ped, variablename, value, removetimer)
end

--- @param ped integer
--- @param variablename string
--- @param value number
--- @param removetimer integer
natives.ped_setPedBlackboardFloat = function(ped, variablename, value, removetimer)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(variablename) == 'string', 'Argument variablename must be of type string.')
    assert(type(value) == 'number', 'Argument value must be of type number.')
    assert(type(removetimer) == 'integer', 'Argument removetimer must be of type integer.')

    local call = natives.invoke(0x437C08DB4FEBE2BD, 'void', ped, variablename, value, removetimer)
end

-- p1:
-- BodyPartChained
-- OverloadMostInjuredBodyPart
-- 
-- p2:
-- LeftLeg
-- Legs
-- RightArm
--- @param ped integer
--- @param variablename string
--- @param value string
--- @param removetimer integer
natives.ped_setPedBlackboardHash = function(ped, variablename, value, removetimer)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(variablename) == 'string', 'Argument variablename must be of type string.')
    assert(type(value) == 'string', 'Argument value must be of type string.')
    assert(type(removetimer) == 'integer', 'Argument removetimer must be of type integer.')

    local call = natives.invoke(0xA762C9D6CF165E0D, 'void', ped, variablename, value, removetimer)
end

--- @param ped integer
--- @param variablename string
natives.ped_removePedBlackboardInt = function(ped, variablename)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(variablename) == 'string', 'Argument variablename must be of type string.')

    local call = natives.invoke(0x81B75428A7813E67, 'void', ped, variablename)
end

--- @param ped integer
--- @param variablename string
natives.ped_removePedBlackboardBool = function(ped, variablename)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(variablename) == 'string', 'Argument variablename must be of type string.')

    local call = natives.invoke(0xA6F67BEC53379A32, 'void', ped, variablename)
end

--- @param ped integer
--- @param variablename string
natives.ped_removePedBlackboardFloat = function(ped, variablename)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(variablename) == 'string', 'Argument variablename must be of type string.')

    local call = natives.invoke(0x411189E51B8020BA, 'void', ped, variablename)
end

--- @param ped integer
--- @param variablename string
natives.ped_removePedBlackboardHash = function(ped, variablename)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(variablename) == 'string', 'Argument variablename must be of type string.')

    local call = natives.invoke(0x0E17378642156790, 'void', ped, variablename)
end

-- Can be used to get a peds foliage active status: variableName = FoliageActive
--- @param ped integer
--- @param variablename string
--- @return boolean
natives.ped_getPedBlackboardBool = function(ped, variablename)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(variablename) == 'string', 'Argument variablename must be of type string.')

    local call = natives.invoke(0x498F2E77982D6945, 'bool', ped, variablename)
    return call
end

-- Can be used to get a peds foliage raw height: variableName = FoliageHeight
--- @param ped integer
--- @param variablename string
--- @return number
natives.ped_getPedBlackboardFloat = function(ped, variablename)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(variablename) == 'string', 'Argument variablename must be of type string.')

    local call = natives.invoke(0x56E58D4D118FB45E, 'float', ped, variablename)
    return call
end

--- @param ped integer
--- @param variablename string
--- @return number
natives.ped_getPedBlackboardHash = function(ped, variablename)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(variablename) == 'string', 'Argument variablename must be of type string.')

    local call = natives.invoke(0xBF5E791BBBF90A3C, 'integer', ped, variablename)
    return call
end

--- @param ped integer
--- @param variablename string
--- @return number
natives.ped_getPedBlackboardScriptInt = function(ped, variablename)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(variablename) == 'string', 'Argument variablename must be of type string.')

    local call = natives.invoke(0xB71B91B398F8F067, 'int', ped, variablename)
    return call
end

--- @param ped integer
--- @param variablename string
--- @return boolean
natives.ped_getPedBlackboardScriptBool = function(ped, variablename)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(variablename) == 'string', 'Argument variablename must be of type string.')

    local call = natives.invoke(0x4912DFE492DB98CD, 'bool', ped, variablename)
    return call
end

--- @param ped integer
--- @param variablename string
--- @return number
natives.ped_getPedBlackboardScriptFloat = function(ped, variablename)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(variablename) == 'string', 'Argument variablename must be of type string.')

    local call = natives.invoke(0xA29FD00D45311EB7, 'float', ped, variablename)
    return call
end

-- Size will be permanent
--- @param ped integer
--- @param attributeindex integer
--- @param size number
natives.ped_setTankAttributeSize = function(ped, attributeindex, size)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(attributeindex) == 'integer', 'Argument attributeindex must be of type integer.')
    assert(type(size) == 'number', 'Argument size must be of type number.')

    local call = natives.invoke(0x7FF72DE061DF55E2, 'void', ped, attributeindex, size)
end

--- @param p0 userdata
--- @return any
natives.ped_n0Xa31D350D66Fa1855 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xA31D350D66FA1855, 'any', p0)
    return call
end

-- _IS_TRACKED_* - IS_V*
--- @param ped integer
--- @return boolean
natives.ped_isUsingSlipstream = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xAF61B3CD8C3B82C3, 'bool', ped)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
--- @param p9 userdata
natives.ped_n0Xeedc9B29314B2733 = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')

    local call = natives.invoke(0xEEDC9B29314B2733, 'void', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)
end

--- @param p0 userdata
natives.ped_n0X5C90E20C25E6D83C = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x5C90E20C25E6D83C, 'void', p0)
end

-- NB_CUSTOM_CLIENT_ON_CREATE_COMPLETE - set legendary to not avoid prey
--- @param legendaryped integer
--- @param preyped integer
--- @param p2 number
natives.ped_n0X10F96086123B939F = function(legendaryped, preyped, p2)
    assert(type(legendaryped) == 'integer', 'Argument legendaryped must be of type integer.')
    assert(type(preyped) == 'integer', 'Argument preyped must be of type integer.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')

    local call = natives.invoke(0x10F96086123B939F, 'void', legendaryped, preyped, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.ped_n0X3Fdbb99Efd8Ce4Af = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x3FDBB99EFD8CE4AF, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.ped_n0X7E8F9949B7Aabbf0 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x7E8F9949B7AABBF0, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.ped_n0X5Da36Cccb63C0895 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x5DA36CCCB63C0895, 'any', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.ped_n0X56076667E7C2Dcd6 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x56076667E7C2DCD6, 'void', p0, p1)
end

--- @param ped integer
--- @param componenthash integer
--- @param immediately boolean
--- @param ismp boolean
--- @param p4 boolean
natives.ped_applyShopItemToPed = function(ped, componenthash, immediately, ismp, p4)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(componenthash) == 'integer', 'Argument componenthash must be of type integer.')
    assert(type(immediately) == 'boolean', 'Argument immediately must be of type boolean.')
    assert(type(ismp) == 'boolean', 'Argument ismp must be of type boolean.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')

    local call = natives.invoke(0xD3A7B003ED343FD9, 'void', ped, componenthash, immediately, ismp, p4)
end

-- Directly removes a shop item component from a ped
-- Params: p2 and p3 are always 0
--- @param ped integer
--- @param componenthash integer
--- @param p2 integer
--- @param p3 boolean
natives.ped_removeShopItemFromPed = function(ped, componenthash, p2, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(componenthash) == 'integer', 'Argument componenthash must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0x0D7FFA1B2F69ED82, 'void', ped, componenthash, p2, p3)
end

-- Params: p2, p3 usually 0 in R* Scripts
--- @param ped integer
--- @param componentcategory integer
--- @param p2 integer
--- @param p3 boolean
natives.ped_removeShopItemFromPedByCategory = function(ped, componentcategory, p2, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(componentcategory) == 'integer', 'Argument componentcategory must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0xDF631E4BCE1B1FC4, 'void', ped, componentcategory, p2, p3)
end

--- @param ped integer
--- @param componenthash integer
--- @param wearablestate integer
--- @param p3 integer
--- @param p4 boolean
--- @param p5 integer
natives.ped_updateShopItemWearableState = function(ped, componenthash, wearablestate, p3, p4, p5)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(componenthash) == 'integer', 'Argument componenthash must be of type integer.')
    assert(type(wearablestate) == 'integer', 'Argument wearablestate must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')
    assert(type(p5) == 'integer', 'Argument p5 must be of type integer.')

    local call = natives.invoke(0x66B957AAC2EAAEAB, 'void', ped, componenthash, wearablestate, p3, p4, p5)
end

--- @param ped integer
--- @param index integer
--- @param p2 boolean
--- @param argstruct userdata
--- @param argstruct2 userdata
--- @return number
natives.ped_getShopItemComponentAtIndex = function(ped, index, p2, argstruct, argstruct2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(argstruct) == 'userdata', 'Argument argstruct must be of type userdata.')
    assert(type(argstruct2) == 'userdata', 'Argument argstruct2 must be of type userdata.')

    local call = natives.invoke(0x77BA37622E22023B, 'integer', ped, index, p2, argstruct, argstruct2)
    return call
end

-- Returns the number of wearable states available for a shop item / component. p2 seems to be true in scripts.
-- 
-- For use with 0x6243635AF2F1B826 (_GET_SHOP_ITEM_AVAILABLE_WEARABLE_STATE_BY_INDEX)
--- @param componenthash integer
--- @param ismpfemale boolean
--- @param p2 boolean
--- @return number
natives.ped_getShopItemNumWearableStates = function(componenthash, ismpfemale, p2)
    assert(type(componenthash) == 'integer', 'Argument componenthash must be of type integer.')
    assert(type(ismpfemale) == 'boolean', 'Argument ismpfemale must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xFFCC2DB2D9953401, 'int', componenthash, ismpfemale, p2)
    return call
end

-- Gets an available wearable state by index for a shop item / component - it does not retreive what the current state is. p3 seems to be true in scripts.
-- 
-- Use 0xFFCC2DB2D9953401 (_GET_SHOP_ITEM_NUM_WEARABLE_STATES) to get the number of available wearable states
--- @param componenthash integer
--- @param wearablestateindex integer
--- @param ismpfemale boolean
--- @param p3 boolean
--- @return number
natives.ped_getShopItemWearableStateByIndex = function(componenthash, wearablestateindex, ismpfemale, p3)
    assert(type(componenthash) == 'integer', 'Argument componenthash must be of type integer.')
    assert(type(wearablestateindex) == 'integer', 'Argument wearablestateindex must be of type integer.')
    assert(type(ismpfemale) == 'boolean', 'Argument ismpfemale must be of type boolean.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0x6243635AF2F1B826, 'integer', componenthash, wearablestateindex, ismpfemale, p3)
    return call
end

--- @param componenthash integer
--- @param metapedtype integer
--- @param ismp boolean
--- @return number
natives.ped_getShopItemComponentCategory = function(componenthash, metapedtype, ismp)
    assert(type(componenthash) == 'integer', 'Argument componenthash must be of type integer.')
    assert(type(metapedtype) == 'integer', 'Argument metapedtype must be of type integer.')
    assert(type(ismp) == 'boolean', 'Argument ismp must be of type boolean.')

    local call = natives.invoke(0x5FF9A878C3D115B8, 'integer', componenthash, metapedtype, ismp)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @return any
natives.ped_n0X31B2E7F2E3C58B89 = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x31B2E7F2E3C58B89, 'any', p0, p1, p2, p3)
    return call
end

--- @param shopitem integer
--- @param p1 userdata
--- @param ped integer
--- @param metapedtype integer
--- @param p4 boolean
--- @param drawable integer
--- @param albedo integer
--- @param normal integer
--- @param material integer
--- @param p9 integer
--- @param p10 integer
--- @param p11 integer
--- @param p12 integer
--- @return boolean
natives.ped_getShopItemBaseLayers = function(shopitem, p1, ped, metapedtype, p4, drawable, albedo, normal, material, p9, p10, p11, p12)
    assert(type(shopitem) == 'integer', 'Argument shopitem must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(metapedtype) == 'integer', 'Argument metapedtype must be of type integer.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')
    assert(type(drawable) == 'integer', 'Argument drawable must be of type integer.')
    assert(type(albedo) == 'integer', 'Argument albedo must be of type integer.')
    assert(type(normal) == 'integer', 'Argument normal must be of type integer.')
    assert(type(material) == 'integer', 'Argument material must be of type integer.')
    assert(type(p9) == 'integer', 'Argument p9 must be of type integer.')
    assert(type(p10) == 'integer', 'Argument p10 must be of type integer.')
    assert(type(p11) == 'integer', 'Argument p11 must be of type integer.')
    assert(type(p12) == 'integer', 'Argument p12 must be of type integer.')

    local call = natives.invoke(0x63342C50EC115CE8, 'bool', shopitem, p1, ped, metapedtype, p4, drawable, albedo, normal, material, p9, p10, p11, p12)
    return call
end

-- Related to _0x704C908E9C405136 for component loading
-- _S*
--- @param ped integer
--- @param ismp boolean
--- @return any
natives.ped_n0Xaab86462966168Ce = function(ped, ismp)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(ismp) == 'boolean', 'Argument ismp must be of type boolean.')

    local call = natives.invoke(0xAAB86462966168CE, 'any', ped, ismp)
    return call
end

--- @param ped integer
--- @param metapedtype integer
--- @param p2 boolean
--- @return any
natives.ped_getShopItemHatComponent = function(ped, metapedtype, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(metapedtype) == 'integer', 'Argument metapedtype must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x7E02E4218D916B94, 'any', ped, metapedtype, p2)
    return call
end

-- p1 is always 1
--- @param ped integer
--- @param p1 integer
natives.ped_refreshMetaPedShopItems = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x59BD177A1A48600A, 'void', ped, p1)
end

-- Params: p1 either a 1 or 0, so perhaps BOOL
-- _SET_PED_A*
--- @param ped integer
--- @param p1 integer
natives.ped_n0Xd103F6Dbb5442Be8 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xD103F6DBB5442BE8, 'void', ped, p1)
end

--- @param ped integer
--- @param gxtentryhash integer
natives.ped_setPedPromptNameFromGxtEntry = function(ped, gxtentryhash)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(gxtentryhash) == 'integer', 'Argument gxtentryhash must be of type integer.')

    local call = natives.invoke(0xFCA8FB9E15FA80D3, 'void', ped, gxtentryhash)
end

--- @param ped integer
--- @param name string
natives.ped_setPedPromptName = function(ped, name)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0x4A48B6E03BABB4AC, 'void', ped, name)
end

--- @param ped integer
--- @param gxtentryhash integer
natives.ped_setPedPromptNameFromGxtEntry2 = function(ped, gxtentryhash)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(gxtentryhash) == 'integer', 'Argument gxtentryhash must be of type integer.')

    local call = natives.invoke(0xC2745D9261664901, 'void', ped, gxtentryhash)
end

--- @param ped integer
--- @param name string
natives.ped_setPedPromptName2 = function(ped, name)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0x19B14E04B009E28B, 'void', ped, name)
end

--- @param p0 userdata
natives.ped_n0Xf917F92Bf22Ecbab = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xF917F92BF22ECBAB, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.ped_n0X49Dadfc4Cd808B0A = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x49DADFC4CD808B0A, 'void', p0, p1, p2)
end

-- limb: 3 = Left Hand, 4 = Left Arm, 6 = Right Hand, 7 = Right Arm, 9 = Left Foot, 10 = Left Leg, 12 = Right Foot, 13 = Right Leg, 37 = Head
--- @param ped integer
--- @param limb integer
--- @return boolean
natives.ped_hasPedTakenGoreDamage = function(ped, limb)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(limb) == 'integer', 'Argument limb must be of type integer.')

    local call = natives.invoke(0xBA208A8D6399A3AC, 'bool', ped, limb)
    return call
end

-- _CLEAR*
--- @param ped integer
natives.ped_n0X704C908E9C405136 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x704C908E9C405136, 'void', ped)
end

--- @param p0 userdata
natives.ped_n0X7406C71F4Ac2Ffcc = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x7406C71F4AC2FFCC, 'void', p0)
end

--- @param p0 userdata
natives.ped_n0X28508173C6A7Cc18 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x28508173C6A7CC18, 'void', p0)
end

--- @param p0 userdata
--- @return any
natives.ped_n0X52250B92Ea70Be3D = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x52250B92EA70BE3D, 'any', p0)
    return call
end

-- quality: see _GET_PED_QUALITY
--- @param ped integer
--- @param quality integer
natives.ped_setPedQuality = function(ped, quality)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(quality) == 'integer', 'Argument quality must be of type integer.')

    local call = natives.invoke(0xCE6B874286D640BB, 'void', ped, quality)
end

-- Returns Ped Quality to be used to calculate Skinning Quality
-- 
-- enum ePedQuality
-- {
-- 	PQ_INVALID = -1,
-- 	PQ_LOW,
-- 	PQ_MEDIUM,
-- 	PQ_HIGH,
-- 	PQ_MAX
-- };
--- @param ped integer
--- @return number
natives.ped_getPedQuality = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x7BCC6087D130312A, 'int', ped)
    return call
end

--- @param ped integer
--- @param object integer
--- @param propname string
--- @param animname string
natives.ped_n0Xce7A6C1D5Cde1F9D = function(ped, object, propname, animname)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(propname) == 'string', 'Argument propname must be of type string.')
    assert(type(animname) == 'string', 'Argument animname must be of type string.')

    local call = natives.invoke(0xCE7A6C1D5CDE1F9D, 'void', ped, object, propname, animname)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.ped_n0X604E1010E3162E86 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x604E1010E3162E86, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.ped_n0Xe8Abe3B73Fc7Fe17 = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xE8ABE3B73FC7FE17, 'void', p0, p1, p2, p3)
end

--- @param ped integer
--- @param propname string
natives.ped_removePedProp = function(ped, propname)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(propname) == 'string', 'Argument propname must be of type string.')

    local call = natives.invoke(0x3A50753042B6891B, 'void', ped, propname)
end

-- _SET_W(EAPON?)*
--- @param ped integer
--- @param bonus number
natives.ped_setTotalPedDamageFalloffBonus = function(ped, bonus)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(bonus) == 'number', 'Argument bonus must be of type number.')

    local call = natives.invoke(0x932786CE3C76477C, 'void', ped, bonus)
end

--- @param p0 userdata
--- @return any
natives.ped_n0X095C2277Fed731Db = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x095C2277FED731DB, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.ped_n0X09171A6F8Fde5Dc1 = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x09171A6F8FDE5DC1, 'void', p0, p1, p2, p3, p4)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.ped_n0X09E378C52B1433B5 = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x09E378C52B1433B5, 'void', p0, p1, p2, p3, p4)
end

-- _IS_N* - _IS_P*
--- @param x number
--- @param y number
--- @param z number
--- @param p3 number
--- @return boolean
natives.ped_n0X6507Ac3Bd7C99009 = function(x, y, z, p3)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')

    local call = natives.invoke(0x6507AC3BD7C99009, 'bool', x, y, z, p3)
    return call
end

-- Returns how deep the water is below the ped (if in water)
-- -1.0f = Not in water
-- 10.0f = Max water depth
--- @param ped integer
--- @return number
natives.ped_getPlayerPedWaterDepth = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x2942457417A5FD24, 'float', ped)
    return call
end

-- duration in seconds
--- @param ped integer
--- @param p1 boolean
--- @param duration number
natives.ped_setPedTrailEffect = function(ped, p1, duration)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(duration) == 'number', 'Argument duration must be of type number.')

    local call = natives.invoke(0xA5950E16B8F31052, 'void', ped, p1, duration)
end

-- If returned true: PROCESS_RESIZING_TRACKING_BOUNDS_VOLUME - Scaling UP the bounds due to tracking
-- If returned false: PROCESS_RESIZING_TRACKING_BOUNDS_VOLUME - Scaling DOWN the bounds due to tracking
-- _IS_PED_T* - _IS_PED_U*
--- @param ped integer
--- @return boolean
natives.ped_n0Xebaac9A750E7563B = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xEBAAC9A750E7563B, 'bool', ped)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.ped_n0X992187D975635Df5 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x992187D975635DF5, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.ped_n0X0B787A37Eedd226F = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x0B787A37EEDD226F, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.perschar_n0X63Aa2B8Eb087886A = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x63AA2B8EB087886A, 'void', p0, p1)
end

--- @param perscharhash integer
--- @return number
natives.perschar_getPerscharModelName = function(perscharhash)
    assert(type(perscharhash) == 'integer', 'Argument perscharhash must be of type integer.')

    local call = natives.invoke(0xA00DF706C60173D1, 'integer', perscharhash)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.perschar_n0X8Bc555034A5A5E8C = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x8BC555034A5A5E8C, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.perschar_n0X70605812Abc9Ff0F = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x70605812ABC9FF0F, 'void', p0, p1)
end

--- @param p0 userdata
--- @return any
natives.perschar_n0Xdc9655D47Dec0353 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xDC9655D47DEC0353, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.perschar_n0X2Df89Cd2Ed1D0Bde = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x2DF89CD2ED1D0BDE, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.perschar_n0X535A66Aad2Bf68F9 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x535A66AAD2BF68F9, 'void', p0, p1)
end

--- @param p0 userdata
--- @return any
natives.perschar_n0Xceb40B678E403759 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xCEB40B678E403759, 'any', p0)
    return call
end

--- @param perscharhash integer
--- @param schedule string
natives.perschar_setPerscharSchedule = function(perscharhash, schedule)
    assert(type(perscharhash) == 'integer', 'Argument perscharhash must be of type integer.')
    assert(type(schedule) == 'string', 'Argument schedule must be of type string.')

    local call = natives.invoke(0x187D65F3AEC5D679, 'void', perscharhash, schedule)
end

--- @param p0 userdata
natives.perschar_n0X8B44273A92Cd406C = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x8B44273A92CD406C, 'void', p0)
end

--- @param p0 userdata
natives.perschar_n0Xe0E65E0D261F7507 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xE0E65E0D261F7507, 'void', p0)
end

--- @param p0 userdata
--- @return any
natives.perschar_n0X112Ddf56300Bc6E5 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x112DDF56300BC6E5, 'any', p0)
    return call
end

--- @param hash integer
--- @return number
natives.perschar_createPersistentCharacter = function(hash)
    assert(type(hash) == 'integer', 'Argument hash must be of type integer.')

    local call = natives.invoke(0x4F76E3676583D951, 'integer', hash)
    return call
end

--- @param perschar integer
--- @return boolean
natives.perschar_isPersistentCharacterValid = function(perschar)
    assert(type(perschar) == 'integer', 'Argument perschar must be of type integer.')

    local call = natives.invoke(0x800DF3FC913355F3, 'bool', perschar)
    return call
end

--- @param perschar integer
natives.perschar_deletePerschar = function(perschar)
    assert(type(perschar) == 'integer', 'Argument perschar must be of type integer.')

    local call = natives.invoke(0xFC77C5B44D5FF7C0, 'void', perschar)
end

--- @param p0 userdata
--- @return number, number, number
natives.perschar_n0X5Ee6Fccc9C832Ca2 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x5EE6FCCC9C832CA2, 'vector3', p0)
    return call.x, call.y, call.z
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.perschar_n0X59C7Ad6Fea2Ac449 = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x59C7AD6FEA2AC449, 'void', p0, p1, p2, p3)
end

--- @param perschar integer
natives.perschar_n0Xbb68908Cd11Aebdc = function(perschar)
    assert(type(perschar) == 'integer', 'Argument perschar must be of type integer.')

    local call = natives.invoke(0xBB68908CD11AEBDC, 'void', perschar)
end

--- @param p0 userdata
--- @return number, number, number
natives.perschar_n0X94995829Ed15A598 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x94995829ED15A598, 'vector3', p0)
    return call.x, call.y, call.z
end

--- @param perschar integer
--- @return number
natives.perschar_getPerscharPedIndex = function(perschar)
    assert(type(perschar) == 'integer', 'Argument perschar must be of type integer.')

    local call = natives.invoke(0x31C70A716CAE1FEE, 'int', perschar)
    return call
end

--- @param ped integer
--- @return number
natives.perschar_getPerscharIndexFromPedIndex = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x32A1E3B83D501096, 'integer', ped)
    return call
end

--- @param p0 userdata
--- @return any
natives.perschar_n0Xf8De7154F7D1458F = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xF8DE7154F7D1458F, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.perschar_n0X669C25840C6F7Ae2 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x669C25840C6F7AE2, 'void', p0, p1)
end

--- @param perschar integer
natives.perschar_retaskPersistentCharacter = function(perschar)
    assert(type(perschar) == 'integer', 'Argument perschar must be of type integer.')

    local call = natives.invoke(0x631CD2D77FDC0316, 'void', perschar)
end

--- @param p0 userdata
natives.perschar_n0X0B3A99Ab6713Aa52 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x0B3A99AB6713AA52, 'void', p0)
end

--- @param perschar integer
--- @return boolean
natives.perschar_isPersistentCharacterDead = function(perschar)
    assert(type(perschar) == 'integer', 'Argument perschar must be of type integer.')

    local call = natives.invoke(0xEB98B38CA60742D7, 'bool', perschar)
    return call
end

--- @param perschar integer
--- @return boolean
natives.perschar_revivePerschar = function(perschar)
    assert(type(perschar) == 'integer', 'Argument perschar must be of type integer.')

    local call = natives.invoke(0x49A8C2CD97815215, 'bool', perschar)
    return call
end

--- @param p0 userdata
natives.perschar_n0Xd4B614179Bcd0654 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xD4B614179BCD0654, 'void', p0)
end

--- @param p0 userdata
natives.perschar_n0X406808610220405B = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x406808610220405B, 'void', p0)
end

--- @param p0 userdata
natives.perschar_n0Xa2B18Ff8D39F6D87 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xA2B18FF8D39F6D87, 'void', p0)
end

--- @param p0 userdata
--- @return any
natives.perschar_n0Xe4C51A8A3Bd1664C = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xE4C51A8A3BD1664C, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.perschar_n0X8Ae4Efa464Dae42D = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x8AE4EFA464DAE42D, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.perschar_n0Xa4Dcb3F0Dd7488Bd = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0xA4DCB3F0DD7488BD, 'void', p0, p1, p2, p3, p4)
end

--- @param p0 userdata
natives.perschar_n0Xd95D777F828B2Bbb = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xD95D777F828B2BBB, 'void', p0)
end

natives.perschar_n0X92690B0822493Ce0 = function()

    local call = natives.invoke(0x92690B0822493CE0, 'void')
end

natives.perschar_n0Xefc5C6670E0B99Ba = function()

    local call = natives.invoke(0xEFC5C6670E0B99BA, 'void')
end

natives.perschar_n0X2E957Aa81F2C61C9 = function()

    local call = natives.invoke(0x2E957AA81F2C61C9, 'void')
end

natives.perschar_n0Xb173599D61Faeb31 = function()

    local call = natives.invoke(0xB173599D61FAEB31, 'void')
end

--- @param p0 userdata
--- @param p1 boolean
--- @return number
natives.perschar_n0X08Fc896D2Cb31Fcc = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x08FC896D2CB31FCC, 'int', p0, p1)
    return call
end

--- @param perschar integer
--- @param p1 boolean
--- @return number
natives.perschar_forceSpawnPerschar = function(perschar, p1)
    assert(type(perschar) == 'integer', 'Argument perschar must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x0CADC3A977997472, 'int', perschar, p1)
    return call
end

--- @param perschar integer
natives.perschar_forceDespawnPerschar = function(perschar)
    assert(type(perschar) == 'integer', 'Argument perschar must be of type integer.')

    local call = natives.invoke(0x7B204F88F6C3D287, 'void', perschar)
end

--- @param perschar integer
natives.perschar_n0Xfcc6Db8Dbe709Bc8 = function(perschar)
    assert(type(perschar) == 'integer', 'Argument perschar must be of type integer.')

    local call = natives.invoke(0xFCC6DB8DBE709BC8, 'void', perschar)
end

--- @param perschar integer
natives.perschar_n0Xa8C406C2A56Edc16 = function(perschar)
    assert(type(perschar) == 'integer', 'Argument perschar must be of type integer.')

    local call = natives.invoke(0xA8C406C2A56EDC16, 'void', perschar)
end

--- @param perschar integer
natives.perschar_n0X4F81Ead1De8Fa19B = function(perschar)
    assert(type(perschar) == 'integer', 'Argument perschar must be of type integer.')

    local call = natives.invoke(0x4F81EAD1DE8FA19B, 'void', perschar)
end

--- @param perschar integer
natives.perschar_n0X6759Bee6762E140B = function(perschar)
    assert(type(perschar) == 'integer', 'Argument perschar must be of type integer.')

    local call = natives.invoke(0x6759BEE6762E140B, 'void', perschar)
end

--- @param perschar integer
natives.perschar_n0Xb65E7F733956Cf25 = function(perschar)
    assert(type(perschar) == 'integer', 'Argument perschar must be of type integer.')

    local call = natives.invoke(0xB65E7F733956CF25, 'void', perschar)
end

--- @param p0 userdata
--- @return any
natives.perschar_n0X4Afc7288C77238B3 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x4AFC7288C77238B3, 'any', p0)
    return call
end

--- @param p0 userdata
--- @return any
natives.perschar_n0Xa8120Ebeaf290C7A = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xA8120EBEAF290C7A, 'any', p0)
    return call
end

--- @param p0 userdata
--- @return any
natives.perschar_n0X69786495C92A3044 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x69786495C92A3044, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.perschar_n0Xec254C2C9B0F08F1 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xEC254C2C9B0F08F1, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.perschar_n0X9C7F95946E304778 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x9C7F95946E304778, 'any', p0, p1)
    return call
end

natives.persistence_n0X7A1Bd123E5Cdb6E5 = function()

    local call = natives.invoke(0x7A1BD123E5CDB6E5, 'void')
end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
natives.persistence_persistenceRemoveAllEntitiesInArea = function(x, y, z, radius)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')

    local call = natives.invoke(0x9D16896F0DBE78A2, 'void', x, y, z, radius)
end

--- @param p0 userdata
natives.persistence_n0X065887B694359799 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x065887B694359799, 'void', p0)
end

--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
natives.persistence_n0Xfc9806Da9A460093 = function(x1, y1, z1, x2, y2, z2)
    assert(type(x1) == 'number', 'Argument x1 must be of type number.')
    assert(type(y1) == 'number', 'Argument y1 must be of type number.')
    assert(type(z1) == 'number', 'Argument z1 must be of type number.')
    assert(type(x2) == 'number', 'Argument x2 must be of type number.')
    assert(type(y2) == 'number', 'Argument y2 must be of type number.')
    assert(type(z2) == 'number', 'Argument z2 must be of type number.')

    local call = natives.invoke(0xFC9806DA9A460093, 'void', x1, y1, z1, x2, y2, z2)
end

-- nullsub, doesn't do anything
--- @param p0 userdata
--- @param p1 userdata
natives.persistence_n0Xb03140014Aca6C40 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xB03140014ACA6C40, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.persistence_n0Xe225Cef1901F6108 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xE225CEF1901F6108, 'void', p0, p1)
end

--- @param p0 userdata
natives.persistence_n0X8De104Bec243A73B = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x8DE104BEC243A73B, 'void', p0)
end

-- Only used in R* script long_update.ysc in script function REFRESH_CLOSEST_TOWN
--- @param volume integer
natives.persistence_persistenceRefreshTownVolume = function(volume)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')

    local call = natives.invoke(0xEFB5F34CC0953B27, 'void', volume)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @return any
natives.persistence_n0Xba2C49Ea6A8D24Ff = function(p0, p1, p2, p3, p4, p5, p6)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0xBA2C49EA6A8D24FF, 'any', p0, p1, p2, p3, p4, p5, p6)
    return call
end

--- @param p0 userdata
--- @return any
natives.persistence_n0X2E545965Df98D476 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x2E545965DF98D476, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.persistence_n0Xf5622Fa6Acfca7Db = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xF5622FA6ACFCA7DB, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.persistence_n0X3Ca5E58C9731A16B = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x3CA5E58C9731A16B, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.persistence_n0Xdc0A1F0Ecec9F0C0 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xDC0A1F0ECEC9F0C0, 'void', p0, p1)
end

--- @param p0 userdata
--- @return any
natives.persistence_n0X5A79220F6D38D7C3 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x5A79220F6D38D7C3, 'any', p0)
    return call
end

--- @param p0 userdata
--- @return any
natives.persistence_n0Xcfda2518F322D836 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xCFDA2518F322D836, 'any', p0)
    return call
end

--- @param p0 userdata
--- @return any
natives.persistence_n0X1F56Fb3Fdb4Eaf65 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x1F56FB3FDB4EAF65, 'any', p0)
    return call
end

--- @param p0 userdata
natives.persistence_n0X291Cc21D1Fb6790E = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x291CC21D1FB6790E, 'void', p0)
end

--- @param scenario integer
natives.persistence_persistenceAddScenarioLooted = function(scenario)
    assert(type(scenario) == 'integer', 'Argument scenario must be of type integer.')

    local call = natives.invoke(0x8245C1F3262F4AC2, 'void', scenario)
end

--- @param scenario integer
--- @return boolean
natives.persistence_persistenceIsScenarioMarkedAsLooted = function(scenario)
    assert(type(scenario) == 'integer', 'Argument scenario must be of type integer.')

    local call = natives.invoke(0xFB7CF1DE938A3E22, 'bool', scenario)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @return boolean
natives.persistence_persistenceIsScenarioMarkedAsLootedAtCoords = function(x, y, z)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0xB6E1A185C2B9319A, 'bool', x, y, z)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @param model integer
--- @return boolean
natives.persistence_persistenceIsScenarioMarkedAsLootedAtCoordsWithModel = function(x, y, z, model)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(model) == 'integer', 'Argument model must be of type integer.')

    local call = natives.invoke(0x188313616D184213, 'bool', x, y, z, model)
    return call
end

-- _PERSISTENCE_*
natives.persistence_n0X66Daa3A9274E8E82 = function()

    local call = natives.invoke(0x66DAA3A9274E8E82, 'void')
end

-- There are 19 types of rope, from type = 0 to type = 18
-- Rope definitions are stored in ropedata.xml
-- Rope types 0, 15 and 18 have proper physics for hanging objects (taut, do not sag, small to medium diameter, good aspect for a rope)
--- @param x number
--- @param y number
--- @param z number
--- @param rotx number
--- @param roty number
--- @param rotz number
--- @param length number
--- @param ropetype integer
--- @param maxlength number
--- @param minlength number
--- @param p10 number
--- @param p11 boolean
--- @param p12 boolean
--- @param rigid boolean
--- @param p14 number
--- @param breakwhenshot boolean
--- @param unkptr userdata
--- @param p17 boolean
--- @return number
natives.physics_addRope = function(x, y, z, rotx, roty, rotz, length, ropetype, maxlength, minlength, p10, p11, p12, rigid, p14, breakwhenshot, unkptr, p17)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(rotx) == 'number', 'Argument rotx must be of type number.')
    assert(type(roty) == 'number', 'Argument roty must be of type number.')
    assert(type(rotz) == 'number', 'Argument rotz must be of type number.')
    assert(type(length) == 'number', 'Argument length must be of type number.')
    assert(type(ropetype) == 'integer', 'Argument ropetype must be of type integer.')
    assert(type(maxlength) == 'number', 'Argument maxlength must be of type number.')
    assert(type(minlength) == 'number', 'Argument minlength must be of type number.')
    assert(type(p10) == 'number', 'Argument p10 must be of type number.')
    assert(type(p11) == 'boolean', 'Argument p11 must be of type boolean.')
    assert(type(p12) == 'boolean', 'Argument p12 must be of type boolean.')
    assert(type(rigid) == 'boolean', 'Argument rigid must be of type boolean.')
    assert(type(p14) == 'number', 'Argument p14 must be of type number.')
    assert(type(breakwhenshot) == 'boolean', 'Argument breakwhenshot must be of type boolean.')
    assert(type(unkptr) == 'userdata', 'Argument unkptr must be of type userdata.')
    assert(type(p17) == 'boolean', 'Argument p17 must be of type boolean.')

    local call = natives.invoke(0xE832D760399EB220, 'int', x, y, z, rotx, roty, rotz, length, ropetype, maxlength, minlength, p10, p11, p12, rigid, p14, breakwhenshot, unkptr, p17)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @param rotx number
--- @param roty number
--- @param rotz number
--- @param length number
--- @param ropetype integer
--- @param isnetworked boolean
--- @param p9 integer
--- @param p10 number
--- @return number
natives.physics_addRope2 = function(x, y, z, rotx, roty, rotz, length, ropetype, isnetworked, p9, p10)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(rotx) == 'number', 'Argument rotx must be of type number.')
    assert(type(roty) == 'number', 'Argument roty must be of type number.')
    assert(type(rotz) == 'number', 'Argument rotz must be of type number.')
    assert(type(length) == 'number', 'Argument length must be of type number.')
    assert(type(ropetype) == 'integer', 'Argument ropetype must be of type integer.')
    assert(type(isnetworked) == 'boolean', 'Argument isnetworked must be of type boolean.')
    assert(type(p9) == 'integer', 'Argument p9 must be of type integer.')
    assert(type(p10) == 'number', 'Argument p10 must be of type number.')

    local call = natives.invoke(0xE9C59F6809373A99, 'int', x, y, z, rotx, roty, rotz, length, ropetype, isnetworked, p9, p10)
    return call
end

--- @param ropeid integer
natives.physics_deleteRope = function(ropeid)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')

    local call = natives.invoke(0x52B4829281364649, 'void', ropeid)
end

--- @param ropeid integer
natives.physics_releaseRope = function(ropeid)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')

    local call = natives.invoke(0x6076213101A47B3B, 'void', ropeid)
end

--- @param ropeid integer
natives.physics_deleteChildRope = function(ropeid)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')

    local call = natives.invoke(0xAA5D6B1888E4DB20, 'void', ropeid)
end

-- ropeTop returns top half of rope, ropeBottom returns bottom half of rope
--- @param ropeid integer
--- @param ropetop integer
--- @param ropebottom integer
--- @param offsetx number
--- @param offsety number
--- @param offsetz number
--- @param p6 integer
natives.physics_breakRope = function(ropeid, ropetop, ropebottom, offsetx, offsety, offsetz, p6)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')
    assert(type(ropetop) == 'integer', 'Argument ropetop must be of type integer.')
    assert(type(ropebottom) == 'integer', 'Argument ropebottom must be of type integer.')
    assert(type(offsetx) == 'number', 'Argument offsetx must be of type number.')
    assert(type(offsety) == 'number', 'Argument offsety must be of type number.')
    assert(type(offsetz) == 'number', 'Argument offsetz must be of type number.')
    assert(type(p6) == 'integer', 'Argument p6 must be of type integer.')

    local call = natives.invoke(0x4CFA2B7FAE115ECB, 'void', ropeid, ropetop, ropebottom, offsetx, offsety, offsetz, p6)
end

--- @param ropeid integer
--- @return boolean
natives.physics_doesRopeExist = function(ropeid)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')

    local call = natives.invoke(0xFD5448BE3111ED96, 'bool', ropeid)
    return call
end

--- @param ropeid integer
--- @return boolean
natives.physics_isRopeBroken = function(ropeid)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')

    local call = natives.invoke(0x79C2BEC82CFD7F7F, 'bool', ropeid)
    return call
end

--- @param ropeid integer
--- @param visible boolean
natives.physics_ropeChangeVisibility = function(ropeid, visible)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')
    assert(type(visible) == 'boolean', 'Argument visible must be of type boolean.')

    local call = natives.invoke(0x7A54D82227A139DB, 'void', ropeid, visible)
end

--- @param ropeid integer
--- @param toggle boolean
natives.physics_ropeDrawShadowEnabled = function(ropeid, toggle)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xF159A63806BB5BA8, 'void', ropeid, toggle)
end

--- @param ropeid integer
--- @return number
natives.physics_getRopeVertexCount = function(ropeid)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')

    local call = natives.invoke(0x3655F544CD30F0B5, 'int', ropeid)
    return call
end

--- @param ropeid integer
--- @param p1 integer
--- @param x number
--- @param y number
--- @param z number
natives.physics_n0Xe54Bf2Ce6C7D23A9 = function(ropeid, p1, x, y, z)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0xE54BF2CE6C7D23A9, 'void', ropeid, p1, x, y, z)
end

--- @param p0 userdata
natives.physics_n0X9C24846D0A4A2776 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x9C24846D0A4A2776, 'void', p0)
end

--- @param p0 userdata
natives.physics_n0X0Cb16D05E03Fb525 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x0CB16D05E03FB525, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
natives.physics_n0Xf27F1A8De4F50A1B = function(p0, p1, p2, p3, p4, p5, p6)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0xF27F1A8DE4F50A1B, 'void', p0, p1, p2, p3, p4, p5, p6)
end

--- @param ropeid integer
--- @param p1 boolean
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 number
--- @param p7 number
--- @param p8 number
--- @param p9 number
--- @param p10 integer
natives.physics_n0X21D0890D88Dfb0B0 = function(ropeid, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'number', 'Argument p6 must be of type number.')
    assert(type(p7) == 'number', 'Argument p7 must be of type number.')
    assert(type(p8) == 'number', 'Argument p8 must be of type number.')
    assert(type(p9) == 'number', 'Argument p9 must be of type number.')
    assert(type(p10) == 'integer', 'Argument p10 must be of type integer.')

    local call = natives.invoke(0x21D0890D88DFB0B0, 'void', ropeid, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)
end

-- Attaches entity 1 to entity 2.
-- If you use a boneName (p12/p13) make sure boneId (p15/p16) is set to -1.
--- @param ropeid integer
--- @param entity1 integer
--- @param entity2 integer
--- @param ent1x number
--- @param ent1y number
--- @param ent1z number
--- @param ent2x number
--- @param ent2y number
--- @param ent2z number
--- @param length number
--- @param alwayszero1 integer
--- @param alwayszero2 integer
--- @param bonename1 string
--- @param bonename2 string
--- @param p14 boolean
--- @param boneid1 integer
--- @param boneid2 integer
--- @param alwayszero3 integer
--- @param alwayszero4 integer
--- @param p19 boolean
--- @param p20 boolean
natives.physics_attachEntitiesToRope = function(ropeid, entity1, entity2, ent1x, ent1y, ent1z, ent2x, ent2y, ent2z, length, alwayszero1, alwayszero2, bonename1, bonename2, p14, boneid1, boneid2, alwayszero3, alwayszero4, p19, p20)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')
    assert(type(entity1) == 'integer', 'Argument entity1 must be of type integer.')
    assert(type(entity2) == 'integer', 'Argument entity2 must be of type integer.')
    assert(type(ent1x) == 'number', 'Argument ent1x must be of type number.')
    assert(type(ent1y) == 'number', 'Argument ent1y must be of type number.')
    assert(type(ent1z) == 'number', 'Argument ent1z must be of type number.')
    assert(type(ent2x) == 'number', 'Argument ent2x must be of type number.')
    assert(type(ent2y) == 'number', 'Argument ent2y must be of type number.')
    assert(type(ent2z) == 'number', 'Argument ent2z must be of type number.')
    assert(type(length) == 'number', 'Argument length must be of type number.')
    assert(type(alwayszero1) == 'integer', 'Argument alwayszero1 must be of type integer.')
    assert(type(alwayszero2) == 'integer', 'Argument alwayszero2 must be of type integer.')
    assert(type(bonename1) == 'string', 'Argument bonename1 must be of type string.')
    assert(type(bonename2) == 'string', 'Argument bonename2 must be of type string.')
    assert(type(p14) == 'boolean', 'Argument p14 must be of type boolean.')
    assert(type(boneid1) == 'integer', 'Argument boneid1 must be of type integer.')
    assert(type(boneid2) == 'integer', 'Argument boneid2 must be of type integer.')
    assert(type(alwayszero3) == 'integer', 'Argument alwayszero3 must be of type integer.')
    assert(type(alwayszero4) == 'integer', 'Argument alwayszero4 must be of type integer.')
    assert(type(p19) == 'boolean', 'Argument p19 must be of type boolean.')
    assert(type(p20) == 'boolean', 'Argument p20 must be of type boolean.')

    local call = natives.invoke(0x3D95EC8B6D940AC3, 'void', ropeid, entity1, entity2, ent1x, ent1y, ent1z, ent2x, ent2y, ent2z, length, alwayszero1, alwayszero2, bonename1, bonename2, p14, boneid1, boneid2, alwayszero3, alwayszero4, p19, p20)
end

-- Attaches a rope to two entities: binds two bones from two entities; one entity can be an object, i.e. a suspension point, the other an NPC bone
--- @param ropeid integer
--- @param entity1 integer
--- @param entity2 integer
--- @param ent1x number
--- @param ent1y number
--- @param ent1z number
--- @param ent2x number
--- @param ent2y number
--- @param ent2z number
--- @param bonename1 string
--- @param bonename2 string
natives.physics_attachEntitiesToRope2 = function(ropeid, entity1, entity2, ent1x, ent1y, ent1z, ent2x, ent2y, ent2z, bonename1, bonename2)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')
    assert(type(entity1) == 'integer', 'Argument entity1 must be of type integer.')
    assert(type(entity2) == 'integer', 'Argument entity2 must be of type integer.')
    assert(type(ent1x) == 'number', 'Argument ent1x must be of type number.')
    assert(type(ent1y) == 'number', 'Argument ent1y must be of type number.')
    assert(type(ent1z) == 'number', 'Argument ent1z must be of type number.')
    assert(type(ent2x) == 'number', 'Argument ent2x must be of type number.')
    assert(type(ent2y) == 'number', 'Argument ent2y must be of type number.')
    assert(type(ent2z) == 'number', 'Argument ent2z must be of type number.')
    assert(type(bonename1) == 'string', 'Argument bonename1 must be of type string.')
    assert(type(bonename2) == 'string', 'Argument bonename2 must be of type string.')

    local call = natives.invoke(0x462FF2A432733A44, 'void', ropeid, entity1, entity2, ent1x, ent1y, ent1z, ent2x, ent2y, ent2z, bonename1, bonename2)
end

--- @param ropeid integer
--- @param entity1 integer
--- @param entity2 integer
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 number
--- @param p7 number
--- @param p8 number
--- @param p9 userdata
--- @param p10 userdata
natives.physics_attachEntitesToRope3 = function(ropeid, entity1, entity2, p3, p4, p5, p6, p7, p8, p9, p10)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')
    assert(type(entity1) == 'integer', 'Argument entity1 must be of type integer.')
    assert(type(entity2) == 'integer', 'Argument entity2 must be of type integer.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'number', 'Argument p6 must be of type number.')
    assert(type(p7) == 'number', 'Argument p7 must be of type number.')
    assert(type(p8) == 'number', 'Argument p8 must be of type number.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')
    assert(type(p10) == 'userdata', 'Argument p10 must be of type userdata.')

    local call = natives.invoke(0xE9CD9A67834985A7, 'void', ropeid, entity1, entity2, p3, p4, p5, p6, p7, p8, p9, p10)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
natives.physics_n0X69C810B72291D831 = function(p0, p1, p2, p3, p4, p5, p6)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0x69C810B72291D831, 'void', p0, p1, p2, p3, p4, p5, p6)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
natives.physics_n0Xb7469Cb9Ac3C0Fd4 = function(p0, p1, p2, p3, p4, p5, p6, p7)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')

    local call = natives.invoke(0xB7469CB9AC3C0FD4, 'void', p0, p1, p2, p3, p4, p5, p6, p7)
end

--- @param ropeid integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
natives.physics_n0Xc64E7A62632Ad2Fe = function(ropeid, p1, p2, p3, p4, p5, p6, p7)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')

    local call = natives.invoke(0xC64E7A62632AD2FE, 'void', ropeid, p1, p2, p3, p4, p5, p6, p7)
end

--- @param ropeid integer
--- @param entity integer
--- @return boolean
natives.physics_isRopeAttachedToEntity = function(ropeid, entity)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x9B4F7E3E4F9C77B3, 'bool', ropeid, entity)
    return call
end

--- @param ropeid integer
--- @param entity integer
natives.physics_detachRopeFromEntity = function(ropeid, entity)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xBCF3026912A8647D, 'void', ropeid, entity)
end

--- @param horse integer
--- @param x number
--- @param y number
--- @param z number
natives.physics_hitchHorse = function(horse, x, y, z)
    assert(type(horse) == 'integer', 'Argument horse must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0x06AADE17334F7A40, 'void', horse, x, y, z)
end

--- @param horse integer
natives.physics_unhitchHorse = function(horse)
    assert(type(horse) == 'integer', 'Argument horse must be of type integer.')

    local call = natives.invoke(0x0348469DAA17576C, 'void', horse)
end

--- @param p0 userdata
natives.physics_n0X6Ea0E93Cffa472Cc = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x6EA0E93CFFA472CC, 'void', p0)
end

--- @param p0 userdata
natives.physics_n0Xbdda142759307528 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xBDDA142759307528, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.physics_n0X32F4Dbfdfcccc735 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x32F4DBFDFCCCC735, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
natives.physics_n0Xf8Ca39D5C0D1D9A1 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xF8CA39D5C0D1D9A1, 'void', p0, p1)
end

--- @param p0 userdata
natives.physics_n0Xeaf529446488Eb18 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xEAF529446488EB18, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
natives.physics_n0X31160Ec47E7C9549 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x31160EC47E7C9549, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.physics_n0X5E981C764Df33117 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x5E981C764DF33117, 'void', p0, p1)
end

--- @param ropeid integer
--- @param p1 userdata
natives.physics_ropeSetUpdateOrder = function(ropeid, p1)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xDC57A637A20006ED, 'void', ropeid, p1)
end

--- @param ropeid integer
--- @param p1 boolean
natives.physics_n0Xfb9153A54Ac713E8 = function(ropeid, p1)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xFB9153A54AC713E8, 'void', ropeid, p1)
end

--- @param ropeid integer
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 boolean
natives.physics_n0Xd699E688B49C0Fd2 = function(ropeid, p1, p2, p3, p4)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')

    local call = natives.invoke(0xD699E688B49C0FD2, 'void', ropeid, p1, p2, p3, p4)
end

--- @param ropeid integer
--- @param p1 boolean
--- @param p2 boolean
--- @param p3 boolean
--- @param p4 boolean
natives.physics_n0Xbb3E9B073E66C3C9 = function(ropeid, p1, p2, p3, p4)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')

    local call = natives.invoke(0xBB3E9B073E66C3C9, 'void', ropeid, p1, p2, p3, p4)
end

--- @param ropeid integer
--- @param p1 userdata
--- @param p2 userdata
natives.physics_n0X522Fa3F490E2F7Ac = function(ropeid, p1, p2)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x522FA3F490E2F7AC, 'void', ropeid, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
natives.physics_n0X3900491C0D61Ed4B = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x3900491C0D61ED4B, 'void', p0, p1)
end

--- @param ropeid integer
--- @param p1 number
natives.physics_n0Xc89E7410A93Ac19A = function(ropeid, p1)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0xC89E7410A93AC19A, 'void', ropeid, p1)
end

--- @param ropeid integer
--- @param p1 integer
natives.physics_n0X1D97Da8Acb5D2582 = function(ropeid, p1)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x1D97DA8ACB5D2582, 'void', ropeid, p1)
end

-- Combining this with ADD_ROPE enables winding
-- p1: mostly empty (0)
-- ropeModelType: RB_L_Wrist02, RB_R_Wrist02, ropeAttach, noose01x_Rope_03, SKEL_Neck0, SKEL_L_FOOT, SKEL_Neck1, Root_s_meatbit_Chunck_Xlarge01x
-- _CREATE_*
--- @param ropeid integer
--- @param p1 string
--- @param ropemodeltype string
--- @param length number
--- @param p4 boolean
natives.physics_createRopeWindingAbility = function(ropeid, p1, ropemodeltype, length, p4)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')
    assert(type(ropemodeltype) == 'string', 'Argument ropemodeltype must be of type string.')
    assert(type(length) == 'number', 'Argument length must be of type number.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')

    local call = natives.invoke(0x3C6490D940FF5D0B, 'void', ropeid, p1, ropemodeltype, length, p4)
end

--- @param ropeid integer
--- @return number, number, number
natives.physics_getRopeLastVertexCoord = function(ropeid)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')

    local call = natives.invoke(0x21BB0FBD3E217C2D, 'vector3', ropeid)
    return call.x, call.y, call.z
end

--- @param ropeid integer
--- @param vertex integer
--- @return number, number, number
natives.physics_getRopeVertexCoord = function(ropeid, vertex)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')
    assert(type(vertex) == 'integer', 'Argument vertex must be of type integer.')

    local call = natives.invoke(0xEA61CA8E80F09E4D, 'vector3', ropeid, vertex)
    return call.x, call.y, call.z
end

--- @param ropeid integer
natives.physics_startRopeWinding = function(ropeid)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')

    local call = natives.invoke(0x1461C72C889E343E, 'void', ropeid)
end

--- @param ropeid integer
natives.physics_stopRopeWinding = function(ropeid)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')

    local call = natives.invoke(0xCB2D4AB84A19AA7C, 'void', ropeid)
end

--- @param ropeid integer
natives.physics_startRopeUnwindingFront = function(ropeid)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')

    local call = natives.invoke(0x538D1179EC1AA9A9, 'void', ropeid)
end

--- @param ropeid integer
natives.physics_stopRopeUnwindingFront = function(ropeid)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')

    local call = natives.invoke(0xFFF3A50779EFBBB3, 'void', ropeid)
end

--- @param ropeid integer
natives.physics_startRopeUnwindingBack = function(ropeid)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')

    local call = natives.invoke(0x00F611A794A3C36E, 'void', ropeid)
end

--- @param ropeid integer
natives.physics_stopRopeUnwindingBack = function(ropeid)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')

    local call = natives.invoke(0x10DAA76CB8A201A1, 'void', ropeid)
end

--- @param ropeid integer
--- @param p1 boolean
natives.physics_n0X461Fcbdeb4D06717 = function(ropeid, p1)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x461FCBDEB4D06717, 'void', ropeid, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.physics_n0X423C6B1F3786D28B = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x423C6B1F3786D28B, 'void', p0, p1)
end

--- @param ropeid integer
--- @param p1 number
natives.physics_n0X76Bad9D538Bca1Aa = function(ropeid, p1)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x76BAD9D538BCA1AA, 'void', ropeid, p1)
end

--- @param ropeid integer
--- @param p1 number
natives.physics_n0Xb40Ea9E0D2E2F7F3 = function(ropeid, p1)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0xB40EA9E0D2E2F7F3, 'void', ropeid, p1)
end

--- @param ropeid integer
--- @return number
natives.physics_ropeGetForcedLength = function(ropeid)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')

    local call = natives.invoke(0x3D69537039F8D824, 'float', ropeid)
    return call
end

--- @param p0 userdata
natives.physics_n0X751Df00Eeff122E3 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x751DF00EEFF122E3, 'void', p0)
end

-- Forces a rope to a certain length.
--- @param ropeid integer
--- @param length number
natives.physics_ropeForceLength = function(ropeid, length)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')
    assert(type(length) == 'number', 'Argument length must be of type number.')

    local call = natives.invoke(0xD009F759A723DB1B, 'void', ropeid, length)
end

-- _ROPE_SET_*
--- @param ropeid integer
--- @param p1 number
natives.physics_n0X8D59079C37C21D78 = function(ropeid, p1)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x8D59079C37C21D78, 'void', ropeid, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.physics_n0X814D453Fcfdf119F = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x814D453FCFDF119F, 'void', p0, p1, p2)
end

--- @param ropeid integer
--- @param p1 number
natives.physics_n0X1Fc92Bdba1106Bd2 = function(ropeid, p1)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x1FC92BDBA1106BD2, 'void', ropeid, p1)
end

--- @param ropeid integer
--- @param p1 boolean
natives.physics_n0Xdede679Ed29Dd4E7 = function(ropeid, p1)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xDEDE679ED29DD4E7, 'void', ropeid, p1)
end

--- @param ropeid integer
--- @param p1 boolean
natives.physics_n0Xf1Ea2A881Eb7F2Cd = function(ropeid, p1)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xF1EA2A881EB7F2CD, 'void', ropeid, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.physics_n0X5A989B7Ee3672A56 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x5A989B7EE3672A56, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.physics_n0X483D4E917B0D35A9 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x483D4E917B0D35A9, 'void', p0, p1)
end

--- @param ropeid integer
--- @return number
natives.physics_ropeGetBreakerOfRope = function(ropeid)
    assert(type(ropeid) == 'integer', 'Argument ropeid must be of type integer.')

    local call = natives.invoke(0xEE360CFC80C8B2BC, 'int', ropeid)
    return call
end

--- @param entity integer
--- @param vertex integer
--- @param value number
natives.physics_setDamping = function(entity, vertex, value)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(vertex) == 'integer', 'Argument vertex must be of type integer.')
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0xEEA3B200A6FEB65B, 'void', entity, vertex, value)
end

--- @param entity integer
natives.physics_activatePhysics = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x710311ADF0E20730, 'void', entity)
end

--- @param entity integer
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 number
--- @param p7 number
--- @param p8 number
--- @param p9 userdata
--- @param p10 boolean
natives.physics_breakEntityGlass = function(entity, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'number', 'Argument p6 must be of type number.')
    assert(type(p7) == 'number', 'Argument p7 must be of type number.')
    assert(type(p8) == 'number', 'Argument p8 must be of type number.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')
    assert(type(p10) == 'boolean', 'Argument p10 must be of type boolean.')

    local call = natives.invoke(0x2E648D16F6E308F3, 'void', entity, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
--- @param p9 userdata
natives.physics_n0X8Eedfd8921389928 = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')

    local call = natives.invoke(0x8EEDFD8921389928, 'void', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)
end

--- @param object integer
--- @param toggle boolean
natives.physics_setDisableBreaking = function(object, toggle)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x5CEC1A84620E7D5B, 'void', object, toggle)
end

--- @param object integer
--- @param toggle boolean
natives.physics_setDisableFragDamage = function(object, toggle)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x01BA3AED21C16CFB, 'void', object, toggle)
end

--- @param p0 userdata
--- @param p1 userdata
natives.physics_n0X5Bd7457221Cc5Ff4 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x5BD7457221CC5FF4, 'void', p0, p1)
end

--- @param player integer
--- @return number
natives.player_getPlayerPed = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x275F255ED201B937, 'int', player)
    return call
end

--- @param player integer
--- @return number
natives.player_getPlayerPed2 = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x5EBE38A20BC51C27, 'int', player)
    return call
end

-- Only used in script function UPDATE_PLAYER_JUST_DIED_STATE
--- @param toggle boolean
natives.player_n0X325434C68358D282 = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x325434C68358D282, 'void', toggle)
end

-- Does the same like PLAYER::GET_PLAYER_PED
--- @param player integer
--- @return number
natives.player_getPlayerPedScriptIndex = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x5C880F9056D784C8, 'int', player)
    return call
end

-- Make sure to request the model first and wait until it has loaded.
--- @param player integer
--- @param modelhash integer
--- @param p2 boolean
natives.player_setPlayerModel = function(player, modelhash, p2)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(modelhash) == 'integer', 'Argument modelhash must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xED40380076A31506, 'void', player, modelhash, p2)
end

-- Returns true if the given player has a valid ped.
--- @param player integer
--- @return boolean
natives.player_networkHasPlayerValidPed = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x0760D6F70EBCC05C, 'bool', player)
    return call
end

-- Gets the player's team.
-- Returns -1 in singleplayer.
--- @param player integer
--- @return number
natives.player_getPlayerTeam = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xB464EB6A40C7975B, 'int', player)
    return call
end

-- Sets the player's team.
--- @param player integer
--- @param team integer
--- @param brestricttothisscript boolean
natives.player_setPlayerTeam = function(player, team, brestricttothisscript)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(team) == 'integer', 'Argument team must be of type integer.')
    assert(type(brestricttothisscript) == 'boolean', 'Argument brestricttothisscript must be of type boolean.')

    local call = natives.invoke(0xE8DD8536F01DE600, 'void', player, team, brestricttothisscript)
end

--- @param player integer
--- @return string
natives.player_getPlayerName = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x7124FD9AC0E01BA0, 'string', player)
    return call
end

--- @param string string
--- @return string
natives.player_formatPlayerNameString = function(string)
    assert(type(string) == 'string', 'Argument string must be of type string.')

    local call = natives.invoke(0x5B6193813E03E4E9, 'string', string)
    return call
end

--- @param p0 integer
--- @return number
natives.player_getWantedLevelRadius = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x80B00EB26D9521C7, 'float', p0)
    return call
end

--- @param wantedlevel integer
--- @return number
natives.player_getWantedLevelThreshold = function(wantedlevel)
    assert(type(wantedlevel) == 'integer', 'Argument wantedlevel must be of type integer.')

    local call = natives.invoke(0x1B1A3B358F7D8F07, 'int', wantedlevel)
    return call
end

-- nullsub, doesn't do anything
--- @param player integer
--- @param wantedlevel integer
--- @param disablenomission boolean
natives.player_setPlayerWantedLevel = function(player, wantedlevel, disablenomission)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(wantedlevel) == 'integer', 'Argument wantedlevel must be of type integer.')
    assert(type(disablenomission) == 'boolean', 'Argument disablenomission must be of type boolean.')

    local call = natives.invoke(0x384D4765395E006C, 'void', player, wantedlevel, disablenomission)
end

--- @param player integer
--- @param wantedlevel integer
--- @return boolean
natives.player_isPlayerWantedLevelGreater = function(player, wantedlevel)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(wantedlevel) == 'integer', 'Argument wantedlevel must be of type integer.')

    local call = natives.invoke(0xE1C0AD4C24324C36, 'bool', player, wantedlevel)
    return call
end

-- nullsub, doesn't do anything
--- @param player integer
natives.player_clearPlayerWantedLevel = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x4E4B996C928C7AA6, 'void', player)
end

--- @param player integer
--- @return boolean
natives.player_isPlayerDead = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x2E9C3FCB6798F397, 'bool', player)
    return call
end

-- flags: https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eSetPlayerControlFlags
--- @param player integer
--- @param toggle boolean
--- @param flags integer
--- @param bpreventheadingchange boolean
natives.player_setPlayerControl = function(player, toggle, flags, bpreventheadingchange)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')
    assert(type(bpreventheadingchange) == 'boolean', 'Argument bpreventheadingchange must be of type boolean.')

    local call = natives.invoke(0x4D51E59243281D80, 'void', player, toggle, flags, bpreventheadingchange)
end

--- @param player integer
--- @return number
natives.player_getPlayerWantedLevel = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xABC532F9098BFD9D, 'int', player)
    return call
end

--- @param maxwantedlevel integer
natives.player_setMaxWantedLevel = function(maxwantedlevel)
    assert(type(maxwantedlevel) == 'integer', 'Argument maxwantedlevel must be of type integer.')

    local call = natives.invoke(0x28A4BD2CEE236E19, 'void', maxwantedlevel)
end

--- @param maxwantedlevel integer
natives.player_setMaxWantedLevel2 = function(maxwantedlevel)
    assert(type(maxwantedlevel) == 'integer', 'Argument maxwantedlevel must be of type integer.')

    local call = natives.invoke(0xEA6DE0CD15AECBE2, 'void', maxwantedlevel)
end

-- If toggle is set to false:
--  The police won't be shown on the (mini)map
-- 
-- If toggle is set to true:
--  The police will be shown on the (mini)map
--- @param toggle boolean
natives.player_setPoliceRadarBlips = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x6FD7DD6B63F2820E, 'void', toggle)
end

-- Checks whether the specified player has a Ped, the Ped is not dead, is not injured and is not arrested.
--- @param player integer
--- @return boolean
natives.player_isPlayerPlaying = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xBFFB35986CAAE58C, 'bool', player)
    return call
end

--- @param player integer
--- @param toggle boolean
natives.player_setEveryoneIgnorePlayer = function(player, toggle)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x34630A768925B852, 'void', player, toggle)
end

--- @param player integer
--- @param p1 integer
--- @return boolean
natives.player_getIsPlayerUiPromptActive = function(player, p1)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x51BEA356B1C60225, 'bool', player, p1)
    return call
end

-- Params: https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/ePromptType
-- promptType is mostly 34 (PP_TRACK_ANIMAL), promptMode = 0 (PP_MODE_BLOCK) in R* Scripts
--- @param player integer
--- @param prompttype integer
--- @param promptmode integer
--- @param disabled boolean
natives.player_modifyPlayerUiPrompt = function(player, prompttype, promptmode, disabled)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(prompttype) == 'integer', 'Argument prompttype must be of type integer.')
    assert(type(promptmode) == 'integer', 'Argument promptmode must be of type integer.')
    assert(type(disabled) == 'boolean', 'Argument disabled must be of type boolean.')

    local call = natives.invoke(0x0751D461F06E41CE, 'void', player, prompttype, promptmode, disabled)
end

-- Returns false if PromptType is enabled
-- Params: See 0x0751D461F06E41CE
--- @param player integer
--- @param prompttype integer
--- @param promptmode integer
--- @return boolean
natives.player_getPlayerUiPromptIsDisabled = function(player, prompttype, promptmode)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(prompttype) == 'integer', 'Argument prompttype must be of type integer.')
    assert(type(promptmode) == 'integer', 'Argument promptmode must be of type integer.')

    local call = natives.invoke(0x6614F9039BD31931, 'bool', player, prompttype, promptmode)
    return call
end

-- Params: See 0x0751D461F06E41CE
--- @param player integer
--- @param ped integer
--- @param prompttype integer
--- @param promptmode integer
--- @param enabled boolean
natives.player_modifyPlayerUiPromptForPed = function(player, ped, prompttype, promptmode, enabled)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(prompttype) == 'integer', 'Argument prompttype must be of type integer.')
    assert(type(promptmode) == 'integer', 'Argument promptmode must be of type integer.')
    assert(type(enabled) == 'boolean', 'Argument enabled must be of type boolean.')

    local call = natives.invoke(0xA3DB37EDF9A74635, 'void', player, ped, prompttype, promptmode, enabled)
end

-- Returns true if PromptType is enabled for ped (mount)
-- Params: See 0x0751D461F06E41CE
--- @param player integer
--- @param ped integer
--- @param prompttype integer
--- @param promptmode integer
--- @return boolean
natives.player_getPlayerUiPromptForPedIsEnabled = function(player, ped, prompttype, promptmode)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(prompttype) == 'integer', 'Argument prompttype must be of type integer.')
    assert(type(promptmode) == 'integer', 'Argument promptmode must be of type integer.')

    local call = natives.invoke(0xEA8F168A76A0B9BC, 'bool', player, ped, prompttype, promptmode)
    return call
end

--- @param player integer
natives.player_n0X93624B36E8851B42 = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x93624B36E8851B42, 'void', player)
end

--- @param p0 userdata
--- @param p1 userdata
natives.player_n0X9073Ec5456651A90 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x9073EC5456651A90, 'void', p0, p1)
end

--- @param p0 userdata
natives.player_n0X2E67707Bec52Ca4B = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x2E67707BEC52CA4B, 'void', p0)
end

-- Sets whether all random peds will run away from player if they are agitated (threatened) (bool=true), or some peds can stand up for themselves (bool=false).
--- @param player integer
--- @param toggle boolean
natives.player_setAllRandomPedsFlee = function(player, toggle)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xE705309B8C6445A4, 'void', player, toggle)
end

--- @param player integer
natives.player_setAllRandomPedsFleeThisFrame = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xD5C198A62F1DEB0A, 'void', player)
end

--- @param player integer
natives.player_setAllNeutralRandomPedsFleeThisFrame = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x16752DAA7E6D3F72, 'void', player)
end

--- @param p0 userdata
natives.player_n0X1D256Eed194F5B58 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x1D256EED194F5B58, 'void', p0)
end

--- @param p0 userdata
--- @return any
natives.player_n0X5B7B97E99F84138B = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x5B7B97E99F84138B, 'any', p0)
    return call
end

-- Disables the players ability to be wanted by lawmen
--- @param player integer
--- @param disable boolean
natives.player_setDisablePlayerWantedLevel = function(player, disable)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(disable) == 'boolean', 'Argument disable must be of type boolean.')

    local call = natives.invoke(0x8674D138391FFB1B, 'void', player, disable)
end

-- Returns -1.0f if no multiplier has been set
--- @return number
natives.player_getWantedLevelMultiplier = function()

    local call = natives.invoke(0xA82964B9D8D6A983, 'float')
    return call
end

--- @param multiplier number
natives.player_setWantedLevelMultiplier = function(multiplier)
    assert(type(multiplier) == 'number', 'Argument multiplier must be of type number.')

    local call = natives.invoke(0xD7FA719CB54866C2, 'void', multiplier)
end

--- @param player integer
natives.player_resetWantedLevelDifficulty = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x062D14F18E8B0CAE, 'void', player)
end

--- @param player integer
natives.player_updateWantedPositionThisFrame = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xD0B0B044112BF424, 'void', player)
end

--- @param player integer
natives.player_suppressWitnessesCallingPoliceThisFrame = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x96722257E5381E00, 'void', player)
end

--- @param player integer
natives.player_reportPoliceSpottedPlayer = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xCBCCF73FFA69CC6B, 'void', player)
end

--- @param p0 number
natives.player_setLawResponseDelayOverride = function(p0)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')

    local call = natives.invoke(0xD2DFC9CCA5596A11, 'void', p0)
end

natives.player_resetLawResponseDelayOverride = function()

    local call = natives.invoke(0x5CE5CACC01D0F985, 'void')
end

--- @param player integer
--- @return boolean
natives.player_canPlayerStartMission = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x2DF170B1185AF777, 'bool', player)
    return call
end

--- @param player integer
--- @return boolean
natives.player_isPlayerReadyForCutscene = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xAA67BCB0097F2FA3, 'bool', player)
    return call
end

--- @param player integer
--- @param entity integer
--- @param p2 boolean
--- @return boolean
natives.player_isPlayerTargettingEntity = function(player, entity, p2)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x27F89FDC16688A7A, 'bool', player, entity, p2)
    return call
end

--- @param player integer
--- @param entity integer
--- @return boolean
natives.player_getPlayerTargetEntity = function(player, entity)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xAE663DDD99C8A670, 'bool', player, entity)
    return call
end

-- _GET_A* - _GET_C*
--- @param player integer
--- @return boolean
natives.player_n0X927861B2C08Dbea5 = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x927861B2C08DBEA5, 'bool', player)
    return call
end

-- Checks if player is focused on any entity
--- @param player integer
--- @return boolean
natives.player_isPlayerFreeFocusing = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x1A51BFE60708E482, 'bool', player)
    return call
end

--- @param player integer
--- @param outentity integer
--- @param p2 boolean
--- @param p3 boolean
--- @return boolean
natives.player_getPlayerInteractionTargetEntity = function(player, outentity, p2, p3)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(outentity) == 'integer', 'Argument outentity must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0x3EE1F7A8C32F24E1, 'bool', player, outentity, p2, p3)
    return call
end

-- _GET_PLAYER_I*
--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.player_n0Xbea3A6E5F5F79A6F = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xBEA3A6E5F5F79A6F, 'any', p0, p1)
    return call
end

--- @param player integer
--- @return boolean
natives.player_isPlayerInScope = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x04D7F33640662FA2, 'bool', player)
    return call
end

-- Gets a value indicating whether the specified player is currently aiming freely.
--- @param player integer
--- @return boolean
natives.player_isPlayerFreeAiming = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x936F967D4BE1CE9D, 'bool', player)
    return call
end

-- Gets a value indicating whether the specified player is currently aiming freely at the specified entity.
--- @param player integer
--- @param entity integer
--- @return boolean
natives.player_isPlayerFreeAimingAtEntity = function(player, entity)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x8C67C11C68713D25, 'bool', player, entity)
    return call
end

--- @param player integer
--- @param entity integer
--- @return boolean
natives.player_getEntityPlayerIsFreeAimingAt = function(player, entity)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xA6817C110B830EAD, 'bool', player, entity)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.player_n0X3Daabe78A23694Bc = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x3DAABE78A23694BC, 'void', p0, p1)
end

-- Only used in script function PROCESS_PED_INTERRUPT_DIALOGUE
-- _GET_PLAYER_*
--- @param player integer
--- @param ped integer
--- @return boolean
natives.player_n0X7Ae93C45Ec14A166 = function(player, ped)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x7AE93C45EC14A166, 'bool', player, ped)
    return call
end

-- Affects the range of auto aim target.
--- @param player integer
--- @param range number
natives.player_setPlayerLockonRangeOverride = function(player, range)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(range) == 'number', 'Argument range must be of type number.')

    local call = natives.invoke(0x3A3CD06597388322, 'void', player, range)
end

-- Sets whether this player can be hassled by gangs.
--- @param player integer
--- @param toggle boolean
natives.player_setPlayerCanBeHassledByGangs = function(player, toggle)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xC7FE774412046825, 'void', player, toggle)
end

-- Sets whether this player can take cover.
--- @param player integer
--- @param toggle boolean
natives.player_setPlayerCanUseCover = function(player, toggle)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x5EDA520F7A3BAF4E, 'void', player, toggle)
end

--- @param p0 userdata
--- @param p1 userdata
natives.player_n0Xd1A70C1E8D1031Fe = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xD1A70C1E8D1031FE, 'void', p0, p1)
end

-- _SET_PLAYER_CAN_BE_* - _SET_PLAYER_CAN_USE_*
--- @param player integer
--- @param p1 boolean
natives.player_n0Xaca45Ddcef6071C4 = function(player, p1)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xACA45DDCEF6071C4, 'void', player, p1)
end

-- Params: p1 is mostly 15, sometimes 1 in R* Scripts (Function: PLAYER_TOGGLE_PICK_UP_HATS)
-- _SET_PLAYER_*
--- @param player integer
--- @param p1 integer
--- @param enable boolean
natives.player_n0Xa0C683284Df027C7 = function(player, p1, enable)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(enable) == 'boolean', 'Argument enable must be of type boolean.')

    local call = natives.invoke(0xA0C683284DF027C7, 'void', player, p1, enable)
end

--- @param player integer
--- @param toggle boolean
natives.player_setPlayerCanMercyKill = function(player, toggle)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x39363DFD04E91496, 'void', player, toggle)
end

--- @param player integer
--- @param p1 integer
natives.player_n0X4Ec8Be63B8A5D4Ef = function(player, p1)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x4EC8BE63B8A5D4EF, 'void', player, p1)
end

-- Gets the maximum wanted level the player can get.
-- Ranges from 0 to 5.
--- @return number
natives.player_getMaxWantedLevel = function()

    local call = natives.invoke(0xD04CFAD1E2B7984A, 'int')
    return call
end

--- @param player integer
--- @return boolean
natives.player_isPlayerTargettingAnything = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x4605C66E0F935F83, 'bool', player)
    return call
end

--- @param player integer
--- @param p1 number
natives.player_restorePlayerStamina = function(player, p1)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0xC41F4B6E23FE6A4A, 'void', player, p1)
end

-- SET_PLAYER_S/T*
--- @param player integer
--- @param toggle boolean
natives.player_n0X8591Ee69Cc3Ed257 = function(player, toggle)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x8591EE69CC3ED257, 'void', player, toggle)
end

-- Returns the group ID the player is member of.
--- @param player integer
--- @return number
natives.player_getPlayerGroup = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x9BAB31815159ABCF, 'int', player)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.player_n0X3D9Da5C9Efd20D88 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x3D9DA5C9EFD20D88, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.player_n0X2Beed53B912537D0 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x2BEED53B912537D0, 'void', p0, p1, p2)
end

--- @param p0 userdata
natives.player_n0X908D4B72854C8F62 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x908D4B72854C8F62, 'void', p0)
end

--- @param p0 userdata
--- @return any
natives.player_n0Xd1F6B912785Bfd35 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xD1F6B912785BFD35, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
natives.player_n0Xc4873B053054C04B = function(p0, p1, p2, p3, p4, p5, p6, p7)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')

    local call = natives.invoke(0xC4873B053054C04B, 'void', p0, p1, p2, p3, p4, p5, p6, p7)
end

--- @param p0 userdata
--- @param p1 userdata
natives.player_n0Xca59808E51Fd67C4 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xCA59808E51FD67C4, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
natives.player_n0Xba5Ca1Feb5De0Df6 = function(p0, p1, p2, p3, p4, p5)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0xBA5CA1FEB5DE0DF6, 'void', p0, p1, p2, p3, p4, p5)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
natives.player_n0X0869D499A7848309 = function(p0, p1, p2, p3, p4, p5, p6, p7)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')

    local call = natives.invoke(0x0869D499A7848309, 'void', p0, p1, p2, p3, p4, p5, p6, p7)
end

-- _IS_PLAYER_I* - _IS_PLAYER_P*
--- @param player integer
--- @param p1 userdata
--- @return boolean
natives.player_n0Xb331D8A73F9D2Bdf = function(player, p1)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xB331D8A73F9D2BDF, 'bool', player, p1)
    return call
end

-- Used in script function: NET_AUTO_FOLLOW_UPDATE_LEADER_VALUES
-- followMode:
-- HORSEFOLLOWMODE_AUTO = 0,
-- HORSEFOLLOWMODE_SIDE_ONLY,
-- HORSEFOLLOWMODE_BEHIND_ONLY,
-- HORSEFOLLOWMODE_BEHIND_AND_SIDE,
-- HORSEFOLLOWMODE_BEHIND_CLOSE
-- followPriority:
-- HORSEFOLLOWPRIORITY_STEER_ASSIST = 0,
-- HORSEFOLLOWPRIORITY_AMBIENT,
-- HORSEFOLLOWPRIORITY_NORMAL,
-- HORSEFOLLOWPRIORITY_HIGH
--- @param player integer
--- @param ped integer
--- @param p2 number
--- @param p3 number
--- @param followmode integer
--- @param followpriority integer
--- @param p6 boolean
natives.player_addPlayerAsFollowTarget = function(player, ped, p2, p3, followmode, followpriority, p6)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(followmode) == 'integer', 'Argument followmode must be of type integer.')
    assert(type(followpriority) == 'integer', 'Argument followpriority must be of type integer.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')

    local call = natives.invoke(0xAC22AA6DF4D1C1DE, 'void', player, ped, p2, p3, followmode, followpriority, p6)
end

--- @param player integer
--- @param ped integer
natives.player_removePlayerAsFollowTarget = function(player, ped)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x0C6B89876262A99D, 'void', player, ped)
end

--- @param p0 userdata
natives.player_n0X12E09E278C6C29B7 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x12E09E278C6C29B7, 'void', p0)
end

--- @param player integer
--- @param ped integer
--- @param p2 integer
natives.player_n0Xdd33A82352C4652F = function(player, ped, p2)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0xDD33A82352C4652F, 'void', player, ped, p2)
end

--- @param player integer
--- @param ped integer
--- @param usesteerassist boolean
natives.player_n0X1Fda57E8908F2609 = function(player, ped, usesteerassist)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(usesteerassist) == 'boolean', 'Argument usesteerassist must be of type boolean.')

    local call = natives.invoke(0x1FDA57E8908F2609, 'void', player, ped, usesteerassist)
end

--- @param player integer
--- @param ped integer
--- @param p2 userdata
natives.player_n0X84481018E668E1B8 = function(player, ped, p2)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x84481018E668E1B8, 'void', player, ped, p2)
end

-- _IS_PLAYER_F*
--- @param player integer
--- @return boolean
natives.player_n0X2009F8Ab7A5E9D6D = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x2009F8AB7A5E9D6D, 'bool', player)
    return call
end

--- @param player integer
--- @param ped integer
--- @return boolean
natives.player_isPlayerFollowingTarget = function(player, ped)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xE24C64D9ADED2EF5, 'bool', player, ped)
    return call
end

-- _IS_PLAYER_A* - _IS_PLAYER_BE*
--- @param player integer
--- @param ped integer
--- @return boolean
natives.player_n0Xe7F8707269544B29 = function(player, ped)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xE7F8707269544B29, 'bool', player, ped)
    return call
end

--- @param p0 userdata
--- @return any
natives.player_n0Xe631Eaf35828Fa67 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xE631EAF35828FA67, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.player_n0X086549F3B0381Cb1 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x086549F3B0381CB1, 'void', p0, p1)
end

-- Returns whether the player can control himself.
--- @param player integer
--- @return boolean
natives.player_isPlayerControlOn = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x7964097FCE4C244B, 'bool', player)
    return call
end

--- @param player integer
--- @return boolean
natives.player_isPlayerScriptControlOn = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xB78350754157C00F, 'bool', player)
    return call
end

-- Returns TRUE if the player ('s ped) is climbing at the moment.
--- @param player integer
--- @return boolean
natives.player_isPlayerClimbing = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xB8A70C22FD48197A, 'bool', player)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.player_n0Xebb6E27Ac2Ff32Da = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0xEBB6E27AC2FF32DA, 'void', p0, p1, p2, p3, p4)
end

--- @param p0 userdata
--- @return any
natives.player_n0Xb15Cd2F9932C9Ab5 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xB15CD2F9932C9AB5, 'any', p0)
    return call
end

-- _IS_PLAYER_S* - _IS_PLAYER_T*
--- @param player integer
--- @return boolean
natives.player_n0X621D1B289Caf5978 = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x621D1B289CAF5978, 'bool', player)
    return call
end

-- Return true while player is being arrested / busted.
-- 
-- If atArresting is set to 1, this function will return 1 when player is being arrested (while player is putting his hand up, but still have control)
-- 
-- If atArresting is set to 0, this function will return 1 only when the busted screen is shown.
--- @param player integer
--- @param atarresting boolean
--- @return boolean
natives.player_isPlayerBeingArrested = function(player, atarresting)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(atarresting) == 'boolean', 'Argument atarresting must be of type boolean.')

    local call = natives.invoke(0xC8183AE963C58374, 'bool', player, atarresting)
    return call
end

--- @param player integer
natives.player_resetPlayerArrestState = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x12917931C31F1750, 'void', player)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.player_n0Xcbb54Cc7Ffffab86 = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xCBB54CC7FFFFAB86, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
natives.player_n0Xbed386157F65942C = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xBED386157F65942C, 'void', p0, p1)
end

--- @param p0 userdata
--- @return any
natives.player_n0Xdab6A2Fc56B7De65 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xDAB6A2FC56B7DE65, 'any', p0)
    return call
end

--- @param p0 userdata
--- @return any
natives.player_n0X0F4Eaf69Da41Af43 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x0F4EAF69DA41AF43, 'any', p0)
    return call
end

--- @param player integer
--- @param target integer
natives.player_setBountyTarget = function(player, target)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(target) == 'integer', 'Argument target must be of type integer.')

    local call = natives.invoke(0x6ADF821FBF21920E, 'void', player, target)
end

--- @param player integer
natives.player_clearBountyTarget = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x8F2A81C09DA9124A, 'void', player)
end

--- @return number
natives.player_getPlayersLastVehicle = function()

    local call = natives.invoke(0x2F96E7720B0B19EA, 'int')
    return call
end

-- Returns the same as PLAYER_ID and NETWORK_PLAYER_ID_TO_INT
--- @return number
natives.player_getPlayerIndex = function()

    local call = natives.invoke(0x47E385B0D957C8D4, 'int')
    return call
end

-- Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
--- @param value integer
--- @return number
natives.player_intToPlayerindex = function(value)
    assert(type(value) == 'integer', 'Argument value must be of type integer.')

    local call = natives.invoke(0x748B3A65C2604C33, 'int', value)
    return call
end

-- Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
--- @param value integer
--- @return number
natives.player_intToParticipantindex = function(value)
    assert(type(value) == 'integer', 'Argument value must be of type integer.')

    local call = natives.invoke(0x58FF971FC8F2702C, 'int', value)
    return call
end

-- This returns YOUR 'identity' as a Player type.
-- 
-- Always returns 0 in story mode.
--- @return number
natives.player_playerId = function()

    local call = natives.invoke(0x217E9DC48139933D, 'int')
    return call
end

-- Returns current player ped
--- @return number
natives.player_playerPedId = function()

    local call = natives.invoke(0x096275889B8E0EE0, 'int')
    return call
end

-- Does exactly the same thing as PLAYER_ID()
--- @return number
natives.player_networkPlayerIdToInt = function()

    local call = natives.invoke(0x8A9386F0749A17FA, 'int')
    return call
end

--- @param cleanupflags integer
--- @return boolean
natives.player_hasForceCleanupOccurred = function(cleanupflags)
    assert(type(cleanupflags) == 'integer', 'Argument cleanupflags must be of type integer.')

    local call = natives.invoke(0xC11469DCA6FC3BB5, 'bool', cleanupflags)
    return call
end

--- @param cleanupflags integer
natives.player_forceCleanup = function(cleanupflags)
    assert(type(cleanupflags) == 'integer', 'Argument cleanupflags must be of type integer.')

    local call = natives.invoke(0x768C017FB878E4F4, 'void', cleanupflags)
end

--- @param name string
--- @param cleanupflags integer
natives.player_forceCleanupForAllThreadsWithThisName = function(name, cleanupflags)
    assert(type(name) == 'string', 'Argument name must be of type string.')
    assert(type(cleanupflags) == 'integer', 'Argument cleanupflags must be of type integer.')

    local call = natives.invoke(0xDAACAF8B687F2353, 'void', name, cleanupflags)
end

--- @param id integer
--- @param cleanupflags integer
natives.player_forceCleanupForThreadWithThisId = function(id, cleanupflags)
    assert(type(id) == 'integer', 'Argument id must be of type integer.')
    assert(type(cleanupflags) == 'integer', 'Argument cleanupflags must be of type integer.')

    local call = natives.invoke(0xF4C9512A2F0A3031, 'void', id, cleanupflags)
end

--- @return number
natives.player_getCauseOfMostRecentForceCleanup = function()

    local call = natives.invoke(0x84E8E29EBD4A46D2, 'int')
    return call
end

-- mood: https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/ePedMood
--- @param player integer
--- @param mood integer
natives.player_setPlayerMood = function(player, mood)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(mood) == 'integer', 'Argument mood must be of type integer.')

    local call = natives.invoke(0x39BED552DB46FFA9, 'void', player, mood)
end

-- See _SET_PLAYER_MOOD
--- @param player integer
--- @return number
natives.player_getPlayerMood = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x054473164C012699, 'int', player)
    return call
end

--- @param player integer
--- @param vehicle integer
natives.player_setPlayerMayOnlyEnterThisVehicle = function(player, vehicle)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0xDA35A134038557EC, 'void', player, vehicle)
end

--- @param p0 userdata
--- @param p1 userdata
natives.player_n0Xc71D07C96946E263 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xC71D07C96946E263, 'void', p0, p1)
end

--- @param player integer
natives.player_setPlayerMayNotEnterAnyVehicle = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xBEC463B3A11C909E, 'void', player)
end

--- @return boolean
natives.player_isSystemUiBeingDisplayed = function()

    local call = natives.invoke(0x908258B6209E71F7, 'bool')
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
--- @param p9 userdata
natives.player_n0Xd48227263E3D06Ae = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')

    local call = natives.invoke(0xD48227263E3D06AE, 'void', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)
end

--- @param player integer
--- @param ped integer
--- @param p2 string
--- @param x number
--- @param y number
--- @param z number
--- @param targetentity integer
--- @param p7 string
natives.player_n0X3946Fc742Ac305Cd = function(player, ped, p2, x, y, z, targetentity, p7)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p2) == 'string', 'Argument p2 must be of type string.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(targetentity) == 'integer', 'Argument targetentity must be of type integer.')
    assert(type(p7) == 'string', 'Argument p7 must be of type string.')

    local call = natives.invoke(0x3946FC742AC305CD, 'void', player, ped, p2, x, y, z, targetentity, p7)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
--- @param p9 userdata
--- @param p10 userdata
natives.player_n0Xa28056Cd1B04B250 = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')
    assert(type(p10) == 'userdata', 'Argument p10 must be of type userdata.')

    local call = natives.invoke(0xA28056CD1B04B250, 'void', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)
end

-- _DISABLE_*(PLAYER_FORCED_INTERACTION_LOCKON?)
--- @param player integer
--- @param name string
natives.player_n0Xc67A4910425F11F1 = function(player, name)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0xC67A4910425F11F1, 'void', player, name)
end

-- Simply sets you as invincible (Health will not deplete).
--- @param player integer
--- @param toggle boolean
natives.player_setPlayerInvincible = function(player, toggle)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xFEBEEBC9CBDF4B12, 'void', player, toggle)
end

-- Returns the player's invincibility status.
--- @param player integer
--- @return boolean
natives.player_getPlayerInvincible = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x0CBBCB2CCFA7DC4E, 'bool', player)
    return call
end

--- @param player integer
--- @param toggle boolean
natives.player_setPlayerLockon = function(player, toggle)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x462AA1973CBBA75E, 'void', player, toggle)
end

--- @param player integer
--- @param toggle boolean
natives.player_setLockonToFriendlyPlayers = function(player, toggle)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x4A056257802DD3E5, 'void', player, toggle)
end

-- Sets your targeting mode for when you're on foot.
-- enum eTargetingMode
-- {
-- 	TARGETING_MODE_INVALID = -1,
-- 	TARGETING_MODE_CAUSAL, (Wide)
-- 	TARGETING_MODE_NORMAL,
-- 	TARGETING_MODE_HARD, (Narrow)
-- 	TARGETING_MODE_EXPERT (Free Aim)
-- };
--- @param targetmode integer
natives.player_setPlayerTargetingMode = function(targetmode)
    assert(type(targetmode) == 'integer', 'Argument targetmode must be of type integer.')

    local call = natives.invoke(0xD66A941F401E7302, 'void', targetmode)
end

-- Sets your targeting mode for when you're in a vehicle (perhaps a mount/horse).
-- see SET_PLAYER_TARGETING_MODE for eTargetingMode
--- @param targetmode integer
natives.player_setPlayerInVehicleTargetingMode = function(targetmode)
    assert(type(targetmode) == 'integer', 'Argument targetmode must be of type integer.')

    local call = natives.invoke(0x19B4F71703902238, 'void', targetmode)
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.player_n0X747257807B8721Ce = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x747257807B8721CE, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.player_n0X8702D9150D9Fbb3D = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x8702D9150D9FBB3D, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.player_n0Xcb0B9506Bc91E441 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xCB0B9506BC91E441, 'void', p0, p1)
end

--- @param player integer
natives.player_clearPlayerHasDamagedAtLeastOnePed = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x270B63A641BE32F2, 'void', player)
end

--- @param player integer
--- @return boolean
natives.player_hasPlayerDamagedAtLeastOnePed = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xDA4A4B9B96E20092, 'bool', player)
    return call
end

--- @param player integer
natives.player_clearPlayerHasDamagedAtLeastOneNonAnimalPed = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x0361096D6CE4372C, 'void', player)
end

--- @param player integer
--- @return boolean
natives.player_hasPlayerDamagedAtLeastOneNonAnimalPed = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x16C8D205DD5A2E90, 'bool', player)
    return call
end

--- @param p0 userdata
natives.player_n0Xeacebaae0A33Fb3F = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xEACEBAAE0A33FB3F, 'void', p0)
end

-- _HAS_PLAYER_D*
--- @param player integer
--- @param p1 integer
--- @return boolean
natives.player_n0X72Ad59F7B7Fb6E24 = function(player, p1)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x72AD59F7B7FB6E24, 'bool', player, p1)
    return call
end

--- @param player integer
--- @param p1 integer
--- @param p2 userdata
--- @return boolean
natives.player_n0X1A6E84F13C952094 = function(player, p1, p2)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x1A6E84F13C952094, 'bool', player, p1, p2)
    return call
end

-- damageInfo: STANDARD_PED_DAMAGE, STANDARD_FEMALE_PED_DAMAGE, STANDARD_PLAYER_PED_DAMAGE_MP, STANDARD_FEMALE_PLAYER_PED_DAMAGE_MP
--- @param player integer
--- @param damageinfo string
natives.player_setPlayerDamageInfoOverride = function(player, damageinfo)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(damageinfo) == 'string', 'Argument damageinfo must be of type string.')

    local call = natives.invoke(0x78B3D19AF6391A55, 'void', player, damageinfo)
end

-- _RESET_PLAYER_A* - _RESET_PLAYER_I*
--- @param player integer
natives.player_n0X1F488807Bc8E0630 = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x1F488807BC8E0630, 'void', player)
end

-- This can be between 1.0f - 50.0f
--- @param player integer
--- @param multiplier number
natives.player_setAirDragMultiplierForPlayersVehicle = function(player, multiplier)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(multiplier) == 'number', 'Argument multiplier must be of type number.')

    local call = natives.invoke(0x5DA6500FE849DA16, 'void', player, multiplier)
end

-- Swim speed multiplier.
-- Multiplier goes up to 1.49f
--- @param player integer
--- @param multiplier number
natives.player_setSwimMultiplierForPlayer = function(player, multiplier)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(multiplier) == 'number', 'Argument multiplier must be of type number.')

    local call = natives.invoke(0xBFCEABDE34DA5085, 'void', player, multiplier)
end

--- @return boolean
natives.player_n0X73Eb2Ef2E92D23Bf = function()

    local call = natives.invoke(0x73EB2EF2E92D23BF, 'bool')
    return call
end

--- @param player integer
--- @param toggle boolean
--- @param ped integer
--- @param p3 integer
--- @param p4 boolean
natives.player_setPlayerForcedAim = function(player, toggle, ped, p3, p4)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')

    local call = natives.invoke(0xD5FCC166AEB2FD0F, 'void', player, toggle, ped, p3, p4)
end

--- @param player integer
--- @param ped integer
--- @param p2 integer
natives.player_n0X310Ce349E0C0Ec4B = function(player, ped, p2)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x310CE349E0C0EC4B, 'void', player, ped, p2)
end

-- Inhibits the player from using any method of combat including melee and firearms.
-- 
-- NOTE: Only disables the firing for one frame
--- @param player integer
--- @param toggle boolean
natives.player_disablePlayerFiring = function(player, toggle)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x2970929FD5F9FC89, 'void', player, toggle)
end

--- @param p0 userdata
--- @param p1 userdata
natives.player_n0Xebff94328Ff7A18A = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xEBFF94328FF7A18A, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.player_n0Xf993373285053D77 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xF993373285053D77, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @return any
natives.player_n0Xe956C2340A76272E = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xE956C2340A76272E, 'any', p0)
    return call
end

--- @param player integer
--- @param enable boolean
natives.player_enableCustomDeadeyeAbility = function(player, enable)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(enable) == 'boolean', 'Argument enable must be of type boolean.')

    local call = natives.invoke(0x95EE1DEE1DCD9070, 'void', player, enable)
end

--- @param p0 userdata
--- @return any
natives.player_n0Xde6C85975F9D4894 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xDE6C85975F9D4894, 'any', p0)
    return call
end

-- Used in script function INIT_DEADEYE_SLOWDOWN
-- _SPECIAL_ABILITY*
--- @param player integer
natives.player_n0Xbba140062B15A8Ac = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xBBA140062B15A8AC, 'void', player)
end

--- @param player integer
--- @param disabled boolean
natives.player_specialAbilitySetDisabled = function(player, disabled)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(disabled) == 'boolean', 'Argument disabled must be of type boolean.')

    local call = natives.invoke(0xAE637BB8EF017875, 'void', player, disabled)
end

--- @param player integer
--- @return boolean
natives.player_isSpecialAbilityActive = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xB16223CB7DA965F0, 'bool', player)
    return call
end

-- Toggle handles wether Deadeye and Eagleeye are infinite or not.
--- @param player integer
--- @param toggle boolean
natives.player_modifyInfiniteTrailVision = function(player, toggle)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x28A13BF6B05C3D83, 'void', player, toggle)
end

--- @param player integer
natives.player_specialAbilitySetEagleEyeDisabled = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xC0B21F235C02139C, 'void', player)
end

-- Restores Deadeye by given amount.
-- Params: p2, p3, p4 = 0, 0, 1 in R* Scripts
--- @param player integer
--- @param amount number
--- @param p2 integer
--- @param p3 integer
--- @param p4 integer
natives.player_specialAbilityRestoreByAmount = function(player, amount, p2, p3, p4)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(amount) == 'number', 'Argument amount must be of type number.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')

    local call = natives.invoke(0x51345AE20F22C261, 'void', player, amount, p2, p3, p4)
end

-- Params: p1, p2, p3, p4 = 1.f, 0, 0, 0 in R* Scripts
-- _SPECIAL_ABILITY*
--- @param player integer
--- @param p1 number
--- @param p2 integer
--- @param p3 integer
--- @param p4 integer
natives.player_n0Xfa437Fa0738C370C = function(player, p1, p2, p3, p4)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')

    local call = natives.invoke(0xFA437FA0738C370C, 'void', player, p1, p2, p3, p4)
end

-- Only used in R* SP Script short_update
-- Restores Deadeye Outer Ring
--- @param player integer
--- @param amount number
natives.player_specialAbilityRestoreOuterRing = function(player, amount)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(amount) == 'number', 'Argument amount must be of type number.')

    local call = natives.invoke(0x2498035289B5688F, 'void', player, amount)
end

-- If player has less Dead Eye than required, Dead Eye cant be triggered.
--- @param player integer
--- @return number
natives.player_getPlayerRequiredDeadEyeAmount = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x811A748B1BE231BA, 'float', player)
    return call
end

-- Returns Deadeye value from player
--- @param player integer
--- @return number
natives.player_specialAbilityGetAmountCached = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x029884FB65821B07, 'float', player)
    return call
end

-- Drains Deadeye by given amount.
--- @param player integer
--- @param amount number
--- @param p2 userdata
natives.player_specialAbilityDrainByAmount = function(player, amount, p2)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(amount) == 'number', 'Argument amount must be of type number.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x200114E99552462B, 'void', player, amount, p2)
end

-- Params: p1 = -1 in R* Scripts
--- @param player integer
--- @param p1 integer
--- @param p2 boolean
natives.player_specialAbilityStartRestore = function(player, p1, p2)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x1D77B47AFA584E90, 'void', player, p1, p2)
end

--- @param player integer
--- @param multiplier number
natives.player_setSpecialAbilityMultiplier = function(player, multiplier)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(multiplier) == 'number', 'Argument multiplier must be of type number.')

    local call = natives.invoke(0x5A498FCA232F71E1, 'void', player, multiplier)
end

--- @param player integer
--- @return number
natives.player_getPlayerSpecialAbilityMultiplier = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xAB3773E7AA1E9DCC, 'float', player)
    return call
end

-- SPECIAL_ABILITY_NONE = -1,
-- SPECIAL_ABILITY_CAR_SLOWDOWN,
-- SPECIAL_ABILITY_RAGE,
-- SPECIAL_ABILITY_BULLET_TIME,
-- SPECIAL_ABILITY_SNAPSHOT,
-- SPECIAL_ABILITY_INSULT,
-- SPECIAL_ABILITY_DEADEYE,
-- SPECIAL_ABILITY_REVIVE
--- @param player integer
--- @param type integer
natives.player_setSpecialAbilityType = function(player, type)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(type) == 'integer', 'Argument type must be of type integer.')

    local call = natives.invoke(0x00BA333DA05ADC23, 'void', player, type)
end

--- @param player integer
--- @param p1 number
natives.player_n0X22B3Cabeddb538B2 = function(player, p1)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x22B3CABEDDB538B2, 'void', player, p1)
end

-- durationCost: per second
--- @param player integer
--- @param durationcost number
natives.player_setSpecialAbilityDurationCost = function(player, durationcost)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(durationcost) == 'number', 'Argument durationcost must be of type number.')

    local call = natives.invoke(0xB783F75940B23014, 'void', player, durationcost)
end

-- Only used in R* SP Script short_update
--- @param player integer
--- @param timer number
natives.player_setSpecialAbilityDisableTimer = function(player, timer)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(timer) == 'number', 'Argument timer must be of type number.')

    local call = natives.invoke(0xC0B1C05B313693D1, 'void', player, timer)
end

--- @param p0 userdata
--- @return any
natives.player_n0X57D9991Dc1334151 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x57D9991DC1334151, 'any', p0)
    return call
end

--- @param p0 userdata
--- @return any
natives.player_n0X21091B4Beb6376Ee = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x21091B4BEB6376EE, 'any', p0)
    return call
end

--- @param player integer
--- @param activationcost number
--- @param p2 integer
natives.player_setSpecialAbilityActivationCost = function(player, activationcost, p2)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(activationcost) == 'number', 'Argument activationcost must be of type number.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0xAE4BCC79C587EBBF, 'void', player, activationcost, p2)
end

-- _SET_SPECIAL_ABILITY_*
--- @param player integer
--- @param p1 number
natives.player_n0X4D1699543B1C023C = function(player, p1)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x4D1699543B1C023C, 'void', player, p1)
end

--- @param player integer
--- @param p1 boolean
--- @return number
natives.player_getPlayerDeadEyeMeterLevel = function(player, p1)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x3A6AE4EEE30370FE, 'float', player, p1)
    return call
end

--- @param player integer
--- @return number
natives.player_getPlayerDeadEye = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xA81D24AE0AF99A5E, 'float', player)
    return call
end

--- @param player integer
--- @return number
natives.player_getPlayerCachedDeadEyeAmount = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xDF66A37936D5F3D9, 'float', player)
    return call
end

--- @param player integer
--- @param p1 userdata
--- @return number
natives.player_getPlayerMaxDeadEye = function(player, p1)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x592F58BC4D2A2CF3, 'float', player, p1)
    return call
end

--- @param player integer
--- @return number
natives.player_getPlayerHealth = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x0317C947D062854E, 'float', player)
    return call
end

--- @param player integer
--- @return number
natives.player_getPlayerStamina = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x0FF421E467373FCF, 'float', player)
    return call
end

-- _N*, _O* or _PE*
--- @param player integer
--- @param p1 integer
natives.player_setPlayerStatFlagHash = function(player, p1)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x768E81AE285A4B67, 'void', player, p1)
end

--- @param health number
--- @param stamina number
--- @param deadeye number
--- @param healthcore integer
--- @param staminacore integer
--- @param deadeyecore integer
natives.player_setUsedItemEffect = function(health, stamina, deadeye, healthcore, staminacore, deadeyecore)
    assert(type(health) == 'number', 'Argument health must be of type number.')
    assert(type(stamina) == 'number', 'Argument stamina must be of type number.')
    assert(type(deadeye) == 'number', 'Argument deadeye must be of type number.')
    assert(type(healthcore) == 'integer', 'Argument healthcore must be of type integer.')
    assert(type(staminacore) == 'integer', 'Argument staminacore must be of type integer.')
    assert(type(deadeyecore) == 'integer', 'Argument deadeyecore must be of type integer.')

    local call = natives.invoke(0x0E1DB1F8F5B561DC, 'void', health, stamina, deadeye, healthcore, staminacore, deadeyecore)
end

--- @param p0 userdata
--- @param p1 userdata
natives.player_n0X08E22898A6Af4905 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x08E22898A6AF4905, 'void', p0, p1)
end

--- @param p0 userdata
--- @return any
natives.player_n0Xbefed69Ce8317F91 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xBEFED69CE8317F91, 'any', p0)
    return call
end

-- (Un)lock Eagle Eye functionality
--- @param player integer
--- @param enable boolean
natives.player_enableEagleeye = function(player, enable)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(enable) == 'boolean', 'Argument enable must be of type boolean.')

    local call = natives.invoke(0xA63FCAD3A6FEC6D2, 'void', player, enable)
end

-- Returns true if eagle eye is enabled for the player
--- @param player integer
--- @return boolean
natives.player_isSecondarySpecialAbilityEnabled = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xE022CC1B545F1D9F, 'bool', player)
    return call
end

-- Activates EagleEye, called together with 0x28A13BF6B05C3D83
--- @param player integer
natives.player_secondarySpecialAbilitySetActive = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x1710BC33CFB83634, 'void', player)
end

-- Deactivates EagleEye, called together with 0xC0B21F235C02139C
--- @param player integer
--- @param disabled boolean
natives.player_secondarySpecialAbilitySetDisabled = function(player, disabled)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(disabled) == 'boolean', 'Argument disabled must be of type boolean.')

    local call = natives.invoke(0x64FF4BF9AF59E139, 'void', player, disabled)
end

--- @param player integer
--- @return boolean
natives.player_isSecondarySpecialAbilityActive = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x45AB66D02B601FA7, 'bool', player)
    return call
end

--- @param p0 userdata
natives.player_n0X107F2A66E1C4C83A = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x107F2A66E1C4C83A, 'void', p0)
end

--- @param player integer
--- @param x number
--- @param y number
--- @param z number
--- @param heading number
--- @param p5 boolean
--- @param p6 boolean
--- @param p7 boolean
--- @param p8 boolean
natives.player_startPlayerTeleport = function(player, x, y, z, heading, p5, p6, p7, p8)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(heading) == 'number', 'Argument heading must be of type number.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')
    assert(type(p7) == 'boolean', 'Argument p7 must be of type boolean.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')

    local call = natives.invoke(0xDF8822C55EDDA65B, 'void', player, x, y, z, heading, p5, p6, p7, p8)
end

--- @param p0 boolean
natives.player_n0X2C2D287748E8E9B7 = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x2C2D287748E8E9B7, 'void', p0)
end

--- @param player integer
--- @return boolean
natives.player_updatePlayerTeleport = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xC39DCE4672CBFBC1, 'bool', player)
    return call
end

-- Disables the player's teleportation
natives.player_stopPlayerTeleport = function()

    local call = natives.invoke(0x0858B86146601BE8, 'void')
end

--- @return boolean
natives.player_isPlayerTeleportActive = function()

    local call = natives.invoke(0x085EEAEB8783FEB5, 'bool')
    return call
end

--- @param player integer
--- @return number
natives.player_getPlayerCurrentStealthNoise = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xD7ECC25E176ECBA5, 'float', player)
    return call
end

--- @param player integer
--- @param regenrate number
natives.player_setPlayerHealthRechargeMultiplier = function(player, regenrate)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(regenrate) == 'number', 'Argument regenrate must be of type number.')

    local call = natives.invoke(0x8899C244EBCF70DE, 'void', player, regenrate)
end

--- @param player integer
--- @return number
natives.player_getPlayerHealthRechargeMultiplier = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x22CD23BB0C45E0CD, 'float', player)
    return call
end

-- Setting player's Health recharge time to zero forces immediate health regen
--- @param player integer
--- @param modifier number
natives.player_setPlayerHealthRechargeTimeModifier = function(player, modifier)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(modifier) == 'number', 'Argument modifier must be of type number.')

    local call = natives.invoke(0x535ED4605F89AB6E, 'void', player, modifier)
end

--- @param player integer
--- @param multiplier number
natives.player_setPlayerStaminaRechargeMultiplier = function(player, multiplier)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(multiplier) == 'number', 'Argument multiplier must be of type number.')

    local call = natives.invoke(0xFECA17CF3343694B, 'void', player, multiplier)
end

--- @param player integer
--- @return number
natives.player_getPlayerStaminaRechargeMultiplier = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x617D3494AD58200F, 'float', player)
    return call
end

--- @param player integer
--- @param multiplier number
natives.player_setPlayerStaminaSprintDepletionMultiplier = function(player, multiplier)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(multiplier) == 'number', 'Argument multiplier must be of type number.')

    local call = natives.invoke(0xBBADFB5E5E5766FB, 'void', player, multiplier)
end

--- @param player integer
--- @return number
natives.player_getPlayerStaminaDepletionMultiplier = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x68A0389E0718AC8F, 'float', player)
    return call
end

-- Seems to work similar to 0xD2CB0FB0FDCB473D
--- @param player integer
--- @param horse integer
natives.player_setPedActivePlayerHorse = function(player, horse)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(horse) == 'integer', 'Argument horse must be of type integer.')

    local call = natives.invoke(0x8FBF9EDB378CCB8C, 'void', player, horse)
end

--- @param player integer
--- @return number
natives.player_getActiveHorseForPlayer = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x46FA0AE18F4C7FA9, 'int', player)
    return call
end

--- @param player integer
--- @param mount integer
natives.player_setPedAsSaddleHorseForPlayer = function(player, mount)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(mount) == 'integer', 'Argument mount must be of type integer.')

    local call = natives.invoke(0xD2CB0FB0FDCB473D, 'void', player, mount)
end

--- @param player integer
--- @return number
natives.player_getSaddleHorseForPlayer = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xB48050D326E9A2F3, 'int', player)
    return call
end

--- @param player integer
--- @param horse integer
--- @return boolean
natives.player_setPedAsTempPlayerHorse = function(player, horse)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(horse) == 'integer', 'Argument horse must be of type integer.')

    local call = natives.invoke(0x227B06324234FB09, 'bool', player, horse)
    return call
end

--- @param player integer
--- @return number
natives.player_getTempPlayerHorse = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xD3F7445CEA2E5035, 'int', player)
    return call
end

-- nullsub, doesn't do anything
--- @param p0 userdata
--- @param p1 userdata
natives.player_n0X77B0B6D17A3Ac9Aa = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x77B0B6D17A3AC9AA, 'void', p0, p1)
end

-- Name could potentially be inaccurate.
-- Used in Script Function HORSE_SETUP_PLAYER_HORSE_ATTRIBUTES (p1 = true)
-- _SET_PLAYER_L* - _SET_PLAYER_M*
--- @param player integer
--- @param active boolean
natives.player_setPlayerMountStateActive = function(player, active)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(active) == 'boolean', 'Argument active must be of type boolean.')

    local call = natives.invoke(0xDF93973251FB2CA5, 'void', player, active)
end

--- @param p0 userdata
--- @param p1 userdata
natives.player_n0X694Ffa4308060Cd1 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x694FFA4308060CD1, 'void', p0, p1)
end

--- @param player integer
--- @param speedboost number
--- @param duration integer
natives.player_boostPlayerHorseSpeedForTime = function(player, speedboost, duration)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(speedboost) == 'number', 'Argument speedboost must be of type number.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')

    local call = natives.invoke(0x09C28F828EE674FA, 'void', player, speedboost, duration)
end

-- This modifies the damage value of your weapon. Whether it is a multiplier or base damage is unknown.
--- @param player integer
--- @param modifier number
natives.player_setPlayerWeaponDamageModifier = function(player, modifier)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(modifier) == 'number', 'Argument modifier must be of type number.')

    local call = natives.invoke(0x94D529F7B73D7A85, 'void', player, modifier)
end

--- @param player integer
--- @param modifier number
natives.player_setPlayerWeaponDefenseModifier = function(player, modifier)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(modifier) == 'number', 'Argument modifier must be of type number.')

    local call = natives.invoke(0xD15CC2D493160BE3, 'void', player, modifier)
end

-- _SET_PLAYER_DAMAGE_* - _SET_PLAYER_DEFENSE_*
--- @param player integer
--- @param p1 boolean
natives.player_n0X818241B3Eda84191 = function(player, p1)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x818241B3EDA84191, 'void', player, p1)
end

--- @param player integer
--- @param modifier number
natives.player_setPlayerMeleeWeaponDamageModifier = function(player, modifier)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(modifier) == 'number', 'Argument modifier must be of type number.')

    local call = natives.invoke(0xE4CB5A3F18170381, 'void', player, modifier)
end

--- @param player integer
--- @param modifier number
natives.player_setPlayerExplosiveWeaponDamageModifier = function(player, modifier)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(modifier) == 'number', 'Argument modifier must be of type number.')

    local call = natives.invoke(0x2D3ACE3DE0A2B622, 'void', player, modifier)
end

--- @param p0 userdata
--- @param p1 userdata
natives.player_n0X83C989D5B5B5B466 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x83C989D5B5B5B466, 'void', p0, p1)
end

--- @param p0 userdata
--- @return any
natives.player_n0X03B4B759A8990505 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x03B4B759A8990505, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.player_n0X67659A8F248E0141 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x67659A8F248E0141, 'void', p0, p1)
end

-- Decreases the damage the player receives while on horseback
--- @param player integer
--- @param damagedecrease number
natives.player_setReceivedHorsebackDamageDecrease = function(player, damagedecrease)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(damagedecrease) == 'number', 'Argument damagedecrease must be of type number.')

    local call = natives.invoke(0xB427911EA6DFFEF3, 'void', player, damagedecrease)
end

-- Sets Player's Defense against AI modifier
--- @param player integer
--- @param modifier number
natives.player_setAiPlayerDefenseModifierAgainstAi = function(player, modifier)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(modifier) == 'number', 'Argument modifier must be of type number.')

    local call = natives.invoke(0x914071FF93AF2692, 'void', player, modifier)
end

--- @param player integer
--- @return number
natives.player_getAiPlayerDefenseModifierAgainstAi = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x2E78D822208E740A, 'float', player)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.player_n0X19B2C7A6C34Fad54 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x19B2C7A6C34FAD54, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @return any
natives.player_n0X9422743A5Ba50E10 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x9422743A5BA50E10, 'any', p0)
    return call
end

-- Sets stamina core drains peed using ranged damage scale and melee damage scale
--- @param player integer
--- @param weapondefensemod number
--- @param meleedefensemod number
natives.player_setPlayerDefenseModifier = function(player, weapondefensemod, meleedefensemod)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(weapondefensemod) == 'number', 'Argument weapondefensemod must be of type number.')
    assert(type(meleedefensemod) == 'number', 'Argument meleedefensemod must be of type number.')

    local call = natives.invoke(0x497A6539BB0E8787, 'void', player, weapondefensemod, meleedefensemod)
end

-- bullet damage modifier: type = 4
-- explosive damage Defense mod: type = 7
-- fire damage Defense mod: type = 8, 15
--- @param player integer
--- @param type integer
--- @param defensemodifier number
natives.player_setPlayerDefenseTypeModifier = function(player, type, defensemodifier)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(type) == 'integer', 'Argument type must be of type integer.')
    assert(type(defensemodifier) == 'number', 'Argument defensemodifier must be of type number.')

    local call = natives.invoke(0x93F499CAE53FCD05, 'void', player, type, defensemodifier)
end

--- @param player integer
--- @param weaponhash integer
--- @param damagemodifier number
natives.player_setPlayerWeaponTypeDamageModifier = function(player, weaponhash, damagemodifier)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')
    assert(type(damagemodifier) == 'number', 'Argument damagemodifier must be of type number.')

    local call = natives.invoke(0xD04AD186CE8BB129, 'void', player, weaponhash, damagemodifier)
end

--- @param player integer
--- @param weaponhash integer
--- @return number
natives.player_getPlayerWeaponDamage = function(player, weaponhash)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0xFE0304050261442C, 'float', player, weaponhash)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.player_n0X5C2E5E3Caeeb1F58 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x5C2E5E3CAEEB1F58, 'void', p0, p1, p2)
end

--- @param player integer
--- @param weapongroup integer
--- @param modifier number
natives.player_setPlayerWeaponGroupDamageModifier = function(player, weapongroup, modifier)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(weapongroup) == 'integer', 'Argument weapongroup must be of type integer.')
    assert(type(modifier) == 'number', 'Argument modifier must be of type number.')

    local call = natives.invoke(0xFC79DCC94D0A5897, 'void', player, weapongroup, modifier)
end

--- @param player integer
--- @param weapongroup integer
--- @param toggle boolean
natives.player_setPlayerWeaponGroupAsInstantKill = function(player, weapongroup, toggle)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(weapongroup) == 'integer', 'Argument weapongroup must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x59F0AFF3E0A1B019, 'void', player, weapongroup, toggle)
end

--- @param player integer
--- @param modifier number
natives.player_setPlayerTrampleDamageModifier = function(player, modifier)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(modifier) == 'number', 'Argument modifier must be of type number.')

    local call = natives.invoke(0xAF341032E97FB061, 'void', player, modifier)
end

-- _SET_PLAYER_A* - _SET_PLAYER_C*
--- @param player integer
--- @param damage number
natives.player_setPlayerLassoDamagePerSecond = function(player, damage)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(damage) == 'number', 'Argument damage must be of type number.')

    local call = natives.invoke(0x43F50A7CD2482156, 'void', player, damage)
end

--- @param player integer
--- @param accuracy number
natives.player_setPlayerTotalAccuracyModifier = function(player, accuracy)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(accuracy) == 'number', 'Argument accuracy must be of type number.')

    local call = natives.invoke(0x967FF5BC0CFE6D26, 'void', player, accuracy)
end

--- @param player integer
--- @param accuracy number
natives.player_setPlayerLocalAccuracyFloorModifier = function(player, accuracy)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(accuracy) == 'number', 'Argument accuracy must be of type number.')

    local call = natives.invoke(0x4EA69188FBCE6A7D, 'void', player, accuracy)
end

--- @param player integer
--- @param accuracy number
natives.player_setPlayerRemoteAccuracyFloorModifier = function(player, accuracy)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(accuracy) == 'number', 'Argument accuracy must be of type number.')

    local call = natives.invoke(0xDEE80FEDFDD43C9B, 'void', player, accuracy)
end

--- @param p0 userdata
--- @param p1 userdata
natives.player_n0X3Ad212429E095Efb = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x3AD212429E095EFB, 'void', p0, p1)
end

--- @param player integer
--- @param multiplier number
natives.player_setPlayerNoiseMultiplier = function(player, multiplier)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(multiplier) == 'number', 'Argument multiplier must be of type number.')

    local call = natives.invoke(0xB5EC6BDAEBCA454C, 'void', player, multiplier)
end

--- @param p0 userdata
--- @param p1 userdata
natives.player_n0X113Ef458Ab6Cda67 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x113EF458AB6CDA67, 'void', p0, p1)
end

--- @param player integer
--- @param multiplier number
natives.player_setPlayerSneakingNoiseMultiplier = function(player, multiplier)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(multiplier) == 'number', 'Argument multiplier must be of type number.')

    local call = natives.invoke(0x4DE44FA389DCA565, 'void', player, multiplier)
end

--- @param player integer
--- @param speed number
--- @param duration integer
--- @param heading number
--- @param p4 boolean
--- @param p5 boolean
natives.player_simulatePlayerInputGait = function(player, speed, duration, heading, p4, p5)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(speed) == 'number', 'Argument speed must be of type number.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')
    assert(type(heading) == 'number', 'Argument heading must be of type number.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')

    local call = natives.invoke(0xFA0C063C422C4355, 'void', player, speed, duration, heading, p4, p5)
end

--- @param player integer
natives.player_resetPlayerInputGait = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x61A2EECAB274829B, 'void', player)
end

--- @param player integer
--- @param toggle boolean
natives.player_setPlayerSimulateAiming = function(player, toggle)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xE0447DEF81CCDFD2, 'void', player, toggle)
end

--- @param ped integer
--- @param p1 integer
natives.player_setPlayerClothPinFrames = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xD0D9317DFEEF9A66, 'void', ped, p1)
end

--- @param player integer
--- @return boolean
natives.player_hasPlayerBeenSpottedInStolenVehicle = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xC932F57F31EA9152, 'bool', player)
    return call
end

--- @param player integer
--- @param p1 integer
--- @param p2 boolean
--- @return boolean
natives.player_getPlayerReceivedBattleEventRecently = function(player, p1, p2)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xFB6EB8785F808551, 'bool', player, p1, p2)
    return call
end

--- @param disabled boolean
natives.player_setMountPromptDisabled = function(disabled)
    assert(type(disabled) == 'boolean', 'Argument disabled must be of type boolean.')

    local call = natives.invoke(0x5B9813ECF7633FE8, 'void', disabled)
end

-- Returns true if the player is riding a train.
--- @param player integer
--- @return boolean
natives.player_isPlayerRidingTrain = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x2FB0ACADA6A238DD, 'bool', player)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.player_n0X9Afcf9Fe1884Bf62 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x9AFCF9FE1884BF62, 'void', p0, p1)
end

--- @param p0 userdata
--- @return any
natives.player_n0X1E8099F449Abb0Ba = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x1E8099F449ABB0BA, 'any', p0)
    return call
end

--- @param player integer
--- @return number
natives.player_getDeadeyeAbilityLevel = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xCCE7C695C164C35F, 'int', player)
    return call
end

-- Max level is 5.
--- @param player integer
--- @param level integer
natives.player_setDeadeyeAbilityLevel = function(player, level)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(level) == 'integer', 'Argument level must be of type integer.')

    local call = natives.invoke(0xF0FE8E790BFEB5BB, 'void', player, level)
end

--- @param player integer
--- @param abilitytype integer
--- @return boolean
natives.player_isDeadeyeAbilityLocked = function(player, abilitytype)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(abilitytype) == 'integer', 'Argument abilitytype must be of type integer.')

    local call = natives.invoke(0x8A0643B0B4CA276B, 'bool', player, abilitytype)
    return call
end

--- @param player integer
--- @param abilitytype integer
--- @param toggle boolean
natives.player_setDeadeyeAbilityLocked = function(player, abilitytype, toggle)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(abilitytype) == 'integer', 'Argument abilitytype must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x2797B8D66DD0EBB8, 'void', player, abilitytype, toggle)
end

--- @param player integer
--- @param toggle boolean
natives.player_setDeadeyeTaggingEnabled = function(player, toggle)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x6B5DDFB967E5073D, 'void', player, toggle)
end

--- @param player integer
--- @return boolean
natives.player_getIsDeadeyeTaggingEnabled = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x32348719DCED2969, 'bool', player)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.player_n0X3C4Ae8506638C7E2 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x3C4AE8506638C7E2, 'void', p0, p1)
end

--- @param p0 userdata
--- @return any
natives.player_n0X51139D8C17B16Fbc = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x51139D8C17B16FBC, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.player_n0X8F44Ebb3Ba8F6D44 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x8F44EBB3BA8F6D44, 'void', p0, p1)
end

--- @param player integer
--- @param filter integer
natives.player_setDeadeyeTaggingConfig = function(player, filter)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(filter) == 'integer', 'Argument filter must be of type integer.')

    local call = natives.invoke(0x83FCD6921FC8FD05, 'void', player, filter)
end

--- @param p0 userdata
--- @return any
natives.player_n0Xe92261Bd28C0878F = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xE92261BD28C0878F, 'any', p0)
    return call
end

-- Only used in R* SP Script short_update
--- @param player integer
--- @param delay number
natives.player_setDeadeyeAbilityDepletionDelay = function(player, delay)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(delay) == 'number', 'Argument delay must be of type number.')

    local call = natives.invoke(0x870634493CB4372C, 'void', player, delay)
end

--- @param p0 userdata
--- @return any
natives.player_n0Xa54000D4Bfd90Bde = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xA54000D4BFD90BDE, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.player_n0X6Edb5D08Cb03E763 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x6EDB5D08CB03E763, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.player_n0X27Ad7162D3Fed01E = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x27AD7162D3FED01E, 'any', p0, p1)
    return call
end

--- @param player integer
--- @return number
natives.player_getNumMarkedDeadeyeTargets = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xCCD9B77F70D31C9D, 'int', player)
    return call
end

--- @param p0 userdata
--- @return any
natives.player_n0Xc93A9A45430D484E = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xC93A9A45430D484E, 'any', p0)
    return call
end

-- Used in script function INIT_DEADEYE_SLOWDOWN
--- @param player integer
--- @param p1 boolean
natives.player_n0X570A13A4Ca2799Bb = function(player, p1)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x570A13A4CA2799BB, 'void', player, p1)
end

-- Used in script function INIT_DEADEYE_SLOWDOWN
--- @param player integer
--- @param p1 boolean
natives.player_n0X3Acac8832E77Bc93 = function(player, p1)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x3ACAC8832E77BC93, 'void', player, p1)
end

--- @param player integer
--- @param p1 integer
natives.player_n0X2B12B6Fc8B8772Ab = function(player, p1)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x2B12B6FC8B8772AB, 'void', player, p1)
end

--- @param player integer
natives.player_n0Xe910932F4B30Be23 = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xE910932F4B30BE23, 'void', player)
end

--- @param player integer
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 userdata
natives.player_n0X131E294Ef60160Df = function(player, p1, p2, p3, p4, p5)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0x131E294EF60160DF, 'void', player, p1, p2, p3, p4, p5)
end

--- @param player integer
--- @param bitflag integer
natives.player_n0X0E9057A9Da78D0F8 = function(player, bitflag)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(bitflag) == 'integer', 'Argument bitflag must be of type integer.')

    local call = natives.invoke(0x0E9057A9DA78D0F8, 'void', player, bitflag)
end

--- @param player integer
--- @param p1 integer
natives.player_n0X263D69767F76059C = function(player, p1)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x263D69767F76059C, 'void', player, p1)
end

-- Used for setting up eagle eye for entity
-- Params: p2 = re-register or not?
--- @param player integer
--- @param entity integer
--- @param p2 boolean
natives.player_registerEagleEyeForEntity = function(player, entity, p2)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x543DFE14BE720027, 'void', player, entity, p2)
end

--- @param player integer
--- @param entity integer
--- @param p2 userdata
natives.player_registerEagleEyeTrailsForEntity = function(player, entity, p2)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xAC67098A1E54ABB0, 'void', player, entity, p2)
end

--- @param player integer
--- @param entity integer
natives.player_unregisterEagleEyeForEntity = function(player, entity)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x9DAE1380CC5C6451, 'void', player, entity)
end

--- @param player integer
--- @param entity integer
--- @param p2 userdata
natives.player_unregisterEagleEyeTrailsForEntity = function(player, entity, p2)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x9A957912CE2EABD1, 'void', player, entity, p2)
end

-- _CLEAR_FACIAL_* - _CLEAR_PED_BLOOD*
--- @param player integer
natives.player_n0Xe5D3Eb37Abc1Eb03 = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xE5D3EB37ABC1EB03, 'void', player)
end

--- @param player integer
--- @param entity integer
--- @return boolean
natives.player_isEagleEyeRegisteredForEntity = function(player, entity)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x0E6846476906C9DD, 'bool', player, entity)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.player_n0X6852288340B43239 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x6852288340B43239, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.player_n0Xe50A67C33514A390 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xE50A67C33514A390, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.player_n0Xd288E02E364972D2 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xD288E02E364972D2, 'void', p0, p1, p2)
end

--- @param entity integer
--- @param trail string
--- @param p2 userdata
--- @param p3 userdata
natives.player_eagleEyeDisableTrackingTrail = function(entity, trail, p2, p3)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(trail) == 'string', 'Argument trail must be of type string.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x40AB73092C95B5F5, 'void', entity, trail, p2, p3)
end

--- @param entity1 integer
--- @param entity2 integer
--- @param p2 userdata
--- @param p3 number
natives.player_n0X6Ecfc621A168424C = function(entity1, entity2, p2, p3)
    assert(type(entity1) == 'integer', 'Argument entity1 must be of type integer.')
    assert(type(entity2) == 'integer', 'Argument entity2 must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')

    local call = natives.invoke(0x6ECFC621A168424C, 'void', entity1, entity2, p2, p3)
end

--- @param entity1 integer
--- @param entity2 integer
--- @param p2 userdata
natives.player_n0Xdc5E09D012D759C4 = function(entity1, entity2, p2)
    assert(type(entity1) == 'integer', 'Argument entity1 must be of type integer.')
    assert(type(entity2) == 'integer', 'Argument entity2 must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xDC5E09D012D759C4, 'void', entity1, entity2, p2)
end

--- @param p0 userdata
natives.player_n0X00B156Afebcc5Ae0 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x00B156AFEBCC5AE0, 'void', p0)
end

--- @param p0 userdata
natives.player_n0Xc58Ce6824E604Dec = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xC58CE6824E604DEC, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
natives.player_n0X330Ca55A3647Fa1C = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x330CA55A3647FA1C, 'void', p0, p1)
end

--- @param p0 userdata
--- @return any
natives.player_n0Xa62Bbaae67A05Bb0 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xA62BBAAE67A05BB0, 'any', p0)
    return call
end

-- false: default eagleeye color
-- true: green eagleeye color
--- @param player integer
--- @param p1 boolean
--- @param p2 userdata
natives.player_eagleEyeSetColor = function(player, p1, p2)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x2C41D93F550D5E37, 'void', player, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
natives.player_n0X22C8B10802301381 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x22C8B10802301381, 'void', p0, p1)
end

--- @param player integer
--- @param modifier number
natives.player_eagleEyeSetDrainRateModifier = function(player, modifier)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(modifier) == 'number', 'Argument modifier must be of type number.')

    local call = natives.invoke(0xE0D6C2A146A5C993, 'void', player, modifier)
end

--- @param ped integer
--- @param p1 boolean
natives.player_n0X06E1Fb78B1E59Ca5 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x06E1FB78B1E59CA5, 'void', ped, p1)
end

--- @param ped integer
--- @param disabled boolean
natives.player_eagleEyeSetPlusFlagDisabled = function(ped, disabled)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(disabled) == 'boolean', 'Argument disabled must be of type boolean.')

    local call = natives.invoke(0xCE285A4413B00B7F, 'void', ped, disabled)
end

--- @param p0 userdata
--- @return any
natives.player_n0X3813E11A378958A5 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x3813E11A378958A5, 'any', p0)
    return call
end

--- @param player integer
--- @param linkedwaypointped integer
natives.player_eagleEyeSetFocusOnAssociatedClueTrail = function(player, linkedwaypointped)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(linkedwaypointped) == 'integer', 'Argument linkedwaypointped must be of type integer.')

    local call = natives.invoke(0x2AF423D6ECB2C485, 'void', player, linkedwaypointped)
end

--- @param p0 userdata
natives.player_n0X0F9Cf06986300875 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x0F9CF06986300875, 'void', p0)
end

--- @param player integer
--- @param p1 number
natives.player_eagleEyeSetTrackingUpgrade = function(player, p1)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0xDFC85C5199045026, 'void', player, p1)
end

--- @param player integer
--- @param p1 number
natives.player_eagleEyeSetTrackingUpgrade2 = function(player, p1)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x6FA957D1B55941C1, 'void', player, p1)
end

--- @param p0 userdata
--- @return any
natives.player_n0X1Da5C5B0923E1B85 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x1DA5C5B0923E1B85, 'any', p0)
    return call
end

--- @param p0 userdata
--- @return any
natives.player_n0Xaaed694Ce814817F = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xAAED694CE814817F, 'any', p0)
    return call
end

--- @param entity integer
--- @param red integer
--- @param green integer
--- @param blue integer
natives.player_eagleEyeSetCustomEntityTint = function(entity, red, green, blue)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(red) == 'integer', 'Argument red must be of type integer.')
    assert(type(green) == 'integer', 'Argument green must be of type integer.')
    assert(type(blue) == 'integer', 'Argument blue must be of type integer.')

    local call = natives.invoke(0x62ED71E133B6C9F1, 'void', entity, red, green, blue)
end

--- @param entity integer
--- @param p1 userdata
natives.player_n0Xbc02B3D151D3859F = function(entity, p1)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xBC02B3D151D3859F, 'void', entity, p1)
end

--- @param entity integer
--- @param distance number
natives.player_eagleEyeSetCustomDistance = function(entity, distance)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(distance) == 'number', 'Argument distance must be of type number.')

    local call = natives.invoke(0x907B16B3834C69E2, 'void', entity, distance)
end

-- _CLEAR_FACIAL_* - _CLEAR_PED_BLOOD*
--- @param player integer
natives.player_n0Xf21C7A3F3Ffba629 = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xF21C7A3F3FFBA629, 'void', player)
end

--- @param player integer
--- @param p1 number
natives.player_setPlayerManageBuffSuperJump = function(player, p1)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x292F0B6EDC82E3A4, 'void', player, p1)
end

-- see personaabilities.meta
-- enum ePersonaAbilityFlag
-- {
-- 	PERSONA_CAN_AUTOESCAPE_FROM_LASSO,
-- 	PERSONA_HAT_BLOCKS_FIRST_HEADSHOT,
-- 	PERSONA_FULL_AUTO_FOR_ALL_WEAPONS,
-- 	PERSONA_MIGHT_LIVE_AFTER_DEADLY_DAMAGE,
-- 	PERSONA_IGNORE_AIM_BEFORE_FIRING_RESTRICTIONS,
-- 	PERSONA_DEADEYE_INSTANT_RELOAD,
-- 	PERSONA_USE_PHOSPHOROUS_ROUNDS,
-- 	PERSONA_CONT_DEADEYE_ON_TAKING_COVER,
-- 	PERSONA_CONT_DEADEYE_ON_RELOAD,
-- 	PERSONA_CONT_DEADEYE_ON_SHOOTING,
-- 	PERSONA_CONT_DEADEYE_ON_EXITING_AIM,
-- 	PERSONA_DISABLE_PLAYER_CANCELLING_DEADEYE,
-- 	PERSONA_CONT_DEADEYE_ON_RAGDOLL,
-- 	PERSONA_USE_EXPLOSIVE_ROUNDS,
-- 	PERSONA_EXIT_DEADEYE_ON_TAKING_DAMAGE,
-- 	PERSONA_CARRY_TWO_MONEYBAGS,
-- 	PERSONA_ABILITY_LONG_PICK_HERBS,
-- 	PERSONA_ABILITY_UNBREAKABLE_LASSO,
-- 	PERSONA_CONT_DEADEYE_ON_SPRINTING,
-- 	PERSONA_CANT_DEAL_HEADSHOTS,
-- 	PERSONA_HANGMAN,
-- 	PERSONA_ALLOW_DEADEYE_WITH_MELEE_WEAPONS,
-- 	PERSONA_ALLOW_DEADEYE_WHILE_UNARMED,
-- 	PERSONA_DISABLE_DEADEYE_PERFECT_ACCURACY,
-- 	PERSONA_CANT_DEAL_HEADSHOTS_TO_PLAYERS,
-- 	PERSONA_CANT_DEAL_CRITICAL_DAMAGE,
-- 	PERSONA_CANT_DEAL_CRITICAL_DAMAGE_TO_PLAYERS,
-- 	PERSONA_ALLOW_EAGLEEYE_IN_COMBAT,
-- 	PERSONA_CONT_EAGLEEYE_ON_SPRINT,
-- 	PERSONA_SUPPRESS_LENGENDARY_EAGLEEYE_TRAIL_COLOR
-- };
--- @param flagid integer
--- @param toggle boolean
natives.player_setLocalPlayerPersonaAbilityFlag = function(flagid, toggle)
    assert(type(flagid) == 'integer', 'Argument flagid must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x7146CF430965927C, 'void', flagid, toggle)
end

--- @param player integer
--- @param ammotype integer
--- @param amount integer
natives.player_setPlayerMaxAmmoOverrideForAmmoType = function(player, ammotype, amount)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(ammotype) == 'integer', 'Argument ammotype must be of type integer.')
    assert(type(amount) == 'integer', 'Argument amount must be of type integer.')

    local call = natives.invoke(0xE133C1EC5300F740, 'void', player, ammotype, amount)
end

--- @param player integer
natives.player_n0Xc900A465364A85D6 = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xC900A465364A85D6, 'void', player)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.player_n0Xcfb2Eed4Fcb7Bd77 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xCFB2EED4FCB7BD77, 'void', p0, p1, p2)
end

--- @param p0 userdata
natives.player_n0X2Bb8D58E88777499 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x2BB8D58E88777499, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.player_n0X00Eb5A760638Db55 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x00EB5A760638DB55, 'void', p0, p1, p2)
end

--- @param p0 userdata
natives.player_n0X65887Eac535A0B0C = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x65887EAC535A0B0C, 'void', p0)
end

--- @param player integer
--- @param modifier number
natives.player_setWeaponDegradationModifier = function(player, modifier)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(modifier) == 'number', 'Argument modifier must be of type number.')

    local call = natives.invoke(0x11A7FF918EF6BC66, 'void', player, modifier)
end

--- @param player integer
--- @param drawreductiontime number
natives.player_setBowDrawReductionTimeInDeadeye = function(player, drawreductiontime)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(drawreductiontime) == 'number', 'Argument drawreductiontime must be of type number.')

    local call = natives.invoke(0xBE0C524970892D41, 'void', player, drawreductiontime)
end

-- Decreases Stamina bar drain speed by % when drawing a bow.
--- @param player integer
--- @param staminadrain number
natives.player_setBowStaminaDrainSpeed = function(player, staminadrain)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(staminadrain) == 'number', 'Argument staminadrain must be of type number.')

    local call = natives.invoke(0xFE7C9CF376D23342, 'void', player, staminadrain)
end

--- @param player integer
--- @param closerangelowerbound number
--- @param closerangeupperbound number
natives.player_setDamageCloseDistanceBonus = function(player, closerangelowerbound, closerangeupperbound)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(closerangelowerbound) == 'number', 'Argument closerangelowerbound must be of type number.')
    assert(type(closerangeupperbound) == 'number', 'Argument closerangeupperbound must be of type number.')

    local call = natives.invoke(0x7761A30432C91297, 'void', player, closerangelowerbound, closerangeupperbound)
end

--- @param player integer
--- @param closedamagebonus number
natives.player_setDamageCloseDistanceBonusTotal = function(player, closedamagebonus)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(closedamagebonus) == 'number', 'Argument closedamagebonus must be of type number.')

    local call = natives.invoke(0x5006C36652D6EC56, 'void', player, closedamagebonus)
end

--- @param player integer
--- @param farrangelowerbound number
--- @param farrangeupperbound number
natives.player_setDamageFarDistanceBonus = function(player, farrangelowerbound, farrangeupperbound)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(farrangelowerbound) == 'number', 'Argument farrangelowerbound must be of type number.')
    assert(type(farrangeupperbound) == 'number', 'Argument farrangeupperbound must be of type number.')

    local call = natives.invoke(0xED591CB17C8BA216, 'void', player, farrangelowerbound, farrangeupperbound)
end

--- @param player integer
--- @param fardamagebonus number
natives.player_setDamageFarDistanceBonusTotal = function(player, fardamagebonus)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(fardamagebonus) == 'number', 'Argument fardamagebonus must be of type number.')

    local call = natives.invoke(0x1F0E3A4434565F8F, 'void', player, fardamagebonus)
end

--- @param p0 userdata
--- @return any
natives.player_n0X6C54E69516Cc56Bd = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x6C54E69516CC56BD, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.player_n0X3A8611Bd7Bde84F7 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x3A8611BD7BDE84F7, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.player_n0Xc177C827Cefc0Aa4 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xC177C827CEFC0AA4, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.player_n0Xbd96185264Ddaaea = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xBD96185264DDAAEA, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.player_n0X628E742Fe1F79C4A = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x628E742FE1F79C4A, 'void', p0, p1)
end

--- @param player integer
--- @param speech string
natives.player_setPlayerInteractionPositiveResponse = function(player, speech)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(speech) == 'string', 'Argument speech must be of type string.')

    local call = natives.invoke(0xC6366A585659D15C, 'void', player, speech)
end

--- @param player integer
--- @param speech string
natives.player_setPlayerInteractionNegativeResponse = function(player, speech)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(speech) == 'string', 'Argument speech must be of type string.')

    local call = natives.invoke(0x98CD760DE43B612E, 'void', player, speech)
end

--- @param player integer
--- @param p1 userdata
natives.player_n0X216Bc0D3D2E413D2 = function(player, p1)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x216BC0D3D2E413D2, 'void', player, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.player_n0X45Ef176B532Ca851 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x45EF176B532CA851, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.player_n0Xa342495F93B7B838 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xA342495F93B7B838, 'void', p0, p1)
end

--- @param p0 userdata
natives.player_n0X3Bb84F812E052C90 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x3BB84F812E052C90, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
natives.player_n0X9Fc5A003Fb76Edbd = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x9FC5A003FB76EDBD, 'void', p0, p1)
end

--- @param player integer
--- @param p1 string
natives.player_n0X0Faf95D71Ed67Ade = function(player, p1)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')

    local call = natives.invoke(0x0FAF95D71ED67ADE, 'void', player, p1)
end

--- @param player integer
--- @param p1 string
natives.player_n0X988C9045531B9Fce = function(player, p1)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')

    local call = natives.invoke(0x988C9045531B9FCE, 'void', player, p1)
end

--- @param player integer
--- @param p1 string
natives.player_n0X06C3Db00B69D5435 = function(player, p1)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')

    local call = natives.invoke(0x06C3DB00B69D5435, 'void', player, p1)
end

-- NPEW__ENUM__EMOTE_CATEGORY_INVALID = -1
-- NPEW__ENUM__EMOTE_CATEGORY_ACTIONS
-- NPEW__ENUM__EMOTE_CATEGORY_ANTAGONIZE
-- NPEW__ENUM__EMOTE_CATEGORY_REACTIONS
-- NPEW__ENUM__EMOTE_CATEGORY_GREET
-- NPEW__ENUM__NUM_EMOTE_CATEGORIES
-- NPEW__ENUM__NUM_DISPLAY_TEXTURES
--- @param category integer
--- @param emote integer
natives.player_n0Xbb6Ea5D59E926095 = function(category, emote)
    assert(type(category) == 'integer', 'Argument category must be of type integer.')
    assert(type(emote) == 'integer', 'Argument emote must be of type integer.')

    local call = natives.invoke(0xBB6EA5D59E926095, 'void', category, emote)
end

--- @param emote integer
--- @return boolean
natives.player_n0Xe1D356F5A66D0Ffa = function(emote)
    assert(type(emote) == 'integer', 'Argument emote must be of type integer.')

    local call = natives.invoke(0xE1D356F5A66D0FFA, 'bool', emote)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.player_n0X929Ddd5538F3Df1F = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x929DDD5538F3DF1F, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.player_n0Xfa7Daae3959E6C7B = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xFA7DAAE3959E6C7B, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.player_n0X9461A8Fab0378E5B = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x9461A8FAB0378E5B, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.player_n0Xcb61A63Aa53D7D22 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xCB61A63AA53D7D22, 'void', p0, p1)
end

--- @param player integer
--- @param weapon integer
--- @param p2 boolean
natives.player_n0Xcffc3Eccd7A5Cceb = function(player, weapon, p2)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(weapon) == 'integer', 'Argument weapon must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xCFFC3ECCD7A5CCEB, 'void', player, weapon, p2)
end

--- @param p0 userdata
natives.player_n0X76F7E1Bcd623A429 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x76F7E1BCD623A429, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
natives.player_n0X585Ce159Db46Fadb = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x585CE159DB46FADB, 'void', p0, p1)
end

-- https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/ePlayerResetFlags
-- https:--github.com/femga/rdr3_discoveries/tree/master/AI/PLAYER_RESET_FLAGS
--- @param player integer
--- @param playerresetflag integer
--- @param p2 boolean
natives.player_setPlayerResetFlag = function(player, playerresetflag, p2)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(playerresetflag) == 'integer', 'Argument playerresetflag must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x9F9A829C6751F3C7, 'void', player, playerresetflag, p2)
end

-- playerResetFlag: See 0x9F9A829C6751F3C7
--- @param player integer
--- @param playerresetflag integer
--- @return boolean
natives.player_getPlayerResetFlag = function(player, playerresetflag)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(playerresetflag) == 'integer', 'Argument playerresetflag must be of type integer.')

    local call = natives.invoke(0xFE691E89C08937B6, 'bool', player, playerresetflag)
    return call
end

--- @param player integer
--- @return number
natives.player_getMountOwnedByPlayer = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xF49F14462F0AE27C, 'int', player)
    return call
end

--- @param mount integer
--- @return number
natives.player_getPlayerOwnerOfMount = function(mount)
    assert(type(mount) == 'integer', 'Argument mount must be of type integer.')

    local call = natives.invoke(0xAD03B03737CE6810, 'int', mount)
    return call
end

-- Seems to enable active horse equipment prompt when being near it and enables the control that opens the inventory as well
--- @param player integer
--- @param mount integer
natives.player_setPlayerOwnsMount = function(player, mount)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(mount) == 'integer', 'Argument mount must be of type integer.')

    local call = natives.invoke(0xE6D4E435B56D5BD0, 'void', player, mount)
end

--- @param player integer
--- @return number
natives.player_getVehicleOwnedByPlayer = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xB9050A97594C8832, 'int', player)
    return call
end

--- @param vehicle integer
--- @return number
natives.player_getPlayerOwnerOfVehicle = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x7C803BDC8343228D, 'int', vehicle)
    return call
end

--- @param player integer
--- @param vehicle integer
natives.player_setPlayerOwnsVehicle = function(player, vehicle)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0xD0E02AA618020D17, 'void', player, vehicle)
end

--- @param player integer
--- @return number
natives.player_getPlayerHuntingWagon = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x5CA6BBD4A7D8145E, 'int', player)
    return call
end

-- Only applies to HUNTERCART01
--- @param player integer
--- @param wagon integer
natives.player_setPlayerHuntingWagon = function(player, wagon)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(wagon) == 'integer', 'Argument wagon must be of type integer.')

    local call = natives.invoke(0x6A4404BDFA62CE2C, 'void', player, wagon)
end

--- @param p0 userdata
--- @param p1 userdata
natives.player_n0X9044835Be9D9Dbfe = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x9044835BE9D9DBFE, 'void', p0, p1)
end

-- Returns name hash (name) and outHash includes the type.
--- @param entity integer
--- @param type integer
--- @return number
natives.player_getDiscoverableNameHashAndTypeForEntity = function(entity, type)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(type) == 'integer', 'Argument type must be of type integer.')

    local call = natives.invoke(0x0139637A3BFF8B6D, 'integer', entity, type)
    return call
end

-- p0: mostly Ped Hashes
--- @param p0 integer
--- @param model boolean
--- @param outfit boolean
--- @return number
natives.player_getConstructedDiscoveredCharacterName = function(p0, model, outfit)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(model) == 'boolean', 'Argument model must be of type boolean.')
    assert(type(outfit) == 'boolean', 'Argument outfit must be of type boolean.')

    local call = natives.invoke(0x8E84119A23C16623, 'integer', p0, model, outfit)
    return call
end

--- @param ped integer
--- @return number
natives.player_getTargetCharacterNameScriptOverrideHash = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x0335106F3ACABBED, 'integer', ped)
    return call
end

--- @param ped integer
--- @return string
natives.player_getTargetCharacterNameScriptOverrideRawString = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x755E08680F21EF30, 'string', ped)
    return call
end

--- @param ped integer
--- @return number
natives.player_getTargetCharacterNameForLocalPlayer = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x36E3D8B5A6552FE8, 'integer', ped)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.player_n0Xda9D7Be231Fe865F = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xDA9D7BE231FE865F, 'any', p0, p1, p2)
    return call
end

--- @param player integer
--- @param p1 integer
--- @param discoveryhash integer
natives.player_setPlayerHasDiscoveredCharacterNameSp = function(player, p1, discoveryhash)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(discoveryhash) == 'integer', 'Argument discoveryhash must be of type integer.')

    local call = natives.invoke(0x946D46CD6DFB9742, 'void', player, p1, discoveryhash)
end

--- @param player integer
--- @param p1 integer
--- @param discoveryhash integer
--- @return boolean
natives.player_getHasPlayerDiscoveredCharacterNameSp = function(player, p1, discoveryhash)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(discoveryhash) == 'integer', 'Argument discoveryhash must be of type integer.')

    local call = natives.invoke(0x0772F87D7B07719A, 'bool', player, p1, discoveryhash)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.player_n0Xcddd4B74660E2335 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xCDDD4B74660E2335, 'void', p0, p1, p2)
end

--- @param p0 userdata
natives.player_n0X77E83C315A3B31Ca = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x77E83C315A3B31CA, 'void', p0)
end

--- @param discoveryhash integer
natives.player_setPlayerHasDiscoveredCharacterNameMp = function(discoveryhash)
    assert(type(discoveryhash) == 'integer', 'Argument discoveryhash must be of type integer.')

    local call = natives.invoke(0x7C32191D9FB2BDEA, 'void', discoveryhash)
end

--- @param discoveryhash integer
--- @return boolean
natives.player_getHasPlayerDiscoveredCharacterNameMp = function(discoveryhash)
    assert(type(discoveryhash) == 'integer', 'Argument discoveryhash must be of type integer.')

    local call = natives.invoke(0x354F689C4FFAAB37, 'bool', discoveryhash)
    return call
end

--- @param discoveryhash integer
natives.player_modifyPlayerDiscoveredCharacterNameMpSetUndiscovered = function(discoveryhash)
    assert(type(discoveryhash) == 'integer', 'Argument discoveryhash must be of type integer.')

    local call = natives.invoke(0xFB0E622B401884D3, 'void', discoveryhash)
end

--- @param player integer
--- @param showinginfocard boolean
natives.player_setShowInfoCard = function(player, showinginfocard)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(showinginfocard) == 'boolean', 'Argument showinginfocard must be of type boolean.')

    local call = natives.invoke(0xDC68829BB3F37023, 'void', player, showinginfocard)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.player_n0X4Dbc4873707E8Fd6 = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x4DBC4873707E8FD6, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
natives.player_n0Xcedc16930526F728 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xCEDC16930526F728, 'void', p0)
end

--- @param location integer
natives.player_n0X14E57F88Ba0A07Fc = function(location)
    assert(type(location) == 'integer', 'Argument location must be of type integer.')

    local call = natives.invoke(0x14E57F88BA0A07FC, 'void', location)
end

--- @return any
natives.player_n0X2E1Abe627C95Ed9B = function()

    local call = natives.invoke(0x2E1ABE627C95ED9B, 'any')
    return call
end

natives.player_n0X497A18F8F88Aa9D8 = function()

    local call = natives.invoke(0x497A18F8F88AA9D8, 'void')
end

--- @param p0 integer
natives.player_n0X4F0D2256Aae94Eda = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x4F0D2256AAE94EDA, 'void', p0)
end

-- Focus Fire VFX start for player: p1 = focusfire
--- @param player integer
--- @param p1 string
natives.player_setLockonFocusFireVfx = function(player, p1)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')

    local call = natives.invoke(0x5F8E0303C229C84B, 'void', player, p1)
end

-- Hardcoded to return zero/false.
--- @return any
natives.player_n0X0B7803F6F7Bb43E0 = function()

    local call = natives.invoke(0x0B7803F6F7BB43E0, 'any')
    return call
end

-- Hardcoded to return zero/false.
--- @param p0 userdata
--- @return any
natives.player_n0Xc74Eb3F2Ec169F6B = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xC74EB3F2EC169F6B, 'any', p0)
    return call
end

-- nullsub, doesn't do anything
--- @param p0 userdata
--- @param p1 userdata
natives.player_n0X3B296934Db026873 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x3B296934DB026873, 'void', p0, p1)
end

--- @param mount integer
--- @param iminbucktime integer
natives.player_setMinTimeBeforeHorseBucking = function(mount, iminbucktime)
    assert(type(mount) == 'integer', 'Argument mount must be of type integer.')
    assert(type(iminbucktime) == 'integer', 'Argument iminbucktime must be of type integer.')

    local call = natives.invoke(0x506CE71FB6E8CF5E, 'void', mount, iminbucktime)
end

--- @return any
natives.player_n0Xf4Cb347D7B5Eb0Fd = function()

    local call = natives.invoke(0xF4CB347D7B5EB0FD, 'any')
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.player_n0Xcd7Ca3013Fd12749 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xCD7CA3013FD12749, 'void', p0, p1)
end

--- @param toggle boolean
natives.player_forceRestScenario = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xE5A3DD2FF84E1A4B, 'void', toggle)
end

-- _IS_PLAYER_D* - _IS_PLAYER_F*
--- @return boolean
natives.player_n0X57028Fd99886F6F9 = function()

    local call = natives.invoke(0x57028FD99886F6F9, 'bool')
    return call
end

--- @param p0 userdata
natives.player_n0X35A33783Ec3C3448 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x35A33783EC3C3448, 'void', p0)
end

--- @param p0 userdata
natives.player_n0X39D8D7082Bc34B72 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x39D8D7082BC34B72, 'void', p0)
end

--- @param p0 userdata
natives.player_n0X1Ad8Ad999C27F44A = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x1AD8AD999C27F44A, 'void', p0)
end

--- @param popsethash integer
--- @return number
natives.population_getNumModelsInPopulationSet = function(popsethash)
    assert(type(popsethash) == 'integer', 'Argument popsethash must be of type integer.')

    local call = natives.invoke(0xA1E3171ED0E47564, 'int', popsethash)
    return call
end

--- @param popsethash integer
--- @param index integer
--- @return number
natives.population_getPedModelNameInPopulationSet = function(popsethash, index)
    assert(type(popsethash) == 'integer', 'Argument popsethash must be of type integer.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0x3EAFA1C533B7139E, 'integer', popsethash, index)
    return call
end

--- @param popsethash integer
--- @param flags integer
--- @param p2 integer
--- @param p3 boolean
--- @param p4 boolean
--- @param x number
--- @param y number
--- @param z number
--- @return number
natives.population_getRandomModelFromPopulationSet = function(popsethash, flags, p2, p3, p4, x, y, z)
    assert(type(popsethash) == 'integer', 'Argument popsethash must be of type integer.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0x6B12ED8C77E8567B, 'integer', popsethash, flags, p2, p3, p4, x, y, z)
    return call
end

--- @param volume integer
--- @return number
natives.population_createPopzoneFromVolume = function(volume)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')

    local call = natives.invoke(0x9AC1C64FE46B6D09, 'integer', volume)
    return call
end

--- @param popzone integer
natives.population_deleteScriptPopzone = function(popzone)
    assert(type(popzone) == 'integer', 'Argument popzone must be of type integer.')

    local call = natives.invoke(0xA6E6A66FC4CA4224, 'void', popzone)
end

--- @param popzone integer
--- @return boolean
natives.population_isPopzoneValid = function(popzone)
    assert(type(popzone) == 'integer', 'Argument popzone must be of type integer.')

    local call = natives.invoke(0xA5BD585005EFCAD4, 'bool', popzone)
    return call
end

--- @param popzone integer
--- @param populationsethash integer
natives.population_setPopzonePopulationSet = function(popzone, populationsethash)
    assert(type(popzone) == 'integer', 'Argument popzone must be of type integer.')
    assert(type(populationsethash) == 'integer', 'Argument populationsethash must be of type integer.')

    local call = natives.invoke(0x3E6A49D9B519E85C, 'void', popzone, populationsethash)
end

--- @param popzone integer
--- @param p1 integer
--- @param p2 integer
natives.population_n0X7E6Bc0B94F5928F0 = function(popzone, p1, p2)
    assert(type(popzone) == 'integer', 'Argument popzone must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x7E6BC0B94F5928F0, 'void', popzone, p1, p2)
end

--- @param popzone integer
--- @param p1 integer
natives.population_n0X578E2Fa64E847C60 = function(popzone, p1)
    assert(type(popzone) == 'integer', 'Argument popzone must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x578E2FA64E847C60, 'void', popzone, p1)
end

--- @param popzone integer
--- @param p1 boolean
natives.population_n0X08892122769770D5 = function(popzone, p1)
    assert(type(popzone) == 'integer', 'Argument popzone must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x08892122769770D5, 'void', popzone, p1)
end

--- @param popzone integer
--- @param p1 boolean
natives.population_n0X0F1861101C9A9944 = function(popzone, p1)
    assert(type(popzone) == 'integer', 'Argument popzone must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x0F1861101C9A9944, 'void', popzone, p1)
end

--- @param p0 integer
--- @param p1 integer
--- @param priority integer
natives.population_setSpawnerInfoPriority = function(p0, p1, priority)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(priority) == 'integer', 'Argument priority must be of type integer.')

    local call = natives.invoke(0x60CDE717A6D47769, 'void', p0, p1, priority)
end

--- @param p0 integer
--- @param p1 integer
natives.population_clearSpawnerInfoPriority = function(p0, p1)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x217A54DE2D200305, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.population_n0X638Fcfc6042A9473 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x638FCFC6042A9473, 'void', p0, p1)
end

-- flags: https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/PedFilterFlags
--- @param volume integer
--- @param includeflags integer
--- @param excludeflags integer
--- @param p3 integer
--- @param p4 integer
--- @param p5 integer
--- @param p6 integer
natives.population_addAmbientAvoidanceRestriction = function(volume, includeflags, excludeflags, p3, p4, p5, p6)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(includeflags) == 'integer', 'Argument includeflags must be of type integer.')
    assert(type(excludeflags) == 'integer', 'Argument excludeflags must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')
    assert(type(p5) == 'integer', 'Argument p5 must be of type integer.')
    assert(type(p6) == 'integer', 'Argument p6 must be of type integer.')

    local call = natives.invoke(0xB56D41A694E42E86, 'void', volume, includeflags, excludeflags, p3, p4, p5, p6)
end

-- flags: see 0xB56D41A694E42E86
--- @param volume integer
natives.population_removeAmbientAvoidanceRestriction = function(volume)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')

    local call = natives.invoke(0x74C2B3DC0B294102, 'void', volume)
end

-- flags: see 0xB56D41A694E42E86
--- @param volume integer
--- @param includeflags integer
--- @param excludeflags integer
--- @param p3 integer
--- @param p4 integer
--- @param p5 integer
--- @param p6 integer
natives.population_addAmbientSpawnRestriction = function(volume, includeflags, excludeflags, p3, p4, p5, p6)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(includeflags) == 'integer', 'Argument includeflags must be of type integer.')
    assert(type(excludeflags) == 'integer', 'Argument excludeflags must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')
    assert(type(p5) == 'integer', 'Argument p5 must be of type integer.')
    assert(type(p6) == 'integer', 'Argument p6 must be of type integer.')

    local call = natives.invoke(0x18262CAFEBB5FBE1, 'void', volume, includeflags, excludeflags, p3, p4, p5, p6)
end

--- @param volume integer
natives.population_removeAmbientSpawnRestriction = function(volume)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')

    local call = natives.invoke(0xA1CFB35069D23C23, 'void', volume)
end

--- @param includeflags integer
--- @param excludeflags integer
--- @param p2 integer
--- @param p3 integer
--- @param p4 integer
--- @param volume integer
natives.population_n0X2161278C6322F740 = function(includeflags, excludeflags, p2, p3, p4, volume)
    assert(type(includeflags) == 'integer', 'Argument includeflags must be of type integer.')
    assert(type(excludeflags) == 'integer', 'Argument excludeflags must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')

    local call = natives.invoke(0x2161278C6322F740, 'void', includeflags, excludeflags, p2, p3, p4, volume)
end

--- @param bitflag integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.population_n0Xf45E46Deecf7Df6E = function(bitflag, p1, p2, p3, p4)
    assert(type(bitflag) == 'integer', 'Argument bitflag must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0xF45E46DEECF7DF6E, 'void', bitflag, p1, p2, p3, p4)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
natives.population_n0X8Ec7Cd701F872F87 = function(p0, p1, p2, p3, p4, p5)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0x8EC7CD701F872F87, 'void', p0, p1, p2, p3, p4, p5)
end

--- @param p0 userdata
natives.population_n0Xc4533E3E87125C9E = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xC4533E3E87125C9E, 'void', p0)
end

-- Params: p1 = 1 & 2 in R* Scripts, 0 = Disable avoidance, 1 = Enabled avoidance, 2 = Enabled avoidance (?)
--- @param ped integer
--- @param p1 integer
natives.population_setPedShouldIgnoreAvoidanceVolumes = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xF74E134F40192884, 'void', ped, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.population_n0Xdbbf12Ea7C1029B2 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xDBBF12EA7C1029B2, 'void', p0, p1)
end

--- @param p0 userdata
natives.population_n0X247F86595D396344 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x247F86595D396344, 'void', p0)
end

natives.population_n0X324Ab2A68Ad8Aee5 = function()

    local call = natives.invoke(0x324AB2A68AD8AEE5, 'void')
end

--- @param unk boolean
natives.population_disableAmbientRoadPopulation = function(unk)
    assert(type(unk) == 'boolean', 'Argument unk must be of type boolean.')

    local call = natives.invoke(0xC6DCC2A3A8825C85, 'void', unk)
end

natives.population_enableAmbientRoadPopulation = function()

    local call = natives.invoke(0xBC90BDF4E5228EA1, 'void')
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.population_n0X2660E7720Edc4Bd0 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x2660E7720EDC4BD0, 'void', p0, p1, p2)
end

-- Returns model hash of the closest fish
--- @return number
natives.population_getRandomFishTypeForLocation = function()

    local call = natives.invoke(0x595478B3BBC3076D, 'integer')
    return call
end

-- Only used for Special Event (XMAS).
-- _SET_P*
--- @param p0 boolean
natives.population_n0Xec116Edb683Ad479 = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0xEC116EDB683AD479, 'void', p0)
end

--- @return any
natives.posse_n0Xc086Ff658B2E51Db = function()

    local call = natives.invoke(0xC086FF658B2E51DB, 'any')
    return call
end

--- @param p0 userdata
--- @return any
natives.posse_n0Xc086Ff658B2E51Da = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xC086FF658B2E51DA, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.posse_n0Xc087Ff658B2E51Da = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xC087FF658B2E51DA, 'any', p0, p1)
    return call
end

--- @return number
natives.posse_posseGetPosseMembershipCount = function()

    local call = natives.invoke(0xC088FF658B2E51DA, 'int')
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.posse_n0Xc089Ff658B2E51Da = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xC089FF658B2E51DA, 'any', p0, p1)
    return call
end

--- @param p0 userdata
natives.posse_n0Xc08Aff658B2E51Da = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xC08AFF658B2E51DA, 'void', p0)
end

--- @param p0 userdata
--- @return any
natives.posse_n0Xc08Bff658B2E51Da = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xC08BFF658B2E51DA, 'any', p0)
    return call
end

--- @param p0 userdata
natives.posse_n0Xc08Aff658B2E51Db = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xC08AFF658B2E51DB, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.posse_n0Xc08Cff658B2E51Da = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xC08CFF658B2E51DA, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.posse_n0Xc09Cff658B2E51Da = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xC09CFF658B2E51DA, 'any', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @return any
natives.posse_n0Xc08Def658B2E51Da = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xC08DEF658B2E51DA, 'any', p0)
    return call
end

--- @return any
natives.posse_n0Xc08Dff658B2E51Da = function()

    local call = natives.invoke(0xC08DFF658B2E51DA, 'any')
    return call
end

--- @param p0 userdata
--- @return any
natives.posse_n0Xc08Dff658B2E51Db = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xC08DFF658B2E51DB, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.posse_n0Xc08Eff658B2E51Db = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xC08EFF658B2E51DB, 'any', p0, p1)
    return call
end

--- @return any
natives.posse_n0Xc08Fff658B2E51Da = function()

    local call = natives.invoke(0xC08FFF658B2E51DA, 'any')
    return call
end

--- @param p0 userdata
--- @return any
natives.posse_n0Xc08Fff658B2E51Db = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xC08FFF658B2E51DB, 'any', p0)
    return call
end

--- @param p0 userdata
--- @return any
natives.posse_n0Xc084Ff658B2E61Da = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xC084FF658B2E61DA, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.posse_n0Xc084Ff658B2E71Da = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xC084FF658B2E71DA, 'any', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.posse_n0Xc084Ff658B2E81Da = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xC084FF658B2E81DA, 'any', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @return any
natives.posse_n0Xc084Ff658B2E52Da = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xC084FF658B2E52DA, 'any', p0)
    return call
end

--- @return any
natives.posse_n0Xc084Ff658B2E53Da = function()

    local call = natives.invoke(0xC084FF658B2E53DA, 'any')
    return call
end

--- @param p0 userdata
--- @return any
natives.posse_n0Xc084Ff658B2E54Da = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xC084FF658B2E54DA, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.posse_n0Xc084Ff658B2E55Da = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xC084FF658B2E55DA, 'any', p0, p1)
    return call
end

--- @param p0 userdata
natives.posse_n0Xc484Ff658B2E55Da = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xC484FF658B2E55DA, 'void', p0)
end

--- @param p0 userdata
natives.posse_n0Xc584Ff658B2E55Da = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xC584FF658B2E55DA, 'void', p0)
end

--- @param p0 userdata
natives.posse_n0Xc684Ff658B2E55Da = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xC684FF658B2E55DA, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.posse_n0Xc184Ff658B2E55Da = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xC184FF658B2E55DA, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.posse_n0Xc284Ff658B2E55Da = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xC284FF658B2E55DA, 'any', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @return any
natives.posse_n0Xc394Ff658B2E55Da = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xC394FF658B2E55DA, 'any', p0, p1, p2, p3)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.posse_n0Xc07Cff658B2E51Da = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xC07CFF658B2E51DA, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.posse_n0Xc06Cff658B2E51Da = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xC06CFF658B2E51DA, 'any', p0, p1, p2)
    return call
end

--- @param hash integer
--- @return boolean
natives.propset_requestPropSet = function(hash)
    assert(type(hash) == 'integer', 'Argument hash must be of type integer.')

    local call = natives.invoke(0xF3DE57A46D5585E9, 'bool', hash)
    return call
end

-- Same as _REQUEST_PROP_SET
--- @param hash integer
--- @return boolean
natives.propset_requestPropSet2 = function(hash)
    assert(type(hash) == 'integer', 'Argument hash must be of type integer.')

    local call = natives.invoke(0xE72F591958F3ACAB, 'bool', hash)
    return call
end

--- @param hash integer
--- @return boolean
natives.propset_hasPropSetLoaded = function(hash)
    assert(type(hash) == 'integer', 'Argument hash must be of type integer.')

    local call = natives.invoke(0x48A88FC684C55FDC, 'bool', hash)
    return call
end

-- Same as _HAS_PROP_SET_LOADED
--- @param hash integer
--- @return boolean
natives.propset_hasPropSetLoaded2 = function(hash)
    assert(type(hash) == 'integer', 'Argument hash must be of type integer.')

    local call = natives.invoke(0xD090ABEF4D6A7D96, 'bool', hash)
    return call
end

--- @param propset integer
natives.propset_setPropSetAsNoLongerNeeded = function(propset)
    assert(type(propset) == 'integer', 'Argument propset must be of type integer.')

    local call = natives.invoke(0x909E3C7FAE539FB1, 'void', propset)
end

--- @param propset integer
--- @param p1 boolean
--- @param p2 boolean
natives.propset_deletePropSet = function(propset, p1, p2)
    assert(type(propset) == 'integer', 'Argument propset must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x58AC173A55D9D7B4, 'void', propset, p1, p2)
end

--- @param hash integer
--- @return boolean
natives.propset_releasePropSet = function(hash)
    assert(type(hash) == 'integer', 'Argument hash must be of type integer.')

    local call = natives.invoke(0xB1964A83B345B4AB, 'bool', hash)
    return call
end

-- propsetType: https:--github.com/femga/rdr3_discoveries/blob/master/objects/propsets_list.lua
-- placementType: https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/PlacementType
--- @param propsettype integer
--- @param x number
--- @param y number
--- @param z number
--- @param placementtype integer
--- @param heading number
--- @param zprobe number
--- @param p7 boolean
--- @param usevegmod boolean
--- @return number
natives.propset_createPropSet = function(propsettype, x, y, z, placementtype, heading, zprobe, p7, usevegmod)
    assert(type(propsettype) == 'integer', 'Argument propsettype must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(placementtype) == 'integer', 'Argument placementtype must be of type integer.')
    assert(type(heading) == 'number', 'Argument heading must be of type number.')
    assert(type(zprobe) == 'number', 'Argument zprobe must be of type number.')
    assert(type(p7) == 'boolean', 'Argument p7 must be of type boolean.')
    assert(type(usevegmod) == 'boolean', 'Argument usevegmod must be of type boolean.')

    local call = natives.invoke(0xE65C5CBA95F0E510, 'integer', propsettype, x, y, z, placementtype, heading, zprobe, p7, usevegmod)
    return call
end

-- Same as _CREATE_PROP_SET
--- @param propsettype integer
--- @param x number
--- @param y number
--- @param z number
--- @param placementtype integer
--- @param heading number
--- @param zprobe number
--- @param p7 boolean
--- @param usevegmod boolean
--- @return number
natives.propset_createPropSet2 = function(propsettype, x, y, z, placementtype, heading, zprobe, p7, usevegmod)
    assert(type(propsettype) == 'integer', 'Argument propsettype must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(placementtype) == 'integer', 'Argument placementtype must be of type integer.')
    assert(type(heading) == 'number', 'Argument heading must be of type number.')
    assert(type(zprobe) == 'number', 'Argument zprobe must be of type number.')
    assert(type(p7) == 'boolean', 'Argument p7 must be of type boolean.')
    assert(type(usevegmod) == 'boolean', 'Argument usevegmod must be of type boolean.')

    local call = natives.invoke(0x899C97A1CCE7D483, 'integer', propsettype, x, y, z, placementtype, heading, zprobe, p7, usevegmod)
    return call
end

--- @param hash integer
--- @param x number
--- @param y number
--- @param z number
--- @param entity integer
--- @param p5 number
--- @param p6 boolean
--- @param p7 integer
--- @param p8 boolean
--- @return number
natives.propset_createPropSetInstanceAttachedToEntity = function(hash, x, y, z, entity, p5, p6, p7, p8)
    assert(type(hash) == 'integer', 'Argument hash must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')
    assert(type(p7) == 'integer', 'Argument p7 must be of type integer.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')

    local call = natives.invoke(0x9609DBDDE18FAD8C, 'integer', hash, x, y, z, entity, p5, p6, p7, p8)
    return call
end

-- Same as CREATE_PROP_SET_INSTANCE_ATTACHED_TO_ENTITY
--- @param hash integer
--- @param x number
--- @param y number
--- @param z number
--- @param entity integer
--- @param p5 number
--- @param p6 boolean
--- @param p7 integer
--- @param p8 boolean
--- @return number
natives.propset_createPropSetInstanceAttachedToEntity2 = function(hash, x, y, z, entity, p5, p6, p7, p8)
    assert(type(hash) == 'integer', 'Argument hash must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')
    assert(type(p7) == 'integer', 'Argument p7 must be of type integer.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')

    local call = natives.invoke(0xACA7FB30269096D4, 'integer', hash, x, y, z, entity, p5, p6, p7, p8)
    return call
end

--- @param propset integer
--- @return boolean
natives.propset_doesPropSetExist = function(propset)
    assert(type(propset) == 'integer', 'Argument propset must be of type integer.')

    local call = natives.invoke(0x7DDDCF815E650FF5, 'bool', propset)
    return call
end

--- @param propsethash integer
--- @param x number
--- @param y number
--- @param z number
--- @return boolean
natives.propset_doesPropSetOfTypeExistNearCoords = function(propsethash, x, y, z)
    assert(type(propsethash) == 'integer', 'Argument propsethash must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0x72068021F498E6E3, 'bool', propsethash, x, y, z)
    return call
end

--- @param propset integer
--- @return boolean
natives.propset_isPropSetFullyLoaded = function(propset)
    assert(type(propset) == 'integer', 'Argument propset must be of type integer.')

    local call = natives.invoke(0xF42DB680A8B2A4D9, 'bool', propset)
    return call
end

--- @param propset integer
--- @param toggle boolean
natives.propset_setPropSetVisible = function(propset, toggle)
    assert(type(propset) == 'integer', 'Argument propset must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x9D096A5BD02F953E, 'void', propset, toggle)
end

--- @param propset integer
--- @return boolean
natives.propset_isPropSetVisible = function(propset)
    assert(type(propset) == 'integer', 'Argument propset must be of type integer.')

    local call = natives.invoke(0x0CE8AAFE9E433A23, 'bool', propset)
    return call
end

--- @param propset integer
--- @return number
natives.propset_getPropSetModel = function(propset)
    assert(type(propset) == 'integer', 'Argument propset must be of type integer.')

    local call = natives.invoke(0xA6A9712955F53D9C, 'integer', propset)
    return call
end

--- @param vehicle integer
--- @return number
natives.propset_getVehiclePropSetHash = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x36F69E7A22655653, 'integer', vehicle)
    return call
end

--- @param propset integer
--- @param itemset integer
--- @param model integer
--- @param p3 boolean
--- @param p4 boolean
--- @return number
natives.propset_getEntitiesFromPropSet = function(propset, itemset, model, p3, p4)
    assert(type(propset) == 'integer', 'Argument propset must be of type integer.')
    assert(type(itemset) == 'integer', 'Argument itemset must be of type integer.')
    assert(type(model) == 'integer', 'Argument model must be of type integer.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')

    local call = natives.invoke(0x738271B660FE0695, 'int', propset, itemset, model, p3, p4)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
natives.propset_n0Xc4B67Ef3Fd65622D = function(p0, p1, p2, p3, p4, p5)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0xC4B67EF3FD65622D, 'void', p0, p1, p2, p3, p4, p5)
end

--- @param p0 userdata
natives.propset_n0X58E0B01D45Ca7357 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x58E0B01D45CA7357, 'void', p0)
end

--- @param propset integer
--- @param flag integer
natives.propset_setPropSetFlag = function(propset, flag)
    assert(type(propset) == 'integer', 'Argument propset must be of type integer.')
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')

    local call = natives.invoke(0xC1AB7EEFD3E6EE49, 'void', propset, flag)
end

--- @param vehicle integer
--- @return number
natives.propset_getVehiclePropSet = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0xCE2ACD6F602803E5, 'integer', vehicle)
    return call
end

--- @param vehicle integer
--- @return boolean
natives.propset_doesVehicleHaveAnyPropSet = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x53784CEA0159439B, 'bool', vehicle)
    return call
end

-- List of vehicle propsets (wagons & trains): https:--pastebin.com/1CsnvGLu / https:--pastebin.com/v7TtqTgE
--- @param vehicle integer
--- @param propset integer
natives.propset_addPropSetForVehicle = function(vehicle, propset)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(propset) == 'integer', 'Argument propset must be of type integer.')

    local call = natives.invoke(0xD80FAF919A2E56EA, 'void', vehicle, propset)
end

--- @param vehicle integer
natives.propset_removeVehiclePropSets = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x3BCF32FF37EA9F1D, 'void', vehicle)
end

--- @param vehicle integer
--- @return boolean
natives.propset_isVehiclePropSetLoaded = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x155B2FBE72D7D1D0, 'bool', vehicle)
    return call
end

-- https:--github.com/femga/rdr3_discoveries/blob/master/vehicles/vehicle_modding/vehicle_propsets.lua
--- @param vehicle integer
--- @param propset integer
natives.propset_addAdditionalPropSetForVehicle = function(vehicle, propset)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(propset) == 'integer', 'Argument propset must be of type integer.')

    local call = natives.invoke(0x75F90E4051CC084C, 'void', vehicle, propset)
end

--- @param vehicle integer
--- @return boolean
natives.propset_isVehiclePropSetLoadedAdditional = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x7264F9CA87A9830B, 'bool', vehicle)
    return call
end

-- Returns PropSet handle to be used with _GET_PROP_SET_MODEL
--- @param vehicle integer
--- @return number
natives.propset_getVehicleLightPropSet = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0xA079300AF757FB1A, 'integer', vehicle)
    return call
end

--- @param vehicle integer
--- @return boolean
natives.propset_doesVehicleHaveAnyLightPropSet = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0xC9B4B3A36F81FD75, 'bool', vehicle)
    return call
end

-- To remove propsets either parse a zero as hash or call 0xE31C0CB1C3186D40
-- 0xA6A9712955F53D9C returns lightPropset Hashes
-- https:--github.com/femga/rdr3_discoveries/blob/master/vehicles/vehicle_modding/vehicle_lantern_propsets.lua
--- @param vehicle integer
--- @param lightpropset integer
natives.propset_addLightPropSetToVehicle = function(vehicle, lightpropset)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(lightpropset) == 'integer', 'Argument lightpropset must be of type integer.')

    local call = natives.invoke(0xC0F0417A90402742, 'void', vehicle, lightpropset)
end

--- @param vehicle integer
natives.propset_removeVehicleLightPropSets = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0xE31C0CB1C3186D40, 'void', vehicle)
end

--- @param vehicle integer
--- @return boolean
natives.propset_isVehicleLightPropSetLoaded = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x0790473EEE1977D3, 'bool', vehicle)
    return call
end

-- Example before/after deleting a train carriage's propset: https:--imgur.com/a/qRNrIrK
--- @param traincarriage integer
--- @return number
natives.propset_getTrainCarriagePropSet = function(traincarriage)
    assert(type(traincarriage) == 'integer', 'Argument traincarriage must be of type integer.')

    local call = natives.invoke(0xCFC0BD09BB1B73FF, 'integer', traincarriage)
    return call
end

--- @param vehicle integer
--- @param wagonindex integer
--- @return boolean
natives.propset_hasVehicleTrailerPropSetLoaded = function(vehicle, wagonindex)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(wagonindex) == 'integer', 'Argument wagonindex must be of type integer.')

    local call = natives.invoke(0x8F3333F0A6900B3C, 'bool', vehicle, wagonindex)
    return call
end

--- @param propsethash integer
--- @param x number
--- @param y number
--- @param z number
--- @return number
natives.propset_getPropSetAtCoords = function(propsethash, x, y, z)
    assert(type(propsethash) == 'integer', 'Argument propsethash must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0xC061E50F8D299F95, 'integer', propsethash, x, y, z)
    return call
end

--- @param hash integer
--- @return boolean
natives.queue_eventQueueIsEmpty = function(hash)
    assert(type(hash) == 'integer', 'Argument hash must be of type integer.')

    local call = natives.invoke(0x402B5D7D269FF796, 'bool', hash)
    return call
end

--- @param hash integer
natives.queue_eventQueuePop = function(hash)
    assert(type(hash) == 'integer', 'Argument hash must be of type integer.')

    local call = natives.invoke(0xD87DF294B049211D, 'void', hash)
end

-- nullsub, doesn't do anything
-- 
-- Old name: _STOP_RECORDING_THIS_FRAME
natives.recording_replayPreventRecordingThisFrame = function()

    local call = natives.invoke(0xA8C44C13419634F2, 'void')
end

-- Hardcoded to return false.
-- 
-- Old name: _IS_INTERIOR_RENDERING_DISABLED
--- @return boolean
natives.replay_replaySystemHasRequestedAScriptCleanup = function()

    local call = natives.invoke(0x0F838D47DE58EDB2, 'bool')
    return call
end

-- nullsub, doesn't do anything
natives.replay_setScriptsHaveCleanedUpForReplaySystem = function()

    local call = natives.invoke(0x57C6525034E76EB0, 'void')
end

-- Hardcoded to return true.
--- @return boolean
natives.replay_openVideoEditor = function()

    local call = natives.invoke(0xB3F2829907403C13, 'bool')
    return call
end

-- Hardcoded to return true.
--- @param p0 userdata
--- @return boolean
natives.replay_closeVideoEditor = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xCEEC64BD27A59312, 'bool', p0)
    return call
end

-- Hardcoded to return false.
--- @return boolean
natives.replay_isVideoEditorRunning = function()

    local call = natives.invoke(0x9EEB007317FA3B9C, 'bool')
    return call
end

--- @param value userdata
--- @param bitindex integer
natives.scripts_setPlayerBitAtIndex = function(value, bitindex)
    assert(type(value) == 'userdata', 'Argument value must be of type userdata.')
    assert(type(bitindex) == 'integer', 'Argument bitindex must be of type integer.')

    local call = natives.invoke(0x31010318BA9897AC, 'void', value, bitindex)
end

--- @param value userdata
--- @param bitindex integer
natives.scripts_clearPlayerBitAtIndex = function(value, bitindex)
    assert(type(value) == 'userdata', 'Argument value must be of type userdata.')
    assert(type(bitindex) == 'integer', 'Argument bitindex must be of type integer.')

    local call = natives.invoke(0xD426E2E3288469D6, 'void', value, bitindex)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.scripts_n0Xe4Abe20Dce7C7Cfe = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xE4ABE20DCE7C7CFE, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.scripts_n0Xffddf802279Be128 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xFFDDF802279BE128, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.scripts_n0X64F765D9A1F8F02C = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x64F765D9A1F8F02C, 'void', p0, p1, p2)
end

--- @param value userdata
natives.scripts_setAllPlayerBits = function(value)
    assert(type(value) == 'userdata', 'Argument value must be of type userdata.')

    local call = natives.invoke(0x20F4CB76689ACDBC, 'void', value)
end

--- @param value userdata
natives.scripts_clearAllPlayerBits = function(value)
    assert(type(value) == 'userdata', 'Argument value must be of type userdata.')

    local call = natives.invoke(0xDE544B7EC0C187CC, 'void', value)
end

--- @param value userdata
--- @param bitindex integer
--- @return boolean
natives.scripts_isPlayerBitSetAtIndex = function(value, bitindex)
    assert(type(value) == 'userdata', 'Argument value must be of type userdata.')
    assert(type(bitindex) == 'integer', 'Argument bitindex must be of type integer.')

    local call = natives.invoke(0x72B2E00C9BAC6789, 'bool', value, bitindex)
    return call
end

--- @param playerbits integer
--- @return boolean
natives.scripts_isAnyPlayerBitSet = function(playerbits)
    assert(type(playerbits) == 'integer', 'Argument playerbits must be of type integer.')

    local call = natives.invoke(0x179A6F0EE2E79026, 'bool', playerbits)
    return call
end

--- @param value userdata
--- @param p1 integer
--- @return number
natives.scripts_getBlockOfPlayerBits = function(value, p1)
    assert(type(value) == 'userdata', 'Argument value must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xFA3B530A5CC693D5, 'int', value, p1)
    return call
end

--- @param value userdata
--- @param p1 integer
--- @param p2 integer
natives.scripts_setBlockOfPlayerBits = function(value, p1, p2)
    assert(type(value) == 'userdata', 'Argument value must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0xC6DFB8C04C86D5A5, 'void', value, p1, p2)
end

--- @param value userdata
--- @return number
natives.scripts_countPlayerBits = function(value)
    assert(type(value) == 'userdata', 'Argument value must be of type userdata.')

    local call = natives.invoke(0x462C687BEA254BD9, 'int', value)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.scripts_n0X1Bdb5A07307F6929 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x1BDB5A07307F6929, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.scripts_n0X1C5Eb3C27F7508Cb = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x1C5EB3C27F7508CB, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.scripts_n0X42A429Cdfed6D99D = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x42A429CDFED6D99D, 'void', p0, p1, p2)
end

--- @param p0 userdata
natives.scripts_n0X5827Be85A87B073D = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x5827BE85A87B073D, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.scripts_n0X0A79C81C418F5D38 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x0A79C81C418F5D38, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @return any
natives.scripts_n0Xa88E1D7Fa1E20080 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xA88E1D7FA1E20080, 'any', p0)
    return call
end

--- @param value userdata
--- @return number
natives.scripts_countParticipantBits = function(value)
    assert(type(value) == 'userdata', 'Argument value must be of type userdata.')

    local call = natives.invoke(0x2F050A3FF8738245, 'int', value)
    return call
end

--- @param scriptname string
natives.scripts_requestScript = function(scriptname)
    assert(type(scriptname) == 'string', 'Argument scriptname must be of type string.')

    local call = natives.invoke(0x46ED607DDD40D7FE, 'void', scriptname)
end

--- @param scriptname string
natives.scripts_setScriptAsNoLongerNeeded = function(scriptname)
    assert(type(scriptname) == 'string', 'Argument scriptname must be of type string.')

    local call = natives.invoke(0x0086D3067E1CFD1C, 'void', scriptname)
end

-- Returns if a script has been loaded into the game. Used to see if a script was loaded after requesting.
--- @param scriptname string
--- @return boolean
natives.scripts_hasScriptLoaded = function(scriptname)
    assert(type(scriptname) == 'string', 'Argument scriptname must be of type string.')

    local call = natives.invoke(0xE97BD36574F8B0A6, 'bool', scriptname)
    return call
end

--- @param scriptname string
--- @return boolean
natives.scripts_doesScriptExist = function(scriptname)
    assert(type(scriptname) == 'string', 'Argument scriptname must be of type string.')

    local call = natives.invoke(0x552B171E3F69E5AE, 'bool', scriptname)
    return call
end

--- @param scripthash integer
natives.scripts_requestScriptWithNameHash = function(scripthash)
    assert(type(scripthash) == 'integer', 'Argument scripthash must be of type integer.')

    local call = natives.invoke(0xF6B9CE3F8D5B9B74, 'void', scripthash)
end

--- @param scripthash integer
natives.scripts_setScriptWithNameHashAsNoLongerNeeded = function(scripthash)
    assert(type(scripthash) == 'integer', 'Argument scripthash must be of type integer.')

    local call = natives.invoke(0x50723A1567C8361E, 'void', scripthash)
end

--- @param scripthash integer
--- @return boolean
natives.scripts_hasScriptWithNameHashLoaded = function(scripthash)
    assert(type(scripthash) == 'integer', 'Argument scripthash must be of type integer.')

    local call = natives.invoke(0xA5D8E0C2F3C7EEBC, 'bool', scripthash)
    return call
end

--- @param scripthash integer
--- @return boolean
natives.scripts_doesScriptWithNameHashExist = function(scripthash)
    assert(type(scripthash) == 'integer', 'Argument scripthash must be of type integer.')

    local call = natives.invoke(0xA34E89749F628284, 'bool', scripthash)
    return call
end

--- @param threadid integer
natives.scripts_terminateThread = function(threadid)
    assert(type(threadid) == 'integer', 'Argument threadid must be of type integer.')

    local call = natives.invoke(0x87ED52AE40EA1A52, 'void', threadid)
end

--- @param threadid integer
--- @param ignorekilledstate boolean
--- @return boolean
natives.scripts_isThreadActive = function(threadid, ignorekilledstate)
    assert(type(threadid) == 'integer', 'Argument threadid must be of type integer.')
    assert(type(ignorekilledstate) == 'boolean', 'Argument ignorekilledstate must be of type boolean.')

    local call = natives.invoke(0x46E9AE36D8FA6417, 'bool', threadid, ignorekilledstate)
    return call
end

--- @param threadid integer
--- @return boolean
natives.scripts_doesThreadExist = function(threadid)
    assert(type(threadid) == 'integer', 'Argument threadid must be of type integer.')

    local call = natives.invoke(0xFF975BC4435A0FA3, 'bool', threadid)
    return call
end

--- @param threadid integer
--- @param threadexists integer
--- @param hasscripthandler integer
natives.scripts_getThreadExistenceDetails = function(threadid, threadexists, hasscripthandler)
    assert(type(threadid) == 'integer', 'Argument threadid must be of type integer.')
    assert(type(threadexists) == 'integer', 'Argument threadexists must be of type integer.')
    assert(type(hasscripthandler) == 'integer', 'Argument hasscripthandler must be of type integer.')

    local call = natives.invoke(0xD92FA81B64920E85, 'void', threadid, threadexists, hasscripthandler)
end

--- @param threadid integer
--- @return number
natives.scripts_getHashOfThread = function(threadid)
    assert(type(threadid) == 'integer', 'Argument threadid must be of type integer.')

    local call = natives.invoke(0x724CB89D35B283D0, 'integer', threadid)
    return call
end

-- Starts a new iteration of the current threads.
-- Call this first, then SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID (0x30B4FA1C82DD4B9F)
natives.scripts_scriptThreadIteratorReset = function()

    local call = natives.invoke(0x39382EB8DCD8684D, 'void')
end

-- If the function returns 0, the end of the iteration has been reached.
--- @return number
natives.scripts_scriptThreadIteratorGetNextThreadId = function()

    local call = natives.invoke(0x3CE3FB167E837D7C, 'int')
    return call
end

--- @param threadid integer
--- @return boolean
natives.scripts_isBackgroundScript = function(threadid)
    assert(type(threadid) == 'integer', 'Argument threadid must be of type integer.')

    local call = natives.invoke(0x20B7F69B40C6B755, 'bool', threadid)
    return call
end

--- @return number
natives.scripts_getIdOfThisThread = function()

    local call = natives.invoke(0x55525C346BEF6960, 'int')
    return call
end

natives.scripts_terminateThisThread = function()

    local call = natives.invoke(0x5E8B6D17FF91CD59, 'void')
end

-- Gets the number of instances of the specified script is currently running.
-- 
-- Actually returns numRefs - 1.
-- if (program)
-- 	v3 = rage::scrProgram::GetNumRefs(program) - 1;
-- return v3;
-- 
-- Old name: _GET_NUMBER_OF_REFERENCES_OF_SCRIPT_WITH_NAME_HASH
--- @param scripthash integer
--- @return number
natives.scripts_getNumberOfThreadsRunningTheScriptWithThisHash = function(scripthash)
    assert(type(scripthash) == 'integer', 'Argument scripthash must be of type integer.')

    local call = natives.invoke(0x8E34C953364A76DD, 'int', scripthash)
    return call
end

--- @param threadid integer
natives.scripts_requestThreadExit = function(threadid)
    assert(type(threadid) == 'integer', 'Argument threadid must be of type integer.')

    local call = natives.invoke(0x7DE4643157AD646C, 'void', threadid)
end

--- @param namehash integer
natives.scripts_requestThreadExitForAllThreadsWithThisName = function(namehash)
    assert(type(namehash) == 'integer', 'Argument namehash must be of type integer.')

    local call = natives.invoke(0x7423F7835770F619, 'void', namehash)
end

--- @return boolean
natives.scripts_isThreadExitRequested = function()

    local call = natives.invoke(0x9E4EF615E307FBBE, 'bool')
    return call
end

--- @param threadid integer
--- @return boolean
natives.scripts_isThreadExitRequestedForThreadWithThisId = function(threadid)
    assert(type(threadid) == 'integer', 'Argument threadid must be of type integer.')

    local call = natives.invoke(0x30BED53646C86D11, 'bool', threadid)
    return call
end

-- enum eThreadExitReason
-- {
-- 	THREAD_EXIT_REASON_NONE,
-- 	THREAD_EXIT_REASON_BACKGROUND_THREAD_STOPPED,
-- 	THREAD_EXIT_REASON_SESSION_MERGE,
-- 	THREAD_EXIT_REASON_SCENARIO_OUT_OF_SCOPE,
-- 	THREAD_EXIT_REASON_REQUESTED_BY_SCRIPT
-- };
--- @return number
natives.scripts_getThreadExitReason = function()

    local call = natives.invoke(0x54AE4FDEEFEAB77E, 'int')
    return call
end

--- @return number
natives.scripts_getHashOfThisScriptName = function()

    local call = natives.invoke(0xBC2C927F5C264960, 'integer')
    return call
end

-- eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork), 2 = unk, 3 = unk, 4 = SCRIPT_EVENT_QUEUE_ERRORS (CEventGroupScriptErrors)
--- @param eventgroup integer
--- @return number
natives.scripts_getNumberOfEvents = function(eventgroup)
    assert(type(eventgroup) == 'integer', 'Argument eventgroup must be of type integer.')

    local call = natives.invoke(0x5CE8DE5909565748, 'int', eventgroup)
    return call
end

-- eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork), 2 = unk, 3 = unk, 4 = SCRIPT_EVENT_QUEUE_SCRIPT_ERRORS (CEventGroupScriptErrors)
--- @param eventgroup integer
--- @param eventtype integer
--- @return boolean
natives.scripts_getEventExists = function(eventgroup, eventtype)
    assert(type(eventgroup) == 'integer', 'Argument eventgroup must be of type integer.')
    assert(type(eventtype) == 'integer', 'Argument eventtype must be of type integer.')

    local call = natives.invoke(0xC9F59C0A710ECD34, 'bool', eventgroup, eventtype)
    return call
end

-- eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork), 2 = unk, 3 = unk, 4 = SCRIPT_EVENT_QUEUE_SCRIPT_ERRORS (CEventGroupScriptErrors)
-- 
-- Returns event name hash: https:--alloc8or.re/rdr3/doc/enums/eEventType.txt
--- @param eventgroup integer
--- @param eventindex integer
--- @return number
natives.scripts_getEventAtIndex = function(eventgroup, eventindex)
    assert(type(eventgroup) == 'integer', 'Argument eventgroup must be of type integer.')
    assert(type(eventindex) == 'integer', 'Argument eventindex must be of type integer.')

    local call = natives.invoke(0xA85E614430EFF816, 'integer', eventgroup, eventindex)
    return call
end

-- eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork), 2 = unk, 3 = unk, 4 = SCRIPT_EVENT_QUEUE_SCRIPT_ERRORS (CEventGroupScriptErrors)
-- 
-- Note: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).
-- 
-- https:--github.com/femga/rdr3_discoveries/tree/master/AI/EVENTS
--- @param eventgroup integer
--- @param eventindex integer
--- @param eventdata userdata
--- @param eventdatasize integer
--- @return boolean
natives.scripts_getEventData = function(eventgroup, eventindex, eventdata, eventdatasize)
    assert(type(eventgroup) == 'integer', 'Argument eventgroup must be of type integer.')
    assert(type(eventindex) == 'integer', 'Argument eventindex must be of type integer.')
    assert(type(eventdata) == 'userdata', 'Argument eventdata must be of type userdata.')
    assert(type(eventdatasize) == 'integer', 'Argument eventdatasize must be of type integer.')

    local call = natives.invoke(0x57EC5FA4D4D6AFCA, 'bool', eventgroup, eventindex, eventdata, eventdatasize)
    return call
end

--- @param eventgroup integer
--- @param eventindex integer
--- @param p2 boolean
natives.scripts_setEventFlagForDeletion = function(eventgroup, eventindex, p2)
    assert(type(eventgroup) == 'integer', 'Argument eventgroup must be of type integer.')
    assert(type(eventindex) == 'integer', 'Argument eventindex must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x4768D5252EAEB76F, 'void', eventgroup, eventindex, p2)
end

-- eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork), 2 = unk, 3 = unk, 4 = SCRIPT_EVENT_QUEUE_SCRIPT_ERRORS (CEventGroupScriptErrors)
-- 
-- Note: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).
-- 
-- playerBits (also known as playersToBroadcastTo) is a bitset that indicates which players this event should be sent to. In order to send the event to specific players only, use (1 << playerIndex). Set all bits if it should be broadcast to all players.
--- @param eventgroup integer
--- @param eventdata userdata
--- @param eventdatasize integer
--- @param scriptmetadataindex integer
--- @param playerbits integer
natives.scripts_triggerScriptEvent = function(eventgroup, eventdata, eventdatasize, scriptmetadataindex, playerbits)
    assert(type(eventgroup) == 'integer', 'Argument eventgroup must be of type integer.')
    assert(type(eventdata) == 'userdata', 'Argument eventdata must be of type userdata.')
    assert(type(eventdatasize) == 'integer', 'Argument eventdatasize must be of type integer.')
    assert(type(scriptmetadataindex) == 'integer', 'Argument scriptmetadataindex must be of type integer.')
    assert(type(playerbits) == 'integer', 'Argument playerbits must be of type integer.')

    local call = natives.invoke(0x5AE99C571D5BBE5D, 'void', eventgroup, eventdata, eventdatasize, scriptmetadataindex, playerbits)
end

--- @param eventdata userdata
--- @param eventdatasize integer
--- @param scriptmetadataindex integer
--- @param threadid integer
natives.scripts_triggerScriptEvent2 = function(eventdata, eventdatasize, scriptmetadataindex, threadid)
    assert(type(eventdata) == 'userdata', 'Argument eventdata must be of type userdata.')
    assert(type(eventdatasize) == 'integer', 'Argument eventdatasize must be of type integer.')
    assert(type(scriptmetadataindex) == 'integer', 'Argument scriptmetadataindex must be of type integer.')
    assert(type(threadid) == 'integer', 'Argument threadid must be of type integer.')

    local call = natives.invoke(0x8B61C950A148FFA2, 'void', eventdata, eventdatasize, scriptmetadataindex, threadid)
end

--- @param p0 userdata
--- @return any
natives.scripts_n0Xe7282390542F570D = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xE7282390542F570D, 'any', p0)
    return call
end

-- Used in Script Function DISABLE_REGISTERED_WORLD_BRAINS
--- @param p0 boolean
natives.scripts_n0X11B0A0B282Fa9B10 = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x11B0A0B282FA9B10, 'void', p0)
end

--- @param p0 boolean
natives.scripts_n0X6F700A4Bf7C3331B = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x6F700A4BF7C3331B, 'void', p0)
end

natives.scripts_n0Xf9E951A1E5517C06 = function()

    local call = natives.invoke(0xF9E951A1E5517C06, 'void')
end

natives.scripts_n0X76Cbcd9Eadc00955 = function()

    local call = natives.invoke(0x76CBCD9EADC00955, 'void')
end

natives.scripts_shutdownLoadingScreen = function()

    local call = natives.invoke(0xFC179D7E8886DADF, 'void')
end

--- @param toggle boolean
natives.scripts_setNoLoadingScreen = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x5CB83156AA038F95, 'void', toggle)
end

--- @return boolean
natives.scripts_getNoLoadingScreen = function()

    local call = natives.invoke(0x323DAF00687E0F28, 'bool')
    return call
end

--- @param p0 integer
--- @param p1 integer
--- @param p2 integer
--- @param gamemodename string
--- @param title string
--- @param subtitle string
natives.scripts_displayLoadingScreens = function(p0, p1, p2, gamemodename, title, subtitle)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(gamemodename) == 'string', 'Argument gamemodename must be of type string.')
    assert(type(title) == 'string', 'Argument title must be of type string.')
    assert(type(subtitle) == 'string', 'Argument subtitle must be of type string.')

    local call = natives.invoke(0x1E5B70E53DB661E5, 'void', p0, p1, p2, gamemodename, title, subtitle)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 number
--- @param p3 number
--- @param p4 string
--- @param p5 string
--- @param p6 string
--- @param p7 integer
natives.scripts_n0X29Fb4Ce89472C3Cb = function(p0, p1, p2, p3, p4, p5, p6, p7)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'string', 'Argument p4 must be of type string.')
    assert(type(p5) == 'string', 'Argument p5 must be of type string.')
    assert(type(p6) == 'string', 'Argument p6 must be of type string.')
    assert(type(p7) == 'integer', 'Argument p7 must be of type integer.')

    local call = natives.invoke(0x29FB4CE89472C3CB, 'void', p0, p1, p2, p3, p4, p5, p6, p7)
end

--- @param p0 userdata
natives.scripts_stopDisplayingMpTransitionLoadingScreens = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x778D4733E0F2F265, 'void', p0)
end

-- Same as GET_IS_LOADING_SCREEN_ACTIVE
--- @return boolean
natives.scripts_isLoadingScreenVisible = function()

    local call = natives.invoke(0xB54ADBE65D528FCB, 'bool')
    return call
end

--- @param bailcode integer
natives.scripts_bailToLandingPage = function(bailcode)
    assert(type(bailcode) == 'integer', 'Argument bailcode must be of type integer.')

    local call = natives.invoke(0xBC2C927F5C264243, 'void', bailcode)
end

--- @param params string
natives.scripts_bailWithPassThroughParams = function(params)
    assert(type(params) == 'string', 'Argument params must be of type string.')

    local call = natives.invoke(0xE98204D3C25AE14C, 'void', params)
end

-- Returns true if GtaThread+0x77C is equal to 1.
-- 
-- Old name: _BG_EXITED_BECAUSE_BACKGROUND_THREAD_STOPPED
--- @return boolean
natives.scripts_bgIsExitflagSet = function()

    local call = natives.invoke(0x2238EC3EC631AB1F, 'bool')
    return call
end

-- Sets bit 0 in GtaThread+0x784
natives.scripts_bgSetExitflagResponse = function()

    local call = natives.invoke(0x4858148E3B8A75D0, 'void')
end

-- Hashed version of BG_START_CONTEXT
--- @param contexthash integer
natives.scripts_bgStartContextHash = function(contexthash)
    assert(type(contexthash) == 'integer', 'Argument contexthash must be of type integer.')

    local call = natives.invoke(0x2EB67D564DCC09D5, 'void', contexthash)
end

-- Hashed version of BG_END_CONTEXT
--- @param contexthash integer
natives.scripts_bgEndContextHash = function(contexthash)
    assert(type(contexthash) == 'integer', 'Argument contexthash must be of type integer.')

    local call = natives.invoke(0x6D1431744182CDE8, 'void', contexthash)
end

-- Inserts the given context into the background scripts context map.
--- @param contextname string
natives.scripts_bgStartContext = function(contextname)
    assert(type(contextname) == 'string', 'Argument contextname must be of type string.')

    local call = natives.invoke(0x49BA5678BA040CA7, 'void', contextname)
end

-- Deletes the given context from the background scripts context map.
--- @param contextname string
natives.scripts_bgEndContext = function(contextname)
    assert(type(contextname) == 'string', 'Argument contextname must be of type string.')

    local call = natives.invoke(0x3ABF7BA1C3E2C8CF, 'void', contextname)
end

--- @param scriptindex integer
--- @param p1 string
--- @return boolean
natives.scripts_bgDoesLaunchParamExist = function(scriptindex, p1)
    assert(type(scriptindex) == 'integer', 'Argument scriptindex must be of type integer.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')

    local call = natives.invoke(0x4AE1DFF337A86FDE, 'bool', scriptindex, p1)
    return call
end

--- @param scriptindex integer
--- @param p1 string
--- @return number
natives.scripts_bgGetLaunchParamValue = function(scriptindex, p1)
    assert(type(scriptindex) == 'integer', 'Argument scriptindex must be of type integer.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')

    local call = natives.invoke(0x55C40B7592BAD213, 'int', scriptindex, p1)
    return call
end

--- @param p0 integer
--- @return number
natives.scripts_bgGetScriptIdFromNameHash = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x829CD22E043A2577, 'int', p0)
    return call
end

natives.scripts_bgReloadAllBackgroundScripts = function()

    local call = natives.invoke(0xBE7D814CFA181B56, 'void')
end

-- goalContext: see <availableContexts> in common/data/stats_and_challenges/goals_*.meta
--- @param goalcontext integer
natives.scripts_activateGoalContext = function(goalcontext)
    assert(type(goalcontext) == 'integer', 'Argument goalcontext must be of type integer.')

    local call = natives.invoke(0x7D654266025E921B, 'void', goalcontext)
end

-- goalContext: see _ACTIVATE_GOAL_CONTEXT
--- @param goalcontext integer
natives.scripts_deactivateGoalContext = function(goalcontext)
    assert(type(goalcontext) == 'integer', 'Argument goalcontext must be of type integer.')

    local call = natives.invoke(0x50B72A754EE64A71, 'void', goalcontext)
end

-- goalContext: see _ACTIVATE_GOAL_CONTEXT
--- @param goalcontext integer
--- @return boolean
natives.scripts_isGoalContextActive = function(goalcontext)
    assert(type(goalcontext) == 'integer', 'Argument goalcontext must be of type integer.')

    local call = natives.invoke(0x7409669C5ED50144, 'bool', goalcontext)
    return call
end

-- Returns "INVALID_NET_RPC_GUID" if netRpcGuid is invalid.
--- @param netrpcguid userdata
--- @return string
natives.scripts_netRpcGuidToString = function(netrpcguid)
    assert(type(netrpcguid) == 'userdata', 'Argument netrpcguid must be of type userdata.')

    local call = natives.invoke(0xAC9FF854BD4BA9B5, 'string', netrpcguid)
    return call
end

--- @param rpcguid userdata
--- @param awardhash integer
--- @param itemindex integer
--- @param outresultitem userdata
--- @return boolean
natives.scripts_awardsGetResultItem = function(rpcguid, awardhash, itemindex, outresultitem)
    assert(type(rpcguid) == 'userdata', 'Argument rpcguid must be of type userdata.')
    assert(type(awardhash) == 'integer', 'Argument awardhash must be of type integer.')
    assert(type(itemindex) == 'integer', 'Argument itemindex must be of type integer.')
    assert(type(outresultitem) == 'userdata', 'Argument outresultitem must be of type userdata.')

    local call = natives.invoke(0xAC8FAB22A914AE34, 'bool', rpcguid, awardhash, itemindex, outresultitem)
    return call
end

--- @param rpcguid userdata
--- @param awardhash integer
--- @param dataindex integer
--- @param outunlockdata userdata
--- @return boolean
natives.scripts_awardsGetUnlockClaimData = function(rpcguid, awardhash, dataindex, outunlockdata)
    assert(type(rpcguid) == 'userdata', 'Argument rpcguid must be of type userdata.')
    assert(type(awardhash) == 'integer', 'Argument awardhash must be of type integer.')
    assert(type(dataindex) == 'integer', 'Argument dataindex must be of type integer.')
    assert(type(outunlockdata) == 'userdata', 'Argument outunlockdata must be of type userdata.')

    local call = natives.invoke(0xB9467E41DAB1CF2C, 'bool', rpcguid, awardhash, dataindex, outunlockdata)
    return call
end

--- @param rpcguid userdata
--- @param itemindex integer
--- @param outresultitem userdata
--- @return boolean
natives.scripts_lootGetResultItem = function(rpcguid, itemindex, outresultitem)
    assert(type(rpcguid) == 'userdata', 'Argument rpcguid must be of type userdata.')
    assert(type(itemindex) == 'integer', 'Argument itemindex must be of type integer.')
    assert(type(outresultitem) == 'userdata', 'Argument outresultitem must be of type userdata.')

    local call = natives.invoke(0x4293B44A855F82CC, 'bool', rpcguid, itemindex, outresultitem)
    return call
end

--- @param rpcguid userdata
--- @param dataindex integer
--- @param outlootdata userdata
--- @return boolean
natives.scripts_lootGetLootClaimData = function(rpcguid, dataindex, outlootdata)
    assert(type(rpcguid) == 'userdata', 'Argument rpcguid must be of type userdata.')
    assert(type(dataindex) == 'integer', 'Argument dataindex must be of type integer.')
    assert(type(outlootdata) == 'userdata', 'Argument outlootdata must be of type userdata.')

    local call = natives.invoke(0xF1E9045F5AA9E428, 'bool', rpcguid, dataindex, outlootdata)
    return call
end

--- @param index integer
--- @return boolean
natives.scripts_storeGlobalBlock = function(index)
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0xB952A3AC41D58F2F, 'bool', index)
    return call
end

--- @param index integer
--- @return boolean
natives.scripts_restoreGlobalBlock = function(index)
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0xDC3914A99B4A5FDF, 'bool', index)
    return call
end

--- @param index integer
--- @return boolean
natives.scripts_doesCompressedGlobalBlockBufferExist = function(index)
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0x66EE5B93C308F734, 'bool', index)
    return call
end

--- @param index integer
--- @param toggle boolean
natives.scripts_setGlobalBlockCanBeAccessed = function(index, toggle)
    assert(type(index) == 'integer', 'Argument index must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xE66F392BFCE734AF, 'void', index, toggle)
end

--- @param index integer
--- @return boolean
natives.scripts_getGlobalBlockCanBeAccessed = function(index)
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0x42A7EB5C814C2DE0, 'bool', index)
    return call
end

--- @param toggle boolean
natives.scripts_setAllGlobalBlocksHaveBeenLoaded = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x11986B05885564D2, 'void', toggle)
end

-- Waiting for child scripts to terminate / waiting for collapse of child scripts
--- @param p0 integer
--- @return boolean
natives.scripts_haveAllChildScriptsTerminated = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x380FFA15B72408FB, 'bool', p0)
    return call
end

--- @param scriptname string
--- @param stacksize integer
--- @return number
natives.scripts_startNewScript = function(scriptname, stacksize)
    assert(type(scriptname) == 'string', 'Argument scriptname must be of type string.')
    assert(type(stacksize) == 'integer', 'Argument stacksize must be of type integer.')

    local call = natives.invoke(0xE81651AD79516E48, 'int', scriptname, stacksize)
    return call
end

-- return : script thread id, 0 if failed
-- Pass pointer to struct of args in p1, size of struct goes into p2
--- @param scriptname string
--- @param args userdata
--- @param argcount integer
--- @param stacksize integer
--- @return number
natives.scripts_startNewScriptWithArgs = function(scriptname, args, argcount, stacksize)
    assert(type(scriptname) == 'string', 'Argument scriptname must be of type string.')
    assert(type(args) == 'userdata', 'Argument args must be of type userdata.')
    assert(type(argcount) == 'integer', 'Argument argcount must be of type integer.')
    assert(type(stacksize) == 'integer', 'Argument stacksize must be of type integer.')

    local call = natives.invoke(0xB8BA7F44DF1575E1, 'int', scriptname, args, argcount, stacksize)
    return call
end

--- @param scripthash integer
--- @param stacksize integer
--- @return number
natives.scripts_startNewScriptWithNameHash = function(scripthash, stacksize)
    assert(type(scripthash) == 'integer', 'Argument scripthash must be of type integer.')
    assert(type(stacksize) == 'integer', 'Argument stacksize must be of type integer.')

    local call = natives.invoke(0xEB1C67C3A5333A92, 'int', scripthash, stacksize)
    return call
end

--- @param scripthash integer
--- @param args userdata
--- @param argcount integer
--- @param stacksize integer
--- @return number
natives.scripts_startNewScriptWithNameHashAndArgs = function(scripthash, args, argcount, stacksize)
    assert(type(scripthash) == 'integer', 'Argument scripthash must be of type integer.')
    assert(type(args) == 'userdata', 'Argument args must be of type userdata.')
    assert(type(argcount) == 'integer', 'Argument argcount must be of type integer.')
    assert(type(stacksize) == 'integer', 'Argument stacksize must be of type integer.')

    local call = natives.invoke(0xC4BB298BD441BE78, 'int', scripthash, args, argcount, stacksize)
    return call
end

natives.save_n0X4Fb5869E2B37Fc00 = function()

    local call = natives.invoke(0x4FB5869E2B37FC00, 'void')
end

-- enum eSavegameType : Hash
-- {
-- 	SAVEGAMETYPE_AMBIENT = 0x3CA4E1F8,
-- 	SAVEGAMETYPE_DEFAULT = 0xCB6ED080,
-- 	SAVEGAMETYPE_DELETE_CHAR = 0xCD35F947,
-- 	SAVEGAMETYPE_END_CREATE_NEWCHAR = 0x4C50A3CE,
-- 	SAVEGAMETYPE_END_MATCH = 0xE470ED50,
-- 	SAVEGAMETYPE_END_MISSION = 0x9A444E54,
-- 	SAVEGAMETYPE_END_SESSION = 0x6D23956C,
-- 	SAVEGAMETYPE_END_SHOPPING = 0xA311A6C4,
-- 	SAVEGAMETYPE_RANKUP = 0xE25F8017,
-- 	SAVEGAMETYPE_SCRIPT_MP_GLOBALS = 0xAFF30AD4,
-- 	SAVEGAMETYPE_SP_AUTOSAVE = 0xF4AE69EC,
-- 	SAVEGAMETYPE_SP_DEBUG = 0x6A8122FD,
-- 	SAVEGAMETYPE_SP_PROPERTY = 0xAE0AB38E
-- };
--- @param savegametype integer
--- @return boolean
natives.save_savegameSaveSp = function(savegametype)
    assert(type(savegametype) == 'integer', 'Argument savegametype must be of type integer.')

    local call = natives.invoke(0x62C9EB51656D68CE, 'bool', savegametype)
    return call
end

-- See SAVEGAME_SAVE_SP
--- @param savegametype integer
--- @return boolean
natives.save_savegameSaveMp = function(savegametype)
    assert(type(savegametype) == 'integer', 'Argument savegametype must be of type integer.')

    local call = natives.invoke(0x1840F3B30ED0105F, 'bool', savegametype)
    return call
end

--- @return boolean
natives.save_savegameIsSavePending = function()

    local call = natives.invoke(0x3CF46F55C6585590, 'bool')
    return call
end

--- @return any
natives.save_n0X1431540Bca1A1Bd2 = function()

    local call = natives.invoke(0x1431540BCA1A1BD2, 'any')
    return call
end

--- @param savegametype integer
--- @return any
natives.save_n0Xa7Ecebafbaf997A5 = function(savegametype)
    assert(type(savegametype) == 'integer', 'Argument savegametype must be of type integer.')

    local call = natives.invoke(0xA7ECEBAFBAF997A5, 'any', savegametype)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.save_n0Xed4B0C1057892B2E = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xED4B0C1057892B2E, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.save_n0X9Bb83C4Dd7Be0802 = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x9BB83C4DD7BE0802, 'void', p0, p1, p2, p3, p4)
end

natives.save_n0Xe8346E62Fd7Fb962 = function()

    local call = natives.invoke(0xE8346E62FD7FB962, 'void')
end

--- @param p0 userdata
natives.save_n0Xc0Abf784590798A9 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xC0ABF784590798A9, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.save_n0Xb00Ce33465B5406D = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xB00CE33465B5406D, 'any', p0, p1)
    return call
end

-- Does the exact same as 0x529B9CCD0972AF4E
-- Commonly used with time/timestamps
--- @param p0 userdata
--- @param variablename string
natives.save_savegameGetInt2 = function(p0, variablename)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(variablename) == 'string', 'Argument variablename must be of type string.')

    local call = natives.invoke(0x529B9CCD0972AF4D, 'void', p0, variablename)
end

--- @param p0 userdata
--- @param variablename string
natives.save_savegameGetInt = function(p0, variablename)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(variablename) == 'string', 'Argument variablename must be of type string.')

    local call = natives.invoke(0x529B9CCD0972AF4E, 'void', p0, variablename)
end

-- Does the exact same as 0x529B9CCD0972AF4E
-- Commonly used with enums and flags
--- @param p0 userdata
--- @param variablename string
natives.save_savegameGetInt3 = function(p0, variablename)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(variablename) == 'string', 'Argument variablename must be of type string.')

    local call = natives.invoke(0xB25B5A375BE5BE26, 'void', p0, variablename)
end

--- @param p0 userdata
--- @param variablename string
natives.save_savegameGetFloat = function(p0, variablename)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(variablename) == 'string', 'Argument variablename must be of type string.')

    local call = natives.invoke(0x35DEFECAE36D4FAE, 'void', p0, variablename)
end

-- Does the exact same as 0x529B9CCD0972AF4E
--- @param p0 userdata
--- @param variablename string
natives.save_savegameGetBool = function(p0, variablename)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(variablename) == 'string', 'Argument variablename must be of type string.')

    local call = natives.invoke(0xBB7F4273C186BC4B, 'void', p0, variablename)
end

--- @param p0 userdata
--- @param variablename string
natives.save_savegameGetTextLabel23 = function(p0, variablename)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(variablename) == 'string', 'Argument variablename must be of type string.')

    local call = natives.invoke(0x5A10D6506B2F2C63, 'void', p0, variablename)
end

--- @param p0 userdata
--- @param variablename string
natives.save_savegameGetTextLabel31 = function(p0, variablename)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(variablename) == 'string', 'Argument variablename must be of type string.')

    local call = natives.invoke(0x4845E7E7643A908C, 'void', p0, variablename)
end

--- @param p0 userdata
--- @param variablename string
natives.save_savegameGetTextLabel63 = function(p0, variablename)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(variablename) == 'string', 'Argument variablename must be of type string.')

    local call = natives.invoke(0x186608A2AC6F9E88, 'void', p0, variablename)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.save_n0X443174C20B8B9E7F = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x443174C20B8B9E7F, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.save_n0X8E8Ffb9E4Ad051D2 = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x8E8FFB9E4AD051D2, 'void', p0, p1, p2, p3)
end

natives.save_n0Xe0B45E983Bfc0768 = function()

    local call = natives.invoke(0xE0B45E983BFC0768, 'void')
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.save_n0X81F4E92Be3958364 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x81F4E92BE3958364, 'void', p0, p1, p2)
end

natives.save_n0Xa844Feb5C22C2C74 = function()

    local call = natives.invoke(0xA844FEB5C22C2C74, 'void')
end

-- Asynchronously starts a line-of-sight (raycast) world probe shape test.
-- 
-- Use the handle with 0x3D87450E15D98694 or 0x65287525D951F6BE until it returns 0 or 2.
-- 
-- p8 is a bit mask with bits 1, 2 and/or 4, relating to collider types; 4 should usually be used.
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param flags integer
--- @param entity integer
--- @param p8 integer
--- @return number
natives.shapetest_startShapeTestLosProbe = function(x1, y1, z1, x2, y2, z2, flags, entity, p8)
    assert(type(x1) == 'number', 'Argument x1 must be of type number.')
    assert(type(y1) == 'number', 'Argument y1 must be of type number.')
    assert(type(z1) == 'number', 'Argument z1 must be of type number.')
    assert(type(x2) == 'number', 'Argument x2 must be of type number.')
    assert(type(y2) == 'number', 'Argument y2 must be of type number.')
    assert(type(z2) == 'number', 'Argument z2 must be of type number.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p8) == 'integer', 'Argument p8 must be of type integer.')

    local call = natives.invoke(0x7EE9F5D83DD4F90E, 'int', x1, y1, z1, x2, y2, z2, flags, entity, p8)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.shapetest_n0X04Aa59Ca40571C2E = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x04AA59CA40571C2E, 'any', p0, p1)
    return call
end

-- Does the same as 0x7EE9F5D83DD4F90E, except blocking until the shape test completes.
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param flags integer
--- @param entitytoignore integer
--- @param p8 integer
--- @return number
natives.shapetest_startExpensiveSynchronousShapeTestLosProbe = function(x1, y1, z1, x2, y2, z2, flags, entitytoignore, p8)
    assert(type(x1) == 'number', 'Argument x1 must be of type number.')
    assert(type(y1) == 'number', 'Argument y1 must be of type number.')
    assert(type(z1) == 'number', 'Argument z1 must be of type number.')
    assert(type(x2) == 'number', 'Argument x2 must be of type number.')
    assert(type(y2) == 'number', 'Argument y2 must be of type number.')
    assert(type(z2) == 'number', 'Argument z2 must be of type number.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')
    assert(type(entitytoignore) == 'integer', 'Argument entitytoignore must be of type integer.')
    assert(type(p8) == 'integer', 'Argument p8 must be of type integer.')

    local call = natives.invoke(0x377906D8A31E5586, 'int', x1, y1, z1, x2, y2, z2, flags, entitytoignore, p8)
    return call
end

--- @param posx number
--- @param posy number
--- @param posz number
--- @param dimensionsx number
--- @param dimensionsy number
--- @param dimensionsz number
--- @param rotx number
--- @param roty number
--- @param rotz number
--- @param rotationorder integer
--- @param flags integer
--- @param entitytoignore integer
--- @param options integer
--- @return number
natives.shapetest_startShapeTestBox = function(posx, posy, posz, dimensionsx, dimensionsy, dimensionsz, rotx, roty, rotz, rotationorder, flags, entitytoignore, options)
    assert(type(posx) == 'number', 'Argument posx must be of type number.')
    assert(type(posy) == 'number', 'Argument posy must be of type number.')
    assert(type(posz) == 'number', 'Argument posz must be of type number.')
    assert(type(dimensionsx) == 'number', 'Argument dimensionsx must be of type number.')
    assert(type(dimensionsy) == 'number', 'Argument dimensionsy must be of type number.')
    assert(type(dimensionsz) == 'number', 'Argument dimensionsz must be of type number.')
    assert(type(rotx) == 'number', 'Argument rotx must be of type number.')
    assert(type(roty) == 'number', 'Argument roty must be of type number.')
    assert(type(rotz) == 'number', 'Argument rotz must be of type number.')
    assert(type(rotationorder) == 'integer', 'Argument rotationorder must be of type integer.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')
    assert(type(entitytoignore) == 'integer', 'Argument entitytoignore must be of type integer.')
    assert(type(options) == 'integer', 'Argument options must be of type integer.')

    local call = natives.invoke(0xFE466162C4401D18, 'int', posx, posy, posz, dimensionsx, dimensionsy, dimensionsz, rotx, roty, rotz, rotationorder, flags, entitytoignore, options)
    return call
end

--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param radius number
--- @param flags integer
--- @param entitytoignore integer
--- @param p9 integer
--- @return number
natives.shapetest_startShapeTestCapsule = function(x1, y1, z1, x2, y2, z2, radius, flags, entitytoignore, p9)
    assert(type(x1) == 'number', 'Argument x1 must be of type number.')
    assert(type(y1) == 'number', 'Argument y1 must be of type number.')
    assert(type(z1) == 'number', 'Argument z1 must be of type number.')
    assert(type(x2) == 'number', 'Argument x2 must be of type number.')
    assert(type(y2) == 'number', 'Argument y2 must be of type number.')
    assert(type(z2) == 'number', 'Argument z2 must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')
    assert(type(entitytoignore) == 'integer', 'Argument entitytoignore must be of type integer.')
    assert(type(p9) == 'integer', 'Argument p9 must be of type integer.')

    local call = natives.invoke(0x28579D1B8F8AAC80, 'int', x1, y1, z1, x2, y2, z2, radius, flags, entitytoignore, p9)
    return call
end

--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param radius number
--- @param flags integer
--- @param entity integer
--- @param p9 userdata
--- @return number
natives.shapetest_startShapeTestSweptSphere = function(x1, y1, z1, x2, y2, z2, radius, flags, entity, p9)
    assert(type(x1) == 'number', 'Argument x1 must be of type number.')
    assert(type(y1) == 'number', 'Argument y1 must be of type number.')
    assert(type(z1) == 'number', 'Argument z1 must be of type number.')
    assert(type(x2) == 'number', 'Argument x2 must be of type number.')
    assert(type(y2) == 'number', 'Argument y2 must be of type number.')
    assert(type(z2) == 'number', 'Argument z2 must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')

    local call = natives.invoke(0xAA5B7C8309F73230, 'int', x1, y1, z1, x2, y2, z2, radius, flags, entity, p9)
    return call
end

-- Old name: _START_SHAPE_TEST_SURROUNDING_COORDS
--- @param pvec1 integer
--- @param pvec2 integer
--- @param flag integer
--- @param entity integer
--- @param flag2 integer
--- @return number
natives.shapetest_startShapeTestMouseCursorLosProbe = function(pvec1, pvec2, flag, entity, flag2)
    assert(type(pvec1) == 'integer', 'Argument pvec1 must be of type integer.')
    assert(type(pvec2) == 'integer', 'Argument pvec2 must be of type integer.')
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(flag2) == 'integer', 'Argument flag2 must be of type integer.')

    local call = natives.invoke(0x9839013D8B6014F1, 'int', pvec1, pvec2, flag, entity, flag2)
    return call
end

-- Returns the result of a shape test: 0 if the handle is invalid, 1 if the shape test is still pending, or 2 if the shape test has completed, and the handle should be invalidated.
-- 
-- When used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated.
-- 
-- enum eShapeTestStatus
-- {
-- 	SHAPETEST_STATUS_NONEXISTENT,
-- 	SHAPETEST_STATUS_RESULTS_NOTREADY,
-- 	SHAPETEST_STATUS_RESULTS_READY
-- };
--- @param shapetesthandle integer
--- @param hit integer
--- @param endcoords integer
--- @param surfacenormal integer
--- @param entityhit integer
--- @return number
natives.shapetest_getShapeTestResult = function(shapetesthandle, hit, endcoords, surfacenormal, entityhit)
    assert(type(shapetesthandle) == 'integer', 'Argument shapetesthandle must be of type integer.')
    assert(type(hit) == 'integer', 'Argument hit must be of type integer.')
    assert(type(endcoords) == 'integer', 'Argument endcoords must be of type integer.')
    assert(type(surfacenormal) == 'integer', 'Argument surfacenormal must be of type integer.')
    assert(type(entityhit) == 'integer', 'Argument entityhit must be of type integer.')

    local call = natives.invoke(0xEDE8AC7C5108FB1D, 'int', shapetesthandle, hit, endcoords, surfacenormal, entityhit)
    return call
end

--- @return number
natives.socialclub_scInboxGetTotalNumMessages = function()

    local call = natives.invoke(0x8EF0F633280C0663, 'int')
    return call
end

--- @param msgindex integer
--- @return number
natives.socialclub_scInboxGetMessageTypeAtIndex = function(msgindex)
    assert(type(msgindex) == 'integer', 'Argument msgindex must be of type integer.')

    local call = natives.invoke(0xFF92537C4DDC1241, 'integer', msgindex)
    return call
end

--- @param msgindex integer
--- @return boolean
natives.socialclub_scInboxGetMessageIsReadAtIndex = function(msgindex)
    assert(type(msgindex) == 'integer', 'Argument msgindex must be of type integer.')

    local call = natives.invoke(0x74CF39E030A382C4, 'bool', msgindex)
    return call
end

--- @param msgindex integer
--- @return boolean
natives.socialclub_scInboxSetMessageAsReadAtIndex = function(msgindex)
    assert(type(msgindex) == 'integer', 'Argument msgindex must be of type integer.')

    local call = natives.invoke(0x63CAC501FFF66DC4, 'bool', msgindex)
    return call
end

--- @param p0 integer
--- @param context string
--- @param out integer
--- @return boolean
natives.socialclub_scInboxMessageGetDataInt = function(p0, context, out)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(context) == 'string', 'Argument context must be of type string.')
    assert(type(out) == 'integer', 'Argument out must be of type integer.')

    local call = natives.invoke(0x95BB39C4DA99F348, 'bool', p0, context, out)
    return call
end

--- @param p0 integer
--- @param context string
--- @param out integer
--- @return boolean
natives.socialclub_scInboxMessageGetDataString = function(p0, context, out)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(context) == 'string', 'Argument context must be of type string.')
    assert(type(out) == 'integer', 'Argument out must be of type integer.')

    local call = natives.invoke(0x66F77FD58506FF6B, 'bool', p0, context, out)
    return call
end

--- @param p0 integer
--- @return string
natives.socialclub_scInboxMessageGetRawTypeAtIndex = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x176D077685CD83E4, 'string', p0)
    return call
end

--- @param attrhash integer
--- @param value number
--- @return boolean
natives.socialclub_scPresenceAttrSetFloat = function(attrhash, value)
    assert(type(attrhash) == 'integer', 'Argument attrhash must be of type integer.')
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0xA31DAFCDC33775E9, 'bool', attrhash, value)
    return call
end

--- @param attrname string
--- @param value integer
--- @param p2 boolean
--- @return boolean
natives.socialclub_scPresenceAttrSetIntEx = function(attrname, value, p2)
    assert(type(attrname) == 'string', 'Argument attrname must be of type string.')
    assert(type(value) == 'integer', 'Argument value must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x0000000085488C49, 'bool', attrname, value, p2)
    return call
end

--- @param attrname string
--- @param value number
--- @param p2 boolean
--- @return boolean
natives.socialclub_scPresenceAttrSetFloatEx = function(attrname, value, p2)
    assert(type(attrname) == 'string', 'Argument attrname must be of type string.')
    assert(type(value) == 'number', 'Argument value must be of type number.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x00000000467F4CAA, 'bool', attrname, value, p2)
    return call
end

--- @param attrname string
--- @param value string
--- @param p2 boolean
--- @return boolean
natives.socialclub_scPresenceAttrSetStringEx = function(attrname, value, p2)
    assert(type(attrname) == 'string', 'Argument attrname must be of type string.')
    assert(type(value) == 'string', 'Argument value must be of type string.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x00000000EB2D93B3, 'bool', attrname, value, p2)
    return call
end

-- Starts a task to check an entered string for profanity on the ROS/Social Club services.
--- @param string string
--- @param token integer
--- @return boolean
natives.socialclub_scProfanityCheckString = function(string, token)
    assert(type(string) == 'string', 'Argument string must be of type string.')
    assert(type(token) == 'integer', 'Argument token must be of type integer.')

    local call = natives.invoke(0x9C74AC9D87B3FFF4, 'bool', string, token)
    return call
end

--- @param token integer
--- @return boolean
natives.socialclub_scProfanityGetCheckIsValid = function(token)
    assert(type(token) == 'integer', 'Argument token must be of type integer.')

    local call = natives.invoke(0x08C8052AF40C4247, 'bool', token)
    return call
end

--- @param token integer
--- @return boolean
natives.socialclub_scProfanityGetCheckIsPending = function(token)
    assert(type(token) == 'integer', 'Argument token must be of type integer.')

    local call = natives.invoke(0x3A10BCD0C8AA0B82, 'bool', token)
    return call
end

--- @param token integer
--- @return boolean
natives.socialclub_scProfanityGetStringPassed = function(token)
    assert(type(token) == 'integer', 'Argument token must be of type integer.')

    local call = natives.invoke(0xF302973BB8BE70E6, 'bool', token)
    return call
end

--- @param token integer
--- @return number
natives.socialclub_scProfanityGetStringStatus = function(token)
    assert(type(token) == 'integer', 'Argument token must be of type integer.')

    local call = natives.invoke(0x0CF3BFB99EBBE5B1, 'int', token)
    return call
end

--- @return boolean
natives.socialclub_scCommunityEventIsActive = function()

    local call = natives.invoke(0xCBF743C984695CF3, 'bool')
    return call
end

--- @return number
natives.socialclub_scCommunityEventGetEventId = function()

    local call = natives.invoke(0xD635DF6BAA5A6017, 'int')
    return call
end

--- @param p0 string
--- @param p1 integer
--- @return boolean
natives.socialclub_scCommunityEventGetExtraDataInt = function(p0, p1)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xB4411D4D6B81438E, 'bool', p0, p1)
    return call
end

--- @param p0 string
--- @param p1 integer
--- @return boolean
natives.socialclub_scCommunityEventGetExtraDataFloat = function(p0, p1)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x060BBAD634C2B44B, 'bool', p0, p1)
    return call
end

--- @param p0 string
--- @param p1 integer
--- @return boolean
natives.socialclub_scCommunityEventGetExtraDataString = function(p0, p1)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x9F6DCD0C939C71E9, 'bool', p0, p1)
    return call
end

--- @param p0 integer
--- @return boolean
natives.socialclub_scCommunityEventGetDisplayName = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x89D9BDE7334B110F, 'bool', p0)
    return call
end

--- @param p0 string
--- @return boolean
natives.socialclub_scCommunityEventIsActiveForType = function(p0)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')

    local call = natives.invoke(0x09937EB0CEBC2F9F, 'bool', p0)
    return call
end

--- @param p0 string
--- @return number
natives.socialclub_scCommunityEventGetEventIdForType = function(p0)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')

    local call = natives.invoke(0x03C03ABBABBEF752, 'int', p0)
    return call
end

--- @param p0 string
--- @param p1 integer
--- @param p2 string
--- @return boolean
natives.socialclub_scCommunityEventGetExtraDataIntForType = function(p0, p1, p2)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'string', 'Argument p2 must be of type string.')

    local call = natives.invoke(0x3519CC3525319A96, 'bool', p0, p1, p2)
    return call
end

--- @param p0 string
--- @param p1 integer
--- @param p2 string
--- @return boolean
natives.socialclub_scCommunityEventGetExtraDataFloatForType = function(p0, p1, p2)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'string', 'Argument p2 must be of type string.')

    local call = natives.invoke(0x1BDB56DB258F052D, 'bool', p0, p1, p2)
    return call
end

--- @param p0 string
--- @param p1 integer
--- @param p2 string
--- @return boolean
natives.socialclub_scCommunityEventGetExtraDataStringForType = function(p0, p1, p2)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'string', 'Argument p2 must be of type string.')

    local call = natives.invoke(0xC8FC3B2432E8229D, 'bool', p0, p1, p2)
    return call
end

--- @param p0 integer
--- @param p1 string
--- @return boolean
natives.socialclub_scCommunityEventGetDisplayNameForType = function(p0, p1)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')

    local call = natives.invoke(0x85EA0BEC7B1F7622, 'bool', p0, p1)
    return call
end

--- @param p0 integer
--- @return boolean
natives.socialclub_scCommunityEventIsActiveById = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x62B384FEFDE06817, 'bool', p0)
    return call
end

--- @param p0 integer
--- @param p1 string
--- @param p2 integer
--- @return boolean
natives.socialclub_scCommunityEventGetExtraDataIntById = function(p0, p1, p2)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x7C981DE05A7403A0, 'bool', p0, p1, p2)
    return call
end

--- @param p0 integer
--- @param p1 string
--- @param p2 integer
--- @return boolean
natives.socialclub_scCommunityEventGetExtraDataFloatById = function(p0, p1, p2)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x91C9E2A0F9DD6DD4, 'bool', p0, p1, p2)
    return call
end

--- @param p0 integer
--- @param p1 string
--- @param p2 integer
--- @return boolean
natives.socialclub_scCommunityEventGetExtraDataStringById = function(p0, p1, p2)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x049D2196D9D11184, 'bool', p0, p1, p2)
    return call
end

--- @param p0 integer
--- @param p1 integer
--- @return boolean
natives.socialclub_scCommunityEventGetDisplayNameById = function(p0, p1)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x11EA52CAD1B55910, 'bool', p0, p1)
    return call
end

--- @param type integer
--- @param subtype integer
--- @return number
natives.socialclubfeed_scFeedSubmitPresetMessage = function(type, subtype)
    assert(type(type) == 'integer', 'Argument type must be of type integer.')
    assert(type(subtype) == 'integer', 'Argument subtype must be of type integer.')

    local call = natives.invoke(0xEFB64240F6B17817, 'int', type, subtype)
    return call
end

--- @return boolean
natives.socialclubfeed_scFeedHubHasNewData = function()

    local call = natives.invoke(0x068332D20CB6F897, 'bool')
    return call
end

--- @return boolean
natives.spactionproxy_spactionproxyStartManager = function()

    local call = natives.invoke(0x1F471B79ACC91BEE, 'bool')
    return call
end

--- @return boolean
natives.spactionproxy_spactionproxyManagerIsReady = function()

    local call = natives.invoke(0x1F471B79ACC91BED, 'bool')
    return call
end

--- @return boolean
natives.spactionproxy_spactionproxyManagerIsFailed = function()

    local call = natives.invoke(0x1F471B79ACC91BEC, 'bool')
    return call
end

--- @param data userdata
--- @return boolean
natives.spactionproxy_spactionproxyGetNextPendingCraftingAction = function(data)
    assert(type(data) == 'userdata', 'Argument data must be of type userdata.')

    local call = natives.invoke(0x1F471B79ACC97BEF, 'bool', data)
    return call
end

--- @param data userdata
--- @return boolean
natives.spactionproxy_spactionproxyGetNextPendingBuyAction = function(data)
    assert(type(data) == 'userdata', 'Argument data must be of type userdata.')

    local call = natives.invoke(0x1F471B79ACC98BEF, 'bool', data)
    return call
end

--- @param p0 userdata
--- @param p1 boolean
--- @return boolean
natives.spactionproxy_spactionproxyProcessAction = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x1F471B79ACC94BEF, 'bool', p0, p1)
    return call
end

-- struct StatId
-- {
-- 	alignas(8) Hash BaseId;
-- 	alignas(8) Hash PermutationId;
-- }
--- @param statid userdata
--- @return boolean
natives.stats_statIdIsValid = function(statid)
    assert(type(statid) == 'userdata', 'Argument statid must be of type userdata.')

    local call = natives.invoke(0xC48FE1971C9743FF, 'bool', statid)
    return call
end

-- statId: see STAT_ID_IS_VALID
--- @param statid userdata
--- @param value integer
--- @param p2 boolean
--- @return boolean
natives.stats_statIdSetInt = function(statid, value, p2)
    assert(type(statid) == 'userdata', 'Argument statid must be of type userdata.')
    assert(type(value) == 'integer', 'Argument value must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xA4DDF5DF95E65EEE, 'bool', statid, value, p2)
    return call
end

-- statId: see STAT_ID_IS_VALID
--- @param statid userdata
--- @param value number
--- @param p2 boolean
--- @return boolean
natives.stats_statIdSetFloat = function(statid, value, p2)
    assert(type(statid) == 'userdata', 'Argument statid must be of type userdata.')
    assert(type(value) == 'number', 'Argument value must be of type number.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x481BDF6A10C5EF68, 'bool', statid, value, p2)
    return call
end

-- statId: see STAT_ID_IS_VALID
--- @param statid userdata
--- @param value boolean
--- @param p2 boolean
--- @return boolean
natives.stats_statIdSetBool = function(statid, value, p2)
    assert(type(statid) == 'userdata', 'Argument statid must be of type userdata.')
    assert(type(value) == 'boolean', 'Argument value must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x3B5107353267D7A1, 'bool', statid, value, p2)
    return call
end

-- statId: see STAT_ID_IS_VALID
--- @param statid userdata
--- @param label string
--- @param p2 boolean
--- @return boolean
natives.stats_statIdSetGxtLabel = function(statid, label, p2)
    assert(type(statid) == 'userdata', 'Argument statid must be of type userdata.')
    assert(type(label) == 'string', 'Argument label must be of type string.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x05060A54834F2382, 'bool', statid, label, p2)
    return call
end

-- statId: see STAT_ID_IS_VALID
--- @param statid userdata
--- @param date userdata
--- @param p2 boolean
--- @return boolean
natives.stats_statIdSetDate = function(statid, date, p2)
    assert(type(statid) == 'userdata', 'Argument statid must be of type userdata.')
    assert(type(date) == 'userdata', 'Argument date must be of type userdata.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x1FAE9B2FAA2DFE06, 'bool', statid, date, p2)
    return call
end

-- statId: see STAT_ID_IS_VALID
--- @param statid userdata
--- @param p1 integer
--- @return boolean
natives.stats_statIdGetInt = function(statid, p1)
    assert(type(statid) == 'userdata', 'Argument statid must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x767FBC2AC802EF3E, 'bool', statid, p1)
    return call
end

-- statId: see STAT_ID_IS_VALID
--- @param statid userdata
--- @param value integer
--- @return boolean
natives.stats_statIdGetFloat = function(statid, value)
    assert(type(statid) == 'userdata', 'Argument statid must be of type userdata.')
    assert(type(value) == 'integer', 'Argument value must be of type integer.')

    local call = natives.invoke(0xD7AE6C9C9C6AC54D, 'bool', statid, value)
    return call
end

-- statId: see STAT_ID_IS_VALID
--- @param statid userdata
--- @param value integer
--- @return boolean
natives.stats_statIdGetBool = function(statid, value)
    assert(type(statid) == 'userdata', 'Argument statid must be of type userdata.')
    assert(type(value) == 'integer', 'Argument value must be of type integer.')

    local call = natives.invoke(0x11B5E6D2AE73F48F, 'bool', statid, value)
    return call
end

-- statId: see STAT_ID_IS_VALID
--- @param statid userdata
--- @param date userdata
--- @return boolean
natives.stats_statIdGetDate = function(statid, date)
    assert(type(statid) == 'userdata', 'Argument statid must be of type userdata.')
    assert(type(date) == 'userdata', 'Argument date must be of type userdata.')

    local call = natives.invoke(0x8B0FACEFC36C824C, 'bool', statid, date)
    return call
end

-- statId: see STAT_ID_IS_VALID
--- @param statid userdata
natives.stats_n0X0Fee2561120F3333 = function(statid)
    assert(type(statid) == 'userdata', 'Argument statid must be of type userdata.')

    local call = natives.invoke(0x0FEE2561120F3333, 'void', statid)
end

-- statId: see STAT_ID_IS_VALID
--- @param statid userdata
--- @param value integer
natives.stats_statIdIncrementInt = function(statid, value)
    assert(type(statid) == 'userdata', 'Argument statid must be of type userdata.')
    assert(type(value) == 'integer', 'Argument value must be of type integer.')

    local call = natives.invoke(0x6A0184E904CDF25E, 'void', statid, value)
end

-- statId: see STAT_ID_IS_VALID
--- @param statid userdata
--- @param value number
natives.stats_statIdIncrementFloat = function(statid, value)
    assert(type(statid) == 'userdata', 'Argument statid must be of type userdata.')
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0x4A47E38EA3D60939, 'void', statid, value)
end

-- statId: see STAT_ID_IS_VALID
--- @param statid userdata
--- @param value integer
natives.stats_statIdDecrementInt = function(statid, value)
    assert(type(statid) == 'userdata', 'Argument statid must be of type userdata.')
    assert(type(value) == 'integer', 'Argument value must be of type integer.')

    local call = natives.invoke(0xBD861AE8A5181ED7, 'void', statid, value)
end

-- statId: see STAT_ID_IS_VALID
--- @param statid userdata
--- @param value integer
natives.stats_n0X91A4F58E01Ed5E4C = function(statid, value)
    assert(type(statid) == 'userdata', 'Argument statid must be of type userdata.')
    assert(type(value) == 'integer', 'Argument value must be of type integer.')

    local call = natives.invoke(0x91A4F58E01ED5E4C, 'void', statid, value)
end

-- statId: see STAT_ID_IS_VALID
-- Only used in R* SP Scripts
-- _STAT_ID_SET_*
--- @param statid userdata
--- @param value number
natives.stats_n0Xe141F6B40B1E3683 = function(statid, value)
    assert(type(statid) == 'userdata', 'Argument statid must be of type userdata.')
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0xE141F6B40B1E3683, 'void', statid, value)
end

-- statId: see STAT_ID_IS_VALID
--- @param statid userdata
natives.stats_statIdSetToPosseId = function(statid)
    assert(type(statid) == 'userdata', 'Argument statid must be of type userdata.')

    local call = natives.invoke(0x34B22DE38477EDB4, 'void', statid)
end

-- Calculation: (value / 1000) / 60 % 60
--- @param value integer
--- @return number
natives.stats_statCalculateCooldown = function(value)
    assert(type(value) == 'integer', 'Argument value must be of type integer.')

    local call = natives.invoke(0x1E7384AB5D4F4581, 'int', value)
    return call
end

-- statId: see STAT_ID_IS_VALID
--- @param entity integer
--- @param statid userdata
--- @return boolean
natives.stats_statPheromoneCooldownLegendaryAnimal = function(entity, statid)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(statid) == 'userdata', 'Argument statid must be of type userdata.')

    local call = natives.invoke(0x5420D398A42917FC, 'bool', entity, statid)
    return call
end

--- @param fish integer
--- @param weight number
--- @param category integer
--- @param subcategory integer
natives.stats_statItemFishCaught = function(fish, weight, category, subcategory)
    assert(type(fish) == 'integer', 'Argument fish must be of type integer.')
    assert(type(weight) == 'number', 'Argument weight must be of type number.')
    assert(type(category) == 'integer', 'Argument category must be of type integer.')
    assert(type(subcategory) == 'integer', 'Argument subcategory must be of type integer.')

    local call = natives.invoke(0xDA26263C87CCE9C1, 'void', fish, weight, category, subcategory)
end

--- @param ped integer
natives.stats_statCarriedSatchelItemFromPed = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x831BF01C56149A8A, 'void', ped)
end

--- @param item integer
--- @param slot integer
--- @param p2 userdata
--- @param p3 userdata
natives.stats_statDonateIncrementItem = function(item, slot, p2, p3)
    assert(type(item) == 'integer', 'Argument item must be of type integer.')
    assert(type(slot) == 'integer', 'Argument slot must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x7C2ABF6E556B21FC, 'void', item, slot, p2, p3)
end

-- Only used in R* SP Scripts
--- @param animaltype integer
natives.stats_n0X8312F09C56149A8A = function(animaltype)
    assert(type(animaltype) == 'integer', 'Argument animaltype must be of type integer.')

    local call = natives.invoke(0x8312F09C56149A8A, 'void', animaltype)
end

--- @param p0 integer
natives.stats_n0X378D3B1B11D9385B = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x378D3B1B11D9385B, 'void', p0)
end

--- @param p0 integer
natives.stats_n0Xda26263C07Cce9C2 = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0xDA26263C07CCE9C2, 'void', p0)
end

--- @param ped integer
--- @param animaltype integer
natives.stats_n0Xd64Dbc8B0424135F = function(ped, animaltype)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(animaltype) == 'integer', 'Argument animaltype must be of type integer.')

    local call = natives.invoke(0xD64DBC8B0424135F, 'void', ped, animaltype)
end

-- Only used in R* SP Scripts
--- @param p0 userdata
--- @param p1 boolean
--- @param p2 boolean
--- @param p3 boolean
natives.stats_n0Xa59590050F80Ff2E = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0xA59590050F80FF2E, 'void', p0, p1, p2, p3)
end

-- Related to animal tagging
--- @param animaltype integer
natives.stats_statAddAnimalSampleTarget = function(animaltype)
    assert(type(animaltype) == 'integer', 'Argument animaltype must be of type integer.')

    local call = natives.invoke(0x90E9A5DADBABC918, 'void', animaltype)
end

--- @param ped integer
natives.stats_n0Xf8181B5Ef156862C = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xF8181B5EF156862C, 'void', ped)
end

--- @param unlockhash integer
--- @param ped integer
natives.stats_statAddBountyTarget = function(unlockhash, ped)
    assert(type(unlockhash) == 'integer', 'Argument unlockhash must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x6B1044FDC2B09101, 'void', unlockhash, ped)
end

--- @param p0 userdata
--- @param ped integer
natives.stats_n0X8C889E4Cbb4B2356 = function(p0, ped)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x8C889E4CBB4B2356, 'void', p0, ped)
end

--- @param entity integer
natives.stats_statBountyCaptured = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x262EF7CF49CF1EB9, 'void', entity)
end

--- @param ped integer
--- @param p1 boolean
natives.stats_n0Xa596890Cf55B5095 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xA596890CF55B5095, 'void', ped, p1)
end

--- @param ped integer
natives.stats_statBountyEscaped = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xB22F05732F72F70C, 'void', ped)
end

--- @param p0 userdata
--- @param p1 integer
--- @param p2 integer
natives.stats_n0Xf21A5D66874Fcedd = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0xF21A5D66874FCEDD, 'void', p0, p1, p2)
end

--- @param statitem integer
--- @param p1 integer
natives.stats_n0X3Eb2791A1Fbc8A42 = function(statitem, p1)
    assert(type(statitem) == 'integer', 'Argument statitem must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x3EB2791A1FBC8A42, 'void', statitem, p1)
end

natives.stats_n0Xdf95Df488A645Ce7 = function()

    local call = natives.invoke(0xDF95DF488A645CE7, 'void')
end

--- @param itemset integer
natives.stats_statPhotographTaken = function(itemset)
    assert(type(itemset) == 'integer', 'Argument itemset must be of type integer.')

    local call = natives.invoke(0x4D31051A4CA83787, 'void', itemset)
end

--- @param unlockhash integer
--- @param ped integer
--- @param animaltype integer
natives.stats_n0Xbe66B26B6529E943 = function(unlockhash, ped, animaltype)
    assert(type(unlockhash) == 'integer', 'Argument unlockhash must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(animaltype) == 'integer', 'Argument animaltype must be of type integer.')

    local call = natives.invoke(0xBE66B26B6529E943, 'void', unlockhash, ped, animaltype)
end

--- @param unlockhash integer
--- @param ped1 integer
--- @param ped2 integer
natives.stats_n0Xf2B5Abde09958689 = function(unlockhash, ped1, ped2)
    assert(type(unlockhash) == 'integer', 'Argument unlockhash must be of type integer.')
    assert(type(ped1) == 'integer', 'Argument ped1 must be of type integer.')
    assert(type(ped2) == 'integer', 'Argument ped2 must be of type integer.')

    local call = natives.invoke(0xF2B5ABDE09958689, 'void', unlockhash, ped1, ped2)
end

--- @param deedhash integer
natives.stats_statRegisterLegendaryAnimalDeed = function(deedhash)
    assert(type(deedhash) == 'integer', 'Argument deedhash must be of type integer.')

    local call = natives.invoke(0xCD0D69C65BB0E8B9, 'void', deedhash)
end

-- statId: see STAT_ID_IS_VALID
--- @param statid userdata
--- @param p1 integer
--- @param p2 integer
--- @return boolean
natives.stats_n0X302E71C1D9Ee75B9 = function(statid, p1, p2)
    assert(type(statid) == 'userdata', 'Argument statid must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x302E71C1D9EE75B9, 'bool', statid, p1, p2)
    return call
end

--- @param p0 integer
--- @return boolean
natives.stats_statstrackerIsInitialized = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x01F4D242765C6B24, 'bool', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.stats_n0X6123E2832C34243D = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x6123E2832C34243D, 'void', p0, p1, p2, p3, p4)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
natives.stats_n0Xca41E86545413B5B = function(p0, p1, p2, p3, p4, p5, p6)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0xCA41E86545413B5B, 'void', p0, p1, p2, p3, p4, p5, p6)
end

--- @param p0 integer
--- @param p1 userdata
natives.stats_statstrackerDeedStarted = function(p0, p1)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xB2A38826E5886E83, 'void', p0, p1)
end

--- @param deedtype integer
--- @param deedhash integer
--- @param missionstatus integer
--- @param data userdata
natives.stats_statstrackerDeedStatus = function(deedtype, deedhash, missionstatus, data)
    assert(type(deedtype) == 'integer', 'Argument deedtype must be of type integer.')
    assert(type(deedhash) == 'integer', 'Argument deedhash must be of type integer.')
    assert(type(missionstatus) == 'integer', 'Argument missionstatus must be of type integer.')
    assert(type(data) == 'userdata', 'Argument data must be of type userdata.')

    local call = natives.invoke(0xD5910ECF81A2278C, 'void', deedtype, deedhash, missionstatus, data)
end

--- @param p0 userdata
--- @param p1 integer
--- @param x number
--- @param y number
--- @param z number
natives.stats_n0X99230691875Fc218 = function(p0, p1, x, y, z)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0x99230691875FC218, 'void', p0, p1, x, y, z)
end

--- @param p0 integer
natives.stats_n0X025E98E317652Cdd = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x025E98E317652CDD, 'void', p0)
end

--- @param p0 integer
natives.stats_n0Xe5A680A5D8B1F687 = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0xE5A680A5D8B1F687, 'void', p0)
end

-- Only used in R* SP Scripts
--- @param p0 integer
--- @return boolean
natives.stats_n0X4Dac398297981B87 = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x4DAC398297981B87, 'bool', p0)
    return call
end

-- https:--github.com/femga/rdr3_discoveries/blob/master/AI/EVENTS/challenge_goals.lua
--- @param chalhash integer
--- @param goalhash integer
--- @return boolean
natives.stats_chalIsGoalActive = function(chalhash, goalhash)
    assert(type(chalhash) == 'integer', 'Argument chalhash must be of type integer.')
    assert(type(goalhash) == 'integer', 'Argument goalhash must be of type integer.')

    local call = natives.invoke(0x04DAC3929796EB87, 'bool', chalhash, goalhash)
    return call
end

--- @param chalhash integer
--- @param goalhash integer
--- @param disabled boolean
natives.stats_chalSetGoalDisabled = function(chalhash, goalhash, disabled)
    assert(type(chalhash) == 'integer', 'Argument chalhash must be of type integer.')
    assert(type(goalhash) == 'integer', 'Argument goalhash must be of type integer.')
    assert(type(disabled) == 'boolean', 'Argument disabled must be of type boolean.')

    local call = natives.invoke(0xF63DF9EE16393343, 'void', chalhash, goalhash, disabled)
end

--- @param chalhash integer
--- @return number
natives.stats_chalGetNumRanksCompleted = function(chalhash)
    assert(type(chalhash) == 'integer', 'Argument chalhash must be of type integer.')

    local call = natives.invoke(0x58CB53DB63F84DE9, 'int', chalhash)
    return call
end

--- @param chalhash integer
--- @return number
natives.stats_chalGetMaxRanks = function(chalhash)
    assert(type(chalhash) == 'integer', 'Argument chalhash must be of type integer.')

    local call = natives.invoke(0x58CB53DB63F84DEA, 'int', chalhash)
    return call
end

--- @param chalhash integer
--- @param goalhash integer
--- @param value integer
natives.stats_chalAddGoalProgressInt = function(chalhash, goalhash, value)
    assert(type(chalhash) == 'integer', 'Argument chalhash must be of type integer.')
    assert(type(goalhash) == 'integer', 'Argument goalhash must be of type integer.')
    assert(type(value) == 'integer', 'Argument value must be of type integer.')

    local call = natives.invoke(0xDDBD560745B1EE9A, 'void', chalhash, goalhash, value)
end

--- @param chalhash integer
--- @param goalhash integer
--- @param value number
natives.stats_chalAddGoalProgressFloat = function(chalhash, goalhash, value)
    assert(type(chalhash) == 'integer', 'Argument chalhash must be of type integer.')
    assert(type(goalhash) == 'integer', 'Argument goalhash must be of type integer.')
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0x86922D8C02FB7703, 'void', chalhash, goalhash, value)
end

--- @param chalhash integer
--- @param goalhash integer
--- @param value integer
natives.stats_chalSetGoalProgressInt = function(chalhash, goalhash, value)
    assert(type(chalhash) == 'integer', 'Argument chalhash must be of type integer.')
    assert(type(goalhash) == 'integer', 'Argument goalhash must be of type integer.')
    assert(type(value) == 'integer', 'Argument value must be of type integer.')

    local call = natives.invoke(0xDDBD560745B1EE9B, 'void', chalhash, goalhash, value)
end

--- @param p0 integer
--- @param value integer
natives.stats_chalAddGoalProgressIntByScoreId = function(p0, value)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(value) == 'integer', 'Argument value must be of type integer.')

    local call = natives.invoke(0xDDBD560745B1EE9C, 'void', p0, value)
end

--- @param p0 integer
--- @param value number
natives.stats_chalAddGoalProgressFloatByScoreId = function(p0, value)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0x86922D8C02FB7705, 'void', p0, value)
end

--- @param p0 integer
--- @param p1 integer
--- @return boolean
natives.stats_chalAchievementIsComplete = function(p0, p1)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x77B97A827739D434, 'bool', p0, p1)
    return call
end

--- @param p0 integer
--- @param p1 integer
--- @return number
natives.stats_chalAchievementGetProgressInt = function(p0, p1)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x808712E428F697B8, 'int', p0, p1)
    return call
end

--- @param chalhash integer
natives.stats_chalNetStartChal = function(chalhash)
    assert(type(chalhash) == 'integer', 'Argument chalhash must be of type integer.')

    local call = natives.invoke(0x4ABF7E4DB6279E8F, 'void', chalhash)
end

--- @param chalhash integer
natives.stats_chalNetStopChal = function(chalhash)
    assert(type(chalhash) == 'integer', 'Argument chalhash must be of type integer.')

    local call = natives.invoke(0x43B0163154A50C86, 'void', chalhash)
end

--- @param chalhash integer
--- @param goalhash integer
natives.stats_chalNetStartGoal = function(chalhash, goalhash)
    assert(type(chalhash) == 'integer', 'Argument chalhash must be of type integer.')
    assert(type(goalhash) == 'integer', 'Argument goalhash must be of type integer.')

    local call = natives.invoke(0xC3FCB47344DCB638, 'void', chalhash, goalhash)
end

--- @param chalhash integer
--- @param goalhash integer
natives.stats_chalNetStopGoal = function(chalhash, goalhash)
    assert(type(chalhash) == 'integer', 'Argument chalhash must be of type integer.')
    assert(type(goalhash) == 'integer', 'Argument goalhash must be of type integer.')

    local call = natives.invoke(0x00CE6A93324A590B, 'void', chalhash, goalhash)
end

--- @param chalhash integer
--- @param goalhash integer
--- @param player integer
--- @return number
natives.stats_n0Xddbd560745B1Ee98 = function(chalhash, goalhash, player)
    assert(type(chalhash) == 'integer', 'Argument chalhash must be of type integer.')
    assert(type(goalhash) == 'integer', 'Argument goalhash must be of type integer.')
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xDDBD560745B1EE98, 'int', chalhash, goalhash, player)
    return call
end

--- @param p0 integer
--- @param p1 integer
--- @return string
natives.stats_n0Xb112B9262Ec29C20 = function(p0, p1)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xB112B9262EC29C20, 'string', p0, p1)
    return call
end

--- @param p0 integer
natives.stats_n0X4Fcbcc0584Cd08E9 = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x4FCBCC0584CD08E9, 'void', p0)
end

--- @param p0 integer
--- @return boolean
natives.stats_n0Xca1F0B5103936891 = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0xCA1F0B5103936891, 'bool', p0)
    return call
end

--- @param p0 integer
--- @return number
natives.stats_n0X8Ba3D7B1E83Ef803 = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x8BA3D7B1E83EF803, 'integer', p0)
    return call
end

--- @param missionhash integer
--- @return number
natives.stats_chalMissionGetNumGoals = function(missionhash)
    assert(type(missionhash) == 'integer', 'Argument missionhash must be of type integer.')

    local call = natives.invoke(0x0B0576DD3A75E58D, 'int', missionhash)
    return call
end

--- @param missionhash integer
--- @return number
natives.stats_chalMissionGetNumGoalsComplete = function(missionhash)
    assert(type(missionhash) == 'integer', 'Argument missionhash must be of type integer.')

    local call = natives.invoke(0xA785A52B59B7E7B2, 'int', missionhash)
    return call
end

--- @param missionhash integer
--- @param goalhash integer
--- @return boolean
natives.stats_chalMissionIsGoalComplete = function(missionhash, goalhash)
    assert(type(missionhash) == 'integer', 'Argument missionhash must be of type integer.')
    assert(type(goalhash) == 'integer', 'Argument goalhash must be of type integer.')

    local call = natives.invoke(0xC0BB774787BBF301, 'bool', missionhash, goalhash)
    return call
end

--- @param missionhash integer
--- @param goalhash integer
--- @param value integer
natives.stats_chalMissionAddGoalProgressInt = function(missionhash, goalhash, value)
    assert(type(missionhash) == 'integer', 'Argument missionhash must be of type integer.')
    assert(type(goalhash) == 'integer', 'Argument goalhash must be of type integer.')
    assert(type(value) == 'integer', 'Argument value must be of type integer.')

    local call = natives.invoke(0x97E18E7C098626DE, 'void', missionhash, goalhash, value)
end

--- @return number
natives.stats_n0X9D0F5D2E1951Cd84 = function()

    local call = natives.invoke(0x9D0F5D2E1951CD84, 'float')
    return call
end

natives.stats_n0X218F7710A139D012 = function()

    local call = natives.invoke(0x218F7710A139D012, 'void')
end

--- @return boolean
natives.stats_n0X3Aeabae3F3C7600C = function()

    local call = natives.invoke(0x3AEABAE3F3C7600C, 'bool')
    return call
end

--- @return string
natives.stats_n0X3F6Fd87D2030Adc6 = function()

    local call = natives.invoke(0x3F6FD87D2030ADC6, 'string')
    return call
end

--- @param p0 integer
--- @return any
natives.stats_n0Xa2E2Bea4E83F6270 = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0xA2E2BEA4E83F6270, 'any', p0)
    return call
end

--- @param p0 integer
--- @param p1 integer
--- @param schedulelocation integer
--- @return boolean
natives.stats_n0Xb5E2Eda2135E0Fa1 = function(p0, p1, schedulelocation)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(schedulelocation) == 'integer', 'Argument schedulelocation must be of type integer.')

    local call = natives.invoke(0xB5E2EDA2135E0FA1, 'bool', p0, p1, schedulelocation)
    return call
end

--- @param chalhash integer
--- @return number
natives.stats_weeklyCollectibleGetNumSets = function(chalhash)
    assert(type(chalhash) == 'integer', 'Argument chalhash must be of type integer.')

    local call = natives.invoke(0x8F5317729F791D10, 'int', chalhash)
    return call
end

--- @param chalhash integer
--- @param index integer
--- @return number
natives.stats_weeklyCollectibleGetItemSetBuyAward = function(chalhash, index)
    assert(type(chalhash) == 'integer', 'Argument chalhash must be of type integer.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0x610783F646894D25, 'integer', chalhash, index)
    return call
end

--- @param chalhash integer
--- @param index integer
--- @return number
natives.stats_weeklyCollectibleGetItemSetLabel = function(chalhash, index)
    assert(type(chalhash) == 'integer', 'Argument chalhash must be of type integer.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0xBFFA88522FF0F730, 'integer', chalhash, index)
    return call
end

--- @param chalhash integer
--- @param index integer
--- @return number
natives.stats_weeklyCollectibleGetNumItemsInSet = function(chalhash, index)
    assert(type(chalhash) == 'integer', 'Argument chalhash must be of type integer.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0x7D675C9DDDB365BE, 'int', chalhash, index)
    return call
end

--- @param chalhash integer
--- @param setindex integer
--- @param itemindex integer
--- @param p3 integer
--- @param p4 integer
--- @return boolean
natives.stats_weeklyCollectibleGetItemInSet = function(chalhash, setindex, itemindex, p3, p4)
    assert(type(chalhash) == 'integer', 'Argument chalhash must be of type integer.')
    assert(type(setindex) == 'integer', 'Argument setindex must be of type integer.')
    assert(type(itemindex) == 'integer', 'Argument itemindex must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')

    local call = natives.invoke(0xBA61BA6205A3F5A8, 'bool', chalhash, setindex, itemindex, p3, p4)
    return call
end

-- Only used in R* Script net_char_creator
natives.stats_n0X4F2D5Fa23Db992De = function()

    local call = natives.invoke(0x4F2D5FA23DB992DE, 'void')
end

-- Only used in R* Script net_char_creator
natives.stats_n0X4E463A3Cdefffe96 = function()

    local call = natives.invoke(0x4E463A3CDEFFFE96, 'void')
end

-- Request a model to be loaded into memory.
--- @param model integer
--- @param p1 boolean
natives.streaming_requestModel = function(model, p1)
    assert(type(model) == 'integer', 'Argument model must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xFA28FE3A6246FC30, 'void', model, p1)
end

-- Checks if the specified model has loaded into memory.
--- @param model integer
--- @return boolean
natives.streaming_hasModelLoaded = function(model)
    assert(type(model) == 'integer', 'Argument model must be of type integer.')

    local call = natives.invoke(0x1283B8B89DD5D1B6, 'bool', model)
    return call
end

-- Marks the model as no longer needed.
--- @param model integer
natives.streaming_setModelAsNoLongerNeeded = function(model)
    assert(type(model) == 'integer', 'Argument model must be of type integer.')

    local call = natives.invoke(0x4AD96EF928BD4F9A, 'void', model)
end

-- Returns whether the specified model exists in the game.
--- @param model integer
--- @return boolean
natives.streaming_isModelInCdimage = function(model)
    assert(type(model) == 'integer', 'Argument model must be of type integer.')

    local call = natives.invoke(0xD6F3B6D7716CFF8E, 'bool', model)
    return call
end

-- Returns whether the specified model is valid
--- @param model integer
--- @return boolean
natives.streaming_isModelValid = function(model)
    assert(type(model) == 'integer', 'Argument model must be of type integer.')

    local call = natives.invoke(0x392C8D8E07B70EFC, 'bool', model)
    return call
end

--- @param model integer
--- @return boolean
natives.streaming_isModelAPed = function(model)
    assert(type(model) == 'integer', 'Argument model must be of type integer.')

    local call = natives.invoke(0xC3F09DE9D6D17DDA, 'bool', model)
    return call
end

-- Returns whether the specified model represents a vehicle.
--- @param model integer
--- @return boolean
natives.streaming_isModelAVehicle = function(model)
    assert(type(model) == 'integer', 'Argument model must be of type integer.')

    local call = natives.invoke(0x354F62672DE7DB0A, 'bool', model)
    return call
end

--- @param model integer
--- @return boolean
natives.streaming_isModelAnObject = function(model)
    assert(type(model) == 'integer', 'Argument model must be of type integer.')

    local call = natives.invoke(0x274EE1B90CFA669E, 'bool', model)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @return boolean
natives.streaming_hasCollisionLoadedAtCoord = function(x, y, z)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0xDA8B2EAF29E872E2, 'bool', x, y, z)
    return call
end

natives.streaming_n0X80B3E0597366Adf1 = function()

    local call = natives.invoke(0x80B3E0597366ADF1, 'void')
end

--- @param x number
--- @param y number
--- @param z number
natives.streaming_requestCollisionAtCoord = function(x, y, z)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0x0A3720F162A033C9, 'void', x, y, z)
end

--- @param x number
--- @param y number
--- @param z number
natives.streaming_requestMetadataAtCoord = function(x, y, z)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0xA8432A14D4DC2101, 'void', x, y, z)
end

--- @param model integer
natives.streaming_requestCollisionForModel = function(model)
    assert(type(model) == 'integer', 'Argument model must be of type integer.')

    local call = natives.invoke(0xF1767BE37F661551, 'void', model)
end

--- @param model integer
--- @return boolean
natives.streaming_hasCollisionForModelLoaded = function(model)
    assert(type(model) == 'integer', 'Argument model must be of type integer.')

    local call = natives.invoke(0x210A79C9EC89778F, 'bool', model)
    return call
end

--- @param x number
--- @param y number
--- @param z number
natives.streaming_requestAdditionalCollisionAtCoord = function(x, y, z)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0x83A8D71650D1894F, 'void', x, y, z)
end

--- @param animdict string
--- @return boolean
natives.streaming_doesAnimDictExist = function(animdict)
    assert(type(animdict) == 'string', 'Argument animdict must be of type string.')

    local call = natives.invoke(0x537F44CB0D7F150D, 'bool', animdict)
    return call
end

--- @param animdict string
natives.streaming_requestAnimDict = function(animdict)
    assert(type(animdict) == 'string', 'Argument animdict must be of type string.')

    local call = natives.invoke(0xA862A2AD321F94B4, 'void', animdict)
end

--- @param animdict string
--- @return boolean
natives.streaming_hasAnimDictLoaded = function(animdict)
    assert(type(animdict) == 'string', 'Argument animdict must be of type string.')

    local call = natives.invoke(0x27FF6FE8009B40CA, 'bool', animdict)
    return call
end

--- @param animdict string
natives.streaming_removeAnimDict = function(animdict)
    assert(type(animdict) == 'string', 'Argument animdict must be of type string.')

    local call = natives.invoke(0x4763145053A33D46, 'void', animdict)
end

--- @param name string
natives.streaming_requestMoveNetworkDef = function(name)
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0x2B6529C54D29037A, 'void', name)
end

--- @param name string
--- @return boolean
natives.streaming_hasMoveNetworkDefLoaded = function(name)
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0x2C04D89A0FB4E244, 'bool', name)
    return call
end

--- @param name string
natives.streaming_removeMoveNetworkDef = function(name)
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0x57A197AD83F66BBF, 'void', name)
end

--- @param clipset string
natives.streaming_requestClipSet = function(clipset)
    assert(type(clipset) == 'string', 'Argument clipset must be of type string.')

    local call = natives.invoke(0xEF7611B57A820126, 'void', clipset)
end

-- Alias for HAS_ANIM_SET_LOADED.
--- @param clipset string
--- @return boolean
natives.streaming_hasClipSetLoaded = function(clipset)
    assert(type(clipset) == 'string', 'Argument clipset must be of type string.')

    local call = natives.invoke(0x1F23D6B6DA1CC3B2, 'bool', clipset)
    return call
end

-- Alias for REMOVE_ANIM_SET.
--- @param clipset string
natives.streaming_removeClipSet = function(clipset)
    assert(type(clipset) == 'string', 'Argument clipset must be of type string.')

    local call = natives.invoke(0x817FA1B1EE7CD6F0, 'void', clipset)
end

--- @param clipsethash integer
natives.streaming_requestClipSetByHash = function(clipsethash)
    assert(type(clipsethash) == 'integer', 'Argument clipsethash must be of type integer.')

    local call = natives.invoke(0xAC37644A538F7524, 'void', clipsethash)
end

--- @param p0 userdata
natives.streaming_n0X03Ddbf2D73799F9E = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x03DDBF2D73799F9E, 'void', p0)
end

--- @param p0 userdata
--- @return any
natives.streaming_n0X85B8F04555Ab49B8 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x85B8F04555AB49B8, 'any', p0)
    return call
end

--- @param p0 userdata
natives.streaming_n0X9F348De670423460 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x9F348DE670423460, 'void', p0)
end

--- @param p0 userdata
--- @return any
natives.streaming_n0X5288B7F0690F7C1F = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x5288B7F0690F7C1F, 'any', p0)
    return call
end

--- @param scenariotype integer
--- @param p1 integer
--- @param p2 userdata
--- @param p3 userdata
--- @return number
natives.streaming_requestScenarioType = function(scenariotype, p1, p2, p3)
    assert(type(scenariotype) == 'integer', 'Argument scenariotype must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x19A6BE7D9C6884D3, 'int', scenariotype, p1, p2, p3)
    return call
end

--- @param scenariotype integer
--- @param p1 boolean
--- @return boolean
natives.streaming_hasScenarioTypeLoaded = function(scenariotype, p1)
    assert(type(scenariotype) == 'integer', 'Argument scenariotype must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x9427C94D2E4094A4, 'bool', scenariotype, p1)
    return call
end

--- @param scenariotype integer
--- @return any
natives.streaming_removeScenarioAsset = function(scenariotype)
    assert(type(scenariotype) == 'integer', 'Argument scenariotype must be of type integer.')

    local call = natives.invoke(0x4EDDD9E9CA5AF985, 'any', scenariotype)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @return any
natives.streaming_n0Xb223249B7798Eeed = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xB223249B7798EEED, 'any', p0, p1, p2, p3)
    return call
end

--- @param p0 userdata
--- @return any
natives.streaming_n0Xa0Ae7653E8181725 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xA0AE7653E8181725, 'any', p0)
    return call
end

--- @param p0 userdata
--- @return any
natives.streaming_n0X66Bc28E50E85270E = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x66BC28E50E85270E, 'any', p0)
    return call
end

-- Outputs IPL position and radius (previously wrongly named heading)
-- https:--github.com/femga/rdr3_discoveries/blob/master/imaps/imaps_with_coords_and_heading.lua
--- @param iplhash integer
--- @param position integer
--- @param radius integer
--- @return boolean
natives.streaming_getIplBoundingSphere = function(iplhash, position, radius)
    assert(type(iplhash) == 'integer', 'Argument iplhash must be of type integer.')
    assert(type(position) == 'integer', 'Argument position must be of type integer.')
    assert(type(radius) == 'integer', 'Argument radius must be of type integer.')

    local call = natives.invoke(0x9C77964B0E07B633, 'bool', iplhash, position, radius)
    return call
end

-- Old name: _REQUEST_IMAP
--- @param iplhash integer
natives.streaming_requestIplHash = function(iplhash)
    assert(type(iplhash) == 'integer', 'Argument iplhash must be of type integer.')

    local call = natives.invoke(0x59767C5A7A9AE6DA, 'void', iplhash)
end

-- Old name: _REQUEST_IMAP_2
--- @param iplhash integer
natives.streaming_requestIplByHash = function(iplhash)
    assert(type(iplhash) == 'integer', 'Argument iplhash must be of type integer.')

    local call = natives.invoke(0x9E211A378F95C97C, 'void', iplhash)
end

-- Old name: _REMOVE_IMAP
--- @param iplhash integer
natives.streaming_removeIplHash = function(iplhash)
    assert(type(iplhash) == 'integer', 'Argument iplhash must be of type integer.')

    local call = natives.invoke(0x5A3E5CF7B4014B96, 'void', iplhash)
end

-- Old name: _REMOVE_IMAP_2
--- @param iplhash integer
natives.streaming_removeIplByHash = function(iplhash)
    assert(type(iplhash) == 'integer', 'Argument iplhash must be of type integer.')

    local call = natives.invoke(0x431E3AB760629B34, 'void', iplhash)
end

-- Old name: _IS_IMAP_ACTIVE
--- @param iplhash integer
--- @return boolean
natives.streaming_isIplActiveHash = function(iplhash)
    assert(type(iplhash) == 'integer', 'Argument iplhash must be of type integer.')

    local call = natives.invoke(0xD779B9B910BD3B7C, 'bool', iplhash)
    return call
end

-- Old name: _IS_IMAP_ACTIVE_2
--- @param iplhash integer
--- @return boolean
natives.streaming_isIplActiveByHash = function(iplhash)
    assert(type(iplhash) == 'integer', 'Argument iplhash must be of type integer.')

    local call = natives.invoke(0x93AC1B91CB6D9913, 'bool', iplhash)
    return call
end

-- Returns true if IPL is streamed in (?)
--- @param iplhash integer
--- @param x number
--- @param y number
--- @param z number
--- @return boolean
natives.streaming_isPositionInsideIplStreamingExtents = function(iplhash, x, y, z)
    assert(type(iplhash) == 'integer', 'Argument iplhash must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0x73B40D97D7BAAD77, 'bool', iplhash, x, y, z)
    return call
end

natives.streaming_n0Xdeee1F265B7Ecef5 = function()

    local call = natives.invoke(0xDEEE1F265B7ECEF5, 'void')
end

--- @param toggle boolean
natives.streaming_setGamePausesForStreaming = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xB3BC8250F4FE8B63, 'void', toggle)
end

--- @return number
natives.streaming_getNumberOfStreamingRequests = function()

    local call = natives.invoke(0x30CCCC4D88E654CA, 'int')
    return call
end

natives.streaming_requestPtfxAsset = function()

    local call = natives.invoke(0x001FF43843028E0C, 'void')
end

--- @return boolean
natives.streaming_hasPtfxAssetLoaded = function()

    local call = natives.invoke(0x13A3F30A9ED0BC31, 'bool')
    return call
end

natives.streaming_removePtfxAsset = function()

    local call = natives.invoke(0x042F9049EA419E86, 'void')
end

--- @param fxnamehash integer
natives.streaming_requestNamedPtfxAsset = function(fxnamehash)
    assert(type(fxnamehash) == 'integer', 'Argument fxnamehash must be of type integer.')

    local call = natives.invoke(0xF2B2353BBC0D4E8F, 'void', fxnamehash)
end

--- @param fxnamehash integer
--- @return boolean
natives.streaming_hasNamedPtfxAssetLoaded = function(fxnamehash)
    assert(type(fxnamehash) == 'integer', 'Argument fxnamehash must be of type integer.')

    local call = natives.invoke(0x65BB72F29138F5D6, 'bool', fxnamehash)
    return call
end

--- @param fxnamehash integer
natives.streaming_removeNamedPtfxAsset = function(fxnamehash)
    assert(type(fxnamehash) == 'integer', 'Argument fxnamehash must be of type integer.')

    local call = natives.invoke(0xF20866829E1C81A2, 'void', fxnamehash)
end

--- @param fbudgetmultiplier number
natives.streaming_setPopulationBudgetMultiplier = function(fbudgetmultiplier)
    assert(type(fbudgetmultiplier) == 'number', 'Argument fbudgetmultiplier must be of type number.')

    local call = natives.invoke(0x2F9AC754FE179D58, 'void', fbudgetmultiplier)
end

--- @return number
natives.streaming_getPopulationBudgetMultiplier = function()

    local call = natives.invoke(0x8A3945405B31048F, 'float')
    return call
end

--- @return any
natives.streaming_n0X071769Bcb24379E5 = function()

    local call = natives.invoke(0x071769BCB24379E5, 'any')
    return call
end

natives.streaming_clearFocus = function()

    local call = natives.invoke(0x86CCAF7CE493EFBE, 'void')
end

--- @param x number
--- @param y number
--- @param z number
--- @param offsetx number
--- @param offsety number
--- @param offsetz number
natives.streaming_setFocusPosAndVel = function(x, y, z, offsetx, offsety, offsetz)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(offsetx) == 'number', 'Argument offsetx must be of type number.')
    assert(type(offsety) == 'number', 'Argument offsety must be of type number.')
    assert(type(offsetz) == 'number', 'Argument offsetz must be of type number.')

    local call = natives.invoke(0x25F6EF88664540E2, 'void', x, y, z, offsetx, offsety, offsetz)
end

-- It seems to make the entity's coords mark the point from which LOD-distances are measured. In my testing, setting a vehicle as the focus entity and moving that vehicle more than 300 distance units away from the player will make the level of detail around the player go down drastically (shadows disappear, textures go extremely low res, etc). The player seems to be the default focus entity.
--- @param entity integer
natives.streaming_setFocusEntity = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x955AEDD58F4BD309, 'void', entity)
end

--- @param entity integer
--- @return boolean
natives.streaming_isEntityFocus = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xF87DE697E9A06EC6, 'bool', entity)
    return call
end

--- @param name string
--- @param toggle boolean
natives.streaming_setMapdatacullboxEnabled = function(name, toggle)
    assert(type(name) == 'string', 'Argument name must be of type string.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x3CACC83F6FED837C, 'void', name, toggle)
end

-- nullsub, doesn't do anything
--- @param p0 userdata
natives.streaming_setAllMapdataCulled = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x19ABCC581D28E6F9, 'void', p0)
end

--- @param p0 userdata
natives.streaming_n0Xf01D21Df39554115 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xF01D21DF39554115, 'void', p0)
end

--- @param posx number
--- @param posy number
--- @param posz number
--- @param offsetx number
--- @param offsety number
--- @param offsetz number
--- @param radius number
--- @param p7 integer
--- @return boolean
natives.streaming_loadSceneStart = function(posx, posy, posz, offsetx, offsety, offsetz, radius, p7)
    assert(type(posx) == 'number', 'Argument posx must be of type number.')
    assert(type(posy) == 'number', 'Argument posy must be of type number.')
    assert(type(posz) == 'number', 'Argument posz must be of type number.')
    assert(type(offsetx) == 'number', 'Argument offsetx must be of type number.')
    assert(type(offsety) == 'number', 'Argument offsety must be of type number.')
    assert(type(offsetz) == 'number', 'Argument offsetz must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(p7) == 'integer', 'Argument p7 must be of type integer.')

    local call = natives.invoke(0x387AD749E3B69B70, 'bool', posx, posy, posz, offsetx, offsety, offsetz, radius, p7)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param p4 userdata
--- @return boolean
natives.streaming_loadSceneStartSphere = function(x, y, z, radius, p4)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x513F8AA5BF2F17CF, 'bool', x, y, z, radius, p4)
    return call
end

natives.streaming_loadSceneStop = function()

    local call = natives.invoke(0x5A8B01199C3E79C3, 'void')
end

--- @return boolean
natives.streaming_isLoadSceneActive = function()

    local call = natives.invoke(0xCF45DF50C7775F2A, 'bool')
    return call
end

--- @return boolean
natives.streaming_isLoadSceneLoaded = function()

    local call = natives.invoke(0x0909F71B5C070797, 'bool')
    return call
end

--- @return boolean
natives.streaming_isRenderedSceneLoaded = function()

    local call = natives.invoke(0x45BF3A6239A576B7, 'bool')
    return call
end

--- @return boolean
natives.streaming_isPlayerSwitchInProgress = function()

    local call = natives.invoke(0xED20CB1F5297791D, 'bool')
    return call
end

natives.streaming_setSceneStreamingTracksCamPosThisFrame = function()

    local call = natives.invoke(0xA03A6812529AD9C8, 'void')
end

--- @param iplname1 string
--- @param iplname2 string
natives.streaming_iplGroupSwapStart = function(iplname1, iplname2)
    assert(type(iplname1) == 'string', 'Argument iplname1 must be of type string.')
    assert(type(iplname2) == 'string', 'Argument iplname2 must be of type string.')

    local call = natives.invoke(0x20D504994FDC4412, 'void', iplname1, iplname2)
end

natives.streaming_iplGroupSwapCancel = function()

    local call = natives.invoke(0x31108BB5715D035F, 'void')
end

--- @return boolean
natives.streaming_iplGroupSwapIsReady = function()

    local call = natives.invoke(0xC2C05DEFE85A0B64, 'bool')
    return call
end

natives.streaming_iplGroupSwapFinish = function()

    local call = natives.invoke(0x040EE319EFD1D3B5, 'void')
end

--- @return boolean
natives.streaming_iplGroupSwapIsActive = function()

    local call = natives.invoke(0xFC464598F6EE97B0, 'bool')
    return call
end

--- @param srl string
natives.streaming_prefetchSrl = function(srl)
    assert(type(srl) == 'string', 'Argument srl must be of type string.')

    local call = natives.invoke(0x354837E5A5BAA5AF, 'void', srl)
end

natives.streaming_n0Xae00387E53B1E9Fc = function()

    local call = natives.invoke(0xAE00387E53B1E9FC, 'void')
end

natives.streaming_n0Xef1A8A484118735E = function()

    local call = natives.invoke(0xEF1A8A484118735E, 'void')
end

natives.streaming_n0Xd9F2Ff4Af394D926 = function()

    local call = natives.invoke(0xD9F2FF4AF394D926, 'void')
end

--- @return boolean
natives.streaming_isSrlLoaded = function()

    local call = natives.invoke(0x5C2C88512CF6DAFB, 'bool')
    return call
end

natives.streaming_beginSrl = function()

    local call = natives.invoke(0x0360710033BE60D9, 'void')
end

natives.streaming_endSrl = function()

    local call = natives.invoke(0x1CE71FB33CA079FE, 'void')
end

--- @param p0 number
natives.streaming_setSrlTime = function(p0)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')

    local call = natives.invoke(0x18231AEF458BCFF2, 'void', p0)
end

--- @param p0 integer
--- @param p1 integer
--- @param p2 integer
--- @param p3 integer
natives.streaming_setSrlReadaheadTimes = function(p0, p1, p2, p3)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')

    local call = natives.invoke(0xD346248C1DCE0D76, 'void', p0, p1, p2, p3)
end

--- @param p0 boolean
natives.streaming_setSrlLongJumpMode = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x7C907E8A725E5FD2, 'void', p0)
end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
natives.streaming_setHdArea = function(x, y, z, radius)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')

    local call = natives.invoke(0xB88B905AFA35CB4D, 'void', x, y, z, radius)
end

natives.streaming_clearHdArea = function()

    local call = natives.invoke(0xD83B22434E52728D, 'void')
end

natives.streaming_n0X09Fbf15D73Efc900 = function()

    local call = natives.invoke(0x09FBF15D73EFC900, 'void')
end

--- @param p0 userdata
natives.streaming_n0Xf11D7Cb962Fcd747 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xF11D7CB962FCD747, 'void', p0)
end

-- Sorts some unknown data.
-- 
-- Likely SORT_*
natives.streaming_n0Xb9B9E47Edb9D63Db = function()

    local call = natives.invoke(0xB9B9E47EDB9D63DB, 'void')
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.streaming_n0Xbe8Daa9D8D01Da6A = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xBE8DAA9D8D01DA6A, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @return any
natives.streaming_n0X53764309C4618087 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x53764309C4618087, 'any', p0)
    return call
end

-- _SET_E* or _SET_F*
--- @param p0 integer
natives.streaming_n0X032A14D082A9B269 = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x032A14D082A9B269, 'void', p0)
end

--- @param p0 userdata
natives.streaming_n0Xafa87A7D41Ee346A = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xAFA87A7D41EE346A, 'void', p0)
end

natives.streaming_n0X6A6E79Fbe8678C98 = function()

    local call = natives.invoke(0x6A6E79FBE8678C98, 'void')
end

--- @param p0 userdata
natives.streaming_n0Xcc61D8D6C19D9F14 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xCC61D8D6C19D9F14, 'void', p0)
end

--- @return any
natives.streaming_n0Xda7Fdeff4De86839 = function()

    local call = natives.invoke(0xDA7FDEFF4DE86839, 'any')
    return call
end

--- @return any
natives.streaming_n0X5D5E2102B174B8D2 = function()

    local call = natives.invoke(0x5D5E2102B174B8D2, 'any')
    return call
end

--- @return any
natives.streaming_n0X7B8C2B846C05E5Ad = function()

    local call = natives.invoke(0x7B8C2B846C05E5AD, 'any')
    return call
end

natives.streaming_n0X62D5F0588915B277 = function()

    local call = natives.invoke(0x62D5F0588915B277, 'void')
end

--- @return any
natives.streaming_n0X2F4D53023F826Ff0 = function()

    local call = natives.invoke(0x2F4D53023F826FF0, 'any')
    return call
end

--- @return any
natives.streaming_n0Xdabfe48Ba0D457Aa = function()

    local call = natives.invoke(0xDABFE48BA0D457AA, 'any')
    return call
end

--- @return any
natives.streaming_n0Xe5B76E5B56Cd77Dd = function()

    local call = natives.invoke(0xE5B76E5B56CD77DD, 'any')
    return call
end

--- @return any
natives.streaming_n0X27Af48C62B281341 = function()

    local call = natives.invoke(0x27AF48C62B281341, 'any')
    return call
end

--- @return any
natives.streaming_n0X99F92061Efe908Ba = function()

    local call = natives.invoke(0x99F92061EFE908BA, 'any')
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.streaming_n0X05Dd384F39De1C8C = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x05DD384F39DE1C8C, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.streaming_n0X198B85Cc3C7A4593 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x198B85CC3C7A4593, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @return any
natives.streaming_n0X2A6D1Daab9Ebb262 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x2A6D1DAAB9EBB262, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.streaming_n0X07559B29950301Ff = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x07559B29950301FF, 'void', p0, p1)
end

--- @param p0 userdata
--- @return any
natives.streaming_n0Xd6E39Dc5D46Df4Ab = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xD6E39DC5D46DF4AB, 'any', p0)
    return call
end

--- @param p0 userdata
--- @return any
natives.streaming_n0X8D56Bda343D9519F = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x8D56BDA343D9519F, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.streaming_n0Xd840C130D7Aacfa5 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xD840C130D7AACFA5, 'void', p0, p1, p2)
end

--- @param p0 userdata
natives.streaming_n0X2E24C27B112B5B12 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x2E24C27B112B5B12, 'void', p0)
end

--- @param toggle boolean
natives.streaming_setGuarmaWorldhorizonActive = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x74E2261D2A66849A, 'void', toggle)
end

-- This tasks the ped to do nothing for the specified amount of milliseconds.
-- This is useful if you want to add a delay between tasks when using a sequence task.
--- @param ped integer
--- @param ms integer
natives.task_taskPause = function(ped, ms)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(ms) == 'integer', 'Argument ms must be of type integer.')

    local call = natives.invoke(0xE73A266DB0CA9042, 'void', ped, ms)
end

-- Makes the specified ped stand still for (time) milliseconds.
--- @param ped integer
--- @param time integer
natives.task_taskStandStill = function(ped, time)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(time) == 'integer', 'Argument time must be of type integer.')

    local call = natives.invoke(0x919BE13EED931959, 'void', ped, time)
end

--- @param ped integer
--- @param unused boolean
natives.task_taskJump = function(ped, unused)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(unused) == 'boolean', 'Argument unused must be of type boolean.')

    local call = natives.invoke(0x0AE4086104E067B1, 'void', ped, unused)
end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param entity integer
natives.task_taskJump2 = function(ped, x, y, z, entity)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x91083103137D7254, 'void', ped, x, y, z, entity)
end

--- @param ped integer
--- @param duration integer
--- @param pedtocowerfrom integer
--- @param p3 string
natives.task_taskCower = function(ped, duration, pedtocowerfrom, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')
    assert(type(pedtocowerfrom) == 'integer', 'Argument pedtocowerfrom must be of type integer.')
    assert(type(p3) == 'string', 'Argument p3 must be of type string.')

    local call = natives.invoke(0x3EB1FE9E8E908E15, 'void', ped, duration, pedtocowerfrom, p3)
end

-- flags: 0 = HANDS_UP_NOTHING; 1 = HANDS_UP_STRAIGHT_TO_LOOP
--- @param ped integer
--- @param duration integer
--- @param facingped integer
--- @param timetofaceped integer
--- @param flags integer
natives.task_taskHandsUp = function(ped, duration, facingped, timetofaceped, flags)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')
    assert(type(facingped) == 'integer', 'Argument facingped must be of type integer.')
    assert(type(timetofaceped) == 'integer', 'Argument timetofaceped must be of type integer.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')

    local call = natives.invoke(0xF2EAB31979A7F910, 'void', ped, duration, facingped, timetofaceped, flags)
end

--- @param ped integer
--- @param p1 number
--- @param permanently boolean
natives.task_taskKnockedOut = function(ped, p1, permanently)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(permanently) == 'boolean', 'Argument permanently must be of type boolean.')

    local call = natives.invoke(0xF90427F00A495A28, 'void', ped, p1, permanently)
end

--- @param ped integer
--- @param p1 number
--- @param p2 integer
natives.task_taskKnockedOutAndHogtied = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x42AC6401ABB8C7E5, 'void', ped, p1, p2)
end

--- @param ped integer
--- @param p1 number
natives.task_n0Xffb520A3E16F7B7B = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0xFFB520A3E16F7B7B, 'void', ped, p1)
end

--- @param ped integer
--- @param p1 number
natives.task_n0X8B1Fdf63C3193Eda = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x8B1FDF63C3193EDA, 'void', ped, p1)
end

--- @param ped integer
--- @param duration integer
natives.task_updateTaskHandsUpDuration = function(ped, duration)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')

    local call = natives.invoke(0xA98FCAFD7893C834, 'void', ped, duration)
end

--- @param ped integer
--- @param p1 integer
natives.task_n0X28Ef780Bdea8A639 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x28EF780BDEA8A639, 'void', ped, p1)
end

--- @param ped integer
--- @param p1 integer
natives.task_taskDuck = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xA14B5FBF986BAC23, 'void', ped, p1)
end

--- @param ped integer
--- @param vehicle integer
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
natives.task_taskBoardVehicle = function(ped, vehicle, p2, p3, p4, p5)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0xE53D17AD837CBF7C, 'void', ped, vehicle, p2, p3, p4, p5)
end

--- @param p0 userdata
--- @param vehicle integer
--- @param p2 integer
--- @param p3 userdata
--- @param p4 number
--- @param p5 userdata
natives.task_taskDisembarkVehicle = function(p0, vehicle, p2, p3, p4, p5)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0xA7C6854BB5A4192A, 'void', p0, vehicle, p2, p3, p4, p5)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 number
--- @param flags integer
natives.task_taskBoardVehicle2 = function(ped, p1, p2, p3, flags)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')

    local call = natives.invoke(0xE41A09C8DDFF7AA4, 'void', ped, p1, p2, p3, flags)
end

-- flags: See TASK_ENTER_VEHICLE
--- @param ped integer
--- @param p1 number
--- @param flags integer
natives.task_taskDisembarkNearestTrainCarriage = function(ped, p1, flags)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')

    local call = natives.invoke(0x0A11F3BDEC03ED5F, 'void', ped, p1, flags)
end

-- flags: https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eEnterExitVehicleFlags
--- @param ped integer
--- @param vehicle integer
--- @param timeout integer
--- @param seat integer
--- @param speed number
--- @param flag integer
--- @param p6 userdata
natives.task_taskEnterVehicle = function(ped, vehicle, timeout, seat, speed, flag, p6)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(timeout) == 'integer', 'Argument timeout must be of type integer.')
    assert(type(seat) == 'integer', 'Argument seat must be of type integer.')
    assert(type(speed) == 'number', 'Argument speed must be of type number.')
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0xC20E50AA46D09CA8, 'void', ped, vehicle, timeout, seat, speed, flag, p6)
end

-- flags: See TASK_ENTER_VEHICLE
--- @param ped integer
--- @param vehicle integer
--- @param flags integer
--- @param unkped integer
natives.task_taskLeaveVehicle = function(ped, vehicle, flags, unkped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')
    assert(type(unkped) == 'integer', 'Argument unkped must be of type integer.')

    local call = natives.invoke(0xD3DBCE61A490BE02, 'void', ped, vehicle, flags, unkped)
end

-- timer: in ms, if it reaches 0 it will auto warp the ped on the horse
-- mountStyle: See TASK_ENTER_VEHICLE
-- Flags will still apply to mountStyle
--- @param ped integer
--- @param mount integer
--- @param timer integer
--- @param seatindex integer
--- @param pedspeed number
--- @param mountstyle integer
--- @param p6 userdata
--- @param p7 userdata
natives.task_taskMountAnimal = function(ped, mount, timer, seatindex, pedspeed, mountstyle, p6, p7)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(mount) == 'integer', 'Argument mount must be of type integer.')
    assert(type(timer) == 'integer', 'Argument timer must be of type integer.')
    assert(type(seatindex) == 'integer', 'Argument seatindex must be of type integer.')
    assert(type(pedspeed) == 'number', 'Argument pedspeed must be of type number.')
    assert(type(mountstyle) == 'integer', 'Argument mountstyle must be of type integer.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')

    local call = natives.invoke(0x92DB0739813C5186, 'void', ped, mount, timer, seatindex, pedspeed, mountstyle, p6, p7)
end

-- Dismounts the ped from the animal it's mounted on. taskFlag affects what side the rider gets off. p2-p5 are almost always 0.
-- flags: See TASK_ENTER_VEHICLE
--- @param rider integer
--- @param taskflag integer
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param targetped integer
natives.task_taskDismountAnimal = function(rider, taskflag, p2, p3, p4, targetped)
    assert(type(rider) == 'integer', 'Argument rider must be of type integer.')
    assert(type(taskflag) == 'integer', 'Argument taskflag must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(targetped) == 'integer', 'Argument targetped must be of type integer.')

    local call = natives.invoke(0x48E92D3DDE23C23A, 'void', rider, taskflag, p2, p3, p4, targetped)
end

--- @param ped integer
--- @param scenariopoint integer
--- @param flag integer
natives.task_taskHitchAnimal = function(ped, scenariopoint, flag)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(scenariopoint) == 'integer', 'Argument scenariopoint must be of type integer.')
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')

    local call = natives.invoke(0x9030AD4B6207BFE8, 'void', ped, scenariopoint, flag)
end

--- @param p0 userdata
natives.task_n0Xe05A5D39Be6E93Af = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xE05A5D39BE6E93AF, 'void', p0)
end

-- stopRange: how close vehicle will get to destination before stopping, default 4.0
-- straightLineDist: distance at which AI switches to heading for target directly instead of following nodes, default -1
--- @param ped integer
--- @param vehicle integer
--- @param x number
--- @param y number
--- @param z number
--- @param speed number
--- @param style userdata
--- @param vehiclemodel integer
--- @param drivingmode integer
--- @param stoprange number
--- @param straightlinedist number
natives.task_taskVehicleDriveToCoord = function(ped, vehicle, x, y, z, speed, style, vehiclemodel, drivingmode, stoprange, straightlinedist)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(speed) == 'number', 'Argument speed must be of type number.')
    assert(type(style) == 'userdata', 'Argument style must be of type userdata.')
    assert(type(vehiclemodel) == 'integer', 'Argument vehiclemodel must be of type integer.')
    assert(type(drivingmode) == 'integer', 'Argument drivingmode must be of type integer.')
    assert(type(stoprange) == 'number', 'Argument stoprange must be of type number.')
    assert(type(straightlinedist) == 'number', 'Argument straightlinedist must be of type number.')

    local call = natives.invoke(0xE2A2AA2F659D77A7, 'void', ped, vehicle, x, y, z, speed, style, vehiclemodel, drivingmode, stoprange, straightlinedist)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
natives.task_taskVehicleDriveToCoord2 = function(ped, p1, p2, p3, p4, p5, p6, p7, p8)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')

    local call = natives.invoke(0xF0108F01FB105DA2, 'void', ped, p1, p2, p3, p4, p5, p6, p7, p8)
end

--- @param ped integer
--- @param vehicle integer
--- @param speed number
--- @param drivingstyle integer
natives.task_taskVehicleDriveWander = function(ped, vehicle, speed, drivingstyle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(speed) == 'number', 'Argument speed must be of type number.')
    assert(type(drivingstyle) == 'integer', 'Argument drivingstyle must be of type integer.')

    local call = natives.invoke(0x480142959D337D00, 'void', ped, vehicle, speed, drivingstyle)
end

--- @param ped integer
--- @param entity integer
--- @param offsetx number
--- @param offsety number
--- @param offsetz number
--- @param movementspeed number
--- @param timeout integer
--- @param stoppingrange number
--- @param persistfollowing boolean
--- @param p9 boolean
--- @param walkonly boolean
--- @param p11 boolean
--- @param p12 boolean
--- @param p13 boolean
natives.task_taskFollowToOffsetOfEntity = function(ped, entity, offsetx, offsety, offsetz, movementspeed, timeout, stoppingrange, persistfollowing, p9, walkonly, p11, p12, p13)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(offsetx) == 'number', 'Argument offsetx must be of type number.')
    assert(type(offsety) == 'number', 'Argument offsety must be of type number.')
    assert(type(offsetz) == 'number', 'Argument offsetz must be of type number.')
    assert(type(movementspeed) == 'number', 'Argument movementspeed must be of type number.')
    assert(type(timeout) == 'integer', 'Argument timeout must be of type integer.')
    assert(type(stoppingrange) == 'number', 'Argument stoppingrange must be of type number.')
    assert(type(persistfollowing) == 'boolean', 'Argument persistfollowing must be of type boolean.')
    assert(type(p9) == 'boolean', 'Argument p9 must be of type boolean.')
    assert(type(walkonly) == 'boolean', 'Argument walkonly must be of type boolean.')
    assert(type(p11) == 'boolean', 'Argument p11 must be of type boolean.')
    assert(type(p12) == 'boolean', 'Argument p12 must be of type boolean.')
    assert(type(p13) == 'boolean', 'Argument p13 must be of type boolean.')

    local call = natives.invoke(0x304AE42E357B8C7E, 'void', ped, entity, offsetx, offsety, offsetz, movementspeed, timeout, stoppingrange, persistfollowing, p9, walkonly, p11, p12, p13)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
--- @param p9 userdata
--- @param p10 userdata
--- @param p11 userdata
--- @param p12 userdata
--- @param p13 userdata
--- @param p14 userdata
natives.task_taskFollowToOffsetOfCoord = function(ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')
    assert(type(p10) == 'userdata', 'Argument p10 must be of type userdata.')
    assert(type(p11) == 'userdata', 'Argument p11 must be of type userdata.')
    assert(type(p12) == 'userdata', 'Argument p12 must be of type userdata.')
    assert(type(p13) == 'userdata', 'Argument p13 must be of type userdata.')
    assert(type(p14) == 'userdata', 'Argument p14 must be of type userdata.')

    local call = natives.invoke(0x2E3676282C18A692, 'void', ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
natives.task_n0X3Ffcd7Bba074Cc80 = function(ped, p1, p2, p3, p4, p5, p6, p7, p8)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')

    local call = natives.invoke(0x3FFCD7BBA074CC80, 'void', ped, p1, p2, p3, p4, p5, p6, p7, p8)
end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param moveblendspeedy number
--- @param p5 integer
--- @param p6 number
--- @param p7 number
--- @param p8 integer
natives.task_taskGoStraightToCoord = function(ped, x, y, z, moveblendspeedy, p5, p6, p7, p8)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(moveblendspeedy) == 'number', 'Argument moveblendspeedy must be of type number.')
    assert(type(p5) == 'integer', 'Argument p5 must be of type integer.')
    assert(type(p6) == 'number', 'Argument p6 must be of type number.')
    assert(type(p7) == 'number', 'Argument p7 must be of type number.')
    assert(type(p8) == 'integer', 'Argument p8 must be of type integer.')

    local call = natives.invoke(0xD76B57B44F1E6F8B, 'void', ped, x, y, z, moveblendspeedy, p5, p6, p7, p8)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
natives.task_taskGoStraightToCoordRelativeToEntity = function(ped, p1, p2, p3, p4, p5, p6, p7)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')

    local call = natives.invoke(0x61E360B7E040D12E, 'void', ped, p1, p2, p3, p4, p5, p6, p7)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.task_taskMoveInTraffic = function(ped, p1, p2, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x8AA1593AEC087A29, 'void', ped, p1, p2, p3)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
natives.task_taskMoveInTrafficToDestination = function(ped, p1, p2, p3, p4, p5, p6, p7)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')

    local call = natives.invoke(0xDCA3A13F7A45338B, 'void', ped, p1, p2, p3, p4, p5, p6, p7)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.task_taskMoveInTrafficAwayFromEntity = function(ped, p1, p2, p3, p4)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x13DED0BC45600FE1, 'void', ped, p1, p2, p3, p4)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0Xbaab791Aa72C2821 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xBAAB791AA72C2821, 'void', p0, p1)
end

-- Params: moveBlendRatio commonly 1.25f, p5 is always 0 in R* Scripts
--- @param ped integer
--- @param moveblendratio number
--- @param x number
--- @param y number
--- @param z number
--- @param p5 userdata
natives.task_taskMoveFollowRoadUsingNavmesh = function(ped, moveblendratio, x, y, z, p5)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(moveblendratio) == 'number', 'Argument moveblendratio must be of type number.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0x79482C12482A860D, 'void', ped, moveblendratio, x, y, z, p5)
end

-- Makes the specified ped achieve the specified heading.
-- 
-- pedHandle: The handle of the ped to assign the task to.
-- heading: The desired heading.
-- timeout: The time, in milliseconds, to allow the task to complete. If the task times out, it is canceled, and the ped will stay at the heading it managed to reach in the time.
--- @param ped integer
--- @param heading number
--- @param timeout integer
natives.task_taskAchieveHeading = function(ped, heading, timeout)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(heading) == 'number', 'Argument heading must be of type number.')
    assert(type(timeout) == 'integer', 'Argument timeout must be of type integer.')

    local call = natives.invoke(0x93B93A37987F1F3D, 'void', ped, heading, timeout)
end

-- Clears the current point route. Call this before TASK_EXTEND_ROUTE and TASK_FOLLOW_POINT_ROUTE.
natives.task_taskFlushRoute = function()

    local call = natives.invoke(0x841142A1376E9006, 'void')
end

-- Adds a new point to the current point route. Call TASK_FLUSH_ROUTE before the first call to this. Call TASK_FOLLOW_POINT_ROUTE to make the Ped go the route.
-- 
-- A maximum of 8 points can be added.
--- @param x number
--- @param y number
--- @param z number
natives.task_taskExtendRoute = function(x, y, z)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0x1E7889778264843A, 'void', x, y, z)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
natives.task_taskFollowPointRoute = function(ped, p1, p2, p3, p4, p5)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0x0E14C5550DC3CD1D, 'void', ped, p1, p2, p3, p4, p5)
end

-- flags:
-- MOVE_WHILST_WAITING_FOR_PATH = (1 << 0),
-- DO_NOT_STAND_STILL_AT_END_OF_PATH = (1 << 1),
-- SKIP_NAVIGATION = (1 << 2),
-- TEASF_AUTO_START_ANIM_SCENE = (1 << 3),
-- FORCE_STAND_STILL_AT_END_OF_PATH = (1 << 6),
-- ENTER_ANIM_SCENE_DONT_FOLLOW_NAVMESH = (1 << 7)
--- @param ped integer
--- @param animscene integer
--- @param entityname string
--- @param playbacklistname string
--- @param enterspeed number
--- @param bautostart boolean
--- @param flag integer
--- @param p7 integer
--- @param p8 number
natives.task_taskEnterAnimScene = function(ped, animscene, entityname, playbacklistname, enterspeed, bautostart, flag, p7, p8)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(animscene) == 'integer', 'Argument animscene must be of type integer.')
    assert(type(entityname) == 'string', 'Argument entityname must be of type string.')
    assert(type(playbacklistname) == 'string', 'Argument playbacklistname must be of type string.')
    assert(type(enterspeed) == 'number', 'Argument enterspeed must be of type number.')
    assert(type(bautostart) == 'boolean', 'Argument bautostart must be of type boolean.')
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')
    assert(type(p7) == 'integer', 'Argument p7 must be of type integer.')
    assert(type(p8) == 'number', 'Argument p8 must be of type number.')

    local call = natives.invoke(0xC2329B0206426644, 'void', ped, animscene, entityname, playbacklistname, enterspeed, bautostart, flag, p7, p8)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
natives.task_taskMoveBeInFormation = function(ped, p1, p2, p3, p4, p5, p6)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0x4AA5AA97C65E4A2F, 'void', ped, p1, p2, p3, p4, p5, p6)
end

--- @param ped integer
--- @param target integer
--- @param duration integer
--- @param distance number
--- @param speed number
--- @param p5 number
--- @param p6 integer
natives.task_taskGoToEntity = function(ped, target, duration, distance, speed, p5, p6)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(target) == 'integer', 'Argument target must be of type integer.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')
    assert(type(distance) == 'number', 'Argument distance must be of type number.')
    assert(type(speed) == 'number', 'Argument speed must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'integer', 'Argument p6 must be of type integer.')

    local call = natives.invoke(0x6A071245EB0D1882, 'void', ped, target, duration, distance, speed, p5, p6)
end

--- @param ped integer
--- @param targetped integer
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 number
--- @param p5 number
--- @param p6 integer
--- @param p7 userdata
--- @param p8 userdata
--- @param p9 number
--- @param p10 number
natives.task_taskFollowAndConverseWithPed = function(ped, targetped, p2, p3, p4, p5, p6, p7, p8, p9, p10)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(targetped) == 'integer', 'Argument targetped must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'integer', 'Argument p6 must be of type integer.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'number', 'Argument p9 must be of type number.')
    assert(type(p10) == 'number', 'Argument p10 must be of type number.')

    local call = natives.invoke(0x489FFCCCE7392B55, 'void', ped, targetped, p2, p3, p4, p5, p6, p7, p8, p9, p10)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0Xa052608A12559Bbb = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xA052608A12559BBB, 'void', p0, p1)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.task_taskWanderAndConverseWithPed = function(ped, p1, p2, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x8AC76D1408731732, 'void', ped, p1, p2, p3)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
natives.task_taskLeadAndConverse = function(ped, p1, p2, p3, p4, p5, p6, p7, p8)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')

    local call = natives.invoke(0xAA19711D33C6708C, 'void', ped, p1, p2, p3, p4, p5, p6, p7, p8)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
natives.task_n0Xde0C8B145Ea466Ff = function(p0, p1, p2, p3, p4, p5)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0xDE0C8B145EA466FF, 'void', p0, p1, p2, p3, p4, p5)
end

--- @param ped integer
--- @param entity integer
--- @param p2 number
--- @param p3 number
--- @param p4 number
natives.task_taskSeekClearLosToEntity = function(ped, entity, p2, p3, p4)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')

    local call = natives.invoke(0x8D7F2A63688C20A4, 'void', ped, entity, p2, p3, p4)
end

-- enum eWhistleType
-- {
-- 	WHISTLE_MAIN,
-- 	WHISTLE_SECONDARY,
-- 	WHISTLE_DOUBLE,
-- 	WHISTLE_URGENT,
-- 	WHISTLE_LONG
-- };
--- @param ped integer
--- @param p1 integer
--- @param whistletype integer
natives.task_taskGoToWhistle = function(ped, p1, whistletype)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(whistletype) == 'integer', 'Argument whistletype must be of type integer.')

    local call = natives.invoke(0xBAD6545608CECA6E, 'void', ped, p1, whistletype)
end

--- @param p0 userdata
--- @return any
natives.task_n0Xeb67D4E056C85A81 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xEB67D4E056C85A81, 'any', p0)
    return call
end

--- @param p0 userdata
--- @return any
natives.task_n0X78D8C1D4Eb80C588 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x78D8C1D4EB80C588, 'any', p0)
    return call
end

--- @param ped integer
--- @param horse integer
natives.task_taskLeadHorse = function(ped, horse)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(horse) == 'integer', 'Argument horse must be of type integer.')

    local call = natives.invoke(0x9A7A4A54596FE09D, 'void', ped, horse)
end

--- @param ped integer
natives.task_taskStopLeadingHorse = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xED27560703F37258, 'void', ped)
end

-- fleeType: see TASK_FLEE_COORD
--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
--- @param p9 userdata
--- @param p10 userdata
--- @param p11 userdata
natives.task_taskFleeFromCoord = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')
    assert(type(p10) == 'userdata', 'Argument p10 must be of type userdata.')
    assert(type(p11) == 'userdata', 'Argument p11 must be of type userdata.')

    local call = natives.invoke(0x6879FF208ED87F2A, 'void', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11)
end

-- fleeType: see TASK_FLEE_COORD
--- @param ped integer
--- @param fleefromtarget integer
--- @param x number
--- @param y number
--- @param z number
--- @param distance number
--- @param p6 integer
--- @param p7 integer
--- @param p8 number
--- @param targetped integer
natives.task_taskFleeFromPed = function(ped, fleefromtarget, x, y, z, distance, p6, p7, p8, targetped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(fleefromtarget) == 'integer', 'Argument fleefromtarget must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(distance) == 'number', 'Argument distance must be of type number.')
    assert(type(p6) == 'integer', 'Argument p6 must be of type integer.')
    assert(type(p7) == 'integer', 'Argument p7 must be of type integer.')
    assert(type(p8) == 'number', 'Argument p8 must be of type number.')
    assert(type(targetped) == 'integer', 'Argument targetped must be of type integer.')

    local call = natives.invoke(0x7B74D8EEDE9B5727, 'void', ped, fleefromtarget, x, y, z, distance, p6, p7, p8, targetped)
end

-- Makes the specified ped flee the specified distance from the specified position.
-- fleeType: see TASK_FLEE_COORD
--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param distance number
--- @param time integer
--- @param fleetype integer
--- @param fleespeed number
natives.task_taskSmartFleeCoord = function(ped, x, y, z, distance, time, fleetype, fleespeed)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(distance) == 'number', 'Argument distance must be of type number.')
    assert(type(time) == 'integer', 'Argument time must be of type integer.')
    assert(type(fleetype) == 'integer', 'Argument fleetype must be of type integer.')
    assert(type(fleespeed) == 'number', 'Argument fleespeed must be of type number.')

    local call = natives.invoke(0x94587F17E9C365D5, 'void', ped, x, y, z, distance, time, fleetype, fleespeed)
end

-- Makes a ped run away from another ped (fleeFromTarget)
-- 
-- fleeDistance = ped will flee this distance
-- fleeTime = ped will flee for this amount of time, set to "-1" to flee forever
-- fleeType = see TASK_FLEE_COORD, can be 0, R* Scripts: fm_mission/race_controller: 66048; fme_escaped_convicts: 2260992, 2523136, 2359296; la_alligator/fox: 2097152; net_fetch: 17301536; net_stable_mount: 540928
-- fleeSpeed = mostly 3f, rarely 1f in R* Scripts
--- @param ped integer
--- @param fleefromtarget integer
--- @param fleedistance number
--- @param fleetime integer
--- @param fleetype integer
--- @param fleespeed number
--- @param targetped integer
natives.task_taskSmartFleePed = function(ped, fleefromtarget, fleedistance, fleetime, fleetype, fleespeed, targetped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(fleefromtarget) == 'integer', 'Argument fleefromtarget must be of type integer.')
    assert(type(fleedistance) == 'number', 'Argument fleedistance must be of type number.')
    assert(type(fleetime) == 'integer', 'Argument fleetime must be of type integer.')
    assert(type(fleetype) == 'integer', 'Argument fleetype must be of type integer.')
    assert(type(fleespeed) == 'number', 'Argument fleespeed must be of type number.')
    assert(type(targetped) == 'integer', 'Argument targetped must be of type integer.')

    local call = natives.invoke(0x22B0D0E37CCB840D, 'void', ped, fleefromtarget, fleedistance, fleetime, fleetype, fleespeed, targetped)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
natives.task_n0X673A8779D229Ba5A = function(p0, p1, p2, p3, p4, p5)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0x673A8779D229BA5A, 'void', p0, p1, p2, p3, p4, p5)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.task_n0X2E1D6D87346Bb7D2 = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x2E1D6D87346BB7D2, 'void', p0, p1, p2, p3)
end

-- Params: p5 = some flag?, p6 = -1.0f, p8 = 0 in R* Scripts
-- fleeStyle: https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eFleeStyle
--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param fleestyle integer
--- @param p5 integer
--- @param p6 number
--- @param duration integer
--- @param p8 integer
natives.task_taskFleeCoord = function(ped, x, y, z, fleestyle, p5, p6, duration, p8)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(fleestyle) == 'integer', 'Argument fleestyle must be of type integer.')
    assert(type(p5) == 'integer', 'Argument p5 must be of type integer.')
    assert(type(p6) == 'number', 'Argument p6 must be of type number.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')
    assert(type(p8) == 'integer', 'Argument p8 must be of type integer.')

    local call = natives.invoke(0x58428248BF4B64E4, 'void', ped, x, y, z, fleestyle, p5, p6, duration, p8)
end

-- Params: p4 = -1.0f, p5 = -1, p6 = 0 in R* Scripts
-- fleeStyle: see TASK_FLEE_COORD
--- @param ped integer
--- @param fleefromtarget integer
--- @param fleestyle integer
--- @param flag integer
--- @param p4 number
--- @param p5 integer
--- @param p6 integer
natives.task_taskFleePed = function(ped, fleefromtarget, fleestyle, flag, p4, p5, p6)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(fleefromtarget) == 'integer', 'Argument fleefromtarget must be of type integer.')
    assert(type(fleestyle) == 'integer', 'Argument fleestyle must be of type integer.')
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'integer', 'Argument p5 must be of type integer.')
    assert(type(p6) == 'integer', 'Argument p6 must be of type integer.')

    local call = natives.invoke(0xFD45175A6DFD7CE9, 'void', ped, fleefromtarget, fleestyle, flag, p4, p5, p6)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
--- @param p9 userdata
--- @param p10 userdata
--- @param p11 userdata
natives.task_taskFleeCoordVia = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')
    assert(type(p10) == 'userdata', 'Argument p10 must be of type userdata.')
    assert(type(p11) == 'userdata', 'Argument p11 must be of type userdata.')

    local call = natives.invoke(0x390E0B697D25EAF5, 'void', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
--- @param p9 userdata
natives.task_taskFleePedVia = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')

    local call = natives.invoke(0x5802E0F910E4CF1D, 'void', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)
end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param p4 number
natives.task_addFleeTargetCoords = function(ped, x, y, z, p4)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')

    local call = natives.invoke(0xE8F1A5B4CED3725A, 'void', ped, x, y, z, p4)
end

-- Params: p2 is always -1.f in R* Scripts
--- @param ped integer
--- @param targetped integer
--- @param p2 number
natives.task_addFleeTargetPed = function(ped, targetped, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(targetped) == 'integer', 'Argument targetped must be of type integer.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')

    local call = natives.invoke(0x3923EC958249657D, 'void', ped, targetped, p2)
end

--- @param p0 userdata
natives.task_n0Xa42Dc7919159Cccf = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xA42DC7919159CCCF, 'void', p0)
end

--- @param ped integer
--- @param fleefromtarget integer
natives.task_taskFlyAway = function(ped, fleefromtarget)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(fleefromtarget) == 'integer', 'Argument fleefromtarget must be of type integer.')

    local call = natives.invoke(0xE86A537B5A3C297C, 'void', ped, fleefromtarget)
end

--- @param ped integer
--- @param travelmbr number
--- @param x number
--- @param y number
--- @param z number
--- @param p5 boolean
--- @param p6 boolean
natives.task_taskFlyToCoord = function(ped, travelmbr, x, y, z, p5, p6)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(travelmbr) == 'number', 'Argument travelmbr must be of type number.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')

    local call = natives.invoke(0xD6CFC2D59DA72042, 'void', ped, travelmbr, x, y, z, p5, p6)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
natives.task_taskFlyingCircle = function(ped, p1, p2, p3, p4, p5, p6)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0x72997893BFB8ECCC, 'void', ped, p1, p2, p3, p4, p5, p6)
end

--- @param ped integer
--- @param entity integer
natives.task_taskWalkAway = function(ped, entity)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x04ACFAC71E6858F9, 'void', ped, entity)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
natives.task_taskShockingEventReact = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x452419CBD838065B, 'void', ped, p1, p2)
end

-- Makes a ped react to an entity.
-- Params: reactingTo Entity can be 0, p8 is always 4
--- @param ped integer
--- @param reactingto integer
--- @param x number
--- @param y number
--- @param z number
--- @param reactionname string
--- @param p6 number
--- @param p7 number
--- @param p8 integer
natives.task_taskReact = function(ped, reactingto, x, y, z, reactionname, p6, p7, p8)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(reactingto) == 'integer', 'Argument reactingto must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(reactionname) == 'string', 'Argument reactionname must be of type string.')
    assert(type(p6) == 'number', 'Argument p6 must be of type number.')
    assert(type(p7) == 'number', 'Argument p7 must be of type number.')
    assert(type(p8) == 'integer', 'Argument p8 must be of type integer.')

    local call = natives.invoke(0xC4C32C31920E1B70, 'void', ped, reactingto, x, y, z, reactionname, p6, p7, p8)
end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param p5 number
--- @param p6 number
--- @param p7 integer
natives.task_taskWanderInArea = function(ped, x, y, z, radius, p5, p6, p7)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'number', 'Argument p6 must be of type number.')
    assert(type(p7) == 'integer', 'Argument p7 must be of type integer.')

    local call = natives.invoke(0xE054346CA3A0F315, 'void', ped, x, y, z, radius, p5, p6, p7)
end

--- @param ped integer
--- @param volume integer
--- @param p2 number
--- @param p3 number
--- @param p4 integer
natives.task_taskWanderInVolume = function(ped, volume, p2, p3, p4)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')

    local call = natives.invoke(0x9FDA168777B28424, 'void', ped, volume, p2, p3, p4)
end

-- Makes ped walk around the area.
-- 
-- set p1 to 10.0f and p2 to 10 if you want the ped to walk anywhere without a duration.
--- @param ped integer
--- @param p1 number
--- @param p2 integer
natives.task_taskWanderStandard = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0xBB9CE077274F6A1B, 'void', ped, p1, p2)
end

--- @param ped integer
--- @param p1 userdata
natives.task_taskWanderSwim = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x527EA3DB8BC7F03B, 'void', ped, p1)
end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param heading number
natives.task_taskPlantBomb = function(ped, x, y, z, heading)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(heading) == 'number', 'Argument heading must be of type number.')

    local call = natives.invoke(0x965FEC691D55E9BF, 'void', ped, x, y, z, heading)
end

-- https:--github.com/femga/rdr3_discoveries/tree/master/tasks/TASK_HORSE_ACTION
-- Params: p2, p3 are set to 0 in R* Scripts
--- @param ped integer
--- @param action integer
--- @param targetped integer
--- @param p3 any
natives.task_taskHorseAction = function(ped, action, targetped, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(action) == 'integer', 'Argument action must be of type integer.')
    assert(type(targetped) == 'integer', 'Argument targetped must be of type integer.')
    assert(type(p3) == 'any', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xA09CFD29100F06C3, 'void', ped, action, targetped, p3)
end

-- https:--github.com/femga/rdr3_discoveries/tree/master/tasks/TASK_ANIMAL_INTERACTION
--- @param ped integer
--- @param targetped integer
--- @param interactiontype integer
--- @param interactionmodel integer
--- @param skipidleanimationclip boolean
natives.task_taskAnimalInteraction = function(ped, targetped, interactiontype, interactionmodel, skipidleanimationclip)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(targetped) == 'integer', 'Argument targetped must be of type integer.')
    assert(type(interactiontype) == 'integer', 'Argument interactiontype must be of type integer.')
    assert(type(interactionmodel) == 'integer', 'Argument interactionmodel must be of type integer.')
    assert(type(skipidleanimationclip) == 'boolean', 'Argument skipidleanimationclip must be of type boolean.')

    local call = natives.invoke(0xCD181A959CFDD7F4, 'void', ped, targetped, interactiontype, interactionmodel, skipidleanimationclip)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
natives.task_taskCombatAnimalWarn = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xF960F3D57B660E96, 'void', ped, p1, p2)
end

--- @param ped integer
--- @param targetped integer
--- @param p2 boolean
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
natives.task_taskCombatAnimalChargePed = function(ped, targetped, p2, p3, p4, p5, p6)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(targetped) == 'integer', 'Argument targetped must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0xEE3AA414CF99F368, 'void', ped, targetped, p2, p3, p4, p5, p6)
end

--- @param p0 userdata
--- @return any
natives.task_n0X76610D12A838Ebde = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x76610D12A838EBDE, 'any', p0)
    return call
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
natives.task_taskAmbientAnimalStalk = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x37C13863ABA1B4A3, 'void', ped, p1, p2)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
natives.task_taskAmbientAnimalHunt = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x4B39D8F9D0FE7749, 'void', ped, p1, p2)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.task_taskAnimalUnalerted = function(ped, p1, p2, p3, p4)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x21FDF9A25CFE1CE5, 'void', ped, p1, p2, p3, p4)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
natives.task_taskAnimalAlerted = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x979D93372FC8C565, 'void', ped, p1, p2)
end

--- @param ped integer
--- @param targetped integer
--- @param p2 userdata
natives.task_taskAnimalFlee = function(ped, targetped, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(targetped) == 'integer', 'Argument targetped must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xA899B61C66F09134, 'void', ped, targetped, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @return any
natives.task_n0X244430C13Ba5258E = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x244430C13BA5258E, 'any', p0, p1, p2, p3)
    return call
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
natives.task_taskEat = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xBD7949BD07299672, 'void', ped, p1, p2)
end

--- @param ped integer
--- @param barkattarget integer
--- @param mood integer
natives.task_taskBark = function(ped, barkattarget, mood)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(barkattarget) == 'integer', 'Argument barkattarget must be of type integer.')
    assert(type(mood) == 'integer', 'Argument mood must be of type integer.')

    local call = natives.invoke(0x83BFC1F836B2F3F2, 'void', ped, barkattarget, mood)
end

--- @param ped integer
--- @param args userdata
natives.task_taskFollowPavementToCoord = function(ped, args)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(args) == 'userdata', 'Argument args must be of type userdata.')

    local call = natives.invoke(0x1B1475414E70DD8E, 'void', ped, args)
end

-- If no timeout, set timeout to -1.
--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param speedmultiplier number
--- @param timeout integer
--- @param stoppingrange number
--- @param flags integer
--- @param heading number
natives.task_taskFollowNavMeshToCoord = function(ped, x, y, z, speedmultiplier, timeout, stoppingrange, flags, heading)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(speedmultiplier) == 'number', 'Argument speedmultiplier must be of type number.')
    assert(type(timeout) == 'integer', 'Argument timeout must be of type integer.')
    assert(type(stoppingrange) == 'number', 'Argument stoppingrange must be of type number.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')
    assert(type(heading) == 'number', 'Argument heading must be of type number.')

    local call = natives.invoke(0x15D3A79D4E44B913, 'void', ped, x, y, z, speedmultiplier, timeout, stoppingrange, flags, heading)
end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param speedmultiplier number
--- @param timeout integer
--- @param stoppingrange number
--- @param flags integer
--- @param p8 number
--- @param p9 number
--- @param p10 number
--- @param entity integer
--- @param unk number
natives.task_taskFollowNavMeshToCoordAdvanced = function(ped, x, y, z, speedmultiplier, timeout, stoppingrange, flags, p8, p9, p10, entity, unk)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(speedmultiplier) == 'number', 'Argument speedmultiplier must be of type number.')
    assert(type(timeout) == 'integer', 'Argument timeout must be of type integer.')
    assert(type(stoppingrange) == 'number', 'Argument stoppingrange must be of type number.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')
    assert(type(p8) == 'number', 'Argument p8 must be of type number.')
    assert(type(p9) == 'number', 'Argument p9 must be of type number.')
    assert(type(p10) == 'number', 'Argument p10 must be of type number.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(unk) == 'number', 'Argument unk must be of type number.')

    local call = natives.invoke(0x17F58B88D085DBAC, 'void', ped, x, y, z, speedmultiplier, timeout, stoppingrange, flags, p8, p9, p10, entity, unk)
end

--- @param ped integer
--- @param toggle boolean
natives.task_setPedPathCanUseClimbovers = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x8E06A6FE76C9EFF4, 'void', ped, toggle)
end

--- @param ped integer
--- @param toggle boolean
natives.task_setPedPathCanUseLadders = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x77A5B103C87F476E, 'void', ped, toggle)
end

--- @param ped integer
--- @param toggle boolean
natives.task_setPedPathCanDropFromHeight = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xE361C5C71C431A4F, 'void', ped, toggle)
end

--- @param p0 userdata
--- @return any
natives.task_n0Xe6A151364C600B24 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xE6A151364C600B24, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0X1632Eb9386Cdbe64 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x1632EB9386CDBE64, 'void', p0, p1)
end

--- @param ped integer
--- @param modifier number
natives.task_setPedPathClimbCostModifier = function(ped, modifier)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(modifier) == 'number', 'Argument modifier must be of type number.')

    local call = natives.invoke(0x88E32DB8C1A4AA4B, 'void', ped, modifier)
end

--- @param ped integer
--- @param modifier number
natives.task_setPedPathDeepSnowCostModifier = function(ped, modifier)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(modifier) == 'number', 'Argument modifier must be of type number.')

    local call = natives.invoke(0xE8C296B75EACC357, 'void', ped, modifier)
end

--- @param ped integer
--- @param modifier number
natives.task_setPedPathFoliageCostModifier = function(ped, modifier)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(modifier) == 'number', 'Argument modifier must be of type number.')

    local call = natives.invoke(0x3AD8EFF9703BE657, 'void', ped, modifier)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0X8798Cf6815B8Fe0F = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x8798CF6815B8FE0F, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0X5B68D0007D9C92Eb = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x5B68D0007D9C92EB, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0X82Ed59F095056550 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x82ED59F095056550, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0Xe01C8Dc8Edd28D31 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xE01C8DC8EDD28D31, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0X098Caa6Dbe7D8D82 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x098CAA6DBE7D8D82, 'void', p0, p1)
end

--- @param ped integer
--- @return boolean
natives.task_getPedIsIgnoringDeadBodies = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x1948BBE561A2375A, 'bool', ped)
    return call
end

--- @param ped integer
--- @param toggle boolean
natives.task_setPedIgnoreDeadBodies = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x013A7BA5015C1372, 'void', ped, toggle)
end

-- _SET_PED_PATH_P*
--- @param ped integer
--- @param modifier number
natives.task_setPedPathLadderCostModifier = function(ped, modifier)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(modifier) == 'number', 'Argument modifier must be of type number.')

    local call = natives.invoke(0x70F7A1EAB1AE3AA8, 'void', ped, modifier)
end

--- @param ped integer
--- @param mayenterwater boolean
natives.task_setPedPathMayEnterWater = function(ped, mayenterwater)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(mayenterwater) == 'boolean', 'Argument mayenterwater must be of type boolean.')

    local call = natives.invoke(0xF35425A4204367EC, 'void', ped, mayenterwater)
end

--- @param ped integer
--- @param mayenterdeepwater boolean
natives.task_setPedPathMayEnterDeepWater = function(ped, mayenterdeepwater)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(mayenterdeepwater) == 'boolean', 'Argument mayenterdeepwater must be of type boolean.')

    local call = natives.invoke(0x9DE63896B176EA94, 'void', ped, mayenterdeepwater)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.task_n0Xc6170856E54557B2 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xC6170856E54557B2, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.task_n0Xf948F4356F010F11 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xF948F4356F010F11, 'void', p0, p1, p2)
end

--- @param ped integer
--- @param avoidwater boolean
--- @param p2 number
natives.task_setPedPathPreferToAvoidWater = function(ped, avoidwater, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(avoidwater) == 'boolean', 'Argument avoidwater must be of type boolean.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')

    local call = natives.invoke(0x38FE1EC73743793C, 'void', ped, avoidwater, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.task_n0X8Bb283A7888Ad1Ad = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x8BB283A7888AD1AD, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.task_n0X12990818C1D35886 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x12990818C1D35886, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0X7C015D8Bcec72Cf4 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x7C015D8BCEC72CF4, 'void', p0, p1)
end

--- @param ped integer
--- @param avoidfire boolean
natives.task_setPedPathAvoidFire = function(ped, avoidfire)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(avoidfire) == 'boolean', 'Argument avoidfire must be of type boolean.')

    local call = natives.invoke(0x4455517B28441E60, 'void', ped, avoidfire)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0X42Cfd8Fd8Cc8Dc69 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x42CFD8FD8CC8DC69, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.task_n0X216343750545A486 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x216343750545A486, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0X06Ecf3925Bc2Abae = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x06ECF3925BC2ABAE, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0Xfa30E2254461Adeb = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xFA30E2254461ADEB, 'void', p0, p1)
end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param speed number
--- @param entity integer
--- @param p6 boolean
--- @param walkingstyle integer
--- @param p8 number
natives.task_taskGoToCoordAnyMeans = function(ped, x, y, z, speed, entity, p6, walkingstyle, p8)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(speed) == 'number', 'Argument speed must be of type number.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')
    assert(type(walkingstyle) == 'integer', 'Argument walkingstyle must be of type integer.')
    assert(type(p8) == 'number', 'Argument p8 must be of type number.')

    local call = natives.invoke(0x5BC448CB78FA3E88, 'void', ped, x, y, z, speed, entity, p6, walkingstyle, p8)
end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param speed number
--- @param p5 userdata
--- @param p6 boolean
--- @param walkingstyle integer
--- @param p8 number
--- @param p9 userdata
--- @param p10 userdata
--- @param p11 userdata
--- @param p12 userdata
natives.task_taskGoToCoordAnyMeansExtraParams = function(ped, x, y, z, speed, p5, p6, walkingstyle, p8, p9, p10, p11, p12)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(speed) == 'number', 'Argument speed must be of type number.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')
    assert(type(walkingstyle) == 'integer', 'Argument walkingstyle must be of type integer.')
    assert(type(p8) == 'number', 'Argument p8 must be of type number.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')
    assert(type(p10) == 'userdata', 'Argument p10 must be of type userdata.')
    assert(type(p11) == 'userdata', 'Argument p11 must be of type userdata.')
    assert(type(p12) == 'userdata', 'Argument p12 must be of type userdata.')

    local call = natives.invoke(0x1DD45F9ECFDB1BC9, 'void', ped, x, y, z, speed, p5, p6, walkingstyle, p8, p9, p10, p11, p12)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
--- @param p9 userdata
--- @param p10 userdata
--- @param p11 userdata
--- @param p12 userdata
--- @param p13 userdata
--- @param p14 userdata
natives.task_taskGoToCoordAnyMeansExtraParamsWithCruiseSpeed = function(ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')
    assert(type(p10) == 'userdata', 'Argument p10 must be of type userdata.')
    assert(type(p11) == 'userdata', 'Argument p11 must be of type userdata.')
    assert(type(p12) == 'userdata', 'Argument p12 must be of type userdata.')
    assert(type(p13) == 'userdata', 'Argument p13 must be of type userdata.')
    assert(type(p14) == 'userdata', 'Argument p14 must be of type userdata.')

    local call = natives.invoke(0xB8ECD61F531A7B02, 'void', ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14)
end

-- https:--github.com/femga/rdr3_discoveries/tree/master/animations
-- flags: https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eScriptedAnimFlags
-- ikFlags: https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eIkControlFlags 
--- @param ped integer
--- @param animdict string
--- @param animname string
--- @param speed number
--- @param speedmultiplier number
--- @param duration integer
--- @param flags integer
--- @param playbackrate number
--- @param p8 boolean
--- @param ikflags integer
--- @param p10 boolean
--- @param taskfilter string
--- @param p12 boolean
natives.task_taskPlayAnim = function(ped, animdict, animname, speed, speedmultiplier, duration, flags, playbackrate, p8, ikflags, p10, taskfilter, p12)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(animdict) == 'string', 'Argument animdict must be of type string.')
    assert(type(animname) == 'string', 'Argument animname must be of type string.')
    assert(type(speed) == 'number', 'Argument speed must be of type number.')
    assert(type(speedmultiplier) == 'number', 'Argument speedmultiplier must be of type number.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')
    assert(type(playbackrate) == 'number', 'Argument playbackrate must be of type number.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')
    assert(type(ikflags) == 'integer', 'Argument ikflags must be of type integer.')
    assert(type(p10) == 'boolean', 'Argument p10 must be of type boolean.')
    assert(type(taskfilter) == 'string', 'Argument taskfilter must be of type string.')
    assert(type(p12) == 'boolean', 'Argument p12 must be of type boolean.')

    local call = natives.invoke(0xEA47FE3719165B94, 'void', ped, animdict, animname, speed, speedmultiplier, duration, flags, playbackrate, p8, ikflags, p10, taskfilter, p12)
end

-- flags: see TASK_PLAY_ANIM
-- ikFlags: see TASK_PLAY_ANIM
--- @param ped integer
--- @param animdict string
--- @param animname string
--- @param posx number
--- @param posy number
--- @param posz number
--- @param rotx number
--- @param roty number
--- @param rotz number
--- @param speed number
--- @param speedmultiplier number
--- @param duration integer
--- @param flags integer
--- @param p13 number
--- @param p14 integer
--- @param p15 integer
--- @param p16 integer
natives.task_taskPlayAnimAdvanced = function(ped, animdict, animname, posx, posy, posz, rotx, roty, rotz, speed, speedmultiplier, duration, flags, p13, p14, p15, p16)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(animdict) == 'string', 'Argument animdict must be of type string.')
    assert(type(animname) == 'string', 'Argument animname must be of type string.')
    assert(type(posx) == 'number', 'Argument posx must be of type number.')
    assert(type(posy) == 'number', 'Argument posy must be of type number.')
    assert(type(posz) == 'number', 'Argument posz must be of type number.')
    assert(type(rotx) == 'number', 'Argument rotx must be of type number.')
    assert(type(roty) == 'number', 'Argument roty must be of type number.')
    assert(type(rotz) == 'number', 'Argument rotz must be of type number.')
    assert(type(speed) == 'number', 'Argument speed must be of type number.')
    assert(type(speedmultiplier) == 'number', 'Argument speedmultiplier must be of type number.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')
    assert(type(p13) == 'number', 'Argument p13 must be of type number.')
    assert(type(p14) == 'integer', 'Argument p14 must be of type integer.')
    assert(type(p15) == 'integer', 'Argument p15 must be of type integer.')
    assert(type(p16) == 'integer', 'Argument p16 must be of type integer.')

    local call = natives.invoke(0x83CDB10EA29B370B, 'void', ped, animdict, animname, posx, posy, posz, rotx, roty, rotz, speed, speedmultiplier, duration, flags, p13, p14, p15, p16)
end

--- @param ped integer
--- @param animdict string
--- @param animname string
--- @param entity integer
--- @param p4 integer
--- @param p5 number
--- @param p6 number
--- @param p7 integer
--- @param p8 number
--- @param p9 boolean
--- @param p10 boolean
--- @param p11 number
--- @param p12 string
--- @param p13 integer
--- @param p14 number
natives.task_taskPlayUpperAnimFacingEntity = function(ped, animdict, animname, entity, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(animdict) == 'string', 'Argument animdict must be of type string.')
    assert(type(animname) == 'string', 'Argument animname must be of type string.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'number', 'Argument p6 must be of type number.')
    assert(type(p7) == 'integer', 'Argument p7 must be of type integer.')
    assert(type(p8) == 'number', 'Argument p8 must be of type number.')
    assert(type(p9) == 'boolean', 'Argument p9 must be of type boolean.')
    assert(type(p10) == 'boolean', 'Argument p10 must be of type boolean.')
    assert(type(p11) == 'number', 'Argument p11 must be of type number.')
    assert(type(p12) == 'string', 'Argument p12 must be of type string.')
    assert(type(p13) == 'integer', 'Argument p13 must be of type integer.')
    assert(type(p14) == 'number', 'Argument p14 must be of type number.')

    local call = natives.invoke(0xAD67214236AB1CFE, 'void', ped, animdict, animname, entity, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14)
end

--- @param ped integer
--- @param animdictionary string
--- @param animationname string
--- @param p3 number
natives.task_stopAnimTask = function(ped, animdictionary, animationname, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(animdictionary) == 'string', 'Argument animdictionary must be of type string.')
    assert(type(animationname) == 'string', 'Argument animationname must be of type string.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')

    local call = natives.invoke(0x97FF36A1D40EA00A, 'void', ped, animdictionary, animationname, p3)
end

--- @param ped integer
--- @param args userdata
natives.task_taskScriptedAnimation = function(ped, args)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(args) == 'userdata', 'Argument args must be of type userdata.')

    local call = natives.invoke(0x126EF75F1E17ABE5, 'void', ped, args)
end

--- @param entity integer
--- @param args userdata
natives.task_playEntityScriptedAnim = function(entity, args)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(args) == 'userdata', 'Argument args must be of type userdata.')

    local call = natives.invoke(0x77A1EEC547E7FCF1, 'void', entity, args)
end

--- @param ped integer
--- @param p1 integer
--- @param p2 boolean
natives.task_stopAnimPlayback = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xEE08C992D238C5D1, 'void', ped, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.task_setAnimFilter = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x87B66D77D545DB66, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 number
--- @param p2 userdata
--- @param p3 boolean
natives.task_setAnimRate = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0x032D49C5E359C847, 'void', p0, p1, p2, p3)
end

--- @param ped integer
--- @param itemhash integer
--- @param interactionanimhash integer
--- @param p3 integer
--- @return boolean
natives.task_canStartItemInteraction = function(ped, itemhash, interactionanimhash, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(itemhash) == 'integer', 'Argument itemhash must be of type integer.')
    assert(type(interactionanimhash) == 'integer', 'Argument interactionanimhash must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')

    local call = natives.invoke(0x2D19BC4DF626CBE7, 'bool', ped, itemhash, interactionanimhash, p3)
    return call
end

-- Params: p3 = 0, 1; p5 = 0.0f, -1.0f
-- https:--github.com/femga/rdr3_discoveries/tree/master/tasks/TASK_ITEM_INTERACTION
--- @param ped integer
--- @param itemhash integer
--- @param interactionanimhash integer
--- @param p3 integer
--- @param flag integer
--- @param p5 number
natives.task_startTaskItemInteraction = function(ped, itemhash, interactionanimhash, p3, flag, p5)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(itemhash) == 'integer', 'Argument itemhash must be of type integer.')
    assert(type(interactionanimhash) == 'integer', 'Argument interactionanimhash must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')

    local call = natives.invoke(0xAE72E7DF013AAA61, 'void', ped, itemhash, interactionanimhash, p3, flag, p5)
end

--- @param ped integer
--- @param propnamegxt integer
--- @param prop integer
--- @param propid integer
--- @param iteminteractionstate integer
--- @param p5 integer
--- @param p6 userdata
--- @param p7 number
natives.task_taskItemInteraction2 = function(ped, propnamegxt, prop, propid, iteminteractionstate, p5, p6, p7)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(propnamegxt) == 'integer', 'Argument propnamegxt must be of type integer.')
    assert(type(prop) == 'integer', 'Argument prop must be of type integer.')
    assert(type(propid) == 'integer', 'Argument propid must be of type integer.')
    assert(type(iteminteractionstate) == 'integer', 'Argument iteminteractionstate must be of type integer.')
    assert(type(p5) == 'integer', 'Argument p5 must be of type integer.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'number', 'Argument p7 must be of type number.')

    local call = natives.invoke(0x72F52AA2D2B172CC, 'void', ped, propnamegxt, prop, propid, iteminteractionstate, p5, p6, p7)
end

-- Params: p3, p4, p5, p6: 0, 0, 0, -1.0f in R* Scripts
--- @param ped integer
--- @param item integer
--- @param guid userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 number
natives.task_taskItemInteraction3 = function(ped, item, guid, p3, p4, p5, p6)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(item) == 'integer', 'Argument item must be of type integer.')
    assert(type(guid) == 'userdata', 'Argument guid must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'number', 'Argument p6 must be of type number.')

    local call = natives.invoke(0xD61D5E1AD9876DEB, 'void', ped, item, guid, p3, p4, p5, p6)
end

--- @param ped integer
--- @param item integer
--- @param p2 number
natives.task_n0Xb35370D5353995Cb = function(ped, item, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(item) == 'integer', 'Argument item must be of type integer.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')

    local call = natives.invoke(0xB35370D5353995CB, 'void', ped, item, p2)
end

--- @param ped integer
--- @return number
natives.task_getItemInteractionState = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x6AA3DCA2C6F5EB6D, 'integer', ped)
    return call
end

--- @param ped integer
--- @return number
natives.task_getItemInteractionItemId = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x804425C4BBD00883, 'integer', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.task_isPedRunningInspectionTask = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x038B1F1674F0E242, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.task_isPedRunningTaskItemInteraction = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xEC7E480FF8BD0BED, 'bool', ped)
    return call
end

-- item hashes: PRIMARYITEM, P_MUGCOFFEE01X_PH_R_HAND, P_BOTTLEBEER01X_PH_R_HAND
-- http:--prntscr.com/1qtp3bz
-- https:--github.com/femga/rdr3_discoveries/tree/master/tasks/TASK_ITEM_INTERACTION
--- @param ped integer
--- @param item integer
--- @return number
natives.task_getItemInteractionEntityFromPed = function(ped, item)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(item) == 'integer', 'Argument item must be of type integer.')

    local call = natives.invoke(0x05A0100EA714DB68, 'int', ped, item)
    return call
end

--- @param ped integer
--- @param inputcontext integer
--- @return number
natives.task_getItemInteractionPromptProgress = function(ped, inputcontext)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(inputcontext) == 'integer', 'Argument inputcontext must be of type integer.')

    local call = natives.invoke(0xBC864A70AD55E0C1, 'float', ped, inputcontext)
    return call
end

-- Only used in R* SP Script beat_washed_ashore
-- Returns Object prop for TASK::_TASK_ITEM_INTERACTION_2
--- @param ped integer
--- @param p1 boolean
--- @return number
natives.task_n0X678D3226Cf70B9C8 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x678D3226CF70B9C8, 'integer', ped, p1)
    return call
end

-- Params: p2 is returned by BUILTIN::SHIFT_LEFT
--- @param ped1 integer
--- @param ped2 integer
--- @param p2 integer
natives.task_taskEvasiveAnim = function(ped1, ped2, p2)
    assert(type(ped1) == 'integer', 'Argument ped1 must be of type integer.')
    assert(type(ped2) == 'integer', 'Argument ped2 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x5F22926E1BCE9B08, 'void', ped1, ped2, p2)
end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param duration integer
--- @param flags integer
--- @param p6 integer
--- @param p7 boolean
natives.task_taskLookAtCoord = function(ped, x, y, z, duration, flags, p6, p7)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')
    assert(type(p6) == 'integer', 'Argument p6 must be of type integer.')
    assert(type(p7) == 'boolean', 'Argument p7 must be of type boolean.')

    local call = natives.invoke(0x6FA46612594F7973, 'void', ped, x, y, z, duration, flags, p6, p7)
end

-- param3: duration in ms, use -1 to look forever
-- param4: using 2048 is fine
-- param5: using 3 is fine
--- @param ped integer
--- @param lookattarget integer
--- @param duration integer
--- @param p3 integer
--- @param p4 integer
--- @param p5 integer
natives.task_taskLookAtEntity = function(ped, lookattarget, duration, p3, p4, p5)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(lookattarget) == 'integer', 'Argument lookattarget must be of type integer.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')
    assert(type(p5) == 'integer', 'Argument p5 must be of type integer.')

    local call = natives.invoke(0x69F4BE8C8CC4796C, 'void', ped, lookattarget, duration, p3, p4, p5)
end

--- @param ped integer
natives.task_taskClearLookAt = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x0F804F1DB19B9689, 'void', ped)
end

-- Only used in R* SP Scripts
-- Params: p4 = 1.0f - 30.0f
--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param p4 number
--- @return boolean
natives.task_n0X508F5053E3F6F0C4 = function(ped, x, y, z, p4)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')

    local call = natives.invoke(0x508F5053E3F6F0C4, 'bool', ped, x, y, z, p4)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0X23767D80C7Eed7C6 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x23767D80C7EED7C6, 'void', p0, p1)
end

--- @param tasksequenceid integer
natives.task_openSequenceTask = function(tasksequenceid)
    assert(type(tasksequenceid) == 'integer', 'Argument tasksequenceid must be of type integer.')

    local call = natives.invoke(0xE8854A4326B9E12B, 'void', tasksequenceid)
end

--- @param tasksequenceid integer
natives.task_closeSequenceTask = function(tasksequenceid)
    assert(type(tasksequenceid) == 'integer', 'Argument tasksequenceid must be of type integer.')

    local call = natives.invoke(0x39E72BC99E6360CB, 'void', tasksequenceid)
end

--- @param ped integer
--- @param tasksequenceid integer
natives.task_taskPerformSequence = function(ped, tasksequenceid)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(tasksequenceid) == 'integer', 'Argument tasksequenceid must be of type integer.')

    local call = natives.invoke(0x5ABA3986D90D8A3B, 'void', ped, tasksequenceid)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.task_taskPerformSequence2 = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x4FC0AF869D6E309D, 'void', p0, p1, p2, p3)
end

--- @param tasksequenceid integer
natives.task_clearSequenceTask = function(tasksequenceid)
    assert(type(tasksequenceid) == 'integer', 'Argument tasksequenceid must be of type integer.')

    local call = natives.invoke(0x3841422E9C488D8C, 'void', tasksequenceid)
end

-- repeatMode: 0 = REPEAT_NOT; 1 = REPEAT_FOREVER
--- @param tasksequenceid integer
--- @param repeatmode integer
natives.task_setSequenceToRepeat = function(tasksequenceid, repeatmode)
    assert(type(tasksequenceid) == 'integer', 'Argument tasksequenceid must be of type integer.')
    assert(type(repeatmode) == 'integer', 'Argument repeatmode must be of type integer.')

    local call = natives.invoke(0x58C70CF3A41E4AE7, 'void', tasksequenceid, repeatmode)
end

-- returned values:
-- 0 to 7 = task that's currently in progress, 0 meaning the first one.
-- -1 no task sequence in progress.
--- @param ped integer
--- @return number
natives.task_getSequenceProgress = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x00A9010CFE1E3533, 'int', ped)
    return call
end

--- @param ped integer
--- @param taskindex integer
--- @return boolean
natives.task_getIsTaskActive = function(ped, taskindex)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(taskindex) == 'integer', 'Argument taskindex must be of type integer.')

    local call = natives.invoke(0xB0760331C7AA4155, 'bool', ped, taskindex)
    return call
end

-- Gets the status of a script-assigned task, and returns an int between 0-8
-- taskHash: https:--alloc8or.re/rdr3/doc/enums/eScriptTaskHash.txt 
-- 
-- WAITING_TO_START_TASK = 0,
-- PERFORMING_TASK
-- DORMANT_TASK
-- VACANT_STAGE
-- GROUP_TASK_STAGE
-- ATTRACTOR_SCRIPT_TASK_STAGE
-- SECONDARY_TASK_STAGE
-- TASK_NOT_FOUND
-- FINISHED_TASK
--- @param ped integer
--- @param taskhash integer
--- @param p2 boolean
--- @return number
natives.task_getScriptTaskStatus = function(ped, taskhash, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(taskhash) == 'integer', 'Argument taskhash must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x77F1BEB8863288D5, 'int', ped, taskhash, p2)
    return call
end

--- @param p0 userdata
--- @return any
natives.task_n0X9Ff5F9B24E870748 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x9FF5F9B24E870748, 'any', p0)
    return call
end

--- @param ped integer
--- @param task integer
--- @return number
natives.task_getScriptTaskActionTime = function(ped, task)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(task) == 'integer', 'Argument task must be of type integer.')

    local call = natives.invoke(0xA710DC5D25F8B942, 'float', ped, task)
    return call
end

-- lookIntensity: see SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT
-- 
-- exitAnimation: LOOK_RETURN_GENERIC = 1,
-- LOOK_RETURN_DISMISSIVE = 2,
-- LOOK_RETURN_RELIEVED = 3
--- @param ped integer
--- @param targetped integer
--- @param lookintensity integer
--- @param exitanimation integer
--- @param duration number
--- @param p5 integer
--- @param targetped2 integer
--- @param p7 userdata
--- @param p8 userdata
natives.task_reactLookAt = function(ped, targetped, lookintensity, exitanimation, duration, p5, targetped2, p7, p8)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(targetped) == 'integer', 'Argument targetped must be of type integer.')
    assert(type(lookintensity) == 'integer', 'Argument lookintensity must be of type integer.')
    assert(type(exitanimation) == 'integer', 'Argument exitanimation must be of type integer.')
    assert(type(duration) == 'number', 'Argument duration must be of type number.')
    assert(type(p5) == 'integer', 'Argument p5 must be of type integer.')
    assert(type(targetped2) == 'integer', 'Argument targetped2 must be of type integer.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')

    local call = natives.invoke(0xE7FA07624574B79A, 'void', ped, targetped, lookintensity, exitanimation, duration, p5, targetped2, p7, p8)
end

--- @param ped integer
--- @param exitanimation integer
--- @param p2 boolean
natives.task_reactLookAtEnd = function(ped, exitanimation, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(exitanimation) == 'integer', 'Argument exitanimation must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x541E5B41DCA45828, 'void', ped, exitanimation, p2)
end

--- @param ped integer
--- @param p1 boolean
--- @return boolean
natives.task_isPedScenarioReactLooking = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x916B8E075ABC8B4E, 'bool', ped, p1)
    return call
end

--- @param vehicle integer
--- @return number
natives.task_getActiveVehicleMissionType = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x534AEBA6E5ED4CAB, 'int', vehicle)
    return call
end

-- flags: See TASK_ENTER_VEHICLE
--- @param ped integer
--- @param p1 integer
--- @param taskflag integer
natives.task_taskLeaveAnyVehicle = function(ped, p1, taskflag)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(taskflag) == 'integer', 'Argument taskflag must be of type integer.')

    local call = natives.invoke(0x504D54DF3F6F2247, 'void', ped, p1, taskflag)
end

--- @param p0 userdata
--- @return any
natives.task_n0Xbd70108D01875299 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xBD70108D01875299, 'any', p0)
    return call
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.task_taskUseRandomScenarioInGroup = function(ped, p1, p2, p3, p4)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x14747F4A5971DE4E, 'void', ped, p1, p2, p3, p4)
end

-- duration: the amount of time in milliseconds to do the task.  -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped
--- @param ped integer
--- @param targetentity integer
--- @param duration integer
--- @param p3 boolean
--- @param p4 integer
natives.task_taskAimGunAtEntity = function(ped, targetentity, duration, p3, p4)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(targetentity) == 'integer', 'Argument targetentity must be of type integer.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')

    local call = natives.invoke(0x9B53BB6E8943AF53, 'void', ped, targetentity, duration, p3, p4)
end

-- duration: the amount of time in milliseconds to do the task. -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped
--- @param ped integer
--- @param targetentity integer
--- @param duration integer
--- @param p3 number
--- @param p4 number
--- @param p5 number
natives.task_taskTurnPedToFaceEntity = function(ped, targetentity, duration, p3, p4, p5)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(targetentity) == 'integer', 'Argument targetentity must be of type integer.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')

    local call = natives.invoke(0x5AD23D40115353AC, 'void', ped, targetentity, duration, p3, p4, p5)
end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param time integer
--- @param p5 boolean
--- @param p6 boolean
natives.task_taskAimGunAtCoord = function(ped, x, y, z, time, p5, p6)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(time) == 'integer', 'Argument time must be of type integer.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')

    local call = natives.invoke(0x6671F3EEC681BDA1, 'void', ped, x, y, z, time, p5, p6)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
natives.task_taskAimAtCoord = function(ped, p1, p2, p3, p4, p5, p6)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0x4AF1D73861212F52, 'void', ped, p1, p2, p3, p4, p5, p6)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.task_taskAimAtEntity = function(ped, p1, p2, p3, p4)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0xCF7569BD0FB480A0, 'void', ped, p1, p2, p3, p4)
end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param duration integer
--- @param firingpattern integer
--- @param p6 userdata
natives.task_taskShootAtCoord = function(ped, x, y, z, duration, firingpattern, p6)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')
    assert(type(firingpattern) == 'integer', 'Argument firingpattern must be of type integer.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0x46A6CC01E0826106, 'void', ped, x, y, z, duration, firingpattern, p6)
end

-- Makes the specified ped shuffle to the next vehicle seat.
-- The ped MUST be in a vehicle and the vehicle parameter MUST be the ped's current vehicle.
--- @param ped integer
--- @param vehicle integer
natives.task_taskShuffleToNextVehicleSeat = function(ped, vehicle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x7AA80209BDA643EB, 'void', ped, vehicle)
end

--- @param ped integer
--- @param p1 boolean
--- @param p2 boolean
natives.task_clearPedTasks = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xE1EF3C1216AFF2CD, 'void', ped, p1, p2)
end

--- @param p0 userdata
natives.task_n0X1A7D63Cb1B0Bb223 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x1A7D63CB1B0BB223, 'void', p0)
end

--- @param p0 userdata
natives.task_n0Xb2D15D3551Fe4Fae = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xB2D15D3551FE4FAE, 'void', p0)
end

--- @param ped integer
natives.task_n0Xdf94844D474F31E5 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xDF94844D474F31E5, 'void', ped)
end

--- @param p0 userdata
natives.task_n0Xeba2081E0A5F4D17 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xEBA2081E0A5F4D17, 'void', p0)
end

--- @param vehicle integer
natives.task_n0X141Bc64C8D7C5529 = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x141BC64C8D7C5529, 'void', vehicle)
end

--- @param ped integer
natives.task_clearPedSecondaryTask = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x176CECF6F920D707, 'void', ped)
end

--- @param vehicle integer
--- @param p1 boolean
natives.task_taskEveryoneLeaveVehicleInOrder = function(vehicle, p1)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x6F1C49F275BD25B3, 'void', vehicle, p1)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
natives.task_taskInvestigate = function(ped, p1, p2, p3, p4, p5)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0x5C8514540D27FBFB, 'void', ped, p1, p2, p3, p4, p5)
end

--- @param ped integer
--- @param entity integer
--- @param p2 userdata
--- @param x number
--- @param y number
--- @param z number
--- @param duration integer
natives.task_taskGotoEntityOffset = function(ped, entity, p2, x, y, z, duration)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')

    local call = natives.invoke(0xE39B4FF4FDEBDE27, 'void', ped, entity, p2, x, y, z, duration)
end

--- @param ped integer
--- @param entity integer
--- @param duration integer
--- @param targetradius number
--- @param xoffset number
--- @param yoffset number
--- @param moveblendratio number
--- @param offsetflags integer
natives.task_taskGotoEntityOffsetXy = function(ped, entity, duration, targetradius, xoffset, yoffset, moveblendratio, offsetflags)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')
    assert(type(targetradius) == 'number', 'Argument targetradius must be of type number.')
    assert(type(xoffset) == 'number', 'Argument xoffset must be of type number.')
    assert(type(yoffset) == 'number', 'Argument yoffset must be of type number.')
    assert(type(moveblendratio) == 'number', 'Argument moveblendratio must be of type number.')
    assert(type(offsetflags) == 'integer', 'Argument offsetflags must be of type integer.')

    local call = natives.invoke(0x338E7EF52B6095A9, 'void', ped, entity, duration, targetradius, xoffset, yoffset, moveblendratio, offsetflags)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
natives.task_taskGotoEntityOffsetXyz = function(ped, p1, p2, p3, p4, p5, p6, p7, p8)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')

    local call = natives.invoke(0xFA6DA9D151769392, 'void', ped, p1, p2, p3, p4, p5, p6, p7, p8)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
natives.task_taskGotoEntityOffsetXyAiming = function(ped, p1, p2, p3, p4, p5, p6, p7, p8)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')

    local call = natives.invoke(0x901BD69984400F62, 'void', ped, p1, p2, p3, p4, p5, p6, p7, p8)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
--- @param p9 userdata
natives.task_taskGotoEntityOffsetXyzAiming = function(ped, p1, p2, p3, p4, p5, p6, p7, p8, p9)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')

    local call = natives.invoke(0x41B0832CA96B5351, 'void', ped, p1, p2, p3, p4, p5, p6, p7, p8, p9)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
natives.task_taskFollowEntityWhileAimingAtEntity = function(ped, p1, p2, p3, p4, p5, p6, p7)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')

    local call = natives.invoke(0x2D532EAA142CF83F, 'void', ped, p1, p2, p3, p4, p5, p6, p7)
end

-- duration in milliseconds
--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param duration integer
natives.task_taskTurnPedToFaceCoord = function(ped, x, y, z, duration)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')

    local call = natives.invoke(0x1DDA930A0AC38571, 'void', ped, x, y, z, duration)
end

-- Documentation from GTA V, might be the same in RDR:
-- 
-- '1 - brake
-- '3 - brake + reverse
-- '4 - turn left 90 + braking
-- '5 - turn right 90 + braking
-- '6 - brake strong (handbrake?) until time ends
-- '7 - turn left + accelerate
-- '7 - turn right + accelerate
-- '9 - weak acceleration
-- '10 - turn left + restore wheel pos to center in the end
-- '11 - turn right + restore wheel pos to center in the end
-- '13 - turn left + go reverse
-- '14 - turn left + go reverse
-- '16 - crash the game after like 2 seconds :)
-- '17 - keep actual state, game crashed after few tries
-- '18 - game crash
-- '19 - strong brake + turn left/right
-- '20 - weak brake + turn left then turn right
-- '21 - weak brake + turn right then turn left
-- '22 - brake + reverse
-- '23 - accelerate fast
-- '24 - brake
-- '25 - brake turning left then when almost stopping it turns left more
-- '26 - brake turning right then when almost stopping it turns right more
-- '27 - brake until car stop or until time ends
-- '28 - brake + strong reverse acceleration
-- '30 - performs a burnout (brake until stop + brake and accelerate)
-- '31 - accelerate + handbrake
-- '32 - accelerate very strong
-- 
-- Seems to be this:
-- Works on NPCs, but overrides their current task. If inside a task sequence (and not being the last task), "time" will work, otherwise the task will be performed forever until tasked with something else
--- @param driver integer
--- @param vehicle integer
--- @param action integer
--- @param time integer
natives.task_taskVehicleTempAction = function(driver, vehicle, action, time)
    assert(type(driver) == 'integer', 'Argument driver must be of type integer.')
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(action) == 'integer', 'Argument action must be of type integer.')
    assert(type(time) == 'integer', 'Argument time must be of type integer.')

    local call = natives.invoke(0xC429DCEEB339E129, 'void', driver, vehicle, action, time)
end

--- @param driver integer
--- @param vehicle integer
--- @param vehicletarget integer
--- @param missiontype integer
--- @param p4 number
--- @param p5 userdata
--- @param p6 number
--- @param p7 number
--- @param driveagainsttraffic boolean
natives.task_taskVehicleMission = function(driver, vehicle, vehicletarget, missiontype, p4, p5, p6, p7, driveagainsttraffic)
    assert(type(driver) == 'integer', 'Argument driver must be of type integer.')
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(vehicletarget) == 'integer', 'Argument vehicletarget must be of type integer.')
    assert(type(missiontype) == 'integer', 'Argument missiontype must be of type integer.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'number', 'Argument p6 must be of type number.')
    assert(type(p7) == 'number', 'Argument p7 must be of type number.')
    assert(type(driveagainsttraffic) == 'boolean', 'Argument driveagainsttraffic must be of type boolean.')

    local call = natives.invoke(0x659427E0EF36BCDE, 'void', driver, vehicle, vehicletarget, missiontype, p4, p5, p6, p7, driveagainsttraffic)
end

-- flags: 67108864, 2097152, 524564, 524675 (eDrivingFlags)
-- p7 = 6 or 3
-- p8 = x coordinate
-- p9 - 8.f
-- p10 = false
--- @param driver integer
--- @param vehicle integer
--- @param x number
--- @param y number
--- @param z number
--- @param speed number
--- @param drivingflags integer
--- @param p7 integer
--- @param stoppingrange1 number
--- @param stoppingrange2 number
--- @param p10 boolean
natives.task_taskVehicleDriveToDestination = function(driver, vehicle, x, y, z, speed, drivingflags, p7, stoppingrange1, stoppingrange2, p10)
    assert(type(driver) == 'integer', 'Argument driver must be of type integer.')
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(speed) == 'number', 'Argument speed must be of type number.')
    assert(type(drivingflags) == 'integer', 'Argument drivingflags must be of type integer.')
    assert(type(p7) == 'integer', 'Argument p7 must be of type integer.')
    assert(type(stoppingrange1) == 'number', 'Argument stoppingrange1 must be of type number.')
    assert(type(stoppingrange2) == 'number', 'Argument stoppingrange2 must be of type number.')
    assert(type(p10) == 'boolean', 'Argument p10 must be of type boolean.')

    local call = natives.invoke(0x7F241A0D14354583, 'void', driver, vehicle, x, y, z, speed, drivingflags, p7, stoppingrange1, stoppingrange2, p10)
end

-- Tasks vehicle towards owner
--- @param vehicle integer
--- @param x number
--- @param y number
--- @param z number
--- @param speed number
--- @param p5 integer
--- @param p6 integer
--- @param p7 number
--- @param p8 number
natives.task_taskVehicleDriveToDestination2 = function(vehicle, x, y, z, speed, p5, p6, p7, p8)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(speed) == 'number', 'Argument speed must be of type number.')
    assert(type(p5) == 'integer', 'Argument p5 must be of type integer.')
    assert(type(p6) == 'integer', 'Argument p6 must be of type integer.')
    assert(type(p7) == 'number', 'Argument p7 must be of type number.')
    assert(type(p8) == 'number', 'Argument p8 must be of type number.')

    local call = natives.invoke(0x391073B9D3CCE2BA, 'void', vehicle, x, y, z, speed, p5, p6, p7, p8)
end

-- Vehicle Auto Drive (?)
-- p1/p2/p3: usually 1f, 1f, 0f or 0f, 0f, 0f
-- Speed: usually 8f
-- Types: 1148979456 (task with flee), 1148979587 (dismissing the vehicle)
--- @param vehicle integer
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param speed number
--- @param type integer
natives.task_taskVehicleFleeOnCleanup = function(vehicle, p1, p2, p3, speed, type)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(speed) == 'number', 'Argument speed must be of type number.')
    assert(type(type) == 'integer', 'Argument type must be of type integer.')

    local call = natives.invoke(0x55CD5FDDD4335C1E, 'void', vehicle, p1, p2, p3, speed, type)
end

-- Old name: _TASK_VEHICLE_DRIVE_TO_POINT
-- flag: 524419 and 0 in shop_horse_shop R* Script
--- @param driver integer
--- @param vehicle integer
--- @param x number
--- @param y number
--- @param z number
--- @param p5 number
--- @param p6 number
--- @param flag integer
natives.task_taskVehicleDriveStraightToPoint = function(driver, vehicle, x, y, z, p5, p6, flag)
    assert(type(driver) == 'integer', 'Argument driver must be of type integer.')
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'number', 'Argument p6 must be of type number.')
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')

    local call = natives.invoke(0x089FF2FB965F0A29, 'void', driver, vehicle, x, y, z, p5, p6, flag)
end

-- Params: p4 = 3.f or 8.f, p5 = 0.25f, p6 = 0 in R* Scripts
--- @param vehicle integer
--- @param x number
--- @param y number
--- @param z number
--- @param p4 number
--- @param p5 number
--- @param p6 userdata
natives.task_taskVehicleDriveToPoint2 = function(vehicle, x, y, z, p4, p5, p6)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0x6524A8981E8BE7C9, 'void', vehicle, x, y, z, p4, p5, p6)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.task_n0X1D125814Ebc517Eb = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x1D125814EBC517EB, 'void', p0, p1, p2, p3)
end

--- @param vehicle integer
--- @param x number
--- @param y number
--- @param z number
--- @return boolean
natives.task_n0X583Ae9Af9Cee0958 = function(vehicle, x, y, z)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0x583AE9AF9CEE0958, 'bool', vehicle, x, y, z)
    return call
end

-- See TASK_VEHICLE_MISSION
--- @param ped integer
--- @param vehicle integer
--- @param pedtarget integer
--- @param mode integer
--- @param maxspeed number
--- @param drivingstyle integer
--- @param mindistance number
--- @param p7 number
--- @param driveagainsttraffic boolean
natives.task_taskVehicleMissionPedTarget = function(ped, vehicle, pedtarget, mode, maxspeed, drivingstyle, mindistance, p7, driveagainsttraffic)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(pedtarget) == 'integer', 'Argument pedtarget must be of type integer.')
    assert(type(mode) == 'integer', 'Argument mode must be of type integer.')
    assert(type(maxspeed) == 'number', 'Argument maxspeed must be of type number.')
    assert(type(drivingstyle) == 'integer', 'Argument drivingstyle must be of type integer.')
    assert(type(mindistance) == 'number', 'Argument mindistance must be of type number.')
    assert(type(p7) == 'number', 'Argument p7 must be of type number.')
    assert(type(driveagainsttraffic) == 'boolean', 'Argument driveagainsttraffic must be of type boolean.')

    local call = natives.invoke(0x9454528DF15D657A, 'void', ped, vehicle, pedtarget, mode, maxspeed, drivingstyle, mindistance, p7, driveagainsttraffic)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0Xa263Adbbc8056214 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xA263ADBBC8056214, 'void', p0, p1)
end

--- @param ped integer
--- @param vehicle integer
--- @param targetvehicle integer
--- @param mode integer
--- @param speed number
--- @param drivingstyle integer
--- @param mindistance number
--- @param p7 integer
--- @param noroadsdistance number
natives.task_taskVehicleEscort = function(ped, vehicle, targetvehicle, mode, speed, drivingstyle, mindistance, p7, noroadsdistance)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(targetvehicle) == 'integer', 'Argument targetvehicle must be of type integer.')
    assert(type(mode) == 'integer', 'Argument mode must be of type integer.')
    assert(type(speed) == 'number', 'Argument speed must be of type number.')
    assert(type(drivingstyle) == 'integer', 'Argument drivingstyle must be of type integer.')
    assert(type(mindistance) == 'number', 'Argument mindistance must be of type number.')
    assert(type(p7) == 'integer', 'Argument p7 must be of type integer.')
    assert(type(noroadsdistance) == 'number', 'Argument noroadsdistance must be of type number.')

    local call = natives.invoke(0x0FA6E4B75F302400, 'void', ped, vehicle, targetvehicle, mode, speed, drivingstyle, mindistance, p7, noroadsdistance)
end

--- @param peddriver integer
--- @param boat integer
--- @param p2 userdata
--- @param p3 userdata
--- @param x number
--- @param y number
--- @param z number
--- @param p7 userdata
--- @param maxspeed number
--- @param drivingstyle integer
--- @param p10 number
--- @param p11 userdata
natives.task_taskBoatMission = function(peddriver, boat, p2, p3, x, y, z, p7, maxspeed, drivingstyle, p10, p11)
    assert(type(peddriver) == 'integer', 'Argument peddriver must be of type integer.')
    assert(type(boat) == 'integer', 'Argument boat must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(maxspeed) == 'number', 'Argument maxspeed must be of type number.')
    assert(type(drivingstyle) == 'integer', 'Argument drivingstyle must be of type integer.')
    assert(type(p10) == 'number', 'Argument p10 must be of type number.')
    assert(type(p11) == 'userdata', 'Argument p11 must be of type userdata.')

    local call = natives.invoke(0x15C86013127CE63F, 'void', peddriver, boat, p2, p3, x, y, z, p7, maxspeed, drivingstyle, p10, p11)
end

--- @param ped integer
natives.task_taskWeapon = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x7157B82D60E4BC46, 'void', ped)
end

--- @param driverped integer
--- @param targetped integer
--- @param targetvehicle integer
--- @param targetx number
--- @param targety number
--- @param targetz number
--- @param distancetoshoot number
--- @param pedaccuracy integer
--- @param p8 boolean
--- @param firingpattern integer
natives.task_taskDriveBy = function(driverped, targetped, targetvehicle, targetx, targety, targetz, distancetoshoot, pedaccuracy, p8, firingpattern)
    assert(type(driverped) == 'integer', 'Argument driverped must be of type integer.')
    assert(type(targetped) == 'integer', 'Argument targetped must be of type integer.')
    assert(type(targetvehicle) == 'integer', 'Argument targetvehicle must be of type integer.')
    assert(type(targetx) == 'number', 'Argument targetx must be of type number.')
    assert(type(targety) == 'number', 'Argument targety must be of type number.')
    assert(type(targetz) == 'number', 'Argument targetz must be of type number.')
    assert(type(distancetoshoot) == 'number', 'Argument distancetoshoot must be of type number.')
    assert(type(pedaccuracy) == 'integer', 'Argument pedaccuracy must be of type integer.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')
    assert(type(firingpattern) == 'integer', 'Argument firingpattern must be of type integer.')

    local call = natives.invoke(0x2F8AF0E82773A171, 'void', driverped, targetped, targetvehicle, targetx, targety, targetz, distancetoshoot, pedaccuracy, p8, firingpattern)
end

--- @param shootingped integer
--- @param targetped integer
--- @param targetvehicle integer
--- @param x number
--- @param y number
--- @param z number
natives.task_setDrivebyTaskTarget = function(shootingped, targetped, targetvehicle, x, y, z)
    assert(type(shootingped) == 'integer', 'Argument shootingped must be of type integer.')
    assert(type(targetped) == 'integer', 'Argument targetped must be of type integer.')
    assert(type(targetvehicle) == 'integer', 'Argument targetvehicle must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0xE5B302114D8162EE, 'void', shootingped, targetped, targetvehicle, x, y, z)
end

--- @param ped integer
natives.task_clearDrivebyTaskUnderneathDrivingTask = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xC35B5CDB2824CF69, 'void', ped)
end

--- @param ped integer
--- @return boolean
natives.task_isDrivebyTaskUnderneathDrivingTask = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x8785E6E40C7A8818, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.task_getIsPedAimingInTheAir = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x8785E6E40C7A8819, 'bool', ped)
    return call
end

--- @param ped integer
--- @param p1 userdata
natives.task_setPedClearAimingInTheAir = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x34C0010188D7C54A, 'void', ped, p1)
end

--- @param ped integer
--- @return boolean
natives.task_isMountedWeaponTaskUnderneathDrivingTask = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xA320EF046186FA3B, 'bool', ped)
    return call
end

--- @param ped integer
--- @param vehicle integer
--- @param seat integer
natives.task_taskWarpPedIntoVehicle = function(ped, vehicle, seat)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(seat) == 'integer', 'Argument seat must be of type integer.')

    local call = natives.invoke(0x9A7D091411C5F684, 'void', ped, vehicle, seat)
end

--- @param entity integer
--- @param targetentity integer
--- @param duration integer
--- @param firingpattern integer
--- @param affectcockedstate boolean
natives.task_taskShootAtEntity = function(entity, targetentity, duration, firingpattern, affectcockedstate)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(targetentity) == 'integer', 'Argument targetentity must be of type integer.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')
    assert(type(firingpattern) == 'integer', 'Argument firingpattern must be of type integer.')
    assert(type(affectcockedstate) == 'boolean', 'Argument affectcockedstate must be of type boolean.')

    local call = natives.invoke(0x08DA95E8298AE772, 'void', entity, targetentity, duration, firingpattern, affectcockedstate)
end

--- @param ped integer
--- @param args userdata
natives.task_taskShootWithWeapon = function(ped, args)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(args) == 'userdata', 'Argument args must be of type userdata.')

    local call = natives.invoke(0x08AA95E8298AE772, 'void', ped, args)
end

--- @param entity integer
--- @param targetentity integer
--- @param duration integer
--- @param p3 userdata
--- @param p4 userdata
natives.task_n0X2416Ec2F31F75266 = function(entity, targetentity, duration, p3, p4)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(targetentity) == 'integer', 'Argument targetentity must be of type integer.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x2416EC2F31F75266, 'void', entity, targetentity, duration, p3, p4)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
natives.task_n0X41323F4E0C4Ae94B = function(p0, p1, p2, p3, p4, p5, p6)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0x41323F4E0C4AE94B, 'void', p0, p1, p2, p3, p4, p5, p6)
end

--- @param p0 userdata
--- @return any
natives.task_n0X5Ea655F01D93667A = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x5EA655F01D93667A, 'any', p0)
    return call
end

-- Climbs or vaults the nearest thing.
--- @param ped integer
--- @param unused boolean
natives.task_taskClimb = function(ped, unused)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(unused) == 'boolean', 'Argument unused must be of type boolean.')

    local call = natives.invoke(0x89D9FCC2435112F1, 'void', ped, unused)
end

--- @param ped integer
--- @param heading number
natives.task_taskClimb2 = function(ped, heading)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(heading) == 'number', 'Argument heading must be of type number.')

    local call = natives.invoke(0xDF1D85BCAF60D537, 'void', ped, heading)
end

--- @param ped integer
--- @param p1 number
--- @param p2 boolean
--- @param p3 boolean
natives.task_taskClimbLadder = function(ped, p1, p2, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0xB6C987F9285A3814, 'void', ped, p1, p2, p3)
end

-- Immediately stops the pedestrian from whatever it's doing. They stop fighting, animations, etc. they forget what they were doing.
-- 
-- resetCrouch TRUE = ped will stand up if crouching, FALSE = ped will remain crouching if crouched
--- @param ped integer
--- @param p1 boolean
--- @param resetcrouch boolean
natives.task_clearPedTasksImmediately = function(ped, p1, resetcrouch)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(resetcrouch) == 'boolean', 'Argument resetcrouch must be of type boolean.')

    local call = natives.invoke(0xAAA34F8A7CB32098, 'void', ped, p1, resetcrouch)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.task_taskPerformSequenceFromProgress = function(ped, p1, p2, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x89221B16730234F0, 'void', ped, p1, p2, p3)
end

--- @param ped integer
--- @param p1 number
natives.task_setPedDesiredMoveBlendRatio = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x1E982AC8716912C5, 'void', ped, p1)
end

--- @param ped integer
--- @return number
natives.task_getPedDesiredMoveBlendRatio = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x8517D4A6CA8513ED, 'float', ped)
    return call
end

-- ped = Ped you want to perform this task.
-- target = the Entity they should aim at.
-- distanceToStopAt = distance from the target, where the ped should stop to aim.
-- StartAimingDist = distance where the ped should start to aim.
--- @param ped integer
--- @param target integer
--- @param distancetostopat number
--- @param startaimingdist number
natives.task_taskGotoEntityAiming = function(ped, target, distancetostopat, startaimingdist)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(target) == 'integer', 'Argument target must be of type integer.')
    assert(type(distancetostopat) == 'number', 'Argument distancetostopat must be of type number.')
    assert(type(startaimingdist) == 'number', 'Argument startaimingdist must be of type number.')

    local call = natives.invoke(0xA9DA48FAB8A76C12, 'void', ped, target, distancetostopat, startaimingdist)
end

--- @param ped integer
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
natives.task_taskSetSphereDefensiveArea = function(ped, p1, p2, p3, p4)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')

    local call = natives.invoke(0x933C06518B52A9A4, 'void', ped, p1, p2, p3, p4)
end

--- @param ped integer
natives.task_taskClearDefensiveArea = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x95A6C46A31D1917D, 'void', ped)
end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param heading number
--- @param p5 number
natives.task_taskPedSlideToCoord = function(ped, x, y, z, heading, p5)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(heading) == 'number', 'Argument heading must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')

    local call = natives.invoke(0xD04FE6765D990A06, 'void', ped, x, y, z, heading, p5)
end

--- @param p0 userdata
--- @return any
natives.task_n0X9420Fb11B8D77948 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x9420FB11B8D77948, 'any', p0)
    return call
end

--- @param p0 userdata
--- @return any
natives.task_n0X6Ba606Ab3A83Bc4D = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x6BA606AB3A83BC4D, 'any', p0)
    return call
end

--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 boolean
--- @return number
natives.task_addCoverPoint = function(p0, p1, p2, p3, p4, p5, p6, p7)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'boolean', 'Argument p7 must be of type boolean.')

    local call = natives.invoke(0xD5C12A75C7B9497F, 'int', p0, p1, p2, p3, p4, p5, p6, p7)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
--- @return any
natives.task_n0X59872Ea4Cbd11C56 = function(p0, p1, p2, p3, p4, p5, p6, p7, p8)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')

    local call = natives.invoke(0x59872EA4CBD11C56, 'any', p0, p1, p2, p3, p4, p5, p6, p7, p8)
    return call
end

--- @param coverpoint integer
natives.task_removeCoverPoint = function(coverpoint)
    assert(type(coverpoint) == 'integer', 'Argument coverpoint must be of type integer.')

    local call = natives.invoke(0xAE287C923D891715, 'void', coverpoint)
end

-- Checks if there is a cover point at position
--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @return boolean
natives.task_doesScriptedCoverPointExistAtCoords = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xA98B8E3C088E5A31, 'bool', p0, p1, p2, p3)
    return call
end

--- @param coverpoint integer
--- @return number, number, number
natives.task_getScriptedCoverPointCoords = function(coverpoint)
    assert(type(coverpoint) == 'integer', 'Argument coverpoint must be of type integer.')

    local call = natives.invoke(0x594A1028FC2A3E85, 'vector3', coverpoint)
    return call.x, call.y, call.z
end

--- @param p0 userdata
--- @return number, number, number
natives.task_n0Xe116F6F2Da2D777E = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xE116F6F2DA2D777E, 'vector3', p0)
    return call.x, call.y, call.z
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
natives.task_n0X50Aa09A0Da64E73C = function(p0, p1, p2, p3, p4, p5, p6)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0x50AA09A0DA64E73C, 'void', p0, p1, p2, p3, p4, p5, p6)
end

--- @param p0 userdata
natives.task_n0Xe5831Aa1E2Fd147C = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xE5831AA1E2FD147C, 'void', p0)
end

--- @param ped integer
--- @param targetped integer
--- @param p2 integer
--- @param p3 integer
natives.task_taskCombatPed = function(ped, targetped, p2, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(targetped) == 'integer', 'Argument targetped must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')

    local call = natives.invoke(0xF166E48407BAC484, 'void', ped, targetped, p2, p3)
end

--- @param ped integer
--- @param targetped integer
--- @param p2 integer
--- @param p3 userdata
natives.task_taskCombatPedTimed = function(ped, targetped, p2, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(targetped) == 'integer', 'Argument targetped must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x944F30DCB7096BDE, 'void', ped, targetped, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
natives.task_taskCombatPed3 = function(p0, p1, p2, p3, p4, p5)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0xC624414FA748B9BA, 'void', p0, p1, p2, p3, p4, p5)
end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param duration integer
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
natives.task_taskSeekCoverFromPos = function(ped, x, y, z, duration, p5, p6, p7)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')

    local call = natives.invoke(0x75AC2B60386D89F2, 'void', ped, x, y, z, duration, p5, p6, p7)
end

--- @param ped integer
--- @param fromped integer
--- @param duration integer
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
natives.task_taskSeekCoverFromPed = function(ped, fromped, duration, p3, p4, p5)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(fromped) == 'integer', 'Argument fromped must be of type integer.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0x84D32B3BEC531324, 'void', ped, fromped, duration, p3, p4, p5)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
natives.task_taskSeekCoverToCoverPoint = function(ped, p1, p2, p3, p4, p5, p6, p7, p8)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')

    local call = natives.invoke(0xD43D95C7A869447F, 'void', ped, p1, p2, p3, p4, p5, p6, p7, p8)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
--- @param p9 userdata
--- @param p10 userdata
natives.task_taskSeekCoverToCoords = function(ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')
    assert(type(p10) == 'userdata', 'Argument p10 must be of type userdata.')

    local call = natives.invoke(0x39246A6958EF072C, 'void', ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)
end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param timeout integer
--- @param p5 boolean
--- @param p6 number
--- @param p7 userdata
--- @param p8 userdata
--- @param coverpoint integer
--- @param p10 boolean
--- @param p11 boolean
--- @param p12 userdata
natives.task_taskPutPedDirectlyIntoCover = function(ped, x, y, z, timeout, p5, p6, p7, p8, coverpoint, p10, p11, p12)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(timeout) == 'integer', 'Argument timeout must be of type integer.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')
    assert(type(p6) == 'number', 'Argument p6 must be of type number.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(coverpoint) == 'integer', 'Argument coverpoint must be of type integer.')
    assert(type(p10) == 'boolean', 'Argument p10 must be of type boolean.')
    assert(type(p11) == 'boolean', 'Argument p11 must be of type boolean.')
    assert(type(p12) == 'userdata', 'Argument p12 must be of type userdata.')

    local call = natives.invoke(0x4172393E6BE1FECE, 'void', ped, x, y, z, timeout, p5, p6, p7, p8, coverpoint, p10, p11, p12)
end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param fromx number
--- @param fromy number
--- @param fromz number
--- @param timeout integer
--- @param p8 userdata
--- @param p9 userdata
--- @param p10 userdata
--- @param p11 userdata
--- @param p12 userdata
--- @param p13 userdata
--- @param p14 userdata
--- @param p15 userdata
--- @param p16 userdata
--- @param p17 userdata
natives.task_taskPutPedDirectlyIntoCoverFromCoords = function(ped, x, y, z, fromx, fromy, fromz, timeout, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(fromx) == 'number', 'Argument fromx must be of type number.')
    assert(type(fromy) == 'number', 'Argument fromy must be of type number.')
    assert(type(fromz) == 'number', 'Argument fromz must be of type number.')
    assert(type(timeout) == 'integer', 'Argument timeout must be of type integer.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')
    assert(type(p10) == 'userdata', 'Argument p10 must be of type userdata.')
    assert(type(p11) == 'userdata', 'Argument p11 must be of type userdata.')
    assert(type(p12) == 'userdata', 'Argument p12 must be of type userdata.')
    assert(type(p13) == 'userdata', 'Argument p13 must be of type userdata.')
    assert(type(p14) == 'userdata', 'Argument p14 must be of type userdata.')
    assert(type(p15) == 'userdata', 'Argument p15 must be of type userdata.')
    assert(type(p16) == 'userdata', 'Argument p16 must be of type userdata.')
    assert(type(p17) == 'userdata', 'Argument p17 must be of type userdata.')

    local call = natives.invoke(0xDF8A5855B9F9A97B, 'void', ped, x, y, z, fromx, fromy, fromz, timeout, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17)
end

-- meleeStyles: AR_GRAPPLE_BACK_FROM_BACK, AR_GRAPPLE_MOUNT_FACEDOWN_FROM_FRONT, AR_ALLIGATOR_LEAPKILL, AR_ALLIGATOR_WAIST_AUTOKILL_FRONT
--- @param ped integer
--- @param meleetarget integer
--- @param meleestyle integer
--- @param p3 number
--- @param animblendratio number
--- @param p5 boolean
--- @param p6 integer
natives.task_taskPutPedDirectlyIntoMelee = function(ped, meleetarget, meleestyle, p3, animblendratio, p5, p6)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(meleetarget) == 'integer', 'Argument meleetarget must be of type integer.')
    assert(type(meleestyle) == 'integer', 'Argument meleestyle must be of type integer.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(animblendratio) == 'number', 'Argument animblendratio must be of type number.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')
    assert(type(p6) == 'integer', 'Argument p6 must be of type integer.')

    local call = natives.invoke(0x1C6CD14A876FFE39, 'void', ped, meleetarget, meleestyle, p3, animblendratio, p5, p6)
end

-- grappleStyle: AR_GRAPPLE_STRUGGLE, AR_ALLIGATOR_LEG_GRAB_CHALLENGE_FAIL, AR_GRAPPLE_BACK_FROM_BACK, AR_GRAPPLE_BACK_DEFEND, AR_GRAPPLE_FRONT_FROM_FRONT
--- @param ped integer
--- @param grappletarget integer
--- @param grapplestyle integer
--- @param p3 number
--- @param p4 number
--- @param p5 boolean
--- @param p6 integer
natives.task_taskPutPedDirectlyIntoGrapple = function(ped, grappletarget, grapplestyle, p3, p4, p5, p6)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(grappletarget) == 'integer', 'Argument grappletarget must be of type integer.')
    assert(type(grapplestyle) == 'integer', 'Argument grapplestyle must be of type integer.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')
    assert(type(p6) == 'integer', 'Argument p6 must be of type integer.')

    local call = natives.invoke(0xA05F3F20889D7A5B, 'void', ped, grappletarget, grapplestyle, p3, p4, p5, p6)
end

--- @param ped integer
--- @param p1 userdata
natives.task_taskCompanionAmbient = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xE017CF6E2527FE4F, 'void', ped, p1)
end

--- @param p0 userdata
natives.task_n0X098036Cab8373D36 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x098036CAB8373D36, 'void', p0)
end

--- @param p0 userdata
natives.task_n0X10C44F633E2D6D9E = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x10C44F633E2D6D9E, 'void', p0)
end

--- @param p0 userdata
natives.task_n0X7Fb78B2199C10E92 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x7FB78B2199C10E92, 'void', p0)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
natives.task_taskGuard = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xB9FB242EACCAF30F, 'void', ped, p1, p2)
end

--- @param ped integer
--- @param p1 number
--- @param p2 number
--- @param p3 boolean
natives.task_taskGuardCurrentPosition = function(ped, p1, p2, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0x4A58A47A72E3FCB4, 'void', ped, p1, p2, p3)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
natives.task_taskGuardAssignedDefensiveArea2 = function(ped, p1, p2, p3, p4, p5, p6, p7)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')

    local call = natives.invoke(0x1FC9B33976BACD6C, 'void', ped, p1, p2, p3, p4, p5, p6, p7)
end

--- @param ped integer
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 userdata
natives.task_taskGuardAssignedDefensiveArea = function(ped, p1, p2, p3, p4, p5, p6)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0xD2A207EEBDF9889B, 'void', ped, p1, p2, p3, p4, p5, p6)
end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param heading number
--- @param scenarioname string
natives.task_taskStandGuard = function(ped, x, y, z, heading, scenarioname)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(heading) == 'number', 'Argument heading must be of type number.')
    assert(type(scenarioname) == 'string', 'Argument scenarioname must be of type string.')

    local call = natives.invoke(0xAE032F8BBA959E90, 'void', ped, x, y, z, heading, scenarioname)
end

--- @param driver integer
--- @param cruisespeed number
natives.task_setDriveTaskCruiseSpeed = function(driver, cruisespeed)
    assert(type(driver) == 'integer', 'Argument driver must be of type integer.')
    assert(type(cruisespeed) == 'number', 'Argument cruisespeed must be of type number.')

    local call = natives.invoke(0x5C9B84BD7D31D908, 'void', driver, cruisespeed)
end

-- Not implemented.
--- @param ped integer
--- @param maxcruisespeed number
natives.task_setDriveTaskMaxCruiseSpeed = function(ped, maxcruisespeed)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(maxcruisespeed) == 'number', 'Argument maxcruisespeed must be of type number.')

    local call = natives.invoke(0x404A5AA9B9F0B746, 'void', ped, maxcruisespeed)
end

--- @param playerx number
--- @param playery number
--- @param playerz number
--- @param radiusx number
--- @param radiusy number
--- @param radiusz number
--- @param p6 boolean
--- @param p7 boolean
--- @param p8 boolean
--- @param p9 boolean
natives.task_addCoverBlockingArea = function(playerx, playery, playerz, radiusx, radiusy, radiusz, p6, p7, p8, p9)
    assert(type(playerx) == 'number', 'Argument playerx must be of type number.')
    assert(type(playery) == 'number', 'Argument playery must be of type number.')
    assert(type(playerz) == 'number', 'Argument playerz must be of type number.')
    assert(type(radiusx) == 'number', 'Argument radiusx must be of type number.')
    assert(type(radiusy) == 'number', 'Argument radiusy must be of type number.')
    assert(type(radiusz) == 'number', 'Argument radiusz must be of type number.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')
    assert(type(p7) == 'boolean', 'Argument p7 must be of type boolean.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')
    assert(type(p9) == 'boolean', 'Argument p9 must be of type boolean.')

    local call = natives.invoke(0x45C597097DD7CB81, 'void', playerx, playery, playerz, radiusx, radiusy, radiusz, p6, p7, p8, p9)
end

--- @param volume integer
--- @param p1 boolean
--- @param p2 boolean
--- @param p3 boolean
--- @param p4 boolean
natives.task_addCoverBlockingVolume = function(volume, p1, p2, p3, p4)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')

    local call = natives.invoke(0xEB2ED1DC3AEC0654, 'void', volume, p1, p2, p3, p4)
end

natives.task_removeAllCoverBlockingAreas = function()

    local call = natives.invoke(0xDB6708C0B46F56D8, 'void')
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0X2A10538D0A005E81 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x2A10538D0A005E81, 'void', p0, p1)
end

natives.task_n0X4F57397388E1Dff8 = function()

    local call = natives.invoke(0x4F57397388E1DFF8, 'void')
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.task_taskRobPed = function(ped, p1, p2, p3, p4)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x7BB967F85D8CCBDB, 'void', ped, p1, p2, p3, p4)
end

--- @param ped integer
--- @return boolean
natives.task_n0Xbedbe39B5Fd98Fd6 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xBEDBE39B5FD98FD6, 'bool', ped)
    return call
end

-- Returns scenario
--- @param scenariohash integer
--- @param x number
--- @param y number
--- @param z number
--- @param heading number
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 boolean
--- @return number
natives.task_createScenarioPointHash = function(scenariohash, x, y, z, heading, p5, p6, p7)
    assert(type(scenariohash) == 'integer', 'Argument scenariohash must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(heading) == 'number', 'Argument heading must be of type number.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'boolean', 'Argument p7 must be of type boolean.')

    local call = natives.invoke(0x94B745CE41DB58A1, 'int', scenariohash, x, y, z, heading, p5, p6, p7)
    return call
end

-- Returns scenario
--- @param entity integer
--- @param scenariohash integer
--- @param x number
--- @param y number
--- @param z number
--- @param heading number
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 boolean
--- @return number
natives.task_createScenarioPointHashAttachedToEntity = function(entity, scenariohash, x, y, z, heading, p6, p7, p8)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(scenariohash) == 'integer', 'Argument scenariohash must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(heading) == 'number', 'Argument heading must be of type number.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')

    local call = natives.invoke(0x794AB1379A74064D, 'int', entity, scenariohash, x, y, z, heading, p6, p7, p8)
    return call
end

--- @param scenario integer
--- @return boolean
natives.task_doesScenarioPointHaveProps = function(scenario)
    assert(type(scenario) == 'integer', 'Argument scenario must be of type integer.')

    local call = natives.invoke(0xEA31F199A73801D3, 'bool', scenario)
    return call
end

-- Old name: _GET_SCENARIO_POINT_ENTITY
--- @param scenariopoint integer
--- @param name string
--- @return number
natives.task_getPropForScenarioPoint = function(scenariopoint, name)
    assert(type(scenariopoint) == 'integer', 'Argument scenariopoint must be of type integer.')
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0x295514F198EFD0CA, 'int', scenariopoint, name)
    return call
end

--- @param scenario integer
--- @param entity integer
--- @param propname string
--- @param p3 boolean
--- @return boolean
natives.task_associatePropWithScenario = function(scenario, entity, propname, p3)
    assert(type(scenario) == 'integer', 'Argument scenario must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(propname) == 'string', 'Argument propname must be of type string.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0x8360C47380B6F351, 'bool', scenario, entity, propname, p3)
    return call
end

-- flag: https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/CScenarioPointFlags__Flags
--- @param scenario integer
--- @param flag integer
--- @param value boolean
natives.task_setScenarioPointFlag = function(scenario, flag, value)
    assert(type(scenario) == 'integer', 'Argument scenario must be of type integer.')
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')
    assert(type(value) == 'boolean', 'Argument value must be of type boolean.')

    local call = natives.invoke(0x5AF19B6CC2115D34, 'void', scenario, flag, value)
end

--- @param scenario integer
--- @param flag integer
--- @return boolean
natives.task_isScenarioPointFlagSet = function(scenario, flag)
    assert(type(scenario) == 'integer', 'Argument scenario must be of type integer.')
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')

    local call = natives.invoke(0x8569C38D2FB80650, 'bool', scenario, flag)
    return call
end

-- _SET_SCENARIO_POINT_*
--- @param p0 userdata
--- @param p1 userdata
natives.task_n0Xadc45010Bc17Af0E = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xADC45010BC17AF0E, 'void', p0, p1)
end

--- @param p0 userdata
--- @return any
natives.task_n0X974Da3408Dec4E79 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x974DA3408DEC4E79, 'any', p0)
    return call
end

--- @param scenario integer
--- @param propname string
--- @return boolean
natives.task_disassociatePropFromScenario = function(scenario, propname)
    assert(type(scenario) == 'integer', 'Argument scenario must be of type integer.')
    assert(type(propname) == 'string', 'Argument propname must be of type string.')

    local call = natives.invoke(0x6EF4E31B4D5D2DA0, 'bool', scenario, propname)
    return call
end

--- @param scenario integer
--- @return boolean
natives.task_doesScenarioPointExist = function(scenario)
    assert(type(scenario) == 'integer', 'Argument scenario must be of type integer.')

    local call = natives.invoke(0x841475AC96E794D1, 'bool', scenario)
    return call
end

--- @param p0 userdata
--- @return any
natives.task_n0X22Cd2C33Ed4467A1 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x22CD2C33ED4467A1, 'any', p0)
    return call
end

-- Note: The current name for this native is the old name of 0x295514F198EFD0CA
-- Old name for this native: _GET_ENTITY_SCENARIO_POINT_IS_ATTACHED_TO
--- @param scenario integer
--- @return number
natives.task_getScenarioPointEntity = function(scenario)
    assert(type(scenario) == 'integer', 'Argument scenario must be of type integer.')

    local call = natives.invoke(0x7467165EE97D3C68, 'int', scenario)
    return call
end

--- @param scenario integer
--- @return number
natives.task_getPedUsingScenarioPoint = function(scenario)
    assert(type(scenario) == 'integer', 'Argument scenario must be of type integer.')

    local call = natives.invoke(0x5BA659955369B0E2, 'int', scenario)
    return call
end

-- Params: p1 is always true in R* Scripts
--- @param scenario integer
--- @param p1 boolean
--- @return number, number, number
natives.task_getScenarioPointCoords = function(scenario, p1)
    assert(type(scenario) == 'integer', 'Argument scenario must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xA8452DD321607029, 'vector3', scenario, p1)
    return call.x, call.y, call.z
end

--- @param p0 userdata
--- @return number, number, number
natives.task_n0X91Cb5E431F579Ba1 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x91CB5E431F579BA1, 'vector3', p0)
    return call.x, call.y, call.z
end

--- @param p0 userdata
--- @return any
natives.task_n0X370F57C47F68Ebca = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x370F57C47F68EBCA, 'any', p0)
    return call
end

-- Params: p1 is always true in R* Scripts
--- @param scenario integer
--- @param p1 boolean
--- @return number
natives.task_getScenarioPointHeading = function(scenario, p1)
    assert(type(scenario) == 'integer', 'Argument scenario must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xB93EA7184BAA85C3, 'float', scenario, p1)
    return call
end

--- @param scenario integer
--- @return number
natives.task_getScenarioPointRadius = function(scenario)
    assert(type(scenario) == 'integer', 'Argument scenario must be of type integer.')

    local call = natives.invoke(0x6718F40313A2B5A6, 'float', scenario)
    return call
end

--- @param scenario integer
--- @param xpos number
--- @param ypos number
--- @param zpos number
--- @param p4 boolean
natives.task_setScenarioPointCoords = function(scenario, xpos, ypos, zpos, p4)
    assert(type(scenario) == 'integer', 'Argument scenario must be of type integer.')
    assert(type(xpos) == 'number', 'Argument xpos must be of type number.')
    assert(type(ypos) == 'number', 'Argument ypos must be of type number.')
    assert(type(zpos) == 'number', 'Argument zpos must be of type number.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')

    local call = natives.invoke(0x2056AB38DF06825C, 'void', scenario, xpos, ypos, zpos, p4)
end

--- @param scenario integer
--- @param heading number
--- @param p2 boolean
natives.task_setScenarioPointHeading = function(scenario, heading, p2)
    assert(type(scenario) == 'integer', 'Argument scenario must be of type integer.')
    assert(type(heading) == 'number', 'Argument heading must be of type number.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xD3A0DA8F91612C6E, 'void', scenario, heading, p2)
end

--- @param scenario integer
--- @param radius number
natives.task_setScenarioPointRadius = function(scenario, radius)
    assert(type(scenario) == 'integer', 'Argument scenario must be of type integer.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')

    local call = natives.invoke(0xC47D9080A9A8856A, 'void', scenario, radius)
end

-- _SET_SCENARIO_*
--- @param p0 userdata
--- @param p1 userdata
natives.task_n0Xa7479Fb665361Edb = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xA7479FB665361EDB, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0Xe69Fda40Aac3Efc0 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xE69FDA40AAC3EFC0, 'void', p0, p1)
end

-- Note: scenariosInRadius is an array, and its size and values should be aligned to 8 bytes.
--- @param posx number
--- @param posy number
--- @param posz number
--- @param radius number
--- @param scenariosinradius userdata
--- @param size integer
--- @return number
natives.task_getScenarioPointsInArea = function(posx, posy, posz, radius, scenariosinradius, size)
    assert(type(posx) == 'number', 'Argument posx must be of type number.')
    assert(type(posy) == 'number', 'Argument posy must be of type number.')
    assert(type(posz) == 'number', 'Argument posz must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(scenariosinradius) == 'userdata', 'Argument scenariosinradius must be of type userdata.')
    assert(type(size) == 'integer', 'Argument size must be of type integer.')

    local call = natives.invoke(0x345EC3B7EBDE1CB5, 'int', posx, posy, posz, radius, scenariosinradius, size)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @return any
natives.task_n0Xefd875C2791Ebefd = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xEFD875C2791EBEFD, 'any', p0, p1, p2, p3)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @return any
natives.task_n0X152664Aa3188B193 = function(p0, p1, p2, p3, p4, p5)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0x152664AA3188B193, 'any', p0, p1, p2, p3, p4, p5)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.task_n0Xe7Bbc4E56B989449 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xE7BBC4E56B989449, 'any', p0, p1, p2)
    return call
end

--- @param ped integer
--- @param p1 boolean
--- @return number
natives.task_getScenarioPointPedIsUsing = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xDF7993356F52359A, 'int', ped, p1)
    return call
end

--- @param ped integer
--- @return any
natives.task_getRansackScenarioPointPedIsUsing = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xD04241BBF6D03A5E, 'any', ped)
    return call
end

-- Opens/closes containers: ChestDugUp
--- @param entity integer
--- @param open boolean
natives.task_setScenarioContainerOpeningState = function(entity, open)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(open) == 'boolean', 'Argument open must be of type boolean.')

    local call = natives.invoke(0x188F8071F244B9B8, 'void', entity, open)
end

--- @param p0 userdata
--- @return any
natives.task_n0Xa9E7672F8C6C6F74 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xA9E7672F8C6C6F74, 'any', p0)
    return call
end

--- @param p0 userdata
--- @return any
natives.task_n0X0A98A362C5A19A43 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x0A98A362C5A19A43, 'any', p0)
    return call
end

--- @param p0 userdata
--- @return any
natives.task_n0X849791Ebbdba0362 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x849791EBBDBA0362, 'any', p0)
    return call
end

--- @param p0 userdata
--- @return any
natives.task_n0X640A602946A8C972 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x640A602946A8C972, 'any', p0)
    return call
end

--- @param p0 userdata
--- @return any
natives.task_n0X01Af8A3729231A43 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x01AF8A3729231A43, 'any', p0)
    return call
end

-- Returns m_eContainerState
--- @param entity integer
--- @return boolean
natives.task_getScenarioContainerOpeningState = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xB219612B5568E9EC, 'bool', entity)
    return call
end

--- @param scenario integer
--- @param entity integer
natives.task_resetScenarioForEntity = function(scenario, entity)
    assert(type(scenario) == 'integer', 'Argument scenario must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x2E20878FD208A68E, 'void', scenario, entity)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.task_n0X4161648394262Fdf = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x4161648394262FDF, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
natives.task_n0X9C8F42A5D1859Dc1 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x9C8F42A5D1859DC1, 'void', p0)
end

--- @param scenario integer
natives.task_deleteScenarioPoint = function(scenario)
    assert(type(scenario) == 'integer', 'Argument scenario must be of type integer.')

    local call = natives.invoke(0x81948DFE4F5A0283, 'void', scenario)
end

--- @param ped integer
--- @param scenario integer
--- @param conditionalanim string
--- @param p3 integer
--- @param p4 boolean
--- @param p5 boolean
--- @param p6 integer
--- @param p7 boolean
--- @param p8 number
--- @param p9 boolean
natives.task_taskUseScenarioPoint = function(ped, scenario, conditionalanim, p3, p4, p5, p6, p7, p8, p9)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(scenario) == 'integer', 'Argument scenario must be of type integer.')
    assert(type(conditionalanim) == 'string', 'Argument conditionalanim must be of type string.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')
    assert(type(p6) == 'integer', 'Argument p6 must be of type integer.')
    assert(type(p7) == 'boolean', 'Argument p7 must be of type boolean.')
    assert(type(p8) == 'number', 'Argument p8 must be of type number.')
    assert(type(p9) == 'boolean', 'Argument p9 must be of type boolean.')

    local call = natives.invoke(0xCCDAE6324B6A821C, 'void', ped, scenario, conditionalanim, p3, p4, p5, p6, p7, p8, p9)
end

--- @param ped integer
--- @param ped2 integer
--- @param p2 userdata
--- @param p3 string
--- @param p4 integer
--- @param p5 integer
--- @param p6 number
--- @param p7 boolean
natives.task_taskUseScenarioPoint2 = function(ped, ped2, p2, p3, p4, p5, p6, p7)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(ped2) == 'integer', 'Argument ped2 must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'string', 'Argument p3 must be of type string.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')
    assert(type(p5) == 'integer', 'Argument p5 must be of type integer.')
    assert(type(p6) == 'number', 'Argument p6 must be of type number.')
    assert(type(p7) == 'boolean', 'Argument p7 must be of type boolean.')

    local call = natives.invoke(0x0F6641449DD86FBE, 'void', ped, ped2, p2, p3, p4, p5, p6, p7)
end

-- https:--github.com/femga/rdr3_discoveries/blob/master/animations/scenarios
-- Params: duration in milliseconds
-- 
-- conditionalHash (optionally):
-- 0 = play random conditional anim.
-- Every conditional anim has requirements to play it.
-- If requirements are not met, ped plays random allowed conditional anim or can be stuck.
-- For example, this scenario type has possible conditional anim WORLD_HUMAN_LEAN_BACK_WALL_SMOKING_MALE_D, but it can not be played by player, because condition is set to NOT be CAIConditionIsPlayer (check file amb_rest.meta and amb_rest_CA.meta with OPENIV to clarify requirements).
--- @param ped integer
--- @param scenariohash integer
--- @param duration integer
--- @param playenteranim boolean
--- @param conditionalhash integer
--- @param heading number
--- @param p6 boolean
natives.task_taskStartScenarioInPlaceHash = function(ped, scenariohash, duration, playenteranim, conditionalhash, heading, p6)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(scenariohash) == 'integer', 'Argument scenariohash must be of type integer.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')
    assert(type(playenteranim) == 'boolean', 'Argument playenteranim must be of type boolean.')
    assert(type(conditionalhash) == 'integer', 'Argument conditionalhash must be of type integer.')
    assert(type(heading) == 'number', 'Argument heading must be of type number.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')

    local call = natives.invoke(0x524B54361229154F, 'void', ped, scenariohash, duration, playenteranim, conditionalhash, heading, p6)
end

-- Takes scenario point handle instead of hash
--- @param ped integer
--- @param p1 userdata
--- @param p2 string
--- @param p3 integer
--- @param p4 boolean
--- @param p5 number
--- @param p6 boolean
natives.task_taskStartScenarioInPlace2 = function(ped, p1, p2, p3, p4, p5, p6)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'string', 'Argument p2 must be of type string.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')

    local call = natives.invoke(0xA917E39F2CEFD215, 'void', ped, p1, p2, p3, p4, p5, p6)
end

--- @param ped integer
--- @param scenariohash integer
--- @param x number
--- @param y number
--- @param z number
--- @param heading number
--- @param duration integer
--- @param sittingscenario boolean
--- @param teleport boolean
--- @param p9 string
--- @param p10 number
--- @param p11 boolean
natives.task_taskStartScenarioAtPosition = function(ped, scenariohash, x, y, z, heading, duration, sittingscenario, teleport, p9, p10, p11)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(scenariohash) == 'integer', 'Argument scenariohash must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(heading) == 'number', 'Argument heading must be of type number.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')
    assert(type(sittingscenario) == 'boolean', 'Argument sittingscenario must be of type boolean.')
    assert(type(teleport) == 'boolean', 'Argument teleport must be of type boolean.')
    assert(type(p9) == 'string', 'Argument p9 must be of type string.')
    assert(type(p10) == 'number', 'Argument p10 must be of type number.')
    assert(type(p11) == 'boolean', 'Argument p11 must be of type boolean.')

    local call = natives.invoke(0x4D1F61FC34AF3CD1, 'void', ped, scenariohash, x, y, z, heading, duration, sittingscenario, teleport, p9, p10, p11)
end

--- @param p0 userdata
--- @return any
natives.task_n0Xf97F462779B31786 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xF97F462779B31786, 'any', p0)
    return call
end

--- @param p0 userdata
--- @return any
natives.task_n0X6C269F673C47031E = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x6C269F673C47031E, 'any', p0)
    return call
end

--- @param p0 userdata
natives.task_n0X9667Cce29Bfa0780 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x9667CCE29BFA0780, 'void', p0)
end

--- @param p0 userdata
--- @return any
natives.task_n0X00Ffe0F85253C572 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x00FFE0F85253C572, 'any', p0)
    return call
end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param distance number
--- @param duration integer
--- @param p6 boolean
--- @param p7 boolean
--- @param p8 boolean
--- @param p9 boolean
natives.task_taskUseNearestScenarioToCoord = function(ped, x, y, z, distance, duration, p6, p7, p8, p9)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(distance) == 'number', 'Argument distance must be of type number.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')
    assert(type(p7) == 'boolean', 'Argument p7 must be of type boolean.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')
    assert(type(p9) == 'boolean', 'Argument p9 must be of type boolean.')

    local call = natives.invoke(0x322BFDEA666E2B0E, 'void', ped, x, y, z, distance, duration, p6, p7, p8, p9)
end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param distance number
--- @param duration integer
--- @param p6 boolean
--- @param p7 boolean
--- @param p8 boolean
--- @param p9 boolean
natives.task_taskUseNearestScenarioToCoordWarp = function(ped, x, y, z, distance, duration, p6, p7, p8, p9)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(distance) == 'number', 'Argument distance must be of type number.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')
    assert(type(p7) == 'boolean', 'Argument p7 must be of type boolean.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')
    assert(type(p9) == 'boolean', 'Argument p9 must be of type boolean.')

    local call = natives.invoke(0x58E2E0F23F6B76C3, 'void', ped, x, y, z, distance, duration, p6, p7, p8, p9)
end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param distance number
natives.task_taskUseNearestTrainScenarioToCoordWarp = function(ped, x, y, z, distance)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(distance) == 'number', 'Argument distance must be of type number.')

    local call = natives.invoke(0x3774B03456DD6106, 'void', ped, x, y, z, distance)
end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param distance number
--- @param p5 boolean
--- @param p6 boolean
--- @param p7 boolean
--- @param p8 boolean
natives.task_taskUseNearestScenarioChainToCoord = function(ped, x, y, z, distance, p5, p6, p7, p8)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(distance) == 'number', 'Argument distance must be of type number.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')
    assert(type(p7) == 'boolean', 'Argument p7 must be of type boolean.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')

    local call = natives.invoke(0x9FDA1B3D7E7028B3, 'void', ped, x, y, z, distance, p5, p6, p7, p8)
end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param distance number
--- @param p5 boolean
--- @param p6 boolean
--- @param p7 boolean
--- @param p8 boolean
natives.task_taskUseNearestScenarioChainToCoordWarp = function(ped, x, y, z, distance, p5, p6, p7, p8)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(distance) == 'number', 'Argument distance must be of type number.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')
    assert(type(p7) == 'boolean', 'Argument p7 must be of type boolean.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')

    local call = natives.invoke(0x97A28E63F0BA5631, 'void', ped, x, y, z, distance, p5, p6, p7, p8)
end

--- @param ped integer
--- @return any
natives.task_n0Xfdecca06E8B81346 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xFDECCA06E8B81346, 'any', ped)
    return call
end

--- @param ped integer
--- @param p1 number
--- @return any
natives.task_n0X2D657B10F211C572 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x2D657B10F211C572, 'any', ped, p1)
    return call
end

--- @param ped integer
--- @param train integer
--- @param scenariopoint integer
--- @param scenariohash integer
natives.task_taskRideTrain = function(ped, train, scenariopoint, scenariohash)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(train) == 'integer', 'Argument train must be of type integer.')
    assert(type(scenariopoint) == 'integer', 'Argument scenariopoint must be of type integer.')
    assert(type(scenariohash) == 'integer', 'Argument scenariohash must be of type integer.')

    local call = natives.invoke(0x37FB1C870E2EC2C6, 'void', ped, train, scenariopoint, scenariohash)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @return any
natives.task_n0X79197F7D2Bb5E73A = function(p0, p1, p2, p3, p4, p5)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0x79197F7D2BB5E73A, 'any', p0, p1, p2, p3, p4, p5)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param p4 boolean
--- @param p5 userdata
--- @param p6 boolean
--- @return boolean
natives.task_doesScenarioExistInArea = function(x, y, z, radius, p4, p5, p6)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')

    local call = natives.invoke(0x5A59271FFADD33C1, 'bool', x, y, z, radius, p4, p5, p6)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @param typehash integer
--- @param radius number
--- @param p5 boolean
--- @return boolean
natives.task_doesScenarioOfTypeExistInAreaHash = function(x, y, z, typehash, radius, p5)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(typehash) == 'integer', 'Argument typehash must be of type integer.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')

    local call = natives.invoke(0x6EEAD6AF637DA752, 'bool', x, y, z, typehash, radius, p5)
    return call
end

--- @param xpos number
--- @param ypos number
--- @param zpos number
--- @param scenariotype integer
--- @param distance number
--- @param p5 userdata
--- @param p6 boolean
--- @return number
natives.task_findScenarioOfTypeHash = function(xpos, ypos, zpos, scenariotype, distance, p5, p6)
    assert(type(xpos) == 'number', 'Argument xpos must be of type number.')
    assert(type(ypos) == 'number', 'Argument ypos must be of type number.')
    assert(type(zpos) == 'number', 'Argument zpos must be of type number.')
    assert(type(scenariotype) == 'integer', 'Argument scenariotype must be of type integer.')
    assert(type(distance) == 'number', 'Argument distance must be of type number.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')

    local call = natives.invoke(0xF533D68FF970D190, 'int', xpos, ypos, zpos, scenariotype, distance, p5, p6)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0X0D322Aef8878B8Fe = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x0D322AEF8878B8FE, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @return any
natives.task_n0Xd508Fa229F1C4900 = function(p0, p1, p2, p3, p4, p5)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0xD508FA229F1C4900, 'any', p0, p1, p2, p3, p4, p5)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
natives.task_n0Xb8E213D02F37947D = function(p0, p1, p2, p3, p4, p5, p6)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0xB8E213D02F37947D, 'void', p0, p1, p2, p3, p4, p5, p6)
end

--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 boolean
--- @return boolean
natives.task_isScenarioOccupied = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')

    local call = natives.invoke(0x788756D73AC2E07C, 'bool', p0, p1, p2, p3, p4)
    return call
end

--- @param scenario integer
--- @return any
natives.task_n0X1Acbc313966C21F3 = function(scenario)
    assert(type(scenario) == 'integer', 'Argument scenario must be of type integer.')

    local call = natives.invoke(0x1ACBC313966C21F3, 'any', scenario)
    return call
end

--- @param ped integer
--- @return boolean
natives.task_pedHasUseScenarioTask = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x295E3CCEC879CCD7, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.task_pedIsInScenarioBase = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x02EBBB3989B7E695, 'bool', ped)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.task_n0X90703A8F75Ee4Abd = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x90703A8F75EE4ABD, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.task_n0Xd999E379265A4501 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xD999E379265A4501, 'void', p0, p1, p2)
end

--- @param ped integer
--- @param animdict string
--- @param animname string
natives.task_playAnimOnRunningScenario = function(ped, animdict, animname)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(animdict) == 'string', 'Argument animdict must be of type string.')
    assert(type(animname) == 'string', 'Argument animname must be of type string.')

    local call = natives.invoke(0x748040460F8DF5DC, 'void', ped, animdict, animname)
end

--- @return any
natives.task_n0X74F0209674864Cbd = function()

    local call = natives.invoke(0x74F0209674864CBD, 'any')
    return call
end

--- @return any
natives.task_n0Xe1C105E6Bba48270 = function()

    local call = natives.invoke(0xE1C105E6BBA48270, 'any')
    return call
end

--- @param p0 userdata
--- @return any
natives.task_n0X1Ac5A8Ab50Cfaa33 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x1AC5A8AB50CFAA33, 'any', p0)
    return call
end

--- @param p0 userdata
natives.task_n0Xbeefbb608D2Aa68A = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xBEEFBB608D2AA68A, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.task_n0X19Bc99C678Fba139 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x19BC99C678FBA139, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.task_n0X5D9B0Baaf04Cf65B = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x5D9B0BAAF04CF65B, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0X9B6A58Fdb0024F12 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x9B6A58FDB0024F12, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0Xbc3F847Ae2C3Dc65 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xBC3F847AE2C3DC65, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0X450080Ddedb91258 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x450080DDEDB91258, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0X954451Ea2D2120Fb = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x954451EA2D2120FB, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0X0F4F6C4Ce471259D = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x0F4F6C4CE471259D, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0Xb8E3486D107F4194 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xB8E3486D107F4194, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0X827A58Ced9D4D5B4 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x827A58CED9D4D5B4, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0X4A7D73989F52Eb37 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x4A7D73989F52EB37, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0Xb79817Db31Ff72B9 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xB79817DB31FF72B9, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0X65D281985F2Bdfc2 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x65D281985F2BDFC2, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0X885D19Ac2B6Fbff4 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x885D19AC2B6FBFF4, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.task_n0X2064B33F6E6B92D4 = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x2064B33F6E6B92D4, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.task_n0Xce4E669400E5F8Aa = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xCE4E669400E5F8AA, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0X2Eb977293923C723 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x2EB977293923C723, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0Xe9225354Fb7437A7 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xE9225354FB7437A7, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0X764Db5A48390Fbad = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x764DB5A48390FBAD, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0X8F8C84363810691A = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x8F8C84363810691A, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0Xff8Afca532B500D4 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xFF8AFCA532B500D4, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @return any
natives.task_n0Xfe5D28B9B7837Cc1 = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xFE5D28B9B7837CC1, 'any', p0, p1, p2, p3)
    return call
end

--- @param p0 userdata
natives.task_n0X2B8Af29A78024Bd3 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x2B8AF29A78024BD3, 'void', p0)
end

--- @param p0 userdata
--- @return any
natives.task_n0X0365000D8Bf86531 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x0365000D8BF86531, 'any', p0)
    return call
end

--- @param p0 userdata
--- @return number, number, number
natives.task_n0X865732725536Ee39 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x865732725536EE39, 'vector3', p0)
    return call.x, call.y, call.z
end

natives.task_n0X0E184495B27Bb57D = function()

    local call = natives.invoke(0x0E184495B27BB57D, 'void')
end

--- @param scenariogroup string
--- @return boolean
natives.task_doesScenarioGroupExist = function(scenariogroup)
    assert(type(scenariogroup) == 'string', 'Argument scenariogroup must be of type string.')

    local call = natives.invoke(0xF9034C136C9E00D3, 'bool', scenariogroup)
    return call
end

--- @param scenariogroup integer
--- @return boolean
natives.task_doesScenarioGroupExistHash = function(scenariogroup)
    assert(type(scenariogroup) == 'integer', 'Argument scenariogroup must be of type integer.')

    local call = natives.invoke(0x76E98B52369A289C, 'bool', scenariogroup)
    return call
end

--- @param scenariogroup string
--- @return boolean
natives.task_isScenarioGroupEnabled = function(scenariogroup)
    assert(type(scenariogroup) == 'string', 'Argument scenariogroup must be of type string.')

    local call = natives.invoke(0x367A09DED4E05B99, 'bool', scenariogroup)
    return call
end

--- @param scenariogroup integer
--- @return boolean
natives.task_isScenarioGroupEnabledHash = function(scenariogroup)
    assert(type(scenariogroup) == 'integer', 'Argument scenariogroup must be of type integer.')

    local call = natives.invoke(0xDCC374913DE6AAA6, 'bool', scenariogroup)
    return call
end

--- @param scenariogroup string
--- @param toggle boolean
natives.task_setScenarioGroupEnabled = function(scenariogroup, toggle)
    assert(type(scenariogroup) == 'string', 'Argument scenariogroup must be of type string.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x02C8E5B49848664E, 'void', scenariogroup, toggle)
end

--- @param scenariogroup integer
--- @param toggle boolean
natives.task_setScenarioGroupEnabledHash = function(scenariogroup, toggle)
    assert(type(scenariogroup) == 'integer', 'Argument scenariogroup must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x9925EDDB6EAB88CD, 'void', scenariogroup, toggle)
end

natives.task_resetScenarioGroupsEnabled = function()

    local call = natives.invoke(0xDD902D0349AFAD3A, 'void')
end

--- @param p0 userdata
natives.task_n0X358A1A751B335A11 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x358A1A751B335A11, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_forceScenarioGroupPriority = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x444C910A5058E568, 'void', p0, p1)
end

--- @param p0 userdata
--- @return any
natives.task_n0Xe55478C5Edf70Ac2 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xE55478C5EDF70AC2, 'any', p0)
    return call
end

--- @param scenario integer
--- @return boolean
natives.task_isScenarioPointActive = function(scenario)
    assert(type(scenario) == 'integer', 'Argument scenario must be of type integer.')

    local call = natives.invoke(0x0CC36D4156006509, 'bool', scenario)
    return call
end

--- @param scenario integer
--- @param active boolean
natives.task_setScenarioPointActive = function(scenario, active)
    assert(type(scenario) == 'integer', 'Argument scenario must be of type integer.')
    assert(type(active) == 'boolean', 'Argument active must be of type boolean.')

    local call = natives.invoke(0xEEE4829304F93EEE, 'void', scenario, active)
end

--- @param scenario integer
natives.task_resetScenarioScript = function(scenario)
    assert(type(scenario) == 'integer', 'Argument scenario must be of type integer.')

    local call = natives.invoke(0x5A40040BB5AE3EA2, 'void', scenario)
end

--- @param scenariotype string
--- @return boolean
natives.task_isScenarioTypeEnabled = function(scenariotype)
    assert(type(scenariotype) == 'string', 'Argument scenariotype must be of type string.')

    local call = natives.invoke(0x3A815DB3EA088722, 'bool', scenariotype)
    return call
end

--- @param scenariotype string
--- @param toggle boolean
natives.task_setScenarioTypeEnabled = function(scenariotype, toggle)
    assert(type(scenariotype) == 'string', 'Argument scenariotype must be of type string.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xEB47EC4E34FB7EE1, 'void', scenariotype, toggle)
end

--- @param scenariotype integer
--- @param toggle boolean
natives.task_setScenarioTypeEnabledHash = function(scenariotype, toggle)
    assert(type(scenariotype) == 'integer', 'Argument scenariotype must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xD00E50E673802D71, 'void', scenariotype, toggle)
end

natives.task_resetScenarioTypesEnabled = function()

    local call = natives.invoke(0x0D40EE2A7F2B2D6D, 'void')
end

--- @param ped integer
--- @return number
natives.task_getScenarioPointTypePedIsUsing = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x2D0571BB55879DA2, 'int', ped)
    return call
end

--- @param scenario integer
--- @return number
natives.task_getScenarioPointType = function(scenario)
    assert(type(scenario) == 'integer', 'Argument scenario must be of type integer.')

    local call = natives.invoke(0xA92450B5AE687AAF, 'integer', scenario)
    return call
end

--- @param ped integer
--- @param scenario integer
--- @return boolean
natives.task_isPedActiveInScenario = function(ped, scenario)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(scenario) == 'integer', 'Argument scenario must be of type integer.')

    local call = natives.invoke(0xAA135F9482C82CC3, 'bool', ped, scenario)
    return call
end

--- @param ped integer
--- @param p1 boolean
--- @return boolean
natives.task_isPedExitingScenario = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x0C3CB2E600C8977D, 'bool', ped, p1)
    return call
end

--- @param p0 userdata
--- @return any
natives.task_n0X2C497Bdef897C6Df = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x2C497BDEF897C6DF, 'any', p0)
    return call
end

-- Despite its name, it only attacks ONE hated target. The one closest to the specified position.
--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param flags integer
--- @param p6 userdata
natives.task_taskCombatHatedTargetsInArea = function(ped, x, y, z, radius, flags, p6)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0x4CF5F55DAC3280A0, 'void', ped, x, y, z, radius, flags, p6)
end

--- @param ped integer
--- @param radius number
natives.task_taskCombatHatedTargetsNoLosTest = function(ped, radius)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')

    local call = natives.invoke(0xB5BC69D9C4060BC3, 'void', ped, radius)
end

-- Despite its name, it only attacks ONE hated target. The one closest hated target.
--- @param ped integer
--- @param radius number
--- @param flags integer
--- @param p3 userdata
natives.task_taskCombatHatedTargetsAroundPed = function(ped, radius, flags, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x7BF835BB9E2698C8, 'void', ped, radius, flags, p3)
end

--- @param ped integer
--- @param radius number
--- @param time integer
--- @param flags integer
natives.task_taskCombatHatedTargetsAroundPedTimed = function(ped, radius, time, flags)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(time) == 'integer', 'Argument time must be of type integer.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')

    local call = natives.invoke(0x2BBA30B854534A0C, 'void', ped, radius, time, flags)
end

--- @param ped integer
--- @param radius number
natives.task_taskCombatHatedTargets = function(ped, radius)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')

    local call = natives.invoke(0x8182B561A29BD597, 'void', ped, radius)
end

--- @param p0 userdata
natives.task_n0X30B391915538Ebe2 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x30B391915538EBE2, 'void', p0)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.task_taskThrowProjectile = function(ped, p1, p2, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x7285951DBF6B5A51, 'void', ped, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.task_taskThrowProjectile2 = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x7282356DFF6B5A51, 'void', p0, p1, p2, p3)
end

-- https:--github.com/femga/rdr3_discoveries/blob/master/AI/EVENTS/aud_ped_whistle_types.lua
-- p2: UNSPECIFIED
--- @param ped integer
--- @param audpedwhistletype integer
--- @param p2 integer
natives.task_taskWhistleAnim = function(ped, audpedwhistletype, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(audpedwhistletype) == 'integer', 'Argument audpedwhistletype must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0xD6401A1B2F63BED6, 'void', ped, audpedwhistletype, p2)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.task_taskSwapWeapon = function(ped, p1, p2, p3, p4)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0xA21C51255B205245, 'void', ped, p1, p2, p3, p4)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0X0000A8Acdc2E1B6A = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x0000A8ACDC2E1B6A, 'void', p0, p1)
end

--- @param ped integer
--- @param unused boolean
natives.task_taskReloadWeapon = function(ped, unused)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(unused) == 'boolean', 'Argument unused must be of type boolean.')

    local call = natives.invoke(0x62D2916F56B9CD2D, 'void', ped, unused)
end

--- @param ped integer
--- @param p1 userdata
natives.task_taskPickUpWeapon = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x55B0ECFD98596624, 'void', ped, p1)
end

--- @param ped integer
--- @return boolean
natives.task_isPedGettingUp = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x2A74E1D5F2F00EEC, 'bool', ped)
    return call
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
natives.task_taskAnimalWrithe = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x8C038A39C4A4B6D6, 'void', ped, p1, p2)
end

--- @param ped integer
--- @param killer integer
--- @param p2 boolean
--- @param weaponhash integer
--- @param p4 integer
--- @param p5 integer
natives.task_taskAnimalBleedOut = function(ped, killer, p2, weaponhash, p4, p5)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(killer) == 'integer', 'Argument killer must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')
    assert(type(p5) == 'integer', 'Argument p5 must be of type integer.')

    local call = natives.invoke(0x30A768C30D385EC5, 'void', ped, killer, p2, weaponhash, p4, p5)
end

-- This native checks if a ped is on the ground, in pain from a (gunshot) wound.
--- @param ped integer
--- @return boolean
natives.task_isPedInWrithe = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xDEB6D52126E7D640, 'bool', ped)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.task_n0X3F8387Db1B9F31B7 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x3F8387DB1B9F31B7, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @return any
natives.task_n0X756C7B4C43Df0422 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x756C7B4C43DF0422, 'any', p0)
    return call
end

--- @return any
natives.task_n0X351F74Ed6177Ebe7 = function()

    local call = natives.invoke(0x351F74ED6177EBE7, 'any')
    return call
end

--- @param p0 userdata
--- @return any
natives.task_n0X6C50B9Dccca70023 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x6C50B9DCCCA70023, 'any', p0)
    return call
end

--- @param ped integer
--- @param reviver integer
--- @param tool integer
natives.task_taskReviveTarget = function(ped, reviver, tool)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(reviver) == 'integer', 'Argument reviver must be of type integer.')
    assert(type(tool) == 'integer', 'Argument tool must be of type integer.')

    local call = natives.invoke(0x356088527D9EBAAD, 'void', ped, reviver, tool)
end

-- Note: patrolRoute must be prefixed with 'miss_' for it to be valid
--- @param patrolroute string
natives.task_openPatrolRoute = function(patrolroute)
    assert(type(patrolroute) == 'string', 'Argument patrolroute must be of type string.')

    local call = natives.invoke(0xA36BFB5EE89F3D82, 'void', patrolroute)
end

natives.task_closePatrolRoute = function()

    local call = natives.invoke(0xB043ECA801B8CBC1, 'void')
end

--- @param nodeid integer
--- @param scenarioname string
--- @param x number
--- @param y number
--- @param z number
--- @param lookposx number
--- @param lookposy number
--- @param lookposz number
--- @param duration integer
--- @param p9 boolean
natives.task_addPatrolRouteNode = function(nodeid, scenarioname, x, y, z, lookposx, lookposy, lookposz, duration, p9)
    assert(type(nodeid) == 'integer', 'Argument nodeid must be of type integer.')
    assert(type(scenarioname) == 'string', 'Argument scenarioname must be of type string.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(lookposx) == 'number', 'Argument lookposx must be of type number.')
    assert(type(lookposy) == 'number', 'Argument lookposy must be of type number.')
    assert(type(lookposz) == 'number', 'Argument lookposz must be of type number.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')
    assert(type(p9) == 'boolean', 'Argument p9 must be of type boolean.')

    local call = natives.invoke(0x8EDF950167586B7C, 'void', nodeid, scenarioname, x, y, z, lookposx, lookposy, lookposz, duration, p9)
end

--- @param node1 integer
--- @param node2 integer
natives.task_addPatrolRouteLink = function(node1, node2)
    assert(type(node1) == 'integer', 'Argument node1 must be of type integer.')
    assert(type(node2) == 'integer', 'Argument node2 must be of type integer.')

    local call = natives.invoke(0x23083260DEC3A551, 'void', node1, node2)
end

natives.task_createPatrolRoute = function()

    local call = natives.invoke(0xAF8A443CCC8018DC, 'void')
end

--- @param patrolroute string
natives.task_deletePatrolRoute = function(patrolroute)
    assert(type(patrolroute) == 'string', 'Argument patrolroute must be of type string.')

    local call = natives.invoke(0x7767DD9D65E91319, 'void', patrolroute)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.task_n0X643Fd1556F621772 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x643FD1556F621772, 'any', p0, p1, p2)
    return call
end

--- @param ped integer
--- @param patrolroute string
--- @param p2 userdata
--- @param p3 boolean
--- @param p4 boolean
natives.task_taskPatrol = function(ped, patrolroute, p2, p3, p4)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(patrolroute) == 'string', 'Argument patrolroute must be of type string.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')

    local call = natives.invoke(0xBDA5DF49D080FE4E, 'void', ped, patrolroute, p2, p3, p4)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
natives.task_taskPatrol2 = function(p0, p1, p2, p3, p4, p5, p6, p7)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')

    local call = natives.invoke(0x964B06C88E4C86DB, 'void', p0, p1, p2, p3, p4, p5, p6, p7)
end

-- Makes the ped run to take cover
--- @param ped integer
natives.task_taskStayInCover = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xE5DA8615A6180789, 'void', ped)
end

--- @param ped integer
--- @param target integer
--- @param p2 number
natives.task_taskVehicleShootAtPed = function(ped, target, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(target) == 'integer', 'Argument target must be of type integer.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')

    local call = natives.invoke(0x10AB107B887214D8, 'void', ped, target, p2)
end

--- @param ped integer
--- @param target integer
natives.task_taskVehicleAimAtPed = function(ped, target)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(target) == 'integer', 'Argument target must be of type integer.')

    local call = natives.invoke(0xE41885592B08B097, 'void', ped, target)
end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param p4 number
natives.task_taskVehicleShootAtCoord = function(ped, x, y, z, p4)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')

    local call = natives.invoke(0x5190796ED39C9B6D, 'void', ped, x, y, z, p4)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.task_n0Xaf2Ef28Ce3084505 = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xAF2EF28CE3084505, 'void', p0, p1, p2, p3)
end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
natives.task_taskVehicleAimAtCoord = function(ped, x, y, z)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0x447C1E9EF844BC0F, 'void', ped, x, y, z)
end

--- @param ped integer
--- @param vehicle integer
--- @param x number
--- @param y number
--- @param z number
--- @param speed number
--- @param behaviorflag integer
--- @param stoppingrange number
natives.task_taskVehicleGotoNavmesh = function(ped, vehicle, x, y, z, speed, behaviorflag, stoppingrange)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(speed) == 'number', 'Argument speed must be of type number.')
    assert(type(behaviorflag) == 'integer', 'Argument behaviorflag must be of type integer.')
    assert(type(stoppingrange) == 'number', 'Argument stoppingrange must be of type number.')

    local call = natives.invoke(0x195AEEB13CEFE2EE, 'void', ped, vehicle, x, y, z, speed, behaviorflag, stoppingrange)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
--- @param p9 userdata
--- @param p10 userdata
--- @param p11 userdata
--- @param p12 userdata
--- @param p13 userdata
--- @param p14 userdata
--- @param p15 userdata
natives.task_taskGoToCoordWhileAimingAtCoord = function(ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')
    assert(type(p10) == 'userdata', 'Argument p10 must be of type userdata.')
    assert(type(p11) == 'userdata', 'Argument p11 must be of type userdata.')
    assert(type(p12) == 'userdata', 'Argument p12 must be of type userdata.')
    assert(type(p13) == 'userdata', 'Argument p13 must be of type userdata.')
    assert(type(p14) == 'userdata', 'Argument p14 must be of type userdata.')
    assert(type(p15) == 'userdata', 'Argument p15 must be of type userdata.')

    local call = natives.invoke(0x11315AB3385B8AC0, 'void', ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
--- @param p9 userdata
--- @param p10 userdata
--- @param p11 userdata
--- @param p12 userdata
--- @param p13 userdata
--- @param p14 userdata
--- @param p15 userdata
natives.task_taskGoToCoordWhileAimingAtCoordUsingCombatStyle = function(ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')
    assert(type(p10) == 'userdata', 'Argument p10 must be of type userdata.')
    assert(type(p11) == 'userdata', 'Argument p11 must be of type userdata.')
    assert(type(p12) == 'userdata', 'Argument p12 must be of type userdata.')
    assert(type(p13) == 'userdata', 'Argument p13 must be of type userdata.')
    assert(type(p14) == 'userdata', 'Argument p14 must be of type userdata.')
    assert(type(p15) == 'userdata', 'Argument p15 must be of type userdata.')

    local call = natives.invoke(0x639C0425A0B4E77E, 'void', ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15)
end

--- @param ped1 integer
--- @param x number
--- @param y number
--- @param z number
--- @param ped2 integer
--- @param p5 number
--- @param p6 userdata
--- @param p7 number
--- @param p8 number
--- @param p9 userdata
--- @param p10 userdata
--- @param p11 userdata
--- @param firingpattern integer
--- @param p13 integer
--- @param p14 userdata
natives.task_taskGoToCoordWhileAimingAtEntity = function(ped1, x, y, z, ped2, p5, p6, p7, p8, p9, p10, p11, firingpattern, p13, p14)
    assert(type(ped1) == 'integer', 'Argument ped1 must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(ped2) == 'integer', 'Argument ped2 must be of type integer.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'number', 'Argument p7 must be of type number.')
    assert(type(p8) == 'number', 'Argument p8 must be of type number.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')
    assert(type(p10) == 'userdata', 'Argument p10 must be of type userdata.')
    assert(type(p11) == 'userdata', 'Argument p11 must be of type userdata.')
    assert(type(firingpattern) == 'integer', 'Argument firingpattern must be of type integer.')
    assert(type(p13) == 'integer', 'Argument p13 must be of type integer.')
    assert(type(p14) == 'userdata', 'Argument p14 must be of type userdata.')

    local call = natives.invoke(0xB2A16444EAD9AE47, 'void', ped1, x, y, z, ped2, p5, p6, p7, p8, p9, p10, p11, firingpattern, p13, p14)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
--- @param p9 userdata
--- @param p10 userdata
--- @param p11 userdata
--- @param p12 userdata
--- @param p13 userdata
--- @param p14 userdata
natives.task_taskGoToCoordWhileAimingAtEntityUsingCombatStyle = function(ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')
    assert(type(p10) == 'userdata', 'Argument p10 must be of type userdata.')
    assert(type(p11) == 'userdata', 'Argument p11 must be of type userdata.')
    assert(type(p12) == 'userdata', 'Argument p12 must be of type userdata.')
    assert(type(p13) == 'userdata', 'Argument p13 must be of type userdata.')
    assert(type(p14) == 'userdata', 'Argument p14 must be of type userdata.')

    local call = natives.invoke(0x78426D0982D083C9, 'void', ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14)
end

-- shootatEntity:
-- If true, peds will shoot at Entity till it is dead.
-- If false, peds will just walk till they reach the entity and will cease shooting.
--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
--- @param p9 userdata
--- @param p10 userdata
natives.task_taskGoToEntityWhileAimingAtEntity = function(ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')
    assert(type(p10) == 'userdata', 'Argument p10 must be of type userdata.')

    local call = natives.invoke(0x97465886D35210E9, 'void', ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
--- @param p9 userdata
--- @param p10 userdata
natives.task_taskGoToEntityWhileAimingAtEntityUsingCombatStyle = function(ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')
    assert(type(p10) == 'userdata', 'Argument p10 must be of type userdata.')

    local call = natives.invoke(0xCEF0117C233026AD, 'void', ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)
end

--- @param ped integer
--- @param gotolocationx number
--- @param gotolocationy number
--- @param gotolocationz number
--- @param focuslocationx number
--- @param focuslocationy number
--- @param focuslocationz number
--- @param speed number
--- @param shootatenemies boolean
--- @param distancetostopat number
--- @param noroadsdistance number
--- @param unktrue boolean
--- @param unkflag integer
--- @param aimingflag integer
--- @param firingpattern integer
natives.task_taskGoToCoordAndAimAtHatedEntitiesNearCoord = function(ped, gotolocationx, gotolocationy, gotolocationz, focuslocationx, focuslocationy, focuslocationz, speed, shootatenemies, distancetostopat, noroadsdistance, unktrue, unkflag, aimingflag, firingpattern)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(gotolocationx) == 'number', 'Argument gotolocationx must be of type number.')
    assert(type(gotolocationy) == 'number', 'Argument gotolocationy must be of type number.')
    assert(type(gotolocationz) == 'number', 'Argument gotolocationz must be of type number.')
    assert(type(focuslocationx) == 'number', 'Argument focuslocationx must be of type number.')
    assert(type(focuslocationy) == 'number', 'Argument focuslocationy must be of type number.')
    assert(type(focuslocationz) == 'number', 'Argument focuslocationz must be of type number.')
    assert(type(speed) == 'number', 'Argument speed must be of type number.')
    assert(type(shootatenemies) == 'boolean', 'Argument shootatenemies must be of type boolean.')
    assert(type(distancetostopat) == 'number', 'Argument distancetostopat must be of type number.')
    assert(type(noroadsdistance) == 'number', 'Argument noroadsdistance must be of type number.')
    assert(type(unktrue) == 'boolean', 'Argument unktrue must be of type boolean.')
    assert(type(unkflag) == 'integer', 'Argument unkflag must be of type integer.')
    assert(type(aimingflag) == 'integer', 'Argument aimingflag must be of type integer.')
    assert(type(firingpattern) == 'integer', 'Argument firingpattern must be of type integer.')

    local call = natives.invoke(0xA55547801EB331FC, 'void', ped, gotolocationx, gotolocationy, gotolocationz, focuslocationx, focuslocationy, focuslocationz, speed, shootatenemies, distancetostopat, noroadsdistance, unktrue, unkflag, aimingflag, firingpattern)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
--- @param p9 userdata
--- @param p10 userdata
--- @param p11 userdata
--- @param p12 userdata
--- @param p13 userdata
--- @param p14 userdata
natives.task_taskGoToCoordAndAimAtHatedEntitiesNearCoordUsingCombatStyle = function(ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')
    assert(type(p10) == 'userdata', 'Argument p10 must be of type userdata.')
    assert(type(p11) == 'userdata', 'Argument p11 must be of type userdata.')
    assert(type(p12) == 'userdata', 'Argument p12 must be of type userdata.')
    assert(type(p13) == 'userdata', 'Argument p13 must be of type userdata.')
    assert(type(p14) == 'userdata', 'Argument p14 must be of type userdata.')

    local call = natives.invoke(0x87BD711FC31EA273, 'void', ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14)
end

-- Makes the ped ragdoll like when falling from a great height
--- @param ped integer
--- @param p1 integer
--- @param p2 integer
--- @param p3 integer
natives.task_setHighFallTask = function(ped, p1, p2, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')

    local call = natives.invoke(0x8C825BDC7741D37C, 'void', ped, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.task_n0X5217B7B6Db78E1F3 = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x5217B7B6DB78E1F3, 'void', p0, p1, p2, p3, p4)
end

--- @param waypointrecording string
natives.task_requestWaypointRecording = function(waypointrecording)
    assert(type(waypointrecording) == 'string', 'Argument waypointrecording must be of type string.')

    local call = natives.invoke(0x9EEFB62EB27B5792, 'void', waypointrecording)
end

--- @param waypointrecording string
--- @return boolean
natives.task_getIsWaypointRecordingLoaded = function(waypointrecording)
    assert(type(waypointrecording) == 'string', 'Argument waypointrecording must be of type string.')

    local call = natives.invoke(0xCB4E8BE8A0063C5D, 'bool', waypointrecording)
    return call
end

--- @param waypointrecording string
natives.task_removeWaypointRecording = function(waypointrecording)
    assert(type(waypointrecording) == 'string', 'Argument waypointrecording must be of type string.')

    local call = natives.invoke(0xFF1B8B4AA1C25DC8, 'void', waypointrecording)
end

natives.task_n0Xf718931A82Eeb898 = function()

    local call = natives.invoke(0xF718931A82EEB898, 'void')
end

--- @param waypointrecording string
--- @param points integer
--- @return boolean
natives.task_waypointRecordingGetNumPoints = function(waypointrecording, points)
    assert(type(waypointrecording) == 'string', 'Argument waypointrecording must be of type string.')
    assert(type(points) == 'integer', 'Argument points must be of type integer.')

    local call = natives.invoke(0x5343532C01A07234, 'bool', waypointrecording, points)
    return call
end

--- @param waypointrecording string
--- @param point integer
--- @param coord integer
--- @return boolean
natives.task_waypointRecordingGetCoord = function(waypointrecording, point, coord)
    assert(type(waypointrecording) == 'string', 'Argument waypointrecording must be of type string.')
    assert(type(point) == 'integer', 'Argument point must be of type integer.')
    assert(type(coord) == 'integer', 'Argument coord must be of type integer.')

    local call = natives.invoke(0x2FB897405C90B361, 'bool', waypointrecording, point, coord)
    return call
end

--- @param waypointrecording string
--- @param point integer
--- @return number
natives.task_waypointRecordingGetSpeedAtPoint = function(waypointrecording, point)
    assert(type(waypointrecording) == 'string', 'Argument waypointrecording must be of type string.')
    assert(type(point) == 'integer', 'Argument point must be of type integer.')

    local call = natives.invoke(0x005622AEBC33ACA9, 'float', waypointrecording, point)
    return call
end

--- @param waypointrecording string
--- @param x number
--- @param y number
--- @param z number
--- @param point integer
--- @return boolean
natives.task_waypointRecordingGetClosestWaypoint = function(waypointrecording, x, y, z, point)
    assert(type(waypointrecording) == 'string', 'Argument waypointrecording must be of type string.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(point) == 'integer', 'Argument point must be of type integer.')

    local call = natives.invoke(0xB629A298081F876F, 'bool', waypointrecording, x, y, z, point)
    return call
end

--- @param ped integer
--- @param p1 userdata
natives.task_taskFollowWaypointRecordingAdvanced = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x0CFC13EBC19BCA52, 'void', ped, p1)
end

--- @param ped integer
--- @param waypointrecording string
--- @param p2 integer
--- @param flag integer
--- @param p4 integer
--- @param p5 boolean
--- @param p6 userdata
--- @param p7 integer
natives.task_taskFollowWaypointRecording = function(ped, waypointrecording, p2, flag, p4, p5, p6, p7)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(waypointrecording) == 'string', 'Argument waypointrecording must be of type string.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'integer', 'Argument p7 must be of type integer.')

    local call = natives.invoke(0x0759591819534F7B, 'void', ped, waypointrecording, p2, flag, p4, p5, p6, p7)
end

--- @param ped integer
--- @param waypointrecording string
--- @param p2 number
--- @param p3 integer
--- @param p4 integer
--- @param p5 integer
--- @param p6 boolean
natives.task_taskFollowWaypointRecordingAtOffset = function(ped, waypointrecording, p2, p3, p4, p5, p6)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(waypointrecording) == 'string', 'Argument waypointrecording must be of type string.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')
    assert(type(p5) == 'integer', 'Argument p5 must be of type integer.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')

    local call = natives.invoke(0xBE9B0520BD7C445B, 'void', ped, waypointrecording, p2, p3, p4, p5, p6)
end

--- @param ped0 integer
--- @param ped1 integer
--- @param waypointrecording string
--- @param p3 number
--- @param p4 number
--- @param p5 integer
--- @param p6 integer
--- @param p7 integer
--- @param p8 boolean
natives.task_taskFollowEntityAlongWaypointRecordingAtOffset = function(ped0, ped1, waypointrecording, p3, p4, p5, p6, p7, p8)
    assert(type(ped0) == 'integer', 'Argument ped0 must be of type integer.')
    assert(type(ped1) == 'integer', 'Argument ped1 must be of type integer.')
    assert(type(waypointrecording) == 'string', 'Argument waypointrecording must be of type string.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'integer', 'Argument p5 must be of type integer.')
    assert(type(p6) == 'integer', 'Argument p6 must be of type integer.')
    assert(type(p7) == 'integer', 'Argument p7 must be of type integer.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')

    local call = natives.invoke(0x4D2B787BAE9AB760, 'void', ped0, ped1, waypointrecording, p3, p4, p5, p6, p7, p8)
end

--- @param ped integer
--- @param waypointrecording string
--- @return boolean
natives.task_isWaypointPlaybackGoingOnForPed = function(ped, waypointrecording)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(waypointrecording) == 'string', 'Argument waypointrecording must be of type string.')

    local call = natives.invoke(0xE03B3F2D3DC59B64, 'bool', ped, waypointrecording)
    return call
end

--- @param ped integer
--- @return number
natives.task_getPedWaypointProgress = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x2720AAA75001E094, 'int', ped)
    return call
end

--- @param ped integer
--- @return number
natives.task_getPedWaypointDistance = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xE6A877C64CAF1BC5, 'float', ped)
    return call
end

--- @param ped integer
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @return any
natives.task_setPedWaypointRouteOffset = function(ped, p1, p2, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')

    local call = natives.invoke(0xED98E10B0AFCE4B4, 'any', ped, p1, p2, p3)
    return call
end

--- @param waypointrecording string
--- @param p1 integer
--- @return number
natives.task_getWaypointDistanceAlongRoute = function(waypointrecording, p1)
    assert(type(waypointrecording) == 'string', 'Argument waypointrecording must be of type string.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xA5B769058763E497, 'float', waypointrecording, p1)
    return call
end

--- @param waypointrecording string
--- @param x number
--- @param y number
--- @param z number
--- @return number
natives.task_n0X3Acc128510142B9D = function(waypointrecording, x, y, z)
    assert(type(waypointrecording) == 'string', 'Argument waypointrecording must be of type string.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0x3ACC128510142B9D, 'float', waypointrecording, x, y, z)
    return call
end

--- @param ped integer
--- @return boolean
natives.task_waypointPlaybackGetIsPaused = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x701375A7D43F01CB, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.task_waypointPlaybackGetIsAiming = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xD73A5D1F0325C71C, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.task_waypointPlaybackGetIsShooting = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xA5B94DF8AF058F46, 'bool', ped)
    return call
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.task_waypointPlaybackPause = function(ped, p1, p2, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x0F342546AA06FED5, 'void', ped, p1, p2, p3)
end

--- @param ped integer
--- @param p1 boolean
--- @param p2 integer
--- @param p3 integer
natives.task_waypointPlaybackResume = function(ped, p1, p2, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')

    local call = natives.invoke(0x244F70C84C547D2D, 'void', ped, p1, p2, p3)
end

--- @param ped integer
--- @param speed number
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.task_waypointPlaybackOverrideSpeed = function(ped, speed, p2, p3, p4)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(speed) == 'number', 'Argument speed must be of type number.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x7D7D2B47FA788E85, 'void', ped, speed, p2, p3, p4)
end

--- @param ped integer
natives.task_waypointPlaybackUseDefaultSpeed = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x6599D834B12D0800, 'void', ped)
end

--- @param ped integer
--- @return number
natives.task_getPedWaypointOverrideSpeed = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xD39A2F3E7FCAFF08, 'float', ped)
    return call
end

--- @param waypointrecording string
--- @param p1 boolean
--- @param p2 number
--- @param p3 number
--- @param p4 boolean
natives.task_useWaypointRecordingAsAssistedMovementRoute = function(waypointrecording, p1, p2, p3, p4)
    assert(type(waypointrecording) == 'string', 'Argument waypointrecording must be of type string.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')

    local call = natives.invoke(0x5A353B8E6B1095B5, 'void', waypointrecording, p1, p2, p3, p4)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.task_waypointPlaybackStartAimingAtPed = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x20E330937C399D29, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.task_waypointPlaybackStartAimingAtEntity = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x4F158205E0C74385, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
natives.task_waypointPlaybackStartAimingAtCoord = function(p0, p1, p2, p3, p4, p5)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0x8968400D900ED8B3, 'void', p0, p1, p2, p3, p4, p5)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.task_waypointPlaybackStartShootingAtPed = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0xE70BA7B90F8390DC, 'void', p0, p1, p2, p3, p4)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.task_waypointPlaybackStartShootingAtEntity = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x4AF458F71C1196D2, 'void', p0, p1, p2, p3, p4)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
natives.task_waypointPlaybackStartShootingAtCoord = function(p0, p1, p2, p3, p4, p5, p6)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0x057A25CFCC9DB671, 'void', p0, p1, p2, p3, p4, p5, p6)
end

--- @param p0 userdata
natives.task_waypointPlaybackStopAimingOrShooting = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x47EFA040EBB8E2EA, 'void', p0)
end

--- @param route string
natives.task_assistedMovementRemoveRoute = function(route)
    assert(type(route) == 'string', 'Argument route must be of type string.')

    local call = natives.invoke(0x3548536485DD792B, 'void', route)
end

--- @param pathname string
--- @param p1 userdata
--- @param nodes integer
--- @param p3 integer
--- @return boolean
natives.task_createWaypointPath = function(pathname, p1, nodes, p3)
    assert(type(pathname) == 'string', 'Argument pathname must be of type string.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(nodes) == 'integer', 'Argument nodes must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')

    local call = natives.invoke(0x5C885E0978B6AD60, 'bool', pathname, p1, nodes, p3)
    return call
end

--- @param route string
--- @return boolean
natives.task_assistedMovementIsRouteLoaded = function(route)
    assert(type(route) == 'string', 'Argument route must be of type string.')

    local call = natives.invoke(0x60F9A4393A21F741, 'bool', route)
    return call
end

--- @param route string
--- @param props integer
natives.task_assistedMovementSetRouteProperties = function(route, props)
    assert(type(route) == 'string', 'Argument route must be of type string.')
    assert(type(props) == 'integer', 'Argument props must be of type integer.')

    local call = natives.invoke(0xD5002D78B7162E1B, 'void', route, props)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_setEnableSpeedRestrainForWaypointRecordingLeader = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x295F03DC97BEEBC1, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
natives.task_setUpSpeedRestrainInformationForPlayerFollower = function(p0, p1, p2, p3, p4, p5, p6, p7, p8)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')

    local call = natives.invoke(0xB5C51DD544F14F58, 'void', p0, p1, p2, p3, p4, p5, p6, p7, p8)
end

--- @param ped integer
--- @param vehicle integer
--- @param waypointrecording string
--- @param drivingmode integer
--- @param p4 userdata
--- @param ewaypoint integer
--- @param flag integer
--- @param p7 number
--- @param p8 boolean
--- @param stoppingdist number
--- @param p10 userdata
natives.task_taskVehicleFollowWaypointRecording = function(ped, vehicle, waypointrecording, drivingmode, p4, ewaypoint, flag, p7, p8, stoppingdist, p10)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(waypointrecording) == 'string', 'Argument waypointrecording must be of type string.')
    assert(type(drivingmode) == 'integer', 'Argument drivingmode must be of type integer.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(ewaypoint) == 'integer', 'Argument ewaypoint must be of type integer.')
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')
    assert(type(p7) == 'number', 'Argument p7 must be of type number.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')
    assert(type(stoppingdist) == 'number', 'Argument stoppingdist must be of type number.')
    assert(type(p10) == 'userdata', 'Argument p10 must be of type userdata.')

    local call = natives.invoke(0x3123FAA6DB1CF7ED, 'void', ped, vehicle, waypointrecording, drivingmode, p4, ewaypoint, flag, p7, p8, stoppingdist, p10)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
--- @param p9 userdata
natives.task_taskVehicleFollowWaypointRecording2 = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')

    local call = natives.invoke(0x041D17A9E221AE30, 'void', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)
end

--- @param p0 userdata
--- @param p1 userdata
--- @return boolean
natives.task_isWaypointPlaybackGoingOnForVehicle = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xF5134943EA29868C, 'bool', p0, p1)
    return call
end

--- @param vehicle integer
--- @return number
natives.task_getVehicleWaypointProgress = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x9824CFF8FC66E159, 'int', vehicle)
    return call
end

--- @param vehicle integer
--- @return number
natives.task_getVehicleWaypointTargetPoint = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x416B62AC8B9E5BBD, 'int', vehicle)
    return call
end

--- @param vehicle integer
natives.task_vehicleWaypointPlaybackPause = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x8A4E6AC373666BC5, 'void', vehicle)
end

--- @param p0 userdata
--- @return any
natives.task_vehicleWaypointPlaybackGetIsPaused = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x4D6D30AB18B0B089, 'any', p0)
    return call
end

--- @param vehicle integer
natives.task_vehicleWaypointPlaybackResume = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0xDC04FCAA7839D492, 'void', vehicle)
end

--- @param vehicle integer
natives.task_vehicleWaypointPlaybackUseDefaultSpeed = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x5CEB25A7D2848963, 'void', vehicle)
end

--- @param vehicle integer
--- @param speed number
natives.task_vehicleWaypointPlaybackOverrideSpeed = function(vehicle, speed)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(speed) == 'number', 'Argument speed must be of type number.')

    local call = natives.invoke(0x121F0593E0A431D7, 'void', vehicle, speed)
end

--- @param p0 userdata
--- @return any
natives.task_getVehicleWaypointPlaybackOverrideSpeed = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x3DC971EB22F73447, 'any', p0)
    return call
end

--- @param ped integer
--- @param toggle boolean
natives.task_taskSetBlockingOfNonTemporaryEvents = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x90D2156198831D69, 'void', ped, toggle)
end

--- @param ped integer
--- @param p1 boolean
--- @param p2 userdata
--- @param p3 boolean
natives.task_taskSetStealthMovement = function(ped, p1, p2, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0x4C3FA937B44A90FA, 'void', ped, p1, p2, p3)
end

--- @param ped integer
--- @param p1 boolean
--- @param p2 userdata
--- @param p3 boolean
natives.task_taskSetCrouchMovement = function(ped, p1, p2, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0x17293C633C8AC019, 'void', ped, p1, p2, p3)
end

-- motionStateHash: see FORCE_PED_MOTION_STATE
--- @param ped integer
--- @param motionstatehash integer
--- @param p2 boolean
natives.task_taskForceMotionState = function(ped, motionstatehash, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(motionstatehash) == 'integer', 'Argument motionstatehash must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x4F056E1AFFEF17AB, 'void', ped, motionstatehash, p2)
end

--- @param ped integer
--- @param task string
--- @param multiplier number
--- @param p3 boolean
--- @param animdict string
--- @param flags integer
natives.task_taskMoveNetworkByName = function(ped, task, multiplier, p3, animdict, flags)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(task) == 'string', 'Argument task must be of type string.')
    assert(type(multiplier) == 'number', 'Argument multiplier must be of type number.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')
    assert(type(animdict) == 'string', 'Argument animdict must be of type string.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')

    local call = natives.invoke(0x2D537BA194896636, 'void', ped, task, multiplier, p3, animdict, flags)
end

--- @param ped integer
--- @param movenetworkdefname string
--- @param taskdata userdata
--- @param p3 number
--- @param p4 boolean
--- @param animdict string
--- @param flags integer
natives.task_taskMoveNetworkByNameWithInitParams = function(ped, movenetworkdefname, taskdata, p3, p4, animdict, flags)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(movenetworkdefname) == 'string', 'Argument movenetworkdefname must be of type string.')
    assert(type(taskdata) == 'userdata', 'Argument taskdata must be of type userdata.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')
    assert(type(animdict) == 'string', 'Argument animdict must be of type string.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')

    local call = natives.invoke(0x139805C2A67C4795, 'void', ped, movenetworkdefname, taskdata, p3, p4, animdict, flags)
end

--- @param ped integer
--- @param movenetworkdefname string
--- @param taskdata userdata
--- @param xpos number
--- @param ypos number
--- @param zpos number
--- @param xrot number
--- @param yrot number
--- @param zrot number
--- @param p9 integer
--- @param p10 number
--- @param p11 integer
--- @param p12 integer
--- @param flag integer
--- @param p14 integer
natives.task_taskMoveNetworkAdvancedByNameWithInitParams = function(ped, movenetworkdefname, taskdata, xpos, ypos, zpos, xrot, yrot, zrot, p9, p10, p11, p12, flag, p14)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(movenetworkdefname) == 'string', 'Argument movenetworkdefname must be of type string.')
    assert(type(taskdata) == 'userdata', 'Argument taskdata must be of type userdata.')
    assert(type(xpos) == 'number', 'Argument xpos must be of type number.')
    assert(type(ypos) == 'number', 'Argument ypos must be of type number.')
    assert(type(zpos) == 'number', 'Argument zpos must be of type number.')
    assert(type(xrot) == 'number', 'Argument xrot must be of type number.')
    assert(type(yrot) == 'number', 'Argument yrot must be of type number.')
    assert(type(zrot) == 'number', 'Argument zrot must be of type number.')
    assert(type(p9) == 'integer', 'Argument p9 must be of type integer.')
    assert(type(p10) == 'number', 'Argument p10 must be of type number.')
    assert(type(p11) == 'integer', 'Argument p11 must be of type integer.')
    assert(type(p12) == 'integer', 'Argument p12 must be of type integer.')
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')
    assert(type(p14) == 'integer', 'Argument p14 must be of type integer.')

    local call = natives.invoke(0x7B6A04F98BBAFB2C, 'void', ped, movenetworkdefname, taskdata, xpos, ypos, zpos, xrot, yrot, zrot, p9, p10, p11, p12, flag, p14)
end

--- @param ped integer
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
--- @param p9 userdata
--- @param p10 userdata
--- @param p11 userdata
--- @param p12 userdata
--- @param p13 userdata
--- @param p14 userdata
--- @param p15 userdata
--- @param p16 userdata
--- @param p17 userdata
natives.task_taskMoveNetworkAdvancedByNameWithInitParamsAttached = function(ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')
    assert(type(p10) == 'userdata', 'Argument p10 must be of type userdata.')
    assert(type(p11) == 'userdata', 'Argument p11 must be of type userdata.')
    assert(type(p12) == 'userdata', 'Argument p12 must be of type userdata.')
    assert(type(p13) == 'userdata', 'Argument p13 must be of type userdata.')
    assert(type(p14) == 'userdata', 'Argument p14 must be of type userdata.')
    assert(type(p15) == 'userdata', 'Argument p15 must be of type userdata.')
    assert(type(p16) == 'userdata', 'Argument p16 must be of type userdata.')
    assert(type(p17) == 'userdata', 'Argument p17 must be of type userdata.')

    local call = natives.invoke(0xF92171093BCABED4, 'void', ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17)
end

--- @param ped integer
--- @return boolean
natives.task_isTaskMoveNetworkActive = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x921CE12C489C4C41, 'bool', ped)
    return call
end

-- Returns hash of the underlying move network def, see move_networks.xml
-- https:--alloc8or.re/rdr3/doc/misc/move_networks.txt
--- @param ped integer
--- @return number
natives.task_getTaskMoveNetworkId = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xCACC2F9D994504B7, 'integer', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.task_isTaskMoveNetworkReadyForTransition = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x30ED88D5E0C56A37, 'bool', ped)
    return call
end

--- @param ped integer
--- @param name string
natives.task_requestTaskMoveNetworkStateTransition = function(ped, name)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0xD01015C7316AE176, 'void', ped, name)
end

--- @param ped integer
--- @return string
natives.task_getTaskMoveNetworkState = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x717E4D1F2048376D, 'string', ped)
    return call
end

--- @param p0 userdata
--- @return any
natives.task_n0Xe9A6400D1A0E7A55 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xE9A6400D1A0E7A55, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.task_n0X615Dc4A82E90Bb48 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x615DC4A82E90BB48, 'void', p0, p1, p2)
end

--- @param ped integer
--- @param signalname string
--- @param value number
natives.task_setTaskMoveNetworkSignalFloat = function(ped, signalname, value)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(signalname) == 'string', 'Argument signalname must be of type string.')
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0xD5BB4025AE449A4E, 'void', ped, signalname, value)
end

--- @param ped integer
--- @param signalname string
--- @param value number
natives.task_setTaskMoveNetworkSignalFloat2 = function(ped, signalname, value)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(signalname) == 'string', 'Argument signalname must be of type string.')
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0x099D4A855D53B03B, 'void', ped, signalname, value)
end

--- @param ped integer
--- @param signalname string
--- @param value boolean
natives.task_setTaskMoveNetworkSignalBool = function(ped, signalname, value)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(signalname) == 'string', 'Argument signalname must be of type string.')
    assert(type(value) == 'boolean', 'Argument value must be of type boolean.')

    local call = natives.invoke(0xB0A6CFD2C69C1088, 'void', ped, signalname, value)
end

--- @param ped integer
--- @param signalname string
--- @param x number
--- @param y number
--- @param z number
natives.task_setTaskMoveNetworkSignalVector = function(ped, signalname, x, y, z)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(signalname) == 'string', 'Argument signalname must be of type string.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0x4662BFE01938D98D, 'void', ped, signalname, x, y, z)
end

--- @param ped integer
--- @param phasename string
--- @return number
natives.task_getTaskMoveNetworkPhaseFloat = function(ped, phasename)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(phasename) == 'string', 'Argument phasename must be of type string.')

    local call = natives.invoke(0x844CEEE428EA35B0, 'float', ped, phasename)
    return call
end

--- @param ped integer
--- @param eventname string
--- @return boolean
natives.task_getTaskMoveNetworkEvent = function(ped, eventname)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(eventname) == 'string', 'Argument eventname must be of type string.')

    local call = natives.invoke(0xB4F47213DF45A64C, 'bool', ped, eventname)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0X9585Ff23C4B8Ede0 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x9585FF23C4B8EDE0, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0Xeaf87Da2Be78A15B = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xEAF87DA2BE78A15B, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0X3Bbeecc5B8F35318 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x3BBEECC5B8F35318, 'void', p0, p1)
end

--- @param moveblendratio number
--- @return boolean
natives.task_isMoveBlendRatioStill = function(moveblendratio)
    assert(type(moveblendratio) == 'number', 'Argument moveblendratio must be of type number.')

    local call = natives.invoke(0x349CE7B56DAFD95C, 'bool', moveblendratio)
    return call
end

--- @param moveblendratio number
--- @return boolean
natives.task_isMoveBlendRatioWalking = function(moveblendratio)
    assert(type(moveblendratio) == 'number', 'Argument moveblendratio must be of type number.')

    local call = natives.invoke(0xF133BBBE91E1691F, 'bool', moveblendratio)
    return call
end

--- @param moveblendratio number
--- @return boolean
natives.task_isMoveBlendRatioRunning = function(moveblendratio)
    assert(type(moveblendratio) == 'number', 'Argument moveblendratio must be of type number.')

    local call = natives.invoke(0xD4D8636C0199A939, 'bool', moveblendratio)
    return call
end

--- @param moveblendratio number
--- @return boolean
natives.task_isMoveBlendRatioSprinting = function(moveblendratio)
    assert(type(moveblendratio) == 'number', 'Argument moveblendratio must be of type number.')

    local call = natives.invoke(0x24A2AD74FA9814E2, 'bool', moveblendratio)
    return call
end

--- @param ped integer
--- @return boolean
natives.task_isPedStill = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xAC29253EEF8F0180, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.task_isPedWalking = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xDE4C184B2B9B071A, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.task_isPedRunning = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xC5286FFC176F28A2, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.task_isPedSprinting = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x57E457CD2C0FC168, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.task_isPedInHitReact = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xF330A5C062B29BED, 'bool', ped)
    return call
end

--- @param ped integer
--- @param target integer
natives.task_taskArrestPed = function(ped, target)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(target) == 'integer', 'Argument target must be of type integer.')

    local call = natives.invoke(0xF3B9A78A178572B1, 'void', ped, target)
end

-- This function is hard-coded to always return false.
--- @param ped integer
--- @return boolean
natives.task_isPedBeingArrested = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x90A09F3A45FED688, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.task_isPedArrestingAnyPed = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xA9CC7856D52DBD25, 'bool', ped)
    return call
end

--- @param ped integer
natives.task_cuffPed = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x7981037A96E7D174, 'void', ped)
end

--- @param ped integer
natives.task_uncuffPed = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x67406F2C8F87FC4F, 'void', ped)
end

--- @param ped integer
--- @return boolean
natives.task_isPedCuffed = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x74E559B3BC910685, 'bool', ped)
    return call
end

--- @param ped integer
--- @return boolean
natives.task_isPedDuelling = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xC8B29D18022EA2B7, 'bool', ped)
    return call
end

-- Params: p4 either 0.2f, 0.25f, 0.31f, 0.4f
--- @param ped integer
--- @param p1 userdata
--- @param p2 number
--- @param entity integer
--- @param p4 number
--- @param p5 integer
--- @param vposopponentx number
--- @param vposopponenty number
--- @param vposopponentz number
--- @param fopponenthead number
--- @param p10 integer
natives.task_taskDuel = function(ped, p1, p2, entity, p4, p5, vposopponentx, vposopponenty, vposopponentz, fopponenthead, p10)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'integer', 'Argument p5 must be of type integer.')
    assert(type(vposopponentx) == 'number', 'Argument vposopponentx must be of type number.')
    assert(type(vposopponenty) == 'number', 'Argument vposopponenty must be of type number.')
    assert(type(vposopponentz) == 'number', 'Argument vposopponentz must be of type number.')
    assert(type(fopponenthead) == 'number', 'Argument fopponenthead must be of type number.')
    assert(type(p10) == 'integer', 'Argument p10 must be of type integer.')

    local call = natives.invoke(0x5D5B0D5BC3626E5A, 'void', ped, p1, p2, entity, p4, p5, vposopponentx, vposopponenty, vposopponentz, fopponenthead, p10)
end

--- @param p0 userdata
--- @return any
natives.task_n0X908Bb14Bce85C80E = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x908BB14BCE85C80E, 'any', p0)
    return call
end

--- @param p0 userdata
--- @return any
natives.task_n0X1F7A9A9C38C13A56 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x1F7A9A9C38C13A56, 'any', p0)
    return call
end

--- @param p0 userdata
--- @return any
natives.task_n0X3Feb770D8Ed9047A = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x3FEB770D8ED9047A, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.task_n0X30146C25686B7836 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x30146C25686B7836, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.task_n0X59Ae5Ca4Ffb4E378 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x59AE5CA4FFB4E378, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.task_n0X748D5E0D2A1A4C61 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x748D5E0D2A1A4C61, 'void', p0, p1, p2)
end

--- @param ped integer
--- @param p1 boolean
--- @param p2 number
natives.task_endDuel = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')

    local call = natives.invoke(0xEED08A3A98B847E2, 'void', ped, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0X651F0530083C0E5A = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x651F0530083C0E5A, 'void', p0, p1)
end

-- carriableSlot:
--  7 > Back of a horse
--  6 > Right side of a horse
--  5 > Left side of a horse
-- flags:
--  512: enables the prompt being the name of the item when using a generic item
--- @param entity integer
--- @param carryconfig integer
--- @param carrier integer
--- @param carriableslot integer
--- @param flags integer
natives.task_taskCarriable = function(entity, carryconfig, carrier, carriableslot, flags)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(carryconfig) == 'integer', 'Argument carryconfig must be of type integer.')
    assert(type(carrier) == 'integer', 'Argument carrier must be of type integer.')
    assert(type(carriableslot) == 'integer', 'Argument carriableslot must be of type integer.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')

    local call = natives.invoke(0xF0B4F759F35CC7F5, 'void', entity, carryconfig, carrier, carriableslot, flags)
end

--- @param p0 userdata
natives.task_n0X9Ebd34958Ab6F824 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x9EBD34958AB6F824, 'void', p0)
end

--- @param entity integer
--- @return boolean
natives.task_getIsCarriableEntity = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x0CCFE72B43C9CF96, 'bool', entity)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.task_n0X10Adfdf07B7Dffba = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x10ADFDF07B7DFFBA, 'any', p0, p1, p2)
    return call
end

--- @param ped integer
--- @param entity integer
--- @param x number
--- @param y number
--- @param z number
--- @param p5 number
--- @param flags integer
natives.task_taskPlaceCarriedEntityAtCoord = function(ped, entity, x, y, z, p5, flags)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')

    local call = natives.invoke(0xC7F0B43DCDC57E3D, 'void', ped, entity, x, y, z, p5, flags)
end

--- @param ped integer
--- @param entity integer
--- @param mount integer
--- @param p3 number
natives.task_taskPlaceCarriedEntityOnMount = function(ped, entity, mount, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(mount) == 'integer', 'Argument mount must be of type integer.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')

    local call = natives.invoke(0x6D3D87C57B3D52C7, 'void', ped, entity, mount, p3)
end

--- @param ped integer
--- @param ped2 integer
--- @param entity integer
natives.task_taskDumpCarriableFromParent = function(ped, ped2, entity)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(ped2) == 'integer', 'Argument ped2 must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x17CA98707B15926A, 'void', ped, ped2, entity)
end

--- @param ped integer
natives.task_detachCarriablePed = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x36D188AECB26094B, 'void', ped)
end

--- @param p0 userdata
natives.task_n0Xe2Cf104Add49D4Bf = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xE2CF104ADD49D4BF, 'void', p0)
end

--- @param ped integer
--- @param entity integer
natives.task_taskPickupCarriableEntity = function(ped, entity)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x502EC17B1BED4BFA, 'void', ped, entity)
end

--- @param ped integer
--- @param targetped integer
natives.task_taskHogtieTargetPed = function(ped, targetped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(targetped) == 'integer', 'Argument targetped must be of type integer.')

    local call = natives.invoke(0x27829AFD3E03AC1A, 'void', ped, targetped)
end

--- @param ped integer
--- @param targetped integer
natives.task_taskCutFreeHogtiedTargetPed = function(ped, targetped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(targetped) == 'integer', 'Argument targetped must be of type integer.')

    local call = natives.invoke(0x81D16C4FF3A77ADF, 'void', ped, targetped)
end

--- @param ped integer
--- @param targetped integer
--- @param p2 number
natives.task_taskCutFreeHogtiedTargetPed2 = function(ped, targetped, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(targetped) == 'integer', 'Argument targetped must be of type integer.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')

    local call = natives.invoke(0x525421A507216084, 'void', ped, targetped, p2)
end

-- Sets the time it takes for a hogtied ped to escape
-- -1.0f for ped to never escape
--- @param ped integer
--- @param time number
natives.task_setHogtieEscapeTimer = function(ped, time)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(time) == 'number', 'Argument time must be of type number.')

    local call = natives.invoke(0xAB591AE6B48B913E, 'void', ped, time)
end

--- @param ped integer
--- @return number
natives.task_getHogtieEscapeTimer = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x4687E69D258BBE41, 'float', ped)
    return call
end

--- @param p0 userdata
--- @return any
natives.task_n0X03D741Cb4052E26C = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x03D741CB4052E26C, 'any', p0)
    return call
end

-- https:--github.com/femga/rdr3_discoveries/tree/master/objects/composites
--- @param asset integer
--- @return boolean
natives.task_requestHerbCompositeAsset = function(asset)
    assert(type(asset) == 'integer', 'Argument asset must be of type integer.')

    local call = natives.invoke(0x73F0D0327BFA0812, 'bool', asset)
    return call
end

-- Returns true when requested asset is loaded
--- @param asset integer
--- @return boolean
natives.task_areCompositeLootableEntityDefAssetsLoaded = function(asset)
    assert(type(asset) == 'integer', 'Argument asset must be of type integer.')

    local call = natives.invoke(0x5E5D96BE25E9DF68, 'bool', asset)
    return call
end

-- groundSetting: 0: spawn on ground, 2 (1?): do not spawn on ground
-- p7: -1 in R* Scripts
-- Returns compositeId
--- @param asset integer
--- @param x number
--- @param y number
--- @param z number
--- @param heading number
--- @param groundsetting integer
--- @param p6 userdata
--- @param p7 integer
--- @return number
natives.task_createHerbComposites = function(asset, x, y, z, heading, groundsetting, p6, p7)
    assert(type(asset) == 'integer', 'Argument asset must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(heading) == 'number', 'Argument heading must be of type number.')
    assert(type(groundsetting) == 'integer', 'Argument groundsetting must be of type integer.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'integer', 'Argument p7 must be of type integer.')

    local call = natives.invoke(0x5B4BBE80AD5972DC, 'int', asset, x, y, z, heading, groundsetting, p6, p7)
    return call
end

-- Params: p1 is always false except in script nb_egg_protector
--- @param compositeid integer
--- @param p1 boolean
natives.task_deletePatchObjectsFromHerbComposites = function(compositeid, p1)
    assert(type(compositeid) == 'integer', 'Argument compositeid must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x5758B1EE0C3FD4AC, 'void', compositeid, p1)
end

-- Flowers, Stalks or whatever the composite has
--- @param compositeid integer
--- @param outentities userdata
--- @return number
natives.task_getHerbCompositeNumEntities = function(compositeid, outentities)
    assert(type(compositeid) == 'integer', 'Argument compositeid must be of type integer.')
    assert(type(outentities) == 'userdata', 'Argument outentities must be of type userdata.')

    local call = natives.invoke(0x96C6ED22FB742C3E, 'int', compositeid, outentities)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.task_n0Xdf56A2B50C04Dea4 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xDF56A2B50C04DEA4, 'any', p0, p1)
    return call
end

--- @param ped integer
--- @param entity integer
natives.task_taskLootEntity = function(ped, entity)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x48FAE038401A2888, 'void', ped, entity)
end

--- @param ped integer
--- @param vehicle integer
natives.task_taskBreakVehicleDoorLock = function(ped, vehicle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0xBB28D1BC9EA8A6A5, 'void', ped, vehicle)
end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param p4 integer
--- @param p5 number
natives.task_taskLootNearestEntity = function(ped, x, y, z, p4, p5)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')

    local call = natives.invoke(0xCF1501CBC4059412, 'void', ped, x, y, z, p4, p5)
end

--- @param ped integer
--- @param targetped integer
natives.task_taskLassoPed = function(ped, targetped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(targetped) == 'integer', 'Argument targetped must be of type integer.')

    local call = natives.invoke(0xC716EB2BD16370A3, 'void', ped, targetped)
end

--- @param ped integer
natives.task_taskHogtieable = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x6AFD8FE0D723328F, 'void', ped)
end

-- getupSetHash: see nm_blend_out_sets.meta
--- @param ped integer
--- @param flags integer
--- @param getupsethash integer
--- @param p3 string
--- @param p4 string
--- @param p5 number
natives.task_unhogtiePed = function(ped, flags, getupsethash, p3, p4, p5)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')
    assert(type(getupsethash) == 'integer', 'Argument getupsethash must be of type integer.')
    assert(type(p3) == 'string', 'Argument p3 must be of type string.')
    assert(type(p4) == 'string', 'Argument p4 must be of type string.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')

    local call = natives.invoke(0x79559BAD83CCD038, 'void', ped, flags, getupsethash, p3, p4, p5)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.task_n0X722D6A49200174Fe = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x722D6A49200174FE, 'void', p0, p1, p2, p3, p4)
end

--- @param object integer
natives.task_makeObjectCarriable = function(object)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')

    local call = natives.invoke(0x78B4567E18B54480, 'void', object)
end

--- @param object integer
natives.task_makeObjectNotCarriable = function(object)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')

    local call = natives.invoke(0x67BFCED22909834D, 'void', object)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0X8E1Dde26D270Cc5E = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x8E1DDE26D270CC5E, 'void', p0, p1)
end

--- @param p0 userdata
--- @param item integer
natives.task_n0Xa6A76D666A281F2D = function(p0, item)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(item) == 'integer', 'Argument item must be of type integer.')

    local call = natives.invoke(0xA6A76D666A281F2D, 'void', p0, item)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0Xa21Aa2F0C2180125 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xA21AA2F0C2180125, 'void', p0, p1)
end

--- @param item integer
--- @return number
natives.task_findModelForItem = function(item)
    assert(type(item) == 'integer', 'Argument item must be of type integer.')

    local call = natives.invoke(0xE47DD64B9F02677D, 'integer', item)
    return call
end

--- @param p0 userdata
natives.task_n0Xff745B0346E19E2C = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xFF745B0346E19E2C, 'void', p0)
end

--- @param p0 userdata
--- @return any
natives.task_n0Xb8F52A3F84A7Cc59 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xB8F52A3F84A7CC59, 'any', p0)
    return call
end

--- @param p0 userdata
natives.task_n0X6Afda2264925Bd11 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x6AFDA2264925BD11, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0X816A3Acd265E2297 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x816A3ACD265E2297, 'void', p0, p1)
end

--- @param p0 userdata
natives.task_n0X4E806A395D43A458 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x4E806A395D43A458, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.task_setTeamCarriableEntity = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x545BF19F86E80F11, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @return boolean
natives.task_isTeamCarriableEntity = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x559A6F8C5133B4EE, 'bool', p0, p1)
    return call
end

-- Returns true while a hat is being picked up
-- _IS_A* - _IS_D*
--- @param hatobject integer
--- @return boolean
natives.task_isHatBeingPickedUp = function(hatobject)
    assert(type(hatobject) == 'integer', 'Argument hatobject must be of type integer.')

    local call = natives.invoke(0x11CD066F54DA0133, 'bool', hatobject)
    return call
end

--- @param object integer
--- @param ped integer
natives.task_n0X9Addbb9242179D56 = function(object, ped)
    assert(type(object) == 'integer', 'Argument object must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x9ADDBB9242179D56, 'void', object, ped)
end

-- Returns true while a hat is being picked up. Similar to 0x11CD066F54DA0133
-- _IS_A* - _IS_D*
--- @param hatobject integer
--- @return boolean
natives.task_isHatBeingPickedUp2 = function(hatobject)
    assert(type(hatobject) == 'integer', 'Argument hatobject must be of type integer.')

    local call = natives.invoke(0x4ECCC2815CA79AE2, 'bool', hatobject)
    return call
end

-- _A*
--- @param hatobject integer
--- @param ped integer
natives.task_taskEquipHat = function(hatobject, ped)
    assert(type(hatobject) == 'integer', 'Argument hatobject must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xAA0AF6025160243A, 'void', hatobject, ped)
end

--- @param p0 userdata
--- @return any
natives.task_n0X7Cb99Fadde73Cd1B = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x7CB99FADDE73CD1B, 'any', p0)
    return call
end

--- @param entity integer
--- @param p1 userdata
natives.task_n0Xf3C3503276F4A034 = function(entity, p1)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xF3C3503276F4A034, 'void', entity, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.task_n0X6Dac799857Ef3F11 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x6DAC799857EF3F11, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @return any
natives.task_n0X920684Be432875B1 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x920684BE432875B1, 'any', p0)
    return call
end

-- clipset: CLIPSET@MECH_HOGTIE@HUMAN@BREAKOUT_MG@GROUND, CLIPSET@MECH_HOGTIE@HUMAN@BREAKOUT_MG@SHOULDER, CLIPSET@MECH_HOGTIE@HUMAN@BREAKOUT_MG@MOUNT
-- clipset can also be 0
--- @param ped integer
--- @param p1 boolean
--- @param clipset string
--- @return boolean
natives.task_setEnhancedBreakFree = function(ped, p1, clipset)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(clipset) == 'string', 'Argument clipset must be of type string.')

    local call = natives.invoke(0x1BF9D36A5EAFFBAE, 'bool', ped, p1, clipset)
    return call
end

--- @param p0 userdata
--- @return any
natives.task_n0X6Afd84Aeaa3Ea538 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x6AFD84AEAA3EA538, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0Xbd1C3C0F271C39D3 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xBD1C3C0F271C39D3, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0X1Ecf56C040Fd839C = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x1ECF56C040FD839C, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.task_n0Xf40A109B4B79A848 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xF40A109B4B79A848, 'void', p0, p1, p2)
end

--- @param ped integer
--- @return boolean
natives.task_isPedLeadingHorse = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xEFC4303DDC6E60D3, 'bool', ped)
    return call
end

--- @param p0 userdata
--- @return any
natives.task_n0Xac5045Ab7F1A34Fd = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xAC5045AB7F1A34FD, 'any', p0)
    return call
end

--- @param ped integer
--- @return number
natives.task_getLedHorseFromPed = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xED1F514AF4732258, 'int', ped)
    return call
end

--- @param ped integer
--- @param p1 number
--- @param p2 number
--- @param p3 integer
natives.task_taskTurnToFaceClosestPed = function(ped, p1, p2, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')

    local call = natives.invoke(0x84179419DBDD36F2, 'void', ped, p1, p2, p3)
end

--- @param ped integer
--- @param targetped integer
--- @param p2 integer
--- @return boolean
natives.task_taskConfront = function(ped, targetped, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(targetped) == 'integer', 'Argument targetped must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x3A2A2071DF5CC569, 'bool', ped, targetped, p2)
    return call
end

--- @param ped integer
--- @param p1 boolean
--- @return boolean
natives.task_taskPolice = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x87BE56724650408E, 'bool', ped, p1)
    return call
end

-- Params: p2: AR_TAKEDOWN_FRONT, AR_EXECUTION_FRONT, 0 in R* Scripts
--- @param ped integer
--- @param targetped integer
--- @param p2 integer
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 number
--- @param p6 userdata
--- @param p7 number
--- @return boolean
natives.task_taskMelee = function(ped, targetped, p2, p3, p4, p5, p6, p7)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(targetped) == 'integer', 'Argument targetped must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'number', 'Argument p7 must be of type number.')

    local call = natives.invoke(0x482C99D0B38D1B0A, 'bool', ped, targetped, p2, p3, p4, p5, p6, p7)
    return call
end

-- grappleStyle: AR_GRAPPLE_MOUNT_STANDING_FROM_FRONT, AR_GRAPPLE_MOUNT_STANDING_FROM_RIGHT, AR_GRAPPLE_MOUNT_STANDING_FROM_BACK, AR_GRAPPLE_MOUNT_STANDING_FROM_LEFT, AR_GRAPPLE_MOUNT_FROM_FRONT, AR_WOLF_EXECUTION_ENTER_FROM_BACK, AR_GRAPPLE_DRAG_FRONT_ON_ASS, AR_GRAPPLE_FRONT_FROM_LEFT_FAR, AR_BEAR_CHALLENGE_FRONT, AR_GRAPPLE_FRONT_FROM_FRONT, AR_GRAPPLE_MOUNT_FACEUP_FROM_FRONT
--- @param ped integer
--- @param targetped integer
--- @param grapplestyle integer
--- @param p3 integer
--- @param p4 number
--- @param p5 integer
--- @param p6 integer
--- @return boolean
natives.task_taskGrapple = function(ped, targetped, grapplestyle, p3, p4, p5, p6)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(targetped) == 'integer', 'Argument targetped must be of type integer.')
    assert(type(grapplestyle) == 'integer', 'Argument grapplestyle must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'integer', 'Argument p5 must be of type integer.')
    assert(type(p6) == 'integer', 'Argument p6 must be of type integer.')

    local call = natives.invoke(0x779A2FFACEFAEA7B, 'bool', ped, targetped, grapplestyle, p3, p4, p5, p6)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @return boolean
natives.task_taskIntimidated = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x648B75D44930D6BD, 'bool', p0, p1, p2, p3, p4)
    return call
end

--- @param victim integer
--- @param attacker integer
--- @param p2 integer
--- @param p3 boolean
--- @param p4 boolean
--- @param everyframe boolean
--- @param p6 boolean
--- @param p7 boolean
--- @param flag integer
--- @return boolean
natives.task_taskIntimidated2 = function(victim, attacker, p2, p3, p4, everyframe, p6, p7, flag)
    assert(type(victim) == 'integer', 'Argument victim must be of type integer.')
    assert(type(attacker) == 'integer', 'Argument attacker must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')
    assert(type(everyframe) == 'boolean', 'Argument everyframe must be of type boolean.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')
    assert(type(p7) == 'boolean', 'Argument p7 must be of type boolean.')
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')

    local call = natives.invoke(0x933ACC1A1771A288, 'bool', victim, attacker, p2, p3, p4, everyframe, p6, p7, flag)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0X2948235Db2058E99 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x2948235DB2058E99, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0Xb2F47A1Afdfcc595 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xB2F47A1AFDFCC595, 'void', p0, p1)
end

-- _SET_PED_*
--- @param ped integer
--- @param p1 integer
--- @param p2 userdata
natives.task_n0X41D1331Afad5A091 = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x41D1331AFAD5A091, 'void', ped, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.task_n0X801Bd27403F3Cba0 = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x801BD27403F3CBA0, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.task_n0X0Fe797Dd9F70Dfa6 = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x0FE797DD9F70DFA6, 'void', p0, p1, p2, p3)
end

--- @param ped integer
natives.task_taskPersistentCharacter = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x4391700CBD89C3D8, 'void', ped)
end

--- @param p0 userdata
natives.task_n0Xfc7F71Cf49F70B6B = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xFC7F71CF49F70B6B, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0Xe01F55B2896F6B37 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xE01F55B2896F6B37, 'void', p0, p1)
end

--- @param p0 userdata
--- @return any
natives.task_n0Xe62754D09354F6Cf = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xE62754D09354F6CF, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0X4Ba972D0E5Ad8122 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x4BA972D0E5AD8122, 'void', p0, p1)
end

-- Fishing Research: https:--pastebin.com/NmK5ZLVs
-- Only used in R* Scripts fishing_core and av_fishing_river
--- @param ped integer
--- @param p1 userdata
--- @return boolean
natives.task_getTaskFishing = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xF3735ACD11ACD500, 'bool', ped, p1)
    return call
end

-- Only used in R* Scripts fishing_core and av_fishing_river
--- @param ped integer
--- @param p1 userdata
--- @return boolean
natives.task_setTaskFishing = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xF3735ACD11ACD501, 'bool', ped, p1)
    return call
end

-- Baits: see 0x9B0C7FA063E67629
--- @param ped integer
--- @param bait string
--- @param withoutbuoy boolean
natives.task_taskSwapFishingBait = function(ped, bait, withoutbuoy)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(bait) == 'string', 'Argument bait must be of type string.')
    assert(type(withoutbuoy) == 'boolean', 'Argument withoutbuoy must be of type boolean.')

    local call = natives.invoke(0x2C28AC30A72722DA, 'void', ped, bait, withoutbuoy)
end

-- Baits: p_fishHook02x, p_baitBread01x, p_baitCorn01x, p_baitCheese01x, p_baitWorm01x, p_baitCricket01x, p_crawdad01x, p_finisheDragonfly01x, p_finisdFishlure01x, p_finishdCrawd01x, p_finisheDragonflyLegendary01x, p_finisdFishlureLegendary01x, p_finishdCrawdLegendary01x, p_lgoc_spinner_v4
--- @param ped integer
--- @param bait string
--- @param withoutbuoy boolean
--- @param instantly boolean
natives.task_setFishingBait = function(ped, bait, withoutbuoy, instantly)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(bait) == 'string', 'Argument bait must be of type string.')
    assert(type(withoutbuoy) == 'boolean', 'Argument withoutbuoy must be of type boolean.')
    assert(type(instantly) == 'boolean', 'Argument instantly must be of type boolean.')

    local call = natives.invoke(0x9B0C7FA063E67629, 'void', ped, bait, withoutbuoy, instantly)
end

--- @param ped integer
natives.task_n0X1F298C7Bd30D1240 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x1F298C7BD30D1240, 'void', ped)
end

--- @param ped integer
--- @param entity integer
natives.task_pedFishingrodHookEntity = function(ped, entity)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x1A52076D26E09004, 'void', ped, entity)
end

-- Used with 'P_BODYPARTARMFLOAT02X' model in fishing_core.c
--- @param ped integer
--- @param object integer
natives.task_pedFishingrodHookObject = function(ped, object)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(object) == 'integer', 'Argument object must be of type integer.')

    local call = natives.invoke(0xCE71C2F9BAA3F975, 'void', ped, object)
end

--- @param ped integer
--- @return boolean
natives.task_n0Xb520Dbda7Fcf573F = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xB520DBDA7FCF573F, 'bool', ped)
    return call
end

--- @param ped integer
--- @param p1 boolean
natives.task_n0X31Bb338F64D5C861 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x31BB338F64D5C861, 'void', ped, p1)
end

--- @param ped integer
--- @param entity integer
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 integer
natives.task_n0X517D01Bf27B682D1 = function(ped, entity, p2, p3, p4, p5, p6)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'integer', 'Argument p6 must be of type integer.')

    local call = natives.invoke(0x517D01BF27B682D1, 'void', ped, entity, p2, p3, p4, p5, p6)
end

--- @param ped integer
natives.task_n0X88Fd60D846D9Cd63 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x88FD60D846D9CD63, 'void', ped)
end

--- @param ped integer
--- @param p1 number
natives.task_n0X9050Df2C53801208 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x9050DF2C53801208, 'void', ped, p1)
end

--- @param ped integer
natives.task_n0X22Cdbf317C40A122 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x22CDBF317C40A122, 'void', ped)
end

--- @return any
natives.task_n0X5952Dfa38Fa529Fe = function()

    local call = natives.invoke(0x5952DFA38FA529FE, 'any')
    return call
end

-- https:--github.com/femga/rdr3_discoveries/blob/master/animations/kit_emotes_list.lua
-- emote: https:--alloc8or.re/rdr3/doc/enums/eEmote.txt
-- 
-- enum eEmoteType
-- {
-- 	EMOTE_TYPE_INVALID = -1,
-- 	EMOTE_TYPE_REACT,
-- 	EMOTE_TYPE_ACTION,
-- 	EMOTE_TYPE_TAUNT,
-- 	EMOTE_TYPE_GREET,
-- 	EMOTE_TYPE_TWIRL_GUN,
-- 	EMOTE_TYPE_DANCE_FLOOR
-- };
-- 
-- enum eEmotePlaybackMode
-- {
-- 	EMOTE_PM_INVALID = -1,
-- 	EMOTE_PM_UPPERBODY,
-- 	EMOTE_PM_UPPERBODY_LOOP,
-- 	EMOTE_PM_FULLBODY,
-- };
--- @param ped integer
--- @param emotetype integer
--- @param playbackmode integer
--- @param emote integer
--- @param issecondarytask boolean
--- @param canbreakout boolean
--- @param disableearlyoutanimtag boolean
--- @param ignoreinvalidmaintask boolean
--- @param destroyprops boolean
natives.task_taskPlayEmoteWithHash = function(ped, emotetype, playbackmode, emote, issecondarytask, canbreakout, disableearlyoutanimtag, ignoreinvalidmaintask, destroyprops)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(emotetype) == 'integer', 'Argument emotetype must be of type integer.')
    assert(type(playbackmode) == 'integer', 'Argument playbackmode must be of type integer.')
    assert(type(emote) == 'integer', 'Argument emote must be of type integer.')
    assert(type(issecondarytask) == 'boolean', 'Argument issecondarytask must be of type boolean.')
    assert(type(canbreakout) == 'boolean', 'Argument canbreakout must be of type boolean.')
    assert(type(disableearlyoutanimtag) == 'boolean', 'Argument disableearlyoutanimtag must be of type boolean.')
    assert(type(ignoreinvalidmaintask) == 'boolean', 'Argument ignoreinvalidmaintask must be of type boolean.')
    assert(type(destroyprops) == 'boolean', 'Argument destroyprops must be of type boolean.')

    local call = natives.invoke(0xB31A277C1AC7B7FF, 'void', ped, emotetype, playbackmode, emote, issecondarytask, canbreakout, disableearlyoutanimtag, ignoreinvalidmaintask, destroyprops)
end

-- Similar to 0xB31A277C1AC7B7FF but checks if the ped's inventory contains the specified emote kit.
--- @param ped integer
--- @param emotetype integer
--- @param playbackmode integer
--- @param emote integer
--- @param issecondarytask boolean
--- @param canbreakout boolean
--- @param disableearlyoutanimtag boolean
--- @param ignoreinvalidmaintask boolean
--- @param destroyprops boolean
natives.task_taskPlayEmote = function(ped, emotetype, playbackmode, emote, issecondarytask, canbreakout, disableearlyoutanimtag, ignoreinvalidmaintask, destroyprops)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(emotetype) == 'integer', 'Argument emotetype must be of type integer.')
    assert(type(playbackmode) == 'integer', 'Argument playbackmode must be of type integer.')
    assert(type(emote) == 'integer', 'Argument emote must be of type integer.')
    assert(type(issecondarytask) == 'boolean', 'Argument issecondarytask must be of type boolean.')
    assert(type(canbreakout) == 'boolean', 'Argument canbreakout must be of type boolean.')
    assert(type(disableearlyoutanimtag) == 'boolean', 'Argument disableearlyoutanimtag must be of type boolean.')
    assert(type(ignoreinvalidmaintask) == 'boolean', 'Argument ignoreinvalidmaintask must be of type boolean.')
    assert(type(destroyprops) == 'boolean', 'Argument destroyprops must be of type boolean.')

    local call = natives.invoke(0x884E3436CC1F41DD, 'void', ped, emotetype, playbackmode, emote, issecondarytask, canbreakout, disableearlyoutanimtag, ignoreinvalidmaintask, destroyprops)
end

--- @param p0 userdata
natives.task_n0X6A1Af481407Bf6E9 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x6A1AF481407BF6E9, 'void', p0)
end

--- @param ped integer
natives.task_taskEmoteOutro = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xBDFEEB7600BCD938, 'void', ped)
end

--- @param p0 userdata
natives.task_n0Xec516Fe805D2Cb2D = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xEC516FE805D2CB2D, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
natives.task_n0X59Aea4Dc640814B9 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x59AEA4DC640814B9, 'void', p0, p1)
end

--- @param p0 userdata
--- @return any
natives.task_n0X11C7Ce1Ae38911B5 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x11C7CE1AE38911B5, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.task_n0Xd0Abc4Ea3B5E21A0 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xD0ABC4EA3B5E21A0, 'any', p0, p1)
    return call
end

--- @param ped integer
--- @param p1 userdata
--- @return boolean
natives.task_isEmoteTaskRunning = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xCF9B71C0AF824036, 'bool', ped, p1)
    return call
end

--- @param toggle boolean
natives.telemetry_telemetrySetIsFlow = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x9BEE018A63FFFAD9, 'void', toggle)
end

--- @param toggle boolean
natives.telemetry_n0Xec0Bd8736Dcaf841 = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xEC0BD8736DCAF841, 'void', toggle)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.telemetry_telemetryMissionStarted = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x15B0CC1B36F1DE29, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
natives.telemetry_telemetryMissionOver = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xD894437E12C17AEC, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.telemetry_telemetryMissionCheckpoint = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x8EC7890D446BD9C1, 'void', p0, p1, p2)
end

--- @param ped integer
natives.telemetry_telemetryPlayerSpawned = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x5DA4718DF897EB25, 'void', ped)
end

-- Works in MP only.
--- @param uuid userdata
--- @return boolean
natives.telemetry_telemetryCreateUuid = function(uuid)
    assert(type(uuid) == 'userdata', 'Argument uuid must be of type userdata.')

    local call = natives.invoke(0xE692D336F8A2A97F, 'bool', uuid)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
natives.telemetry_telemetryMatchQueue = function(p0, p1, p2, p3, p4, p5, p6)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0x4C08D2B6D8BE17E4, 'void', p0, p1, p2, p3, p4, p5, p6)
end

--- @param p0 userdata
--- @param p1 userdata
natives.telemetry_telemetryMatchStarted = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xF620F47B4F4A78C4, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.telemetry_telemetryMatchOver = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0xA2058154357726BB, 'void', p0, p1, p2, p3, p4)
end

--- @param p0 userdata
--- @param p1 userdata
natives.telemetry_telemetryMatchVote = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xEF3C68F56BAD7B69, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.telemetry_telemetryLobbyProgression = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xECD67E9FA677CCCF, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
natives.telemetry_telemetryGameProgress = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x51EC204A6E5B5A1A, 'void', p0, p1)
end

--- @param herbtype integer
natives.telemetry_telemetryHerbPicked = function(herbtype)
    assert(type(herbtype) == 'integer', 'Argument herbtype must be of type integer.')

    local call = natives.invoke(0xAE693EC3A178F6C2, 'void', herbtype)
end

--- @param type integer
--- @param items userdata
natives.telemetry_telemetryAnimalSkinned = function(type, items)
    assert(type(type) == 'integer', 'Argument type must be of type integer.')
    assert(type(items) == 'userdata', 'Argument items must be of type userdata.')

    local call = natives.invoke(0x7581972ADF5D699A, 'void', type, items)
end

--- @param p0 userdata
natives.telemetry_telemetryCampCreated = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x565EAA726B2CE3B7, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.telemetry_telemetryCampSupplies = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x217F47761376E16E, 'void', p0, p1, p2, p3, p4)
end

--- @param regionhash integer
natives.telemetry_telemetryRegion = function(regionhash)
    assert(type(regionhash) == 'integer', 'Argument regionhash must be of type integer.')

    local call = natives.invoke(0xCD6F8A0335D821F9, 'void', regionhash)
end

--- @param shoptype userdata
--- @param shopregion userdata
--- @param region userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
natives.telemetry_telemetryShopEntry = function(shoptype, shopregion, region, p3, p4, p5)
    assert(type(shoptype) == 'userdata', 'Argument shoptype must be of type userdata.')
    assert(type(shopregion) == 'userdata', 'Argument shopregion must be of type userdata.')
    assert(type(region) == 'userdata', 'Argument region must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0x775B2ED944E44973, 'void', shoptype, shopregion, region, p3, p4, p5)
end

--- @param p0 userdata
--- @param p1 userdata
natives.telemetry_telemetryShopExit = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xF78E669FDC202E73, 'void', p0, p1)
end

--- @param transactionid integer
--- @param p1 integer
--- @param p2 integer
natives.telemetry_telemetrySetShopForTransaction = function(transactionid, p1, p2)
    assert(type(transactionid) == 'integer', 'Argument transactionid must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0xCA9E42F437625A85, 'void', transactionid, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.telemetry_telemetryShopPurchase = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x2A374E6F0075EE81, 'void', p0, p1, p2, p3, p4)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param centsaleprice integer
natives.telemetry_telemetryShopSell = function(p0, p1, p2, p3, centsaleprice)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(centsaleprice) == 'integer', 'Argument centsaleprice must be of type integer.')

    local call = natives.invoke(0x9BD8A9D0A774A6F8, 'void', p0, p1, p2, p3, centsaleprice)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.telemetry_telemetryGoldStore = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x536B6025E94AC48F, 'void', p0, p1, p2, p3)
end

natives.telemetry_clearTelemetryShopUi = function()

    local call = natives.invoke(0x32D5898C4898CD95, 'void')
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.telemetry_telemetryShopCutscene = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xB0B19B56697836F5, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
natives.telemetry_telemetryAmbientVignette = function(p0, p1, p2, p3, p4, p5, p6)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0x3145044F3990D321, 'void', p0, p1, p2, p3, p4, p5, p6)
end

--- @param p0 userdata
natives.telemetry_telemetryDiscoverable = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xF5EAD898EF387E73, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
natives.telemetry_telemetryHonor = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xE6B763C7F4902201, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param quantity userdata
natives.telemetry_telemetryCraftItem = function(p0, p1, p2, quantity)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(quantity) == 'userdata', 'Argument quantity must be of type userdata.')

    local call = natives.invoke(0x78C2E029DB205A3A, 'void', p0, p1, p2, quantity)
end

--- @param transactionid userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param slotid integer
--- @param p6 integer
--- @param p7 userdata
--- @param p8 boolean
natives.telemetry_telemetryCampDonate = function(transactionid, p1, p2, p3, p4, slotid, p6, p7, p8)
    assert(type(transactionid) == 'userdata', 'Argument transactionid must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(slotid) == 'integer', 'Argument slotid must be of type integer.')
    assert(type(p6) == 'integer', 'Argument p6 must be of type integer.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')

    local call = natives.invoke(0xDF516E598D966D06, 'void', transactionid, p1, p2, p3, p4, slotid, p6, p7, p8)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
--- @param p9 userdata
--- @param p10 userdata
natives.telemetry_telemetryMoonshineBrew = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')
    assert(type(p10) == 'userdata', 'Argument p10 must be of type userdata.')

    local call = natives.invoke(0xB5013EFBB5516867, 'void', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)
end

--- @param transactionid userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
natives.telemetry_telemetryCollect = function(transactionid, p1, p2, p3, p4, p5, p6)
    assert(type(transactionid) == 'userdata', 'Argument transactionid must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0xD6CB05DDAEE43AFD, 'void', transactionid, p1, p2, p3, p4, p5, p6)
end

--- @param p0 userdata
--- @param p1 userdata
natives.telemetry_telemetryMissionIloOption = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xEA323F5E1A4DA2F1, 'void', p0, p1)
end

-- _TELEMETRY_C* - _TELEMETRY_G*
--- @param p0 userdata
--- @param p1 userdata
--- @param x number
--- @param y number
--- @param z number
--- @param reason integer
natives.telemetry_telemetryMissionFailedToLaunch = function(p0, p1, x, y, z, reason)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(reason) == 'integer', 'Argument reason must be of type integer.')

    local call = natives.invoke(0x6571E4327390EC0B, 'void', p0, p1, x, y, z, reason)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.telemetry_telemetryGangShares = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xE6DC9B21AC7A8729, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.telemetry_telemetryFastTravel = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x7CEF4AC79F7E7FAD, 'void', p0, p1, p2, p3, p4)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
natives.telemetry_telemetryNetCamp = function(p0, p1, p2, p3, p4, p5, p6)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0xA72773C3134F9A57, 'void', p0, p1, p2, p3, p4, p5, p6)
end

-- Creation of the metric is related to attribute filling, i. e. at camp fires, when the ped is resting.
-- _TELEMETRY_C* - _TELEMETRY_P*
natives.telemetry_telemetryRpgGlobalCalculateAttributeCoreDelta = function()

    local call = natives.invoke(0x7E002A36AEFCFB55, 'void')
end

--- @param p0 userdata
natives.telemetry_telemetrySleep = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xF9F14080D80937BD, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.telemetry_telemetryParleyFeud = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0xF37A2149BC9A8A27, 'void', p0, p1, p2, p3, p4)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.telemetry_telemetryPlayerMenuPin = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x076C5843371EB889, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.telemetry_telemetryNotoriety = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xE26970A7AE0F28E9, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.telemetry_telemetryDefensive = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xE57529D23541D2DD, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.telemetry_telemetryLoot = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xCF63EF77B0DF0397, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param emote integer
natives.telemetry_telemetryEmoteAddCategoryToSave = function(p0, p1, emote)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(emote) == 'integer', 'Argument emote must be of type integer.')

    local call = natives.invoke(0x2C24AF8EEEEF8A55, 'void', p0, p1, emote)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.telemetry_telemetryFavorEmote = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x16B23D4F7A1F50D9, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
--- @param p9 userdata
natives.telemetry_telemetryPokerOver = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')

    local call = natives.invoke(0x8127C5AA05C5A210, 'void', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)
end

-- Returns false when transaction request is failing
--- @param requestid userdata
--- @param transactionid userdata
--- @return boolean
natives.telemetry_telemetryTriggerTransactionRequest = function(requestid, transactionid)
    assert(type(requestid) == 'userdata', 'Argument requestid must be of type userdata.')
    assert(type(transactionid) == 'userdata', 'Argument transactionid must be of type userdata.')

    local call = natives.invoke(0x80A02D9F948A8BCA, 'bool', requestid, transactionid)
    return call
end

--- @param transactionid userdata
--- @param requestid userdata
--- @return boolean
natives.telemetry_tryGetTelemetryIdFromTransactionId = function(transactionid, requestid)
    assert(type(transactionid) == 'userdata', 'Argument transactionid must be of type userdata.')
    assert(type(requestid) == 'userdata', 'Argument requestid must be of type userdata.')

    local call = natives.invoke(0xF184B3ECE36219CF, 'bool', transactionid, requestid)
    return call
end

--- @param p0 userdata
natives.telemetry_telemetryRoleBounty = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xAB43D1C80B5E9500, 'void', p0)
end

--- @param data userdata
natives.telemetry_telemetryBountyTarget = function(data)
    assert(type(data) == 'userdata', 'Argument data must be of type userdata.')

    local call = natives.invoke(0x52FA31DB8F3AD25D, 'void', data)
end

--- @param transactionid userdata
--- @param bountyamount userdata
--- @param ped integer
--- @param completiontype userdata
--- @param jailtimeserved userdata
--- @param jailtimeleft userdata
--- @param posserole userdata
natives.telemetry_telemetryPrison = function(transactionid, bountyamount, ped, completiontype, jailtimeserved, jailtimeleft, posserole)
    assert(type(transactionid) == 'userdata', 'Argument transactionid must be of type userdata.')
    assert(type(bountyamount) == 'userdata', 'Argument bountyamount must be of type userdata.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(completiontype) == 'userdata', 'Argument completiontype must be of type userdata.')
    assert(type(jailtimeserved) == 'userdata', 'Argument jailtimeserved must be of type userdata.')
    assert(type(jailtimeleft) == 'userdata', 'Argument jailtimeleft must be of type userdata.')
    assert(type(posserole) == 'userdata', 'Argument posserole must be of type userdata.')

    local call = natives.invoke(0xB204BF9F30298D77, 'void', transactionid, bountyamount, ped, completiontype, jailtimeserved, jailtimeleft, posserole)
end

--- @param p0 userdata
--- @param transactionid userdata
natives.telemetry_telemetryRoleTrader = function(p0, transactionid)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(transactionid) == 'userdata', 'Argument transactionid must be of type userdata.')

    local call = natives.invoke(0x476038B5A0734C10, 'void', p0, transactionid)
end

--- @param p0 userdata
--- @param transactionid userdata
natives.telemetry_telemetryRoleMoonshiner = function(p0, transactionid)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(transactionid) == 'userdata', 'Argument transactionid must be of type userdata.')

    local call = natives.invoke(0x99D40C5D74BC88E9, 'void', p0, transactionid)
end

--- @param transactionid userdata
--- @param collectible userdata
--- @param category userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
natives.telemetry_telemetryRoleCollector = function(transactionid, collectible, category, p3, p4, p5, p6)
    assert(type(transactionid) == 'userdata', 'Argument transactionid must be of type userdata.')
    assert(type(collectible) == 'userdata', 'Argument collectible must be of type userdata.')
    assert(type(category) == 'userdata', 'Argument category must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0x4AC38DFD286DAD14, 'void', transactionid, collectible, category, p3, p4, p5, p6)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.telemetry_telemetryPhoto = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xED22BE4C5A399E63, 'void', p0, p1, p2, p3)
end

natives.telemetry_telemetryStartGunLockerInteraction = function()

    local call = natives.invoke(0xF0D54E0651DD7E07, 'void')
end

natives.telemetry_telemetryGunLocker = function()

    local call = natives.invoke(0x415FE28ED44BFF14, 'void')
end

--- @param p0 integer
natives.telemetry_telemetryGunLockerWeaponStored = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0xC3ADF4880784FA9C, 'void', p0)
end

--- @param p0 integer
natives.telemetry_telemetryGunLockerWeaponRemoved = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x317D9C9560529CC2, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
natives.telemetry_telemetryRoleTokenTransaction = function(p0, p1, p2, p3, p4, p5)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0x32C2939564D74BFF, 'void', p0, p1, p2, p3, p4, p5)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
natives.telemetry_telemetryCoupon = function(p0, p1, p2, p3, p4, p5)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0x621D719C4836292B, 'void', p0, p1, p2, p3, p4, p5)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.telemetry_telemetryPersonalVehicleMount = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xFF9052BC7A3B7D33, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.telemetry_telemetryPersonalVehicleWagon = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xE67AF24C5A3B6058, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.telemetry_telemetryMenuNavigation = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x3255D4D2082C6339, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.telemetry_telemetryHubNavigation = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x25CC50EC1A6F3A96, 'void', p0, p1, p2, p3)
end

--- @param couponitem userdata
--- @param p1 userdata
natives.telemetry_telemetryHubOffers = function(couponitem, p1)
    assert(type(couponitem) == 'userdata', 'Argument couponitem must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x37AA282163B0D2C4, 'void', couponitem, p1)
end

--- @param transactionid userdata
--- @param animal userdata
--- @param p2 userdata
--- @param bsampled userdata
--- @param btranq boolean
natives.telemetry_telemetrySample = function(transactionid, animal, p2, bsampled, btranq)
    assert(type(transactionid) == 'userdata', 'Argument transactionid must be of type userdata.')
    assert(type(animal) == 'userdata', 'Argument animal must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(bsampled) == 'userdata', 'Argument bsampled must be of type userdata.')
    assert(type(btranq) == 'boolean', 'Argument btranq must be of type boolean.')

    local call = natives.invoke(0x61559675D23D8BD1, 'void', transactionid, animal, p2, bsampled, btranq)
end

--- @param transactionid userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
--- @param p9 userdata
natives.telemetry_telemetryRoleNaturalist = function(transactionid, p1, p2, p3, p4, p5, p6, p7, p8, p9)
    assert(type(transactionid) == 'userdata', 'Argument transactionid must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')

    local call = natives.invoke(0x6FB9EA308F302922, 'void', transactionid, p1, p2, p3, p4, p5, p6, p7, p8, p9)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
natives.telemetry_telemetryPhotoCam = function(p0, p1, p2, p3, p4, p5, p6, p7, p8)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')

    local call = natives.invoke(0x0777D65EE8A17517, 'void', p0, p1, p2, p3, p4, p5, p6, p7, p8)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.telemetry_telemetryIntroSkip = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x1B554723799245F4, 'void', p0, p1, p2)
end

natives.telemetry_analyticsPlaytimeFreemodeStart = function()

    local call = natives.invoke(0xE9F24081D84931B8, 'void')
end

natives.telemetry_analyticsPlaytimeFreemodeEnd = function()

    local call = natives.invoke(0x3180E991D4B8F248, 'void')
end

--- @param args userdata
natives.telemetry_telemetryCustom = function(args)
    assert(type(args) == 'userdata', 'Argument args must be of type userdata.')

    local call = natives.invoke(0x40914CCF2A1AB531, 'void', args)
end

--- @param args userdata
natives.telemetry_telemetryMatchNomination = function(args)
    assert(type(args) == 'userdata', 'Argument args must be of type userdata.')

    local call = natives.invoke(0x330029E121380CEB, 'void', args)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
natives.telemetry_telemetryCharCreator = function(p0, p1, p2, p3, p4, p5, p6)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0x7207AD471BC9278C, 'void', p0, p1, p2, p3, p4, p5, p6)
end

-- Note: this native was added in build 1491.50
--- @param linkid integer
--- @param type integer
--- @param contentid string
natives.telemetry_n0X6F5Bc5C4Eab42B15 = function(linkid, type, contentid)
    assert(type(linkid) == 'integer', 'Argument linkid must be of type integer.')
    assert(type(type) == 'integer', 'Argument type must be of type integer.')
    assert(type(contentid) == 'string', 'Argument contentid must be of type string.')

    local call = natives.invoke(0x6F5BC5C4EAB42B15, 'void', linkid, type, contentid)
end

--- @param txdhash integer
--- @return boolean
natives.txd_doesStreamedTxdExist = function(txdhash)
    assert(type(txdhash) == 'integer', 'Argument txdhash must be of type integer.')

    local call = natives.invoke(0xBA0163B277C2D2D0, 'bool', txdhash)
    return call
end

--- @param txdhash integer
--- @param p1 boolean
natives.txd_requestStreamedTxd = function(txdhash, p1)
    assert(type(txdhash) == 'integer', 'Argument txdhash must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xDB1BD07FB464584D, 'void', txdhash, p1)
end

--- @param txdhash integer
--- @return boolean
natives.txd_hasStreamedTxdLoaded = function(txdhash)
    assert(type(txdhash) == 'integer', 'Argument txdhash must be of type integer.')

    local call = natives.invoke(0xBE72591D1509FFE4, 'bool', txdhash)
    return call
end

--- @param txdhash integer
natives.txd_setStreamedTxdAsNoLongerNeeded = function(txdhash)
    assert(type(txdhash) == 'integer', 'Argument txdhash must be of type integer.')

    local call = natives.invoke(0x8232F37DF762ACB2, 'void', txdhash)
end

--- @param texturedict string
--- @return boolean
natives.txd_doesStreamedTextureDictExist = function(texturedict)
    assert(type(texturedict) == 'string', 'Argument texturedict must be of type string.')

    local call = natives.invoke(0x7332461FC59EB7EC, 'bool', texturedict)
    return call
end

--- @param texturedict string
--- @param p1 boolean
natives.txd_requestStreamedTextureDict = function(texturedict, p1)
    assert(type(texturedict) == 'string', 'Argument texturedict must be of type string.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xC1BA29DF5631B0F8, 'void', texturedict, p1)
end

--- @param texturedict string
--- @return boolean
natives.txd_hasStreamedTextureDictLoaded = function(texturedict)
    assert(type(texturedict) == 'string', 'Argument texturedict must be of type string.')

    local call = natives.invoke(0x54D6900929CCF162, 'bool', texturedict)
    return call
end

--- @param texturedict string
natives.txd_setStreamedTextureDictAsNoLongerNeeded = function(texturedict)
    assert(type(texturedict) == 'string', 'Argument texturedict must be of type string.')

    local call = natives.invoke(0x4ACA10A91F66F1E2, 'void', texturedict)
end

--- @param appnamehash integer
--- @return boolean
natives.uiapps_isUiappActiveByHash = function(appnamehash)
    assert(type(appnamehash) == 'integer', 'Argument appnamehash must be of type integer.')

    local call = natives.invoke(0x25B7A0206BDFAC76, 'bool', appnamehash)
    return call
end

--- @return boolean
natives.uiapps_isAnyUiappActive = function()

    local call = natives.invoke(0xAC959AB99AAF3D9F, 'bool')
    return call
end

--- @param appnamehash integer
--- @return boolean
natives.uiapps_isUiappRunningByHash = function(appnamehash)
    assert(type(appnamehash) == 'integer', 'Argument appnamehash must be of type integer.')

    local call = natives.invoke(0x4E511D093A86AD49, 'bool', appnamehash)
    return call
end

--- @param appname string
--- @return boolean
natives.uiapps_isUiappRunning = function(appname)
    assert(type(appname) == 'string', 'Argument appname must be of type string.')

    local call = natives.invoke(0xDE4A9B35D028979F, 'bool', appname)
    return call
end

--- @return boolean
natives.uiapps_isAnyUiappRunning = function()

    local call = natives.invoke(0xDB30BEC7A7A5CBD3, 'bool')
    return call
end

--- @param appnamehash integer
--- @return number
natives.uiapps_getUiappCurrentActivityByHash = function(appnamehash)
    assert(type(appnamehash) == 'integer', 'Argument appnamehash must be of type integer.')

    local call = natives.invoke(0x96FD694FE5BE55DC, 'integer', appnamehash)
    return call
end

--- @param appnamehash integer
natives.uiapps_closeUiappByHash = function(appnamehash)
    assert(type(appnamehash) == 'integer', 'Argument appnamehash must be of type integer.')

    local call = natives.invoke(0x2FF10C9C3F92277E, 'void', appnamehash)
end

--- @param appnamehash integer
natives.uiapps_closeUiappByHashImmediate = function(appnamehash)
    assert(type(appnamehash) == 'integer', 'Argument appnamehash must be of type integer.')

    local call = natives.invoke(0x04428420A248A354, 'void', appnamehash)
end

--- @param appname string
natives.uiapps_closeUiapp = function(appname)
    assert(type(appname) == 'string', 'Argument appname must be of type string.')

    local call = natives.invoke(0x818C6CA9B659E8EC, 'void', appname)
end

--- @param appname string
natives.uiapps_closeUiappImmediate = function(appname)
    assert(type(appname) == 'string', 'Argument appname must be of type string.')

    local call = natives.invoke(0x3015635426D1B17C, 'void', appname)
end

natives.uiapps_closeAllUiapps = function()

    local call = natives.invoke(0xAD7B70F7230C5A12, 'void')
end

natives.uiapps_closeAllUiappsImmediate = function()

    local call = natives.invoke(0x12769EEB8DBD7A7B, 'void')
end

--- @param appnamehash integer
--- @param entryhash integer
--- @return number
natives.uiapps_launchUiappByHashWithEntry = function(appnamehash, entryhash)
    assert(type(appnamehash) == 'integer', 'Argument appnamehash must be of type integer.')
    assert(type(entryhash) == 'integer', 'Argument entryhash must be of type integer.')

    local call = natives.invoke(0xC1BCF31E975B3195, 'int', appnamehash, entryhash)
    return call
end

--- @param appnamehash integer
--- @return number
natives.uiapps_launchUiappByHash = function(appnamehash)
    assert(type(appnamehash) == 'integer', 'Argument appnamehash must be of type integer.')

    local call = natives.invoke(0xC8FC7F4E4CF4F581, 'int', appnamehash)
    return call
end

--- @param appname string
--- @param entry string
--- @return number
natives.uiapps_launchUiappWithEntry = function(appname, entry)
    assert(type(appname) == 'string', 'Argument appname must be of type string.')
    assert(type(entry) == 'string', 'Argument entry must be of type string.')

    local call = natives.invoke(0x7B2027BAC5C8EC89, 'int', appname, entry)
    return call
end

--- @param appnamehash integer
--- @param entryhash integer
--- @return boolean
natives.uiapps_canLaunchUiappByHashWithEntry = function(appnamehash, entryhash)
    assert(type(appnamehash) == 'integer', 'Argument appnamehash must be of type integer.')
    assert(type(entryhash) == 'integer', 'Argument entryhash must be of type integer.')

    local call = natives.invoke(0x16F47D434B6086BF, 'bool', appnamehash, entryhash)
    return call
end

--- @param appnamehash integer
--- @return boolean
natives.uiapps_canLaunchUiappByHash = function(appnamehash)
    assert(type(appnamehash) == 'integer', 'Argument appnamehash must be of type integer.')

    local call = natives.invoke(0xE555EC27D65EDE80, 'bool', appnamehash)
    return call
end

--- @param appnamehash integer
--- @param transitionhash integer
--- @return boolean
natives.uiapps_requestUiappTransitionByHash = function(appnamehash, transitionhash)
    assert(type(appnamehash) == 'integer', 'Argument appnamehash must be of type integer.')
    assert(type(transitionhash) == 'integer', 'Argument transitionhash must be of type integer.')

    local call = natives.invoke(0x7689CD255655BFD7, 'bool', appnamehash, transitionhash)
    return call
end

--- @param appnamehash integer
--- @return boolean
natives.uiapps_isUiappTransitioningByHash = function(appnamehash)
    assert(type(appnamehash) == 'integer', 'Argument appnamehash must be of type integer.')

    local call = natives.invoke(0x42095B886D30DE66, 'bool', appnamehash)
    return call
end

-- Note: you must use VAR_STRING
--- @param text string
--- @param x number
--- @param y number
natives.uidebug_bgDisplayText = function(text, x, y)
    assert(type(text) == 'string', 'Argument text must be of type string.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')

    local call = natives.invoke(0x16794E044C9EFB58, 'void', text, x, y)
end

--- @param scalex number
--- @param scaley number
natives.uidebug_bgSetTextScale = function(scalex, scaley)
    assert(type(scalex) == 'number', 'Argument scalex must be of type number.')
    assert(type(scaley) == 'number', 'Argument scaley must be of type number.')

    local call = natives.invoke(0xA1253A3C870B6843, 'void', scalex, scaley)
end

-- https:--github.com/femga/rdr3_discoveries/tree/master/useful_info_from_rpfs/colours
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
natives.uidebug_bgSetTextColor = function(red, green, blue, alpha)
    assert(type(red) == 'integer', 'Argument red must be of type integer.')
    assert(type(green) == 'integer', 'Argument green must be of type integer.')
    assert(type(blue) == 'integer', 'Argument blue must be of type integer.')
    assert(type(alpha) == 'integer', 'Argument alpha must be of type integer.')

    local call = natives.invoke(0x16FA5CE47F184F1E, 'void', red, green, blue, alpha)
end

-- Old name: _EVENT_MANAGER_IS_EVENT_PENDING
--- @param hash integer
--- @return boolean
natives.uievents_eventsUiIsPending = function(hash)
    assert(type(hash) == 'integer', 'Argument hash must be of type integer.')

    local call = natives.invoke(0x67ED5A7963F2F722, 'bool', hash)
    return call
end

-- eventData:
-- struct UI_SCRIPT_EVENT
-- {
-- 	alignas(8) eUIScriptEventType eventType; -- https:--alloc8or.re/rdr3/doc/enums/eUIScriptEventType.txt
-- 	alignas(8) int intParam;
-- 	alignas(8) Hash hashParam;
-- 	alignas(8) Hash datastoreParam;
-- };
-- 
-- Old name: _EVENT_MANAGER_GET_EVENT
--- @param hash integer
--- @param eventdata userdata
--- @return boolean
natives.uievents_eventsUiGetMessage = function(hash, eventdata)
    assert(type(hash) == 'integer', 'Argument hash must be of type integer.')
    assert(type(eventdata) == 'userdata', 'Argument eventdata must be of type userdata.')

    local call = natives.invoke(0xE24E957294241444, 'bool', hash, eventdata)
    return call
end

-- eventData: see EVENTS_UI_GET_MESSAGE
-- 
-- Old name: _EVENT_MANAGER_PEEK_EVENT
--- @param hash integer
--- @param eventdata userdata
--- @return boolean
natives.uievents_eventsUiPeekMessage = function(hash, eventdata)
    assert(type(hash) == 'integer', 'Argument hash must be of type integer.')
    assert(type(eventdata) == 'userdata', 'Argument eventdata must be of type userdata.')

    local call = natives.invoke(0x90237103F27F7937, 'bool', hash, eventdata)
    return call
end

-- Old name: _EVENT_MANAGER_POP_EVENT
--- @param hash integer
natives.uievents_eventsUiPopMessage = function(hash)
    assert(type(hash) == 'integer', 'Argument hash must be of type integer.')

    local call = natives.invoke(0x8E8A2369F48EC839, 'void', hash)
end

-- Example : https:--pastebin.com/GvdBp8Dh
--- @param p0 userdata
--- @param p1 userdata
--- @param p2 boolean
--- @return number
natives.uifeed_uiFeedPostHelpText = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x049D5C615BD38BAD, 'int', p0, p1, p2)
    return call
end

-- Example : https:--pastebin.com/h1YzycuR
--- @param duration userdata
--- @param data userdata
--- @param p2 boolean
--- @param p3 boolean
--- @return number
natives.uifeed_uiFeedPostLocationShard = function(duration, data, p2, p3)
    assert(type(duration) == 'userdata', 'Argument duration must be of type userdata.')
    assert(type(data) == 'userdata', 'Argument data must be of type userdata.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0xD05590C1AB38F068, 'int', duration, data, p2, p3)
    return call
end

-- Example : https:--pastebin.com/13tuRa63
--- @param p0 userdata
--- @param p1 userdata
--- @param p2 boolean
--- @return number
natives.uifeed_uiFeedPostObjective = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xCEDBF17EFCC0E4A4, 'int', p0, p1, p2)
    return call
end

-- Display text on right of the screen, Example : https:--pastebin.com/n1YmNe25
--- @param p0 userdata
--- @param p1 userdata
--- @param p2 boolean
--- @return number
natives.uifeed_uiFeedPostFeedTicker = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xB2920B9760F0F36B, 'int', p0, p1, p2)
    return call
end

-- Example : https:--pastebin.com/YZMBkAmW
--- @param p0 userdata
--- @param p1 userdata
--- @param p2 boolean
--- @param p3 boolean
--- @return number
natives.uifeed_uiFeedPostSampleToast = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0x26E87218390E6729, 'int', p0, p1, p2, p3)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 boolean
--- @param p3 boolean
--- @param collectablecategory integer
--- @return number
natives.uifeed_n0Xaff5Be9Ba496Ce40 = function(p0, p1, p2, p3, collectablecategory)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')
    assert(type(collectablecategory) == 'integer', 'Argument collectablecategory must be of type integer.')

    local call = natives.invoke(0xAFF5BE9BA496CE40, 'int', p0, p1, p2, p3, collectablecategory)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 boolean
--- @param p3 boolean
--- @param p4 boolean
--- @return number
natives.uifeed_uiFeedPostSampleToastWithAppLink = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')

    local call = natives.invoke(0x38838A646FB30AAE, 'int', p0, p1, p2, p3, p4)
    return call
end

-- Example : https:--pastebin.com/kAtEMQTD
--- @param p0 userdata
--- @param p1 userdata
--- @param p2 integer
--- @param p3 integer
--- @return number
natives.uifeed_uiFeedPostSampleNotification = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')

    local call = natives.invoke(0xC927890AA64E9661, 'int', p0, p1, p2, p3)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 integer
--- @param p3 integer
--- @return number
natives.uifeed_uiFeedPostRankupToast = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'integer', 'Argument p3 must be of type integer.')

    local call = natives.invoke(0x3F9FDDBA79117C69, 'int', p0, p1, p2, p3)
    return call
end

-- Only used in R* SP Scripts
--- @param p0 userdata
--- @param p1 userdata
--- @param p2 boolean
--- @param p3 boolean
--- @return number
natives.uifeed_n0X18D6869Fbffec0F8 = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0x18D6869FBFFEC0F8, 'int', p0, p1, p2, p3)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 boolean
--- @return number
natives.uifeed_uiFeedPostSampleToastRight = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xB249EBCB30DD88E0, 'int', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 boolean
--- @return number
natives.uifeed_uiFeedPostMissionName = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x2024F4F333095FB1, 'int', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 boolean
--- @return number
natives.uifeed_uiFeedPostReticleMessage = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x893128CDB4B81FBB, 'int', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 boolean
--- @return number
natives.uifeed_uiFeedPostOneTextShard = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x860DDFE97CC94DF0, 'int', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 boolean
--- @param p3 boolean
--- @return number
natives.uifeed_uiFeedPostTwoTextShard = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0xA6F4216AB10EB08E, 'int', p0, p1, p2, p3)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 boolean
--- @param p3 boolean
--- @param p4 boolean
--- @return number
natives.uifeed_uiFeedPostThreeTextShard = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')

    local call = natives.invoke(0x02BCC0FE9EBA3529, 'int', p0, p1, p2, p3, p4)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 boolean
--- @return number
natives.uifeed_uiFeedPostGameUpdateShard = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x8D1249BD28791878, 'int', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 boolean
--- @return number
natives.uifeed_uiFeedPostVoiceChatFeed = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xC48152BC6B3E821C, 'int', p0, p1, p2)
    return call
end

-- feedChannel: https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eUIFeedChannel
--- @param feedchannel integer
--- @param p1 boolean
--- @param p2 boolean
natives.uifeed_uiFeedClearChannel = function(feedchannel, p1, p2)
    assert(type(feedchannel) == 'integer', 'Argument feedchannel must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xDD1232B332CBB9E7, 'void', feedchannel, p1, p2)
end

-- Hides Toast Notifications
natives.uifeed_uiFeedClearAllChannels = function()

    local call = natives.invoke(0x6035E8FBCA32AC5E, 'void')
end

-- Clears help text
--- @param feedmessage integer
--- @param p1 boolean
natives.uifeed_uiFeedClearHelpTextFeed = function(feedmessage, p1)
    assert(type(feedmessage) == 'integer', 'Argument feedmessage must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x2F901291EF177B02, 'void', feedmessage, p1)
end

--- @param feedchannel integer
--- @param p1 integer
--- @param p2 boolean
natives.uifeed_n0X6D85126F6Ccf02C9 = function(feedchannel, p1, p2)
    assert(type(feedchannel) == 'integer', 'Argument feedchannel must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x6D85126F6CCF02C9, 'void', feedchannel, p1, p2)
end

-- Returns feedMessage
--- @param p0 userdata
--- @param p1 boolean
--- @return number
natives.uifeed_n0X4E88A65968A55C78 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x4E88A65968A55C78, 'int', p0, p1)
    return call
end

-- Only used in R* SP Script beat_animal_attack
-- Returns feedMessage
--- @param p0 userdata
--- @param p1 boolean
--- @return number
natives.uifeed_n0X0Fd07141Ad048Aae = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x0FD07141AD048AAE, 'int', p0, p1)
    return call
end

-- Returns messageState, see https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eUIMessageState
--- @param feedmessage integer
--- @return number
natives.uifeed_uiFeedGetMessageState = function(feedmessage)
    assert(type(feedmessage) == 'integer', 'Argument feedmessage must be of type integer.')

    local call = natives.invoke(0x59FA676177DBE4C9, 'int', feedmessage)
    return call
end

-- feedChannel: see UI_FEED_CLEAR_CHANNEL
-- Returns feedMessage
--- @param feedchannel integer
--- @return number
natives.uifeed_uiFeedGetCurrentMessage = function(feedchannel)
    assert(type(feedchannel) == 'integer', 'Argument feedchannel must be of type integer.')

    local call = natives.invoke(0xC17F69E1418CD11F, 'int', feedchannel)
    return call
end

--- @param feedchannel integer
--- @return boolean
natives.uifeed_n0Xb7223B91Cd6B7E07 = function(feedchannel)
    assert(type(feedchannel) == 'integer', 'Argument feedchannel must be of type integer.')

    local call = natives.invoke(0xB7223B91CD6B7E07, 'bool', feedchannel)
    return call
end

--- @param p0 integer
--- @param p1 integer
--- @return boolean
natives.uilog_uilogIsEntryRegistered = function(p0, p1)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xB8188CCF52202475, 'bool', p0, p1)
    return call
end

--- @param p0 integer
--- @param p1 integer
--- @param x number
--- @param y number
--- @param z number
--- @param p5 integer
--- @param p6 integer
--- @param p7 userdata
natives.uilog_uilogAddEntryHash = function(p0, p1, x, y, z, p5, p6, p7)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p5) == 'integer', 'Argument p5 must be of type integer.')
    assert(type(p6) == 'integer', 'Argument p6 must be of type integer.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')

    local call = natives.invoke(0x69D5479982355D8F, 'void', p0, p1, x, y, z, p5, p6, p7)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
natives.uilog_uilogAddItemToTaskList = function(p0, p1, p2, p3, p4, p5, p6, p7)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')

    local call = natives.invoke(0x49C63FDF69744A27, 'void', p0, p1, p2, p3, p4, p5, p6, p7)
end

--- @param p0 integer
--- @param p1 integer
--- @param icon integer
--- @param icondictionary integer
natives.uilog_uilogSetEntryIconTexture = function(p0, p1, icon, icondictionary)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(icon) == 'integer', 'Argument icon must be of type integer.')
    assert(type(icondictionary) == 'integer', 'Argument icondictionary must be of type integer.')

    local call = natives.invoke(0x6965469934958D8F, 'void', p0, p1, icon, icondictionary)
end

--- @param p0 integer
--- @param p1 integer
--- @param texture integer
--- @param texturedictionary integer
natives.uilog_uilogSetEntryBriefTexture = function(p0, p1, texture, texturedictionary)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(texture) == 'integer', 'Argument texture must be of type integer.')
    assert(type(texturedictionary) == 'integer', 'Argument texturedictionary must be of type integer.')

    local call = natives.invoke(0x69684D9936958D8F, 'void', p0, p1, texture, texturedictionary)
end

--- @param p0 integer
--- @param p1 integer
--- @param p2 string
natives.uilog_uilogUpdateEntrySubheader = function(p0, p1, p2)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'string', 'Argument p2 must be of type string.')

    local call = natives.invoke(0x80D6524190258C3E, 'void', p0, p1, p2)
end

--- @param p0 integer
--- @param p1 integer
--- @param p2 boolean
natives.uilog_uilogSetEntryPinned = function(p0, p1, p2)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x72A5CD214B342568, 'void', p0, p1, p2)
end

--- @param p0 integer
natives.uilog_uilogMarkMissionCompleted = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0xDE31D66D1E54C471, 'void', p0)
end

--- @param p0 integer
--- @param p1 integer
--- @param p2 integer
--- @param p3 string
natives.uilog_uilogMarkEntryAvailability = function(p0, p1, p2, p3)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'string', 'Argument p3 must be of type string.')

    local call = natives.invoke(0x13E8D7DD08543482, 'void', p0, p1, p2, p3)
end

--- @param p0 integer
--- @param p1 string
natives.uilog_uilogMarkAllEntriesAvailability = function(p0, p1)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')

    local call = natives.invoke(0x3920574CF0A2B7B6, 'void', p0, p1)
end

--- @param p0 integer
--- @param p1 integer
natives.uilog_uilogRemoveEntry = function(p0, p1)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xD594A19BE09A75C6, 'void', p0, p1)
end

--- @param logentrytype integer
--- @param p1 integer
--- @param p2 boolean
natives.uilog_uilogSetDisplayCompletionRating = function(logentrytype, p1, p2)
    assert(type(logentrytype) == 'integer', 'Argument logentrytype must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xA31013798FADCADC, 'void', logentrytype, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.uilog_n0Xa49D6D503E3Ea847 = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0xA49D6D503E3EA847, 'void', p0, p1, p2, p3, p4)
end

--- @param p0 integer
--- @param p1 integer
--- @param p2 string
natives.uilog_n0X763637F9B838B0A7 = function(p0, p1, p2)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'string', 'Argument p2 must be of type string.')

    local call = natives.invoke(0x763637F9B838B0A7, 'void', p0, p1, p2)
end

natives.uilog_uilogClearAllEntries = function()

    local call = natives.invoke(0xB95B4EA6B1EDF035, 'void')
end

--- @param p0 integer
--- @param p1 integer
--- @param p2 integer
--- @param p3 string
--- @param p4 boolean
--- @param p5 boolean
--- @param p6 boolean
natives.uilog_uilogAddOrUpdateObjective = function(p0, p1, p2, p3, p4, p5, p6)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'string', 'Argument p3 must be of type string.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')

    local call = natives.invoke(0xB43163388484CC87, 'void', p0, p1, p2, p3, p4, p5, p6)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
natives.uilog_n0Xa20398536B7F1134 = function(p0, p1, p2, p3, p4, p5)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0xA20398536B7F1134, 'void', p0, p1, p2, p3, p4, p5)
end

--- @param p0 string
natives.uilog_uilogSetCachedObjective = function(p0)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')

    local call = natives.invoke(0xFA233F8FE190514C, 'void', p0)
end

natives.uilog_uilogClearCachedObjective = function()

    local call = natives.invoke(0xDFF0D417277B41F8, 'void')
end

--- @return boolean
natives.uilog_uilogHasDisplayedCachedObjective = function()

    local call = natives.invoke(0xCC48FFBB45B54F71, 'bool')
    return call
end

natives.uilog_uilogClearHasDisplayedCachedObjective = function()

    local call = natives.invoke(0xA3108D6981A5CADB, 'void')
end

natives.uilog_uilogSetHasDisplayedCachedObjective = function()

    local call = natives.invoke(0xA3108D6981A5CADC, 'void')
end

--- @return string
natives.uilog_uilogGetCachedObjective = function()

    local call = natives.invoke(0x15A4461BEB788096, 'string')
    return call
end

natives.uilog_uilogPrintCachedObjective = function()

    local call = natives.invoke(0xE9990552DEC71600, 'void')
end

--- @param p0 integer
--- @param p1 integer
--- @return any
natives.uilog_uilogSetPendingDetailsId = function(p0, p1)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x136A027CF37B0A4F, 'any', p0, p1)
    return call
end

--- @return any
natives.uilog_n0X2A4765812202E671 = function()

    local call = natives.invoke(0x2A4765812202E671, 'any')
    return call
end

--- @param p0 integer
--- @param p1 integer
--- @param p2 string
--- @param p3 string
--- @param p4 integer
natives.uilog_uilogAddTotalTakeEntry = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'string', 'Argument p2 must be of type string.')
    assert(type(p3) == 'string', 'Argument p3 must be of type string.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')

    local call = natives.invoke(0x60C59968E8E87E6B, 'void', p0, p1, p2, p3, p4)
end

--- @param p0 string
--- @param p1 string
natives.uilog_uilogSetTotalTakeSummary = function(p0, p1)
    assert(type(p0) == 'string', 'Argument p0 must be of type string.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')

    local call = natives.invoke(0xD106B211EF1B8F04, 'void', p0, p1)
end

--- @param data userdata
--- @return number
natives.uilog_uilogPostNotification = function(data)
    assert(type(data) == 'userdata', 'Argument data must be of type userdata.')

    local call = natives.invoke(0x49E58FE6EF40B987, 'int', data)
    return call
end

natives.uilog_n0Xda0A30153Fcc0Ffd = function()

    local call = natives.invoke(0xDA0A30153FCC0FFD, 'void')
end

--- @param hash integer
--- @return string
natives.uipinning_uipinningGetTooltipText = function(hash)
    assert(type(hash) == 'integer', 'Argument hash must be of type integer.')

    local call = natives.invoke(0x3138582E0A13BFAB, 'string', hash)
    return call
end

--- @return boolean
natives.uitutorial_uitutorialGetIsThreatIndicatorCapableRadarShown = function()

    local call = natives.invoke(0x2CC24A2A7A1489C4, 'bool')
    return call
end

--- @return boolean
natives.uitutorial_uitutorialGetIsThreatIndicatorOn = function()

    local call = natives.invoke(0xFC2E0A5E9ED4E1B4, 'bool')
    return call
end

-- enum eRpgIcons
-- {
-- 	ICON_STAMINA,
-- 	ICON_STAMINA_CORE,
-- 	ICON_DEADEYE,
-- 	ICON_DEADEYE_CORE,
-- 	ICON_HEALTH,
-- 	ICON_HEALTH_CORE,
-- 	ICON_HORSE_HEALTH,
-- 	ICON_HORSE_HEALTH_CORE,
-- 	ICON_HORSE_STAMINA,
-- 	ICON_HORSE_STAMINA_CORE,
-- 	ICON_HORSE_COURAGE,
-- 	ICON_HORSE_COURAGE_CORE
-- };
-- 
-- enum eRpgIconVisibility
-- {
-- 	ICON_VISIBILITY_WAIT_TO_HIDE,
-- 	ICON_VISIBILITY_ALWAYS_SHOW,
-- 	ICON_VISIBILITY_ALWAYS_HIDE,
-- 	ICON_VISIBILITY_ALWAYS_BLINK
-- };
--- @param rpgicon integer
--- @param visibility integer
natives.uitutorial_uitutorialSetRpgIconVisibility = function(rpgicon, visibility)
    assert(type(rpgicon) == 'integer', 'Argument rpgicon must be of type integer.')
    assert(type(visibility) == 'integer', 'Argument visibility must be of type integer.')

    local call = natives.invoke(0xC116E6DF68DCE667, 'void', rpgicon, visibility)
end

--- @param p0 userdata
--- @return any
natives.uistatemachine_uiflowblockRequest = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xC0081B34E395CE48, 'any', p0)
    return call
end

--- @param p0 userdata
natives.uistatemachine_uiflowblockRelease = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xF320A77DD5F781DF, 'void', p0)
end

--- @param p0 userdata
--- @return any
natives.uistatemachine_uiflowblockIsLoaded = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x10A93C057B6BD944, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.uistatemachine_uiflowblockEnter = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x3B7519720C9DCB45, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @return any
natives.uistatemachine_uiStateMachineExists = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x5D15569C0FEBF757, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.uistatemachine_uiStateMachineCreate = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x4C6F2C4B7A03A266, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @return any
natives.uistatemachine_uiStateMachineCanRequestTransition = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xF7C180F57F85D0B8, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.uistatemachine_uiStateMachineRequestTransition = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x7EA9C3547E80350E, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.uistatemachine_uiStateMachineRequestExit = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x6B9FE4F0BA521A19, 'void', p0, p1)
end

--- @param p0 integer
--- @return boolean
natives.uistatemachine_uiStateMachineIsExited = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x11E73195E735B25B, 'bool', p0)
    return call
end

--- @param p0 userdata
natives.uistatemachine_uiStateMachineDestroy = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x4EB122210A90E2D8, 'void', p0)
end

--- @param p0 userdata
natives.uistatemachine_uiStateMachineDestroyAndClear = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x2738D68D2B4E09E7, 'void', p0)
end

-- Example: https:--pastebin.com/EJD7ytnz
--- @param p0 userdata
--- @param p1 userdata
--- @param p2 boolean
--- @return number
natives.uistickyfeed_uiStickyFeedCreateErrorMessage = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x9F2CC2439A04E7BA, 'int', p0, p1, p2)
    return call
end

-- Example: https:--pastebin.com/JygJShNU
--- @param p0 userdata
--- @param p1 userdata
--- @param p2 boolean
--- @return number
natives.uistickyfeed_uiStickyFeedCreateDeathFailMessage = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x815C4065AE6E6071, 'int', p0, p1, p2)
    return call
end

-- Example: https:--pastebin.com/6mLtee2S
--- @param p0 userdata
--- @param p1 userdata
--- @param p2 boolean
--- @return number
natives.uistickyfeed_uiStickyFeedCreateWarningMessage = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x339E16B41780FC35, 'int', p0, p1, p2)
    return call
end

-- Seems to only update _UI_STICKY_FEED_CREATE_ERROR_MESSAGE(0x9F2CC2439A04E7BA) and _UI_STICKY_FEED_CREATE_DEATH_FAIL_MESSAGE(0x815C4065AE6E6071) message.
-- Example: https:--pastebin.com/nDrJyWq2
--- @param msgid integer
--- @param p1 userdata
--- @param p2 boolean
natives.uistickyfeed_uiStickyFeedUpdateMessage = function(msgid, p1, p2)
    assert(type(msgid) == 'integer', 'Argument msgid must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xBC6F454E310124DA, 'void', msgid, p1, p2)
end

--- @param msgid integer
natives.uistickyfeed_uiStickyFeedClearMessage = function(msgid)
    assert(type(msgid) == 'integer', 'Argument msgid must be of type integer.')

    local call = natives.invoke(0x00A15B94CBA4F76F, 'void', msgid)
end

-- stickyFeedChannel: https:--github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eUIStickyFeedChannel
--- @param stickyfeedchannel integer
--- @return boolean
natives.uistickyfeed_uiStickyFeedIsChannelActive = function(stickyfeedchannel)
    assert(type(stickyfeedchannel) == 'integer', 'Argument stickyfeedchannel must be of type integer.')

    local call = natives.invoke(0xC5C395C60B542A3C, 'bool', stickyfeedchannel)
    return call
end

--- @return boolean
natives.uistickyfeed_uiStickyFeedIsAlertScreenActive = function()

    local call = natives.invoke(0xF8806EC3FF840FDC, 'bool')
    return call
end

-- Returns state of sticky feed message, see 0x59FA676177DBE4C9
--- @param msgid integer
--- @return number
natives.uistickyfeed_uiStickyFeedGetMessageState = function(msgid)
    assert(type(msgid) == 'integer', 'Argument msgid must be of type integer.')

    local call = natives.invoke(0x07954320D77F6A3D, 'int', msgid)
    return call
end

--- @param unlockhash integer
--- @param flag integer
--- @return boolean
natives.unlock_unlockIsUnlockFlagSet = function(unlockhash, flag)
    assert(type(unlockhash) == 'integer', 'Argument unlockhash must be of type integer.')
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')

    local call = natives.invoke(0x6B6369647F26F09F, 'bool', unlockhash, flag)
    return call
end

--- @param unlockhash integer
--- @return boolean
natives.unlock_unlockIsUnlocked = function(unlockhash)
    assert(type(unlockhash) == 'integer', 'Argument unlockhash must be of type integer.')

    local call = natives.invoke(0xC4B660C7B6040E75, 'bool', unlockhash)
    return call
end

--- @param unlockhash integer
--- @param toggle boolean
natives.unlock_unlockSetUnlocked = function(unlockhash, toggle)
    assert(type(unlockhash) == 'integer', 'Argument unlockhash must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x1B7C5ADA8A6910A0, 'void', unlockhash, toggle)
end

--- @param unlockhash integer
--- @return boolean
natives.unlock_unlockIsVisible = function(unlockhash)
    assert(type(unlockhash) == 'integer', 'Argument unlockhash must be of type integer.')

    local call = natives.invoke(0x8588A14B75AF096B, 'bool', unlockhash)
    return call
end

--- @param unlockhash integer
--- @param toggle boolean
natives.unlock_unlockSetVisible = function(unlockhash, toggle)
    assert(type(unlockhash) == 'integer', 'Argument unlockhash must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x46B901A8ECDB5A61, 'void', unlockhash, toggle)
end

--- @param unlockhash integer
--- @return boolean
natives.unlock_unlockIsNew = function(unlockhash)
    assert(type(unlockhash) == 'integer', 'Argument unlockhash must be of type integer.')

    local call = natives.invoke(0x644166BA7AA49DEA, 'bool', unlockhash)
    return call
end

--- @param unlockhash integer
--- @param toggle boolean
natives.unlock_unlockSetNew = function(unlockhash, toggle)
    assert(type(unlockhash) == 'integer', 'Argument unlockhash must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xA6D79C7AEF870A99, 'void', unlockhash, toggle)
end

--- @param unlockhash integer
--- @return boolean
natives.unlock_unlockIsLootable = function(unlockhash)
    assert(type(unlockhash) == 'integer', 'Argument unlockhash must be of type integer.')

    local call = natives.invoke(0x66BF197E066050DE, 'bool', unlockhash)
    return call
end

--- @param unlockhash integer
--- @param outdata userdata
natives.unlock_unlockGetItemRoleUnlockInfo = function(unlockhash, outdata)
    assert(type(unlockhash) == 'integer', 'Argument unlockhash must be of type integer.')
    assert(type(outdata) == 'userdata', 'Argument outdata must be of type userdata.')

    local call = natives.invoke(0x7C1C2062CFAD06FE, 'void', unlockhash, outdata)
end

-- Only used in R* Script beat_train_holdup: p1 = 1
--- @param entity integer
--- @param p1 userdata
natives.vehicle_n0X6355602C02Edc6Df = function(entity, p1)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x6355602C02EDC6DF, 'void', entity, p1)
end

--- @param vehicle integer
--- @param enabled boolean
natives.vehicle_setVehicleIsInHurry = function(vehicle, enabled)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(enabled) == 'boolean', 'Argument enabled must be of type boolean.')

    local call = natives.invoke(0xCE1531927AD6C9F8, 'void', vehicle, enabled)
end

--- @param modelhash integer
--- @param x number
--- @param y number
--- @param z number
--- @param heading number
--- @param isnetwork boolean
--- @param bscripthostveh boolean
--- @param bdontautocreatedraftanimals boolean
--- @param p8 boolean
--- @return number
natives.vehicle_createVehicle = function(modelhash, x, y, z, heading, isnetwork, bscripthostveh, bdontautocreatedraftanimals, p8)
    assert(type(modelhash) == 'integer', 'Argument modelhash must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(heading) == 'number', 'Argument heading must be of type number.')
    assert(type(isnetwork) == 'boolean', 'Argument isnetwork must be of type boolean.')
    assert(type(bscripthostveh) == 'boolean', 'Argument bscripthostveh must be of type boolean.')
    assert(type(bdontautocreatedraftanimals) == 'boolean', 'Argument bdontautocreatedraftanimals must be of type boolean.')
    assert(type(p8) == 'boolean', 'Argument p8 must be of type boolean.')

    local call = natives.invoke(0xAF35D0D2583051B0, 'int', modelhash, x, y, z, heading, isnetwork, bscripthostveh, bdontautocreatedraftanimals, p8)
    return call
end

-- Identical to CREATE_VEHICLE but allows to set draftAnimalPopGroup (see popgroups.#mt for DRAFT_HORSES_*)
--- @param modelhash integer
--- @param x number
--- @param y number
--- @param z number
--- @param heading number
--- @param isnetwork boolean
--- @param bscripthostveh boolean
--- @param bdontautocreatedraftanimals boolean
--- @param draftanimalpopgroup integer
--- @param p9 boolean
--- @return number
natives.vehicle_createDraftVehicle = function(modelhash, x, y, z, heading, isnetwork, bscripthostveh, bdontautocreatedraftanimals, draftanimalpopgroup, p9)
    assert(type(modelhash) == 'integer', 'Argument modelhash must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(heading) == 'number', 'Argument heading must be of type number.')
    assert(type(isnetwork) == 'boolean', 'Argument isnetwork must be of type boolean.')
    assert(type(bscripthostveh) == 'boolean', 'Argument bscripthostveh must be of type boolean.')
    assert(type(bdontautocreatedraftanimals) == 'boolean', 'Argument bdontautocreatedraftanimals must be of type boolean.')
    assert(type(draftanimalpopgroup) == 'integer', 'Argument draftanimalpopgroup must be of type integer.')
    assert(type(p9) == 'boolean', 'Argument p9 must be of type boolean.')

    local call = natives.invoke(0x214651FB1DFEBA89, 'int', modelhash, x, y, z, heading, isnetwork, bscripthostveh, bdontautocreatedraftanimals, draftanimalpopgroup, p9)
    return call
end

-- Deletes a vehicle.
-- The vehicle must be a mission entity to delete, so call this before deleting: SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);
-- 
-- eg how to use:
-- SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);
-- DELETE_VEHICLE(&vehicle);
-- 
-- Deletes the specified vehicle, then sets the handle pointed to by the pointer to NULL.
--- @param vehicle integer
natives.vehicle_deleteVehicle = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0xE20A909D8C4A70F8, 'void', vehicle)
end

--- @param vehicle integer
natives.vehicle_fadeAndDestroyVehicle = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x35DC1877312FBA0F, 'void', vehicle)
end

--- @param vehicle integer
--- @return boolean
natives.vehicle_isVehicleFadingOut = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x5136B284B67B35C7, 'bool', vehicle)
    return call
end

--- @param vehicle integer
--- @param toggle boolean
natives.vehicle_setVehicleAllowHomingMissleLockon = function(vehicle, toggle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x1240E8596A8308B9, 'void', vehicle, toggle)
end

-- Makes the vehicle accept no passengers.
--- @param vehicle integer
--- @param toggle boolean
natives.vehicle_setVehicleAllowNoPassengersLockon = function(vehicle, toggle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xECB9E9BC887E8060, 'void', vehicle, toggle)
end

--- @param vehicle integer
--- @param model integer
--- @return boolean
natives.vehicle_isVehicleModel = function(vehicle, model)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(model) == 'integer', 'Argument model must be of type integer.')

    local call = natives.invoke(0x0045A54EC7A22455, 'bool', vehicle, model)
    return call
end

--- @param volume integer
--- @param toggle boolean
natives.vehicle_setAllVehicleGeneratorsDisabledForVolume = function(volume, toggle)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x424FFCB9F0D2D4B5, 'void', volume, toggle)
end

--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param p6 boolean
--- @param p7 boolean
natives.vehicle_setAllVehicleGeneratorsActiveInArea = function(x1, y1, z1, x2, y2, z2, p6, p7)
    assert(type(x1) == 'number', 'Argument x1 must be of type number.')
    assert(type(y1) == 'number', 'Argument y1 must be of type number.')
    assert(type(z1) == 'number', 'Argument z1 must be of type number.')
    assert(type(x2) == 'number', 'Argument x2 must be of type number.')
    assert(type(y2) == 'number', 'Argument y2 must be of type number.')
    assert(type(z2) == 'number', 'Argument z2 must be of type number.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')
    assert(type(p7) == 'boolean', 'Argument p7 must be of type boolean.')

    local call = natives.invoke(0xBBB134FB9D50C0CC, 'void', x1, y1, z1, x2, y2, z2, p6, p7)
end

natives.vehicle_setAllVehicleGeneratorsActive = function()

    local call = natives.invoke(0x3D596E6E88A02C24, 'void')
end

--- @param vehicle integer
--- @param p1 boolean
--- @return boolean
natives.vehicle_setVehicleOnGroundProperly = function(vehicle, p1)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x7263332501E07F52, 'bool', vehicle, p1)
    return call
end

-- Returns true if the vehicle's current speed is less than, or equal to 0.0025f.
-- 
-- For some vehicles it returns true if the current speed is <= 0.00039999999.
--- @param vehicle integer
--- @return boolean
natives.vehicle_isVehicleStopped = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x78C3311A73135241, 'bool', vehicle)
    return call
end

-- Gets the number of passengers, NOT including the driver. Use IS_VEHICLE_SEAT_FREE(Vehicle, -1) to also check for the driver
--- @param vehicle integer
--- @return number
natives.vehicle_getVehicleNumberOfPassengers = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x59F3F16577CD79B2, 'int', vehicle)
    return call
end

--- @param vehicle integer
--- @return number
natives.vehicle_getVehicleMaxNumberOfPassengers = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0xA9C55F1C15E62E06, 'int', vehicle)
    return call
end

--- @param modelhash integer
--- @return number
natives.vehicle_getVehicleModelNumberOfSeats = function(modelhash)
    assert(type(modelhash) == 'integer', 'Argument modelhash must be of type integer.')

    local call = natives.invoke(0x9A578736FF3A17C3, 'int', modelhash)
    return call
end

-- seatIndex: see CREATE_PED_INSIDE_VEHICLE
--- @param vehicle integer
--- @param seatindex integer
--- @return boolean
natives.vehicle_isSeatWarpOnly = function(vehicle, seatindex)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(seatindex) == 'integer', 'Argument seatindex must be of type integer.')

    local call = natives.invoke(0x7892685BF6D9775E, 'bool', vehicle, seatindex)
    return call
end

--- @param vehicle integer
--- @param seatindex integer
--- @return boolean
natives.vehicle_getVehicleTurretSeat = function(vehicle, seatindex)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(seatindex) == 'integer', 'Argument seatindex must be of type integer.')

    local call = natives.invoke(0xFF5791B7639C2A46, 'bool', vehicle, seatindex)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.vehicle_n0Xa9E185D498B9Ac67 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xA9E185D498B9AC67, 'any', p0, p1)
    return call
end

--- @param multiplier number
natives.vehicle_setVehicleDensityMultiplierThisFrame = function(multiplier)
    assert(type(multiplier) == 'number', 'Argument multiplier must be of type number.')

    local call = natives.invoke(0x606374EBFC27B133, 'void', multiplier)
end

--- @param multiplier number
natives.vehicle_setRandomVehicleDensityMultiplierThisFrame = function(multiplier)
    assert(type(multiplier) == 'number', 'Argument multiplier must be of type number.')

    local call = natives.invoke(0x1F91D44490E1EA0C, 'void', multiplier)
end

--- @param multiplier number
natives.vehicle_setParkedVehicleDensityMultiplierThisFrame = function(multiplier)
    assert(type(multiplier) == 'number', 'Argument multiplier must be of type number.')

    local call = natives.invoke(0xFEDFA97638D61D4A, 'void', multiplier)
end

-- nullsub, doesn't do anything
--- @param toggle boolean
natives.vehicle_setDisableRandomTrainsThisFrame = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xD4288603E8766FF7, 'void', toggle)
end

--- @param vehicle integer
--- @param doorlockstatus integer
natives.vehicle_setVehicleDoorsLocked = function(vehicle, doorlockstatus)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(doorlockstatus) == 'integer', 'Argument doorlockstatus must be of type integer.')

    local call = natives.invoke(0x96F78A6A075D55D9, 'void', vehicle, doorlockstatus)
end

-- doorId: see SET_VEHICLE_DOOR_SHUT
--- @param vehicle integer
--- @param doorid integer
--- @param doorlockstatus integer
natives.vehicle_setVehicleIndividualDoorsLocked = function(vehicle, doorid, doorlockstatus)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(doorid) == 'integer', 'Argument doorid must be of type integer.')
    assert(type(doorlockstatus) == 'integer', 'Argument doorlockstatus must be of type integer.')

    local call = natives.invoke(0xA9F1D75195CC40F6, 'void', vehicle, doorid, doorlockstatus)
end

--- @param vehicle integer
--- @param player integer
--- @param toggle boolean
natives.vehicle_setVehicleDoorsLockedForPlayer = function(vehicle, player, toggle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x359A8EA1FB8D6F0F, 'void', vehicle, player, toggle)
end

--- @param vehicle integer
--- @param player integer
--- @return boolean
natives.vehicle_getVehicleDoorsLockedForPlayer = function(vehicle, player)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xFA2CDDFEB8BC898B, 'bool', vehicle, player)
    return call
end

--- @param vehicle integer
--- @param toggle boolean
natives.vehicle_setVehicleDoorsLockedForAllPlayers = function(vehicle, toggle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x2381977DA948F8DC, 'void', vehicle, toggle)
end

--- @param vehicle integer
--- @param team integer
--- @param toggle boolean
natives.vehicle_setVehicleDoorsLockedForTeam = function(vehicle, team, toggle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(team) == 'integer', 'Argument team must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xE712BC978770F105, 'void', vehicle, team, toggle)
end

--- @param vehicle integer
--- @param team integer
--- @return boolean
natives.vehicle_getVehicleDoorsLockedForTeam = function(vehicle, team)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(team) == 'integer', 'Argument team must be of type integer.')

    local call = natives.invoke(0xDD1E1393D966D39A, 'bool', vehicle, team)
    return call
end

-- Explodes a selected vehicle.
-- 
-- Vehicle vehicle = Vehicle you want to explode.
-- BOOL isAudible = If explosion makes a sound.
-- BOOL isInvisible = If the explosion is invisible or not.
-- 
-- First BOOL does not give any visual explosion, the vehicle just falls apart completely but slowly and starts to burn.
--- @param vehicle integer
--- @param isaudible boolean
--- @param isinvisible boolean
--- @param p3 userdata
--- @param p4 userdata
natives.vehicle_explodeVehicle = function(vehicle, isaudible, isinvisible, p3, p4)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(isaudible) == 'boolean', 'Argument isaudible must be of type boolean.')
    assert(type(isinvisible) == 'boolean', 'Argument isinvisible must be of type boolean.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x75DCED9EEC5769D7, 'void', vehicle, isaudible, isinvisible, p3, p4)
end

--- @param p0 userdata
--- @param p1 userdata
natives.vehicle_n0X750D42C013F64Ae7 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x750D42C013F64AE7, 'void', p0, p1)
end

--- @param p0 userdata
natives.vehicle_n0Xe78993Ff9022C064 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xE78993FF9022C064, 'void', p0)
end

-- nullsub, doesn't do anything
--- @param p0 userdata
natives.vehicle_n0X9868C0D0134855F7 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x9868C0D0134855F7, 'void', p0)
end

--- @param vehicle integer
natives.vehicle_hideHorseReins = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x201B8ED4FF7FE9F5, 'void', vehicle)
end

--- @param vehicle integer
natives.vehicle_showHorseReins = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x41CDA90EE3450921, 'void', vehicle)
end

--- @param p0 userdata
--- @param p1 userdata
natives.vehicle_n0Xd21A3D421E7F09F7 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xD21A3D421E7F09F7, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.vehicle_n0Xa13028E22564A1Bd = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xA13028E22564A1BD, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.vehicle_n0X485B05Ef05B9Aee9 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x485B05EF05B9AEE9, 'void', p0, p1)
end

--- @param vehicle integer
--- @param toggle boolean
natives.vehicle_setBoatAnchor = function(vehicle, toggle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xAEAB044F05B92659, 'void', vehicle, toggle)
end

--- @param vehicle integer
--- @param toggle boolean
natives.vehicle_n0X6B53F4B811E583D2 = function(vehicle, toggle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x6B53F4B811E583D2, 'void', vehicle, toggle)
end

--- @param vehicle integer
--- @return boolean
natives.vehicle_canAnchorBoatHere = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0xC075176CFB8B4128, 'bool', vehicle)
    return call
end

-- Old name: _SET_BOAT_FROZEN_WHEN_ANCHORED
--- @param vehicle integer
--- @param p1 boolean
--- @param p2 boolean
natives.vehicle_setBoatRemainsAnchoredWhilePlayerIsDriver = function(vehicle, p1, p2)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x286771F3059A37A7, 'void', vehicle, p1, p2)
end

-- Sets boat to be anchored on spawn, called together with SET_BOAT_ANCHOR and _SET_BOAT_ANCHOR_BUOYANCY_COEFFICIENT
--- @param vehicle integer
--- @param p1 boolean
natives.vehicle_setForceLowLodAnchorMode = function(vehicle, p1)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x75B49ACD73617437, 'void', vehicle, p1)
end

-- Value: mostly 99999.9f
-- 
-- Old name: _SET_BOAT_MOVEMENT_RESISTANCE
--- @param vehicle integer
--- @param value number
natives.vehicle_setBoatLowLodAnchorDistance = function(vehicle, value)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0xE3261532550D6A9F, 'void', vehicle, value)
end

--- @param vehicle integer
--- @param toggle boolean
natives.vehicle_setBoatSinksWhenWrecked = function(vehicle, toggle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x62A6D317A011EA1D, 'void', vehicle, toggle)
end

--- @param vehicle integer
--- @param p1 boolean
natives.vehicle_setForceHighLodVehicle = function(vehicle, p1)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x1098CDA477890165, 'void', vehicle, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.vehicle_n0X98A7598C579Ee871 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x98A7598C579EE871, 'void', p0, p1, p2)
end

-- Forcing high LOD buoyancy for vehicle: p1 = false
-- _SET_A*
--- @param vehicle integer
--- @param p1 boolean
natives.vehicle_n0X9E8711C81Aa17876 = function(vehicle, p1)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x9E8711C81AA17876, 'void', vehicle, p1)
end

-- If set to true, vehicle will not take crash damage, but is still susceptible to damage from bullets and explosives
--- @param vehicle integer
--- @param toggle boolean
natives.vehicle_setVehicleStrong = function(vehicle, toggle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xAB315515C9F8803D, 'void', vehicle, toggle)
end

-- seatIndex: see CREATE_PED_INSIDE_VEHICLE
-- Use GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle) - 1 for last seat index.
--- @param vehicle integer
--- @param seatindex integer
--- @return boolean
natives.vehicle_isVehicleSeatFree = function(vehicle, seatindex)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(seatindex) == 'integer', 'Argument seatindex must be of type integer.')

    local call = natives.invoke(0xE052C1B1CAA4ECE4, 'bool', vehicle, seatindex)
    return call
end

-- seatIndex: see CREATE_PED_INSIDE_VEHICLE
--- @param vehicle integer
--- @param seatindex integer
--- @return number
natives.vehicle_getPedInVehicleSeat = function(vehicle, seatindex)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(seatindex) == 'integer', 'Argument seatindex must be of type integer.')

    local call = natives.invoke(0xBB40DD2270B65366, 'int', vehicle, seatindex)
    return call
end

-- seatIndex: see CREATE_PED_INSIDE_VEHICLE
--- @param vehicle integer
--- @param seatindex integer
--- @return number
natives.vehicle_getLastPedInVehicleSeat = function(vehicle, seatindex)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(seatindex) == 'integer', 'Argument seatindex must be of type integer.')

    local call = natives.invoke(0x74583B19FEEAFDA7, 'int', vehicle, seatindex)
    return call
end

--- @param vehicle integer
--- @return boolean
natives.vehicle_isDraftVehicle = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0xEA44E97849E9F3DD, 'bool', vehicle)
    return call
end

-- enum eDraftHarness
-- {
-- 	DRAFT_HARNESS_LR,
-- 	DRAFT_HARNESS_RR,
-- 	DRAFT_HARNESS_LM,
-- 	DRAFT_HARNESS_RM,
-- 	DRAFT_HARNESS_LF,
-- 	DRAFT_HARNESS_RF,
-- 	DRAFT_HARNESS_COUNT
-- };
--- @param vehicle integer
--- @param harnessid integer
--- @return number
natives.vehicle_getPedInDraftHarness = function(vehicle, harnessid)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(harnessid) == 'integer', 'Argument harnessid must be of type integer.')

    local call = natives.invoke(0xA8BA0BAE0173457B, 'int', vehicle, harnessid)
    return call
end

--- @param vehicle integer
--- @param speed number
natives.vehicle_setVehicleForwardSpeed = function(vehicle, speed)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(speed) == 'number', 'Argument speed must be of type number.')

    local call = natives.invoke(0xF9F92AF49F12F6E7, 'void', vehicle, speed)
end

-- This native makes the vehicle stop immediately
-- 
-- distance defines how far it will travel until stopping.
--- @param vehicle integer
--- @param distance number
--- @param duration integer
--- @param unknown boolean
natives.vehicle_bringVehicleToHalt = function(vehicle, distance, duration, unknown)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(distance) == 'number', 'Argument distance must be of type number.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')
    assert(type(unknown) == 'boolean', 'Argument unknown must be of type boolean.')

    local call = natives.invoke(0x260BE8F09E326A20, 'void', vehicle, distance, duration, unknown)
end

-- Only returns true if BRING_VEHICLE_TO_HALT is called on vehicle beforehand
--- @param vehicle integer
--- @return boolean
natives.vehicle_isVehicleBroughtToHalt = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x404527BC03DA0E6C, 'bool', vehicle)
    return call
end

-- Old name: _STOP_BRING_VEHICLE_TO_HALT
--- @param vehicle integer
natives.vehicle_stopBringingVehicleToHalt = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x7C06330BFDDA182E, 'void', vehicle)
end

--- @param p0 userdata
natives.vehicle_n0Xe12F5Ed49F44D40D = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xE12F5ED49F44D40D, 'void', p0)
end

--- @param p0 userdata
natives.vehicle_n0Xf6E3D38869D0F7Ad = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xF6E3D38869D0F7AD, 'void', p0)
end

-- Closes all doors of a vehicle:
--- @param vehicle integer
--- @param closeinstantly boolean
natives.vehicle_setVehicleDoorsShut = function(vehicle, closeinstantly)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(closeinstantly) == 'boolean', 'Argument closeinstantly must be of type boolean.')

    local call = natives.invoke(0xA4FFCD645B11F25A, 'void', vehicle, closeinstantly)
end

-- Allows you to toggle bulletproof tires.
--- @param vehicle integer
--- @param toggle boolean
natives.vehicle_setVehicleTyresCanBurst = function(vehicle, toggle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xEBD0A4E935106FE5, 'void', vehicle, toggle)
end

--- @param vehicle integer
--- @param enabled boolean
natives.vehicle_setVehicleWheelsCanBreak = function(vehicle, enabled)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(enabled) == 'boolean', 'Argument enabled must be of type boolean.')

    local call = natives.invoke(0x839137C40275FB77, 'void', vehicle, enabled)
end

--- @param vehicle integer
--- @param toggle boolean
natives.vehicle_setVehicleDoorsToOpenAtAnyDistance = function(vehicle, toggle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x362CEDD2A41E0747, 'void', vehicle, toggle)
end

-- doorId: see SET_VEHICLE_DOOR_SHUT
-- Can also be used on trains and its wagons
--- @param vehicle integer
--- @param doorid integer
--- @param loose boolean
--- @param openinstantly boolean
natives.vehicle_setVehicleDoorOpen = function(vehicle, doorid, loose, openinstantly)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(doorid) == 'integer', 'Argument doorid must be of type integer.')
    assert(type(loose) == 'boolean', 'Argument loose must be of type boolean.')
    assert(type(openinstantly) == 'boolean', 'Argument openinstantly must be of type boolean.')

    local call = natives.invoke(0x550CE392A4672412, 'void', vehicle, doorid, loose, openinstantly)
end

-- windowIndex:
-- 0 = Front Right Window
-- 1 = Front Left Window
-- 2 = Back Right Window
-- 3 = Back Left Window
--- @param vehicle integer
--- @param windowindex integer
natives.vehicle_removeVehicleWindow = function(vehicle, windowindex)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(windowindex) == 'integer', 'Argument windowindex must be of type integer.')

    local call = natives.invoke(0x745F15A215F2DDF1, 'void', vehicle, windowindex)
end

--- @param p0 userdata
--- @param p1 userdata
natives.vehicle_n0X8878Ff3Eee2868A9 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x8878FF3EEE2868A9, 'void', p0, p1)
end

-- dirtLevel: 0.0 - 1.0
--- @param vehicle integer
--- @param dirtlevel number
natives.vehicle_setVehicleDirtLevel2 = function(vehicle, dirtlevel)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(dirtlevel) == 'number', 'Argument dirtlevel must be of type number.')

    local call = natives.invoke(0xBAE0EEDF93F05EAA, 'void', vehicle, dirtlevel)
end

-- mudLevel: 0.0 - 1.0
--- @param vehicle integer
--- @param mudlevel number
natives.vehicle_setVehicleMudLevel = function(vehicle, mudlevel)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(mudlevel) == 'number', 'Argument mudlevel must be of type number.')

    local call = natives.invoke(0x4D15E49764CB328A, 'void', vehicle, mudlevel)
end

-- Sets the vehicle's lights state.
--- @param vehicle integer
--- @param state integer
natives.vehicle_setVehicleLights = function(vehicle, state)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(state) == 'integer', 'Argument state must be of type integer.')

    local call = natives.invoke(0x629F0A0E952CAE7D, 'void', vehicle, state)
end

--- @param toggle boolean
natives.vehicle_setRandomTrains = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x1156C6EE7E82A98A, 'void', toggle)
end

-- Returns trackIndex
--- @param confighash integer
--- @param x number
--- @param y number
--- @param z number
--- @param direction boolean
--- @param p5 boolean
--- @return number
natives.vehicle_n0X331Cbd247Fc5Daa8 = function(confighash, x, y, z, direction, p5)
    assert(type(confighash) == 'integer', 'Argument confighash must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(direction) == 'boolean', 'Argument direction must be of type boolean.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')

    local call = natives.invoke(0x331CBD247FC5DAA8, 'int', confighash, x, y, z, direction, p5)
    return call
end

-- Takes value returned from 0x45853F4E17D847D5
--- @param trackindex integer
--- @return boolean
natives.vehicle_n0X0516Fae561276Efc = function(trackindex)
    assert(type(trackindex) == 'integer', 'Argument trackindex must be of type integer.')

    local call = natives.invoke(0x0516FAE561276EFC, 'bool', trackindex)
    return call
end

-- Returns trackIndex
--- @param train integer
--- @return number
natives.vehicle_getTrainTrackFromTrainVehicle = function(train)
    assert(type(train) == 'integer', 'Argument train must be of type integer.')

    local call = natives.invoke(0x45853F4E17D847D5, 'int', train)
    return call
end

-- Returns train
--- @param trackindex integer
--- @return number
natives.vehicle_getTrainVehicleFromTrackIndex = function(trackindex)
    assert(type(trackindex) == 'integer', 'Argument trackindex must be of type integer.')

    local call = natives.invoke(0x6E585A616ABB8401, 'int', trackindex)
    return call
end

--- @param trackindex integer
--- @param p1 number
natives.vehicle_n0X15206E88Ff7617Df = function(trackindex, p1)
    assert(type(trackindex) == 'integer', 'Argument trackindex must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x15206E88FF7617DF, 'void', trackindex, p1)
end

--- @param trackindex integer
--- @param p1 number
natives.vehicle_n0Xa7966807953A18Ee = function(trackindex, p1)
    assert(type(trackindex) == 'integer', 'Argument trackindex must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0xA7966807953A18EE, 'void', trackindex, p1)
end

--- @param trackindex integer
--- @param p1 integer
natives.vehicle_n0X6B34Be961F639E21 = function(trackindex, p1)
    assert(type(trackindex) == 'integer', 'Argument trackindex must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x6B34BE961F639E21, 'void', trackindex, p1)
end

--- @param train integer
--- @param p1 boolean
natives.vehicle_n0Xe6Bd7Dd3Fd474415 = function(train, p1)
    assert(type(train) == 'integer', 'Argument train must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xE6BD7DD3FD474415, 'void', train, p1)
end

--- @param trackindex integer
--- @param p1 number
natives.vehicle_n0X615B3B8E73634509 = function(trackindex, p1)
    assert(type(trackindex) == 'integer', 'Argument trackindex must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x615B3B8E73634509, 'void', trackindex, p1)
end

--- @param trackindex integer
--- @param p1 integer
natives.vehicle_n0X38E7Dd70A242D5Cb = function(trackindex, p1)
    assert(type(trackindex) == 'integer', 'Argument trackindex must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x38E7DD70A242D5CB, 'void', trackindex, p1)
end

--- @param trackindex integer
--- @param p1 integer
natives.vehicle_n0X63509Ddf102E08E8 = function(trackindex, p1)
    assert(type(trackindex) == 'integer', 'Argument trackindex must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x63509DDF102E08E8, 'void', trackindex, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
--- @param p9 userdata
--- @param p10 userdata
natives.vehicle_n0X7408B5C66Ba31Adb = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')
    assert(type(p10) == 'userdata', 'Argument p10 must be of type userdata.')

    local call = natives.invoke(0x7408B5C66BA31ADB, 'void', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)
end

--- @param trackindex integer
--- @param p1 number
natives.vehicle_n0X41365Db586Cd9E8E = function(trackindex, p1)
    assert(type(trackindex) == 'integer', 'Argument trackindex must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x41365DB586CD9E8E, 'void', trackindex, p1)
end

--- @param trackindex integer
--- @param p1 number
natives.vehicle_n0Xd0Aabe5B9F8Fa589 = function(trackindex, p1)
    assert(type(trackindex) == 'integer', 'Argument trackindex must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0xD0AABE5B9F8FA589, 'void', trackindex, p1)
end

--- @param trackindex integer
--- @param p1 integer
natives.vehicle_n0X427C919E9809E370 = function(trackindex, p1)
    assert(type(trackindex) == 'integer', 'Argument trackindex must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x427C919E9809E370, 'void', trackindex, p1)
end

--- @param trackindex integer
--- @return boolean
natives.vehicle_doesTrainExistOnTrack = function(trackindex)
    assert(type(trackindex) == 'integer', 'Argument trackindex must be of type integer.')

    local call = natives.invoke(0xC29996A337BDD099, 'bool', trackindex)
    return call
end

--- @param trackindex integer
--- @return number, number, number
natives.vehicle_getTrainPositionOnTrack = function(trackindex)
    assert(type(trackindex) == 'integer', 'Argument trackindex must be of type integer.')

    local call = natives.invoke(0x1E8A921112891651, 'vector3', trackindex)
    return call.x, call.y, call.z
end

--- @param trackindex integer
--- @return boolean
natives.vehicle_n0Xb4241Ad8F5Aee9Ed = function(trackindex)
    assert(type(trackindex) == 'integer', 'Argument trackindex must be of type integer.')

    local call = natives.invoke(0xB4241AD8F5AEE9ED, 'bool', trackindex)
    return call
end

--- @param p0 userdata
natives.vehicle_n0Xa230A5Dde12Ed374 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xA230A5DDE12ED374, 'void', p0)
end

--- @param trackindex integer
natives.vehicle_n0X0D5Fdf0D36Fa10Cd = function(trackindex)
    assert(type(trackindex) == 'integer', 'Argument trackindex must be of type integer.')

    local call = natives.invoke(0x0D5FDF0D36FA10CD, 'void', trackindex)
end

--- @param p0 userdata
natives.vehicle_n0Xe682002Db1F30669 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xE682002DB1F30669, 'void', p0)
end

--- @param trackindex integer
natives.vehicle_n0X718Eb706B6E998A0 = function(trackindex)
    assert(type(trackindex) == 'integer', 'Argument trackindex must be of type integer.')

    local call = natives.invoke(0x718EB706B6E998A0, 'void', trackindex)
end

-- _IS_* (related to CREATE_MISSION_TRAIN)
--- @param trainconfig integer
--- @param x number
--- @param y number
--- @param z number
--- @param direction boolean
--- @param p5 boolean
--- @return boolean
natives.vehicle_n0Xf05Dfaf1Adfef2Cd = function(trainconfig, x, y, z, direction, p5)
    assert(type(trainconfig) == 'integer', 'Argument trainconfig must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(direction) == 'boolean', 'Argument direction must be of type boolean.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')

    local call = natives.invoke(0xF05DFAF1ADFEF2CD, 'bool', trainconfig, x, y, z, direction, p5)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @return any
natives.vehicle_n0Xd1Df5E54F4Acbe1A = function(p0, p1, p2, p3, p4, p5, p6)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0xD1DF5E54F4ACBE1A, 'any', p0, p1, p2, p3, p4, p5, p6)
    return call
end

--- @param p0 userdata
--- @return any
natives.vehicle_n0X0Fddee66E3465726 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x0FDDEE66E3465726, 'any', p0)
    return call
end

natives.vehicle_n0X4C05B42A8D937796 = function()

    local call = natives.invoke(0x4C05B42A8D937796, 'void')
end

natives.vehicle_n0Xb961Dd799A837Bd7 = function()

    local call = natives.invoke(0xB961DD799A837BD7, 'void')
end

natives.vehicle_n0X16B86A49E072Aa85 = function()

    local call = natives.invoke(0x16B86A49E072AA85, 'void')
end

natives.vehicle_n0X2A7413168F6Cd5A8 = function()

    local call = natives.invoke(0x2A7413168F6CD5A8, 'void')
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.vehicle_n0Xfffe15B433300B8C = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xFFFE15B433300B8C, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.vehicle_n0X6Ea1273D525427F4 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x6EA1273D525427F4, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.vehicle_n0X7Be0746539Def0C8 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x7BE0746539DEF0C8, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.vehicle_n0X3137Edc899E6Dae4 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x3137EDC899E6DAE4, 'void', p0, p1)
end

-- Returns trackIndex
--- @param x number
--- @param y number
--- @param z number
--- @return number
natives.vehicle_n0X6C87F49Bfa181Db5 = function(x, y, z)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0x6C87F49BFA181DB5, 'int', x, y, z)
    return call
end

-- Returns trackIndex
-- _E* - _F*
--- @param x number
--- @param y number
--- @param z number
--- @return number
natives.vehicle_getTrackIndexFromCoords = function(x, y, z)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0x85D39F5E3B6D7EB0, 'int', x, y, z)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @return number, number, number
natives.vehicle_getNearestTrainTrackPosition = function(x, y, z)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0x6DE03BCC15E81710, 'vector3', x, y, z)
    return call.x, call.y, call.z
end

natives.vehicle_deleteAllTrains = function()

    local call = natives.invoke(0xA3120A1385F17FF7, 'void')
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.vehicle_n0X0E558D3A49D759D6 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x0E558D3A49D759D6, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.vehicle_n0Xd4907Ef4334C7602 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xD4907EF4334C7602, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.vehicle_n0X68830738A6Bfb370 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x68830738A6BFB370, 'void', p0, p1)
end

--- @param train integer
--- @param speed number
natives.vehicle_setTrainSpeed = function(train, speed)
    assert(type(train) == 'integer', 'Argument train must be of type integer.')
    assert(type(speed) == 'number', 'Argument speed must be of type number.')

    local call = natives.invoke(0xDFBA6BBFF7CCAFBB, 'void', train, speed)
end

-- Maximum possible speed is 30.0 (108 km/h)
--- @param train integer
--- @param speed number
natives.vehicle_setTrainMaxSpeed = function(train, speed)
    assert(type(train) == 'integer', 'Argument train must be of type integer.')
    assert(type(speed) == 'number', 'Argument speed must be of type number.')

    local call = natives.invoke(0x9F29999DFDF2AEB8, 'void', train, speed)
end

--- @param train integer
--- @param speed number
natives.vehicle_setTrainCruiseSpeed = function(train, speed)
    assert(type(train) == 'integer', 'Argument train must be of type integer.')
    assert(type(speed) == 'number', 'Argument speed must be of type number.')

    local call = natives.invoke(0x01021EB2E96B793C, 'void', train, speed)
end

-- Returns iNumCars - to be used with GET_TRAIN_CARRIAGE (trailerNumber)
-- _C* (O, P, Q, R)
--- @param train integer
--- @return number
natives.vehicle_getTrainCarriageTrailerNumber = function(train)
    assert(type(train) == 'integer', 'Argument train must be of type integer.')

    local call = natives.invoke(0x60B7D1DCC312697D, 'int', train)
    return call
end

-- Returns modelHash
--- @param trainconfig integer
--- @param traincarindex integer
--- @return number
natives.vehicle_getTrainModelFromTrainConfigByCarIndex = function(trainconfig, traincarindex)
    assert(type(trainconfig) == 'integer', 'Argument trainconfig must be of type integer.')
    assert(type(traincarindex) == 'integer', 'Argument traincarindex must be of type integer.')

    local call = natives.invoke(0x8DF5F6A19F99F0D5, 'integer', trainconfig, traincarindex)
    return call
end

-- Returns amount for CAN_REGISTER_MISSION_VEHICLES
--- @param trainconfig integer
--- @return number
natives.vehicle_getNumCarsFromTrainConfig = function(trainconfig)
    assert(type(trainconfig) == 'integer', 'Argument trainconfig must be of type integer.')

    local call = natives.invoke(0x635423D55CA84FC8, 'int', trainconfig)
    return call
end

-- Returns train car, use GET_TRAIN_CARRIAGE when trailerNumber is bigger than 0
--- @param train integer
--- @return number
natives.vehicle_getTrainCar = function(train)
    assert(type(train) == 'integer', 'Argument train must be of type integer.')

    local call = natives.invoke(0x671A07C9A1CD50A5, 'int', train)
    return call
end

--- @param train integer
--- @param toggle boolean
natives.vehicle_setTrainStopsForStations = function(train, toggle)
    assert(type(train) == 'integer', 'Argument train must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x4182C037AA1F0091, 'void', train, toggle)
end

--- @param p0 userdata
--- @param p1 userdata
natives.vehicle_n0Xdd100Ce1Ebbf37E3 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xDD100CE1EBBF37E3, 'void', p0, p1)
end

--- @param train integer
--- @param p1 number
natives.vehicle_n0X160C1B5Ab48Ab87C = function(train, p1)
    assert(type(train) == 'integer', 'Argument train must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x160C1B5AB48AB87C, 'void', train, p1)
end

--- @param train integer
--- @return boolean
natives.vehicle_isTrainWaitingAtStation = function(train)
    assert(type(train) == 'integer', 'Argument train must be of type integer.')

    local call = natives.invoke(0xE887BD31D97793F6, 'bool', train)
    return call
end

--- @param train integer
natives.vehicle_setTrainHalt = function(train)
    assert(type(train) == 'integer', 'Argument train must be of type integer.')

    local call = natives.invoke(0x3660BCAB3A6BB734, 'void', train)
end

-- Restarts the train
--- @param train integer
natives.vehicle_setTrainLeaveStation = function(train)
    assert(type(train) == 'integer', 'Argument train must be of type integer.')

    local call = natives.invoke(0x787E43477746876F, 'void', train)
end

--- @param toggle boolean
natives.vehicle_setRandomBoats = function(toggle)
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xF44D446D4E36DB87, 'void', toggle)
end

-- Request the vehicle recording defined by the lowercase format string "%s%03d.yvr". For example, REQUEST_VEHICLE_RECORDING(1, "FBIs1UBER") corresponds to fbis1uber001.yvr.
-- For all vehicle recording/playback natives, "script" is a common prefix that usually corresponds to the script/mission the recording is used in, "recording" is its int suffix, and "id" corresponds to a unique identifier within the recording streaming module.
-- (GTA) Note that only 24 recordings (hardcoded in multiple places) can ever active at a given time before clobbering begins.
--- @param recording integer
--- @param script string
natives.vehicle_requestVehicleRecording = function(recording, script)
    assert(type(recording) == 'integer', 'Argument recording must be of type integer.')
    assert(type(script) == 'string', 'Argument script must be of type string.')

    local call = natives.invoke(0xC474CF16EDA45DC9, 'void', recording, script)
end

-- See REQUEST_VEHICLE_RECORDING
--- @param recording integer
--- @param script string
--- @return boolean
natives.vehicle_hasVehicleRecordingBeenLoaded = function(recording, script)
    assert(type(recording) == 'integer', 'Argument recording must be of type integer.')
    assert(type(script) == 'string', 'Argument script must be of type string.')

    local call = natives.invoke(0xBA9325BE372AB6EA, 'bool', recording, script)
    return call
end

-- See REQUEST_VEHICLE_RECORDING
--- @param p0 userdata
--- @param p1 userdata
natives.vehicle_removeVehicleRecording = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x139E35755418F6AA, 'void', p0, p1)
end

-- This native does no interpolation between pathpoints. The same position will be returned for all times up to the next pathpoint in the recording.
-- 
-- See REQUEST_VEHICLE_RECORDING
--- @param recording integer
--- @param time number
--- @param script string
--- @return number, number, number
natives.vehicle_getPositionOfVehicleRecordingAtTime = function(recording, time, script)
    assert(type(recording) == 'integer', 'Argument recording must be of type integer.')
    assert(type(time) == 'number', 'Argument time must be of type number.')
    assert(type(script) == 'string', 'Argument script must be of type string.')

    local call = natives.invoke(0x1A00961A1BE94E5E, 'vector3', recording, time, script)
    return call.x, call.y, call.z
end

-- This native does no interpolation between pathpoints. The same rotation will be returned for all times up to the next pathpoint in the recording.
-- 
-- See REQUEST_VEHICLE_RECORDING
--- @param recording integer
--- @param time number
--- @param script string
--- @return number, number, number
natives.vehicle_getRotationOfVehicleRecordingAtTime = function(recording, time, script)
    assert(type(recording) == 'integer', 'Argument recording must be of type integer.')
    assert(type(time) == 'number', 'Argument time must be of type number.')
    assert(type(script) == 'string', 'Argument script must be of type string.')

    local call = natives.invoke(0x61787DD28B8CC0D5, 'vector3', recording, time, script)
    return call.x, call.y, call.z
end

--- @param vehicle integer
--- @return number
natives.vehicle_getTimePositionInRecording = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x233B51C7913FA031, 'float', vehicle)
    return call
end

-- p3 is some flag related to 'trailers' (invokes CVehicle::GetTrailer).
-- 
-- See REQUEST_VEHICLE_RECORDING
--- @param vehicle integer
--- @param recording integer
--- @param script string
--- @param p3 boolean
natives.vehicle_startPlaybackRecordedVehicle = function(vehicle, recording, script, p3)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(recording) == 'integer', 'Argument recording must be of type integer.')
    assert(type(script) == 'string', 'Argument script must be of type string.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0x4932B84E3276508E, 'void', vehicle, recording, script, p3)
end

-- Often called after START_PLAYBACK_RECORDED_VEHICLE and SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE; similar in use to FORCE_ENTITY_AI_AND_ANIMATION_UPDATE.
--- @param vehicle integer
--- @param p1 boolean
natives.vehicle_forcePlaybackRecordedVehicleUpdate = function(vehicle, p1)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x59ECA796021B0539, 'void', vehicle, p1)
end

--- @param vehicle integer
natives.vehicle_stopPlaybackRecordedVehicle = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0xBF9B4D6267E8C26D, 'void', vehicle)
end

--- @param vehicle integer
--- @return boolean
natives.vehicle_isPlaybackGoingOnForVehicle = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x02774B3A9034278F, 'bool', vehicle)
    return call
end

--- @param vehicle integer
--- @return boolean
natives.vehicle_isPlaybackUsingAiGoingOnForVehicle = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x5A7472606EC5B7C1, 'bool', vehicle)
    return call
end

--- @param vehicle integer
--- @param speed number
natives.vehicle_setPlaybackSpeed = function(vehicle, speed)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(speed) == 'number', 'Argument speed must be of type number.')

    local call = natives.invoke(0xD78084EED4CD94C6, 'void', vehicle, speed)
end

-- SET_TIME_POSITION_IN_RECORDING can be emulated by: desired_time - GET_TIME_POSITION_IN_RECORDING(vehicle)
--- @param vehicle integer
--- @param time number
natives.vehicle_skipTimeInPlaybackRecordedVehicle = function(vehicle, time)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(time) == 'number', 'Argument time must be of type number.')

    local call = natives.invoke(0x5F5E6379C59EFC56, 'void', vehicle, time)
end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param modelhash integer
--- @param flags integer
--- @return number
natives.vehicle_getClosestVehicle = function(x, y, z, radius, modelhash, flags)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(modelhash) == 'integer', 'Argument modelhash must be of type integer.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')

    local call = natives.invoke(0x52F45D033645181B, 'int', x, y, z, radius, modelhash, flags)
    return call
end

--- @param train integer
--- @param trailernumber integer
--- @return number
natives.vehicle_getTrainCarriage = function(train, trailernumber)
    assert(type(train) == 'integer', 'Argument train must be of type integer.')
    assert(type(trailernumber) == 'integer', 'Argument trailernumber must be of type integer.')

    local call = natives.invoke(0xD0FB093A4CDB932C, 'int', train, trailernumber)
    return call
end

--- @param train integer
natives.vehicle_deleteMissionTrain = function(train)
    assert(type(train) == 'integer', 'Argument train must be of type integer.')

    local call = natives.invoke(0x0D3630FB07E8B570, 'void', train)
end

-- flags = 0: DEFAULT; 1: KEEP_OLD_SPEED
--- @param train integer
--- @param flags integer
natives.vehicle_setMissionTrainAsNoLongerNeeded = function(train, flags)
    assert(type(train) == 'integer', 'Argument train must be of type integer.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')

    local call = natives.invoke(0xBBE7648349B49BE8, 'void', train, flags)
end

--- @param train integer
--- @param x number
--- @param y number
--- @param z number
natives.vehicle_setMissionTrainCoords = function(train, x, y, z)
    assert(type(train) == 'integer', 'Argument train must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0x7632755962AB9922, 'void', train, x, y, z)
end

-- Notice: BOOL p4 was wrongly named takePassengers (?)
-- Can be used to rotate the train by setting the BOOL direction
--- @param train integer
--- @param x number
--- @param y number
--- @param z number
--- @param direction boolean
natives.vehicle_setMissionTrainWarpToCoords = function(train, x, y, z, direction)
    assert(type(train) == 'integer', 'Argument train must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(direction) == 'boolean', 'Argument direction must be of type boolean.')

    local call = natives.invoke(0xC9EA26893C9E4024, 'void', train, x, y, z, direction)
end

--- @param train integer
--- @param p1 boolean
natives.vehicle_n0Xa72B1Bf3857B94D7 = function(train, p1)
    assert(type(train) == 'integer', 'Argument train must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xA72B1BF3857B94D7, 'void', train, p1)
end

--- @param model integer
--- @return boolean
natives.vehicle_isThisModelADraftVehicle = function(model)
    assert(type(model) == 'integer', 'Argument model must be of type integer.')

    local call = natives.invoke(0xB9D5BDDA88E1BB66, 'bool', model)
    return call
end

--- @param model integer
--- @return boolean
natives.vehicle_isThisModelABoat = function(model)
    assert(type(model) == 'integer', 'Argument model must be of type integer.')

    local call = natives.invoke(0x799CFC7C5B743B15, 'bool', model)
    return call
end

--- @param model integer
--- @return boolean
natives.vehicle_isThisModelATrain = function(model)
    assert(type(model) == 'integer', 'Argument model must be of type integer.')

    local call = natives.invoke(0xFC08C8F8C1EDF174, 'bool', model)
    return call
end

--- @param vehicle integer
--- @param state boolean
natives.vehicle_setVehicleCanBeTargetted = function(vehicle, state)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(state) == 'boolean', 'Argument state must be of type boolean.')

    local call = natives.invoke(0x05254BA0B44ADC16, 'void', vehicle, state)
end

--- @param vehicle integer
--- @param p1 boolean
natives.vehicle_setDontAllowPlayerToEnterVehicleIfLockedForPlayer = function(vehicle, p1)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x63DC1F22C903B709, 'void', vehicle, p1)
end

--- @param vehicle integer
--- @param state boolean
natives.vehicle_setVehicleCanBeVisiblyDamaged = function(vehicle, state)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(state) == 'boolean', 'Argument state must be of type boolean.')

    local call = natives.invoke(0x4BF8131AE811541C, 'void', vehicle, state)
end

--- @param vehicle integer
--- @param p1 boolean
natives.vehicle_setVehicleHasUnbreakableLights = function(vehicle, p1)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xC903855E028A05F2, 'void', vehicle, p1)
end

--- @param vehicle integer
--- @param p1 boolean
natives.vehicle_setVehicleRespectsLocksWhenHasDriver = function(vehicle, p1)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x33992A808DF1C1BA, 'void', vehicle, p1)
end

--- @param vehicle integer
--- @param p1 boolean
natives.vehicle_setVehicleCanEjectPassengersIfLocked = function(vehicle, p1)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x065D03A9D6B2C6B5, 'void', vehicle, p1)
end

--- @param vehicle integer
--- @param dirtlevel number
natives.vehicle_setVehicleDirtLevel = function(vehicle, dirtlevel)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(dirtlevel) == 'number', 'Argument dirtlevel must be of type number.')

    local call = natives.invoke(0x758C3460EE915D0A, 'void', vehicle, dirtlevel)
end

-- doorId: see SET_VEHICLE_DOOR_SHUT
--- @param vehicle integer
--- @param doorid integer
--- @return boolean
natives.vehicle_isVehicleDoorFullyOpen = function(vehicle, doorid)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(doorid) == 'integer', 'Argument doorid must be of type integer.')

    local call = natives.invoke(0x7AE191143C7A9107, 'bool', vehicle, doorid)
    return call
end

-- Starts or stops the engine on the specified vehicle.
-- 
-- vehicle: The vehicle to start or stop the engine on.
-- value: true to turn the vehicle on; false to turn it off.
-- instantly: if true, the vehicle will be set to the state immediately; otherwise, the current driver will physically turn on or off the engine.
--- @param vehicle integer
--- @param value boolean
--- @param instantly boolean
natives.vehicle_setVehicleEngineOn = function(vehicle, value, instantly)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(value) == 'boolean', 'Argument value must be of type boolean.')
    assert(type(instantly) == 'boolean', 'Argument instantly must be of type boolean.')

    local call = natives.invoke(0xB64CFA14CB9A2E78, 'void', vehicle, value, instantly)
end

--- @param vehicle integer
--- @param toggle boolean
natives.vehicle_setVehicleUndriveable = function(vehicle, toggle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x6E884BAB713A2A94, 'void', vehicle, toggle)
end

--- @param vehicle integer
--- @param toggle boolean
natives.vehicle_setVehicleProvidesCover = function(vehicle, toggle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x652712478F1721F4, 'void', vehicle, toggle)
end

--- @param p0 userdata
--- @param p1 userdata
natives.vehicle_n0X3053064F909B5F42 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x3053064F909B5F42, 'void', p0, p1)
end

-- doorId: see SET_VEHICLE_DOOR_SHUT
--- @param vehicle integer
--- @param doorid integer
--- @param speed integer
--- @param angle number
natives.vehicle_setVehicleDoorControl = function(vehicle, doorid, speed, angle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(doorid) == 'integer', 'Argument doorid must be of type integer.')
    assert(type(speed) == 'integer', 'Argument speed must be of type integer.')
    assert(type(angle) == 'number', 'Argument angle must be of type number.')

    local call = natives.invoke(0xD57F10EBBA814ECF, 'void', vehicle, doorid, speed, angle)
end

-- doorId: see SET_VEHICLE_DOOR_SHUT
--- @param vehicle integer
--- @param doorid integer
--- @param p2 boolean
--- @param p3 boolean
--- @param p4 boolean
natives.vehicle_setVehicleDoorLatched = function(vehicle, doorid, p2, p3, p4)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(doorid) == 'integer', 'Argument doorid must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')

    local call = natives.invoke(0x06F8A202EB312A3C, 'void', vehicle, doorid, p2, p3, p4)
end

-- doorId: enum eDoorId
-- {
-- 	VEH_EXT_DOOR_INVALID_ID = -1,
-- 	VEH_EXT_DOOR_DSIDE_F,
-- 	VEH_EXT_DOOR_DSIDE_M,
-- 	VEH_EXT_DOOR_DSIDE_M1,
-- 	VEH_EXT_DOOR_DSIDE_M2,
-- 	VEH_EXT_DOOR_DSIDE_R,
-- 	VEH_EXT_DOOR_PSIDE_F,
-- 	VEH_EXT_DOOR_PSIDE_M,
-- 	VEH_EXT_DOOR_PSIDE_M1,
-- 	VEH_EXT_DOOR_PSIDE_M2,
-- 	VEH_EXT_DOOR_PSIDE_R,
-- 	VEH_EXT_BONNET,
-- 	VEH_EXT_BOOT
-- };
--- @param vehicle integer
--- @param doorid integer
--- @param closeinstantly boolean
natives.vehicle_setVehicleDoorShut = function(vehicle, doorid, closeinstantly)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(doorid) == 'integer', 'Argument doorid must be of type integer.')
    assert(type(closeinstantly) == 'boolean', 'Argument closeinstantly must be of type boolean.')

    local call = natives.invoke(0x6A3C24B91FD0EA09, 'void', vehicle, doorid, closeinstantly)
end

-- doorId: see SET_VEHICLE_DOOR_SHUT
--- @param vehicle integer
--- @param doorid integer
--- @param deletedoor boolean
natives.vehicle_setVehicleDoorBroken = function(vehicle, doorid, deletedoor)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(doorid) == 'integer', 'Argument doorid must be of type integer.')
    assert(type(deletedoor) == 'boolean', 'Argument deletedoor must be of type boolean.')

    local call = natives.invoke(0x9666CF20A1C6D780, 'void', vehicle, doorid, deletedoor)
end

--- @param vehicle integer
--- @param toggle boolean
natives.vehicle_setVehicleCanBreak = function(vehicle, toggle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xC5ED9D59B4646611, 'void', vehicle, toggle)
end

-- Setting this to false, makes the specified vehicle to where if you press Y your character doesn't even attempt the animation to enter the vehicle. Hence it's not considered aka ignored.
--- @param vehicle integer
--- @param toggle boolean
natives.vehicle_setVehicleIsConsideredByPlayer = function(vehicle, toggle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x54800D386C5825E5, 'void', vehicle, toggle)
end

--- @param vehicle integer
--- @param p1 boolean
natives.vehicle_setVehicleMayBeUsedByGotoPointAnyMeans = function(vehicle, p1)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x7549B9E841940695, 'void', vehicle, p1)
end

--- @param vehicle integer
--- @return number
natives.vehicle_getVehicleDoorLockStatus = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0xC867FD144F2469D3, 'int', vehicle)
    return call
end

-- doorId: see SET_VEHICLE_DOOR_SHUT
-- 
-- Old name: _SET_VEHICLE_DOOR_CAN_BREAK
--- @param vehicle integer
--- @param doorid integer
--- @param isbreakable boolean
natives.vehicle_setDoorAllowedToBeBrokenOff = function(vehicle, doorid, isbreakable)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(doorid) == 'integer', 'Argument doorid must be of type integer.')
    assert(type(isbreakable) == 'boolean', 'Argument isbreakable must be of type boolean.')

    local call = natives.invoke(0x081FB9D6422F804C, 'void', vehicle, doorid, isbreakable)
end

--- @param vehicle integer
--- @return boolean
natives.vehicle_isVehicleOnAllWheels = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x0D5D119529654EE0, 'bool', vehicle)
    return call
end

--- @param train integer
--- @return boolean
natives.vehicle_getTrainDirection = function(train)
    assert(type(train) == 'integer', 'Argument train must be of type integer.')

    local call = natives.invoke(0x3C9628A811CBD724, 'bool', train)
    return call
end

-- https:--i.imgur.com/1rHibjW.jpg
--- @param trackindex integer
--- @return boolean
natives.vehicle_getTrainDirectionFromIndex = function(trackindex)
    assert(type(trackindex) == 'integer', 'Argument trackindex must be of type integer.')

    local call = natives.invoke(0x67995318F5FAA496, 'bool', trackindex)
    return call
end

-- _RESET_VEHICLE_*
--- @param train integer
--- @param traintrack integer
--- @param junctionindex integer
--- @return any
natives.vehicle_n0X09034479E6E3E269 = function(train, traintrack, junctionindex)
    assert(type(train) == 'integer', 'Argument train must be of type integer.')
    assert(type(traintrack) == 'integer', 'Argument traintrack must be of type integer.')
    assert(type(junctionindex) == 'integer', 'Argument junctionindex must be of type integer.')

    local call = natives.invoke(0x09034479E6E3E269, 'any', train, traintrack, junctionindex)
    return call
end

-- Outputs junctionIndex, to be used with 0xE6C5E2125EB210C1
--- @param traintrack integer
--- @param x number
--- @param y number
--- @param z number
--- @param junctionindex integer
--- @return boolean
natives.vehicle_getTrainTrackJunctionAtCoords = function(traintrack, x, y, z, junctionindex)
    assert(type(traintrack) == 'integer', 'Argument traintrack must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(junctionindex) == 'integer', 'Argument junctionindex must be of type integer.')

    local call = natives.invoke(0x86AFC343CF7F0B34, 'bool', traintrack, x, y, z, junctionindex)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @return any
natives.vehicle_n0Xd9Bf3Ed8Efb67Ea3 = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0xD9BF3ED8EFB67EA3, 'any', p0, p1, p2, p3, p4)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return number, number, number
natives.vehicle_n0X785639D89F8451Ab = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x785639D89F8451AB, 'vector3', p0, p1)
    return call.x, call.y, call.z
end

-- trainTrack: FREIGHT_GROUP, TRAINS3, BRAITHWAITES2_TRACK_CONFIG, TRAINS_OLD_WEST01, TRAINS_OLD_WEST03, TRAINS_NB1, TRAINS_INTERSECTION1_ANN
--- @param traintrack integer
--- @param junctionindex integer
--- @param enabled boolean
natives.vehicle_setTrainTrackJunctionSwitch = function(traintrack, junctionindex, enabled)
    assert(type(traintrack) == 'integer', 'Argument traintrack must be of type integer.')
    assert(type(junctionindex) == 'integer', 'Argument junctionindex must be of type integer.')
    assert(type(enabled) == 'boolean', 'Argument enabled must be of type boolean.')

    local call = natives.invoke(0xE6C5E2125EB210C1, 'void', traintrack, junctionindex, enabled)
end

-- Called together with 0xE6C5E2125EB210C1 in R* Script medium_update
--- @param traintrack integer
--- @param junctionindex integer
--- @param enabled boolean
natives.vehicle_n0X3Abfa128F5Bf5A70 = function(traintrack, junctionindex, enabled)
    assert(type(traintrack) == 'integer', 'Argument traintrack must be of type integer.')
    assert(type(junctionindex) == 'integer', 'Argument junctionindex must be of type integer.')
    assert(type(enabled) == 'boolean', 'Argument enabled must be of type boolean.')

    local call = natives.invoke(0x3ABFA128F5BF5A70, 'void', traintrack, junctionindex, enabled)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.vehicle_n0X2C46D2A591D8C322 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x2C46D2A591D8C322, 'any', p0, p1, p2)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.vehicle_n0Xcaff2C9747103C02 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xCAFF2C9747103C02, 'any', p0, p1, p2)
    return call
end

natives.vehicle_setAllJunctionsCleared = function()

    local call = natives.invoke(0x138398153824E332, 'void')
end

--- @param trackindex integer
--- @param p1 userdata
natives.vehicle_n0X34Bcf6209B9668A7 = function(trackindex, p1)
    assert(type(trackindex) == 'integer', 'Argument trackindex must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x34BCF6209B9668A7, 'void', trackindex, p1)
end

--- @param trackindex integer
--- @param x number
--- @param y number
--- @param z number
--- @param p4 userdata
natives.vehicle_n0Xd0Ba1853D76683C8 = function(trackindex, x, y, z, p4)
    assert(type(trackindex) == 'integer', 'Argument trackindex must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0xD0BA1853D76683C8, 'void', trackindex, x, y, z, p4)
end

--- @param train integer
--- @param offset number
natives.vehicle_setTrainOffsetFromStation = function(train, offset)
    assert(type(train) == 'integer', 'Argument train must be of type integer.')
    assert(type(offset) == 'number', 'Argument offset must be of type number.')

    local call = natives.invoke(0x8EC47DD4300BF063, 'void', train, offset)
end

--- @param p0 userdata
--- @param p1 userdata
natives.vehicle_n0Xdc69F6913Cca0B99 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xDC69F6913CCA0B99, 'void', p0, p1)
end

--- @param train integer
--- @param p1 boolean
natives.vehicle_n0X7840576C50A13Dba = function(train, p1)
    assert(type(train) == 'integer', 'Argument train must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x7840576C50A13DBA, 'void', train, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.vehicle_n0Xd0116Df21E6C7B36 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xD0116DF21E6C7B36, 'any', p0, p1)
    return call
end

-- Only used in train_robbery4 R* Script
-- _C* - _DEL*
--- @param entity integer
natives.vehicle_detachWagonEntityFromTrain = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0x54CBDD6E1B4CB4DF, 'void', entity)
end

-- Returns p1 for 0xBA958F68031DDBFC (stationIndex)
-- _GET_N* (NEAREST_STATION_FOR_TRAIN?)
--- @param train integer
--- @return number
natives.vehicle_n0X1180A2974D251B7B = function(train)
    assert(type(train) == 'integer', 'Argument train must be of type integer.')

    local call = natives.invoke(0x1180A2974D251B7B, 'int', train)
    return call
end

-- Returns p1 for 0xBA958F68031DDBFC (stationIndex)
--- @param train integer
--- @return number
natives.vehicle_getCurrentStationForTrain = function(train)
    assert(type(train) == 'integer', 'Argument train must be of type integer.')

    local call = natives.invoke(0x86FA6D8B48667D75, 'int', train)
    return call
end

-- _GET_P - _GET_T*
--- @param trackindex integer
--- @param stationindex integer
--- @return number
natives.vehicle_n0X9Cc94A948Eaf5372 = function(trackindex, stationindex)
    assert(type(trackindex) == 'integer', 'Argument trackindex must be of type integer.')
    assert(type(stationindex) == 'integer', 'Argument stationindex must be of type integer.')

    local call = natives.invoke(0x9CC94A948EAF5372, 'integer', trackindex, stationindex)
    return call
end

--- @param train integer
--- @return any
natives.vehicle_n0Xde8C5B9F65017Fa1 = function(train)
    assert(type(train) == 'integer', 'Argument train must be of type integer.')

    local call = natives.invoke(0xDE8C5B9F65017FA1, 'any', train)
    return call
end

-- Returns p0 for 0xBA958F68031DDBFC (trackIndex)
--- @param train integer
--- @return number
natives.vehicle_getCurrentTrackForTrain = function(train)
    assert(type(train) == 'integer', 'Argument train must be of type integer.')

    local call = natives.invoke(0xAF787E081AC4A8EE, 'int', train)
    return call
end

-- Returns Coords of vStation
-- p0 - NET_TRAIN_MANAGER_GET_TRAIN_STATION_DATA
-- _GET_P* - _GET_T*
--- @param trackindex integer
--- @param stationindex integer
--- @return number, number, number
natives.vehicle_getStationCoordsFromTrainStationData = function(trackindex, stationindex)
    assert(type(trackindex) == 'integer', 'Argument trackindex must be of type integer.')
    assert(type(stationindex) == 'integer', 'Argument stationindex must be of type integer.')

    local call = natives.invoke(0xBA958F68031DDBFC, 'vector3', trackindex, stationindex)
    return call.x, call.y, call.z
end

--- @param train integer
--- @return number
natives.vehicle_getTrackIndexOfTrain = function(train)
    assert(type(train) == 'integer', 'Argument train must be of type integer.')

    local call = natives.invoke(0x865FEC2FA899F29C, 'int', train)
    return call
end

--- @param train integer
--- @param p1 boolean
natives.vehicle_n0X1A861F899Ebbe17C = function(train, p1)
    assert(type(train) == 'integer', 'Argument train must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x1A861F899EBBE17C, 'void', train, p1)
end

--- @param trackindex integer
--- @param p1 boolean
natives.vehicle_n0Xf8F7Da13Cfbd4532 = function(trackindex, p1)
    assert(type(trackindex) == 'integer', 'Argument trackindex must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xF8F7DA13CFBD4532, 'void', trackindex, p1)
end

-- whistleSequence: ACKNOWLEDGE, BACKING_UP, CROSSING, DANGER, MOVING, NEXT_STATION, PASSING, STOPPED
-- p2 = true seems to mute the sound
--- @param train integer
--- @param whistlesequence string
--- @param p2 boolean
--- @param p3 boolean
natives.vehicle_triggerTrainWhistle = function(train, whistlesequence, p2, p3)
    assert(type(train) == 'integer', 'Argument train must be of type integer.')
    assert(type(whistlesequence) == 'string', 'Argument whistlesequence must be of type string.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0xCFE122EC635CC2B2, 'void', train, whistlesequence, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
natives.vehicle_n0X2Bb2B5Bcf0Df8008 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x2BB2B5BCF0DF8008, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.vehicle_n0X6703872Ec09Bc158 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x6703872EC09BC158, 'void', p0, p1)
end

--- @param train integer
--- @param p1 boolean
natives.vehicle_n0X1Bfbafcc6760Ff02 = function(train, p1)
    assert(type(train) == 'integer', 'Argument train must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x1BFBAFCC6760FF02, 'void', train, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @return any
natives.vehicle_n0Xf5Ea41C1408695Fb = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xF5EA41C1408695FB, 'any', p0, p1, p2, p3)
    return call
end

-- This fixes a vehicle.
-- If the vehicle's engine's broken then you cannot fix it with this native.
--- @param vehicle integer
natives.vehicle_setVehicleFixed = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x79811282A9D1AE56, 'void', vehicle)
end

--- @param vehicle integer
--- @param toggle boolean
natives.vehicle_setDisableVehiclePetrolTankFires = function(vehicle, toggle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xB70986AB19B04AFF, 'void', vehicle, toggle)
end

--- @param vehicle integer
--- @param toggle boolean
natives.vehicle_setDisableVehiclePetrolTankDamage = function(vehicle, toggle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x5795FBE7A2001C14, 'void', vehicle, toggle)
end

--- @param vehicle integer
--- @param p1 boolean
natives.vehicle_setDisableVehicleEngineFires = function(vehicle, p1)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xD146EE5F2B06B95E, 'void', vehicle, p1)
end

-- _SET_VEHICLE_LI*
--- @param vehicle integer
--- @param p1 boolean
natives.vehicle_setVehicleLimitSpeedWhenPlayerInactive = function(vehicle, p1)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x8F75941C86EEBFCA, 'void', vehicle, p1)
end

--- @param vehicle integer
--- @param p1 boolean
natives.vehicle_setVehicleStopInstantlyWhenPlayerInactive = function(vehicle, p1)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xC84E138448507567, 'void', vehicle, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
natives.vehicle_removeVehiclesFromGeneratorsInArea = function(p0, p1, p2, p3, p4, p5)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0xC619A44639BC0CB4, 'void', p0, p1, p2, p3, p4, p5)
end

-- Locks the vehicle's steering to the desired angle, explained below.
-- 
-- Requires to be called onTick. Steering is unlocked the moment the function stops being called on the vehicle.
-- 
-- Steer bias:
-- -1.0 = full right
-- 0.0 = centered steering
-- 1.0 = full left
--- @param vehicle integer
--- @param value number
natives.vehicle_setVehicleSteerBias = function(vehicle, value)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0x84DAAE11E9EE4FC3, 'void', vehicle, value)
end

--- @param vehicle integer
--- @param extraid integer
--- @return boolean
natives.vehicle_isVehicleExtraTurnedOn = function(vehicle, extraid)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(extraid) == 'integer', 'Argument extraid must be of type integer.')

    local call = natives.invoke(0xFA9A55D9C4351625, 'bool', vehicle, extraid)
    return call
end

-- Note: only some vehicle have extras
-- https:--github.com/femga/rdr3_discoveries/blob/master/vehicles/vehicle_modding/vehicle_extras.lua
--- @param vehicle integer
--- @param extraid integer
--- @param disable boolean
natives.vehicle_setVehicleExtra = function(vehicle, extraid, disable)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(extraid) == 'integer', 'Argument extraid must be of type integer.')
    assert(type(disable) == 'boolean', 'Argument disable must be of type boolean.')

    local call = natives.invoke(0xBB6F89150BC9D16B, 'void', vehicle, extraid, disable)
end

--- @param vehicle integer
--- @param extraid integer
--- @return boolean
natives.vehicle_doesExtraExist = function(vehicle, extraid)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(extraid) == 'integer', 'Argument extraid must be of type integer.')

    local call = natives.invoke(0xAF5E7E9A7620FFB5, 'bool', vehicle, extraid)
    return call
end

-- Apply damage to vehicle at a location. Location is relative to vehicle model (not world).
-- 
-- Radius of effect damage applied in a sphere at impact location
--- @param vehicle integer
--- @param xoffset number
--- @param yoffset number
--- @param zoffset number
--- @param damage number
--- @param radius number
--- @param p6 boolean
natives.vehicle_setVehicleDamage = function(vehicle, xoffset, yoffset, zoffset, damage, radius, p6)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(xoffset) == 'number', 'Argument xoffset must be of type number.')
    assert(type(yoffset) == 'number', 'Argument yoffset must be of type number.')
    assert(type(zoffset) == 'number', 'Argument zoffset must be of type number.')
    assert(type(damage) == 'number', 'Argument damage must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')

    local call = natives.invoke(0x1D7678F81452BB41, 'void', vehicle, xoffset, yoffset, zoffset, damage, radius, p6)
end

-- Returns 1000.0 if the function is unable to get the address of the specified vehicle or if it's not a vehicle.
-- 
-- Minimum: -4000
-- Maximum: 1000
-- 
-- -4000: Engine is destroyed
-- 0 and below: Engine catches fire and health rapidly declines
-- 300: Engine is smoking and losing functionality
-- 1000: Engine is perfect
--- @param vehicle integer
--- @return number
natives.vehicle_getVehicleEngineHealth = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x90DBFFAC43B22081, 'float', vehicle)
    return call
end

-- 1000 is max health
-- Begins leaking gas at around 650 health
-- -999.90002441406 appears to be minimum health, although nothing special occurs <- false statement
-- 
-- -------------------------
-- Minimum: -4000
-- Maximum: 1000
-- 
-- -4000: Engine is destroyed
-- 0 and below: Engine catches fire and health rapidly declines
-- 300: Engine is smoking and losing functionality
-- 1000: Engine is perfect
--- @param vehicle integer
--- @param health number
natives.vehicle_setVehicleEngineHealth = function(vehicle, health)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(health) == 'number', 'Argument health must be of type number.')

    local call = natives.invoke(0x8BDC5B998B4654EF, 'void', vehicle, health)
end

-- 1000 is max health
--- @param vehicle integer
--- @return number
natives.vehicle_getVehiclePetrolTankHealth = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x1E5A9B356D5098BE, 'float', vehicle)
    return call
end

-- 1000 is max health
--- @param vehicle integer
--- @param health number
natives.vehicle_setVehiclePetrolTankHealth = function(vehicle, health)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(health) == 'number', 'Argument health must be of type number.')

    local call = natives.invoke(0x6AB2918EE3BEC94C, 'void', vehicle, health)
end

-- VEH_STUCK_ON_ROOF = 0,
-- VEH_STUCK_ON_SIDE,
-- VEH_STUCK_HUNG_UP,
-- VEH_STUCK_JAMMED
--- @param vehicle integer
--- @param stucktype integer
--- @param ms integer
--- @return boolean
natives.vehicle_isVehicleStuckTimerUp = function(vehicle, stucktype, ms)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(stucktype) == 'integer', 'Argument stucktype must be of type integer.')
    assert(type(ms) == 'integer', 'Argument ms must be of type integer.')

    local call = natives.invoke(0x1ABA9753939503C5, 'bool', vehicle, stucktype, ms)
    return call
end

--- @param vehicle integer
--- @param nullattributes integer
natives.vehicle_resetVehicleStuckTimer = function(vehicle, nullattributes)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(nullattributes) == 'integer', 'Argument nullattributes must be of type integer.')

    local call = natives.invoke(0x23298B468F7D88B6, 'void', vehicle, nullattributes)
end

--- @param vehicle integer
--- @param p1 boolean
--- @param p2 boolean
--- @return boolean
natives.vehicle_isVehicleDriveable = function(vehicle, p1, p2)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xB86D29B10F627379, 'bool', vehicle, p1, p2)
    return call
end

--- @param vehicle integer
--- @return boolean
natives.vehicle_isVehicleWrecked = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0xDDBEA5506C848227, 'bool', vehicle)
    return call
end

--- @param vehicle integer
--- @return boolean
natives.vehicle_isVehicleOnFire = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x0E3BF7ED4169EC43, 'bool', vehicle)
    return call
end

--- @param vehicle integer
--- @param owned boolean
natives.vehicle_setVehicleHasBeenOwnedByPlayer = function(vehicle, owned)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(owned) == 'boolean', 'Argument owned must be of type boolean.')

    local call = natives.invoke(0xBB5A3FA8ED3979C5, 'void', vehicle, owned)
end

-- Sounds the horn for the specified vehicle.
-- 
-- vehicle: The vehicle to activate the horn for.
-- mode: The hash of "NORMAL" or "HELDDOWN". Can be 0.
-- duration: The duration to sound the horn, in milliseconds.
-- 
-- Note: If a player is in the vehicle, it will only sound briefly.
--- @param vehicle integer
--- @param duration integer
--- @param mode integer
--- @param forever boolean
natives.vehicle_startVehicleHorn = function(vehicle, duration, mode, forever)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(duration) == 'integer', 'Argument duration must be of type integer.')
    assert(type(mode) == 'integer', 'Argument mode must be of type integer.')
    assert(type(forever) == 'boolean', 'Argument forever must be of type boolean.')

    local call = natives.invoke(0xB4E3BFC39CA16057, 'void', vehicle, duration, mode, forever)
end

-- if true, axles won't bend.
--- @param vehicle integer
--- @param toggle boolean
natives.vehicle_setVehicleHasStrongAxles = function(vehicle, toggle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x252253C8A45AA1FC, 'void', vehicle, toggle)
end

-- snowLevel: 0.0 - 1.0
--- @param vehicle integer
--- @param snowlevel number
natives.vehicle_setVehicleSnowLevel = function(vehicle, snowlevel)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(snowlevel) == 'number', 'Argument snowlevel must be of type number.')

    local call = natives.invoke(0x6F73EFAB11651D7F, 'void', vehicle, snowlevel)
end

-- wetLevel: 0.0 - 1.0
--- @param vehicle integer
--- @param wetlevel number
natives.vehicle_setVehicleWetLevel = function(vehicle, wetlevel)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(wetlevel) == 'number', 'Argument wetlevel must be of type number.')

    local call = natives.invoke(0x5AABB09F6FBD1F87, 'void', vehicle, wetlevel)
end

-- https:--github.com/femga/rdr3_discoveries/blob/master/vehicles/vehicle_modding/vehicle_tints.lua
--- @param vehicle integer
--- @param tintid integer
natives.vehicle_setVehicleTint = function(vehicle, tintid)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(tintid) == 'integer', 'Argument tintid must be of type integer.')

    local call = natives.invoke(0x8268B098F6FCA4E2, 'void', vehicle, tintid)
end

-- https:--github.com/femga/rdr3_discoveries/blob/master/vehicles/vehicle_modding/vehicle_liveries.lua
--- @param vehicle integer
--- @param liveryindex integer
natives.vehicle_setVehicleLivery = function(vehicle, liveryindex)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(liveryindex) == 'integer', 'Argument liveryindex must be of type integer.')

    local call = natives.invoke(0xF89D82A0582E46ED, 'void', vehicle, liveryindex)
end

--- @param vehicle integer
--- @return number
natives.vehicle_getVehicleTint = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0xA44D65E6C624526F, 'int', vehicle)
    return call
end

--- @param vehicle integer
--- @return number
natives.vehicle_getVehicleLivery = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0xBB765B8FD49A796C, 'int', vehicle)
    return call
end

--- @param vehicle integer
--- @param windowindex integer
--- @return boolean
natives.vehicle_isVehicleWindowIntact = function(vehicle, windowindex)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(windowindex) == 'integer', 'Argument windowindex must be of type integer.')

    local call = natives.invoke(0x0E7910A63E05B12C, 'bool', vehicle, windowindex)
    return call
end

-- Returns false if every seat is occupied.
--- @param vehicle integer
--- @return boolean
natives.vehicle_areAnyVehicleSeatsFree = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0xA0A424505A1B6429, 'bool', vehicle)
    return call
end

-- Sets a vehicle to be strongly resistant to explosions. p0 is the vehicle; set p1 to false to toggle the effect on/off.
--- @param vehicle integer
--- @param toggle boolean
natives.vehicle_setVehicleExplodesOnHighExplosionDamage = function(vehicle, toggle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xA402939C6761E1A3, 'void', vehicle, toggle)
end

--- @param vehicle integer
--- @param p1 boolean
natives.vehicle_setAllowVehicleExplodesOnContact = function(vehicle, p1)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x8D3230A0ED7DE39F, 'void', vehicle, p1)
end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @return boolean
natives.vehicle_isAnyVehicleNearPoint = function(x, y, z, radius)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')

    local call = natives.invoke(0x5698BA4FD04D39C4, 'bool', x, y, z, radius)
    return call
end

--- @param vehicle integer
natives.vehicle_requestVehicleHighDetailModel = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x84B81EF78BD22357, 'void', vehicle)
end

--- @param vehiclehash integer
--- @param vehicleasset integer
natives.vehicle_requestVehicleAsset = function(vehiclehash, vehicleasset)
    assert(type(vehiclehash) == 'integer', 'Argument vehiclehash must be of type integer.')
    assert(type(vehicleasset) == 'integer', 'Argument vehicleasset must be of type integer.')

    local call = natives.invoke(0x81A15811460FAB3A, 'void', vehiclehash, vehicleasset)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.vehicle_n0Xcf9Da72002Fc16Bf = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xCF9DA72002FC16BF, 'void', p0, p1, p2)
end

--- @param vehicleasset integer
--- @return boolean
natives.vehicle_hasVehicleAssetLoaded = function(vehicleasset)
    assert(type(vehicleasset) == 'integer', 'Argument vehicleasset must be of type integer.')

    local call = natives.invoke(0xB935F3154BC913C8, 'bool', vehicleasset)
    return call
end

--- @param vehicleasset integer
natives.vehicle_removeVehicleAsset = function(vehicleasset)
    assert(type(vehicleasset) == 'integer', 'Argument vehicleasset must be of type integer.')

    local call = natives.invoke(0x888A4E675B38F5AD, 'void', vehicleasset)
end

--- @param vehicle integer
--- @param p1 boolean
--- @param p2 userdata
--- @return any
natives.vehicle_setVehicleAutomaticallyAttaches = function(vehicle, p1, p2)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x501354951CD942DE, 'any', vehicle, p1, p2)
    return call
end

--- @param vehicle integer
--- @param p1 number
natives.vehicle_n0X104D9A7B1C0D0783 = function(vehicle, p1)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x104D9A7B1C0D0783, 'void', vehicle, p1)
end

--- @param vehicle integer
--- @return boolean
natives.vehicle_isVehicleInBurnout = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x3F5029A8FC060C48, 'bool', vehicle)
    return call
end

--- @param vehicle integer
--- @param toggle boolean
natives.vehicle_setVehicleHandbrake = function(vehicle, toggle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x91BE51AEC4E99710, 'void', vehicle, toggle)
end

natives.vehicle_instantlyFillVehiclePopulation = function()

    local call = natives.invoke(0x1FF00DB43026B12F, 'void')
end

--- @return boolean
natives.vehicle_hasInstantFillVehiclePopulationFinished = function()

    local call = natives.invoke(0x2701D01D5E18FC31, 'bool')
    return call
end

-- Gets the trailer of a vehicle and puts it into the trailer parameter.
--- @param vehicle integer
--- @param trailer integer
--- @return boolean
natives.vehicle_getVehicleTrailerVehicle = function(vehicle, trailer)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(trailer) == 'integer', 'Argument trailer must be of type integer.')

    local call = natives.invoke(0xCF867A239EC30741, 'bool', vehicle, trailer)
    return call
end

--- @param vehicle integer
--- @return number
natives.vehicle_getVehicleEstimatedMaxSpeed = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0xFE52F34491529F0B, 'float', vehicle)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
--- @param p9 userdata
--- @param p10 userdata
--- @return number
natives.vehicle_addRoadNodeSpeedZone = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')
    assert(type(p10) == 'userdata', 'Argument p10 must be of type userdata.')

    local call = natives.invoke(0x4C221BAC54D735C3, 'int', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)
    return call
end

--- @param speedzone integer
--- @return boolean
natives.vehicle_removeRoadNodeSpeedZone = function(speedzone)
    assert(type(speedzone) == 'integer', 'Argument speedzone must be of type integer.')

    local call = natives.invoke(0xFE9AB3354ACE6C9C, 'bool', speedzone)
    return call
end

--- @param ped integer
--- @param vehicle integer
--- @param seatindex integer
--- @param side boolean
--- @param onenter boolean
--- @return boolean
natives.vehicle_isEntryPointForSeatClear = function(ped, vehicle, seatindex, side, onenter)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(seatindex) == 'integer', 'Argument seatindex must be of type integer.')
    assert(type(side) == 'boolean', 'Argument side must be of type boolean.')
    assert(type(onenter) == 'boolean', 'Argument onenter must be of type boolean.')

    local call = natives.invoke(0x80DDCCB2F4A3EB57, 'bool', ped, vehicle, seatindex, side, onenter)
    return call
end

-- seatIndex: see CREATE_PED_INSIDE_VEHICLE
--- @param vehicle integer
--- @param seatindex integer
--- @return boolean
natives.vehicle_canShuffleSeat = function(vehicle, seatindex)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(seatindex) == 'integer', 'Argument seatindex must be of type integer.')

    local call = natives.invoke(0xF8B2D32A2231FD24, 'bool', vehicle, seatindex)
    return call
end

--- @param vehicle integer
--- @param value number
natives.vehicle_modifyVehicleTopSpeed = function(vehicle, value)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0x35AD938C74CACD6A, 'void', vehicle, value)
end

--- @param vehicle integer
--- @param toggle boolean
natives.vehicle_setVehicleStaysFrozenWhenCleanedUp = function(vehicle, toggle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x23A3AB86E0807721, 'void', vehicle, toggle)
end

--- @param vehicle integer
--- @param toggle boolean
natives.vehicle_setVehicleInfluencesWantedLevel = function(vehicle, toggle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xC1842F40FD501DA2, 'void', vehicle, toggle)
end

--- @param vehicle integer
--- @return boolean
natives.vehicle_isBoatGrounded = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x30D86B2B7622D0EB, 'bool', vehicle)
    return call
end

--- @param vehicle integer
--- @param p1 boolean
natives.vehicle_setVehicleNotStealableAmbiently = function(vehicle, p1)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x09C970AE59ABF6B2, 'void', vehicle, p1)
end

--- @param vehicle integer
natives.vehicle_lockDoorsWhenNoLongerNeeded = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x1EF36558FBDE2DAA, 'void', vehicle)
end

--- @return number
natives.vehicle_getLastDrivenVehicle = function()

    local call = natives.invoke(0xA94F3E0AB9695E19, 'int')
    return call
end

natives.vehicle_clearLastDrivenVehicle = function()

    local call = natives.invoke(0x0EFC5DC62E67609B, 'void')
end

--- @param ped integer
--- @param vehicle integer
natives.vehicle_setPedOwnsVehicle = function(ped, vehicle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x838C216C2B05A009, 'void', ped, vehicle)
end

--- @param vehicle integer
--- @return number
natives.vehicle_getVehicleOwner = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0xB729679356A889AE, 'int', vehicle)
    return call
end

--- @param vehicle integer
--- @param multiplier number
natives.vehicle_setVehicleLodMultiplier = function(vehicle, multiplier)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(multiplier) == 'number', 'Argument multiplier must be of type number.')

    local call = natives.invoke(0x5F5E2B1B9EAECC0F, 'void', vehicle, multiplier)
end

-- Ranges from -1 to 2? (internal type is int8)
-- https:--imgur.com/a/bPzHcft
--- @param vehicle integer
--- @param lodlevel integer
natives.vehicle_setVehicleLodLevel = function(vehicle, lodlevel)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(lodlevel) == 'integer', 'Argument lodlevel must be of type integer.')

    local call = natives.invoke(0x3FA7D7D1E0EA809E, 'void', vehicle, lodlevel)
end

--- @param vehicle integer
--- @param toggle boolean
natives.vehicle_setForceVehicleEngineDamageByBullet = function(vehicle, toggle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x7F8E2B131E1DCA6C, 'void', vehicle, toggle)
end

-- Copies sourceVehicle's damage (broken bumpers, broken lights, etc.) to targetVehicle.
--- @param sourcevehicle integer
--- @param targetvehicle integer
natives.vehicle_copyVehicleDamages = function(sourcevehicle, targetvehicle)
    assert(type(sourcevehicle) == 'integer', 'Argument sourcevehicle must be of type integer.')
    assert(type(targetvehicle) == 'integer', 'Argument targetvehicle must be of type integer.')

    local call = natives.invoke(0xDBC28A8C683CD80B, 'void', sourcevehicle, targetvehicle)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
natives.vehicle_setVehicleShootAtTarget = function(p0, p1, p2, p3, p4, p5)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0xB79BE78C665B3E6D, 'void', p0, p1, p2, p3, p4, p5)
end

--- @param vehicle integer
--- @param toggle boolean
natives.vehicle_setForceHdVehicle = function(vehicle, toggle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x373CB1283308BD7B, 'void', vehicle, toggle)
end

--- @param vehicle integer
natives.vehicle_trackVehicleVisibility = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x1F3969B140DEE157, 'void', vehicle)
end

-- Requires a visibility tracker on the vehicle (TRACK_VEHICLE_VISIBILITY)
--- @param vehicle integer
--- @return boolean
natives.vehicle_isVehicleVisible = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x424910CD5DE8C246, 'bool', vehicle)
    return call
end

--- @param p0 userdata
--- @return any
natives.vehicle_n0X13C190302369308B = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x13C190302369308B, 'any', p0)
    return call
end

--- @param p0 boolean
natives.vehicle_setEnableVehicleSlipstreaming = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x73F1E4F6DF26FE30, 'void', p0)
end

--- @param vehicle integer
--- @param toggle boolean
natives.vehicle_setVehicleInactiveDuringPlayback = function(vehicle, toggle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x4EA71B4C9DB3C3F1, 'void', vehicle, toggle)
end

--- @param vehicle integer
--- @param toggle boolean
natives.vehicle_setVehicleEngineCanDegrade = function(vehicle, toggle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x48E4C137A71C2688, 'void', vehicle, toggle)
end

--- @param vehicle integer
--- @param isstolen boolean
natives.vehicle_setVehicleIsStolen = function(vehicle, isstolen)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(isstolen) == 'boolean', 'Argument isstolen must be of type boolean.')

    local call = natives.invoke(0x6C32FC81DFF25C9A, 'void', vehicle, isstolen)
end

-- Used in Script Function MC_LOCAL_SETUP_VEH - enabling transitions
--- @param vehicle integer
--- @param p1 boolean
natives.vehicle_n0Xcbf88256E44D5D39 = function(vehicle, p1)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xCBF88256E44D5D39, 'void', vehicle, p1)
end

-- Used in Script Function MC_LOCAL_SETUP_VEH - enabling transitions
--- @param vehicle integer
--- @param p1 boolean
natives.vehicle_n0Xc325A6Baa62Cf8A2 = function(vehicle, p1)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xC325A6BAA62CF8A2, 'void', vehicle, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.vehicle_n0X0Cd7914D17A970Ab = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x0CD7914D17A970AB, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.vehicle_n0X23F66C36F8E5Eaab = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x23F66C36F8E5EAAB, 'void', p0, p1)
end

--- @param p0 userdata
natives.vehicle_n0X697Df68F3A761A50 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x697DF68F3A761A50, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
natives.vehicle_n0X27E3F2B57209Fa54 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x27E3F2B57209FA54, 'void', p0, p1)
end

--- @param disabled boolean
--- @param weaponhash integer
--- @param vehicle integer
--- @param owner integer
natives.vehicle_disableVehicleWeapon = function(disabled, weaponhash, vehicle, owner)
    assert(type(disabled) == 'boolean', 'Argument disabled must be of type boolean.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(owner) == 'integer', 'Argument owner must be of type integer.')

    local call = natives.invoke(0x94B1E71B144356A5, 'void', disabled, weaponhash, vehicle, owner)
end

--- @param vehicle integer
--- @param toggle boolean
natives.vehicle_setVehicleCanBeUsedByFleeingPeds = function(vehicle, toggle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xE42952510F84AFDB, 'void', vehicle, toggle)
end

--- @param vehicle integer
--- @param toggle boolean
natives.vehicle_setVehicleKeepEngineOnWhenAbandoned = function(vehicle, toggle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x1549BA7FE83A2383, 'void', vehicle, toggle)
end

--- @param vehicle integer
--- @param toggle boolean
natives.vehicle_setVehicleWheelsCanBreakOffWhenBlowUp = function(vehicle, toggle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xC462C79379ABBCB1, 'void', vehicle, toggle)
end

--- @param vehicle integer
--- @param p1 integer
natives.vehicle_n0X15Cc8C33D7Ffcc4A = function(vehicle, p1)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x15CC8C33D7FFCC4A, 'void', vehicle, p1)
end

-- Used to be incorrectly named SET_VEHICLE_EXCLUSIVE_DRIVER
--- @param vehicle integer
--- @param toggle boolean
natives.vehicle_setVehicleAiCanUseExclusiveSeats = function(vehicle, toggle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x0893DAFBFA67110E, 'void', vehicle, toggle)
end

-- index: 0 - 1
-- 
-- Used to be incorrectly named _SET_VEHICLE_EXCLUSIVE_DRIVER_2
--- @param vehicle integer
--- @param ped integer
--- @param index integer
natives.vehicle_setVehicleExclusiveDriver = function(vehicle, ped, index)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0xC6B9BF123B9463B6, 'void', vehicle, ped, index)
end

--- @param ped integer
--- @param vehicle integer
--- @param outindex integer
--- @return boolean
natives.vehicle_isPedExclusiveDriverOfVehicle = function(ped, vehicle, outindex)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(outindex) == 'integer', 'Argument outindex must be of type integer.')

    local call = natives.invoke(0xB213D2A560B2E48B, 'bool', ped, vehicle, outindex)
    return call
end

--- @param p0 userdata
natives.vehicle_n0Xdc0556D0F484Ecaa = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xDC0556D0F484ECAA, 'void', p0)
end

-- Old name: _SET_DISABLE_SUPERDUMMY_MODE
--- @param vehicle integer
--- @param disable boolean
natives.vehicle_setDisableSuperdummy = function(vehicle, disable)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(disable) == 'boolean', 'Argument disable must be of type boolean.')

    local call = natives.invoke(0x1716D787D9B94202, 'void', vehicle, disable)
end

-- Seems related to vehicle health, like the one in IV.
-- Max 1000, min 0.
-- Vehicle does not necessarily explode or become undrivable at 0.
--- @param vehicle integer
--- @return number
natives.vehicle_getVehicleBodyHealth = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x42113B857E33C16E, 'float', vehicle)
    return call
end

--- @param vehicle integer
--- @param value number
natives.vehicle_setVehicleBodyHealth = function(vehicle, value)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(value) == 'number', 'Argument value must be of type number.')

    local call = natives.invoke(0x55CCAAE4F28C67A0, 'void', vehicle, value)
end

--- @param p0 userdata
--- @return any
natives.vehicle_n0Xe777Ddf3E78397E8 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xE777DDF3E78397E8, 'any', p0)
    return call
end

--- @param vehicle integer
--- @param p1 boolean
natives.vehicle_setVehicleBrokenPartsDontAffectAiHandling = function(vehicle, p1)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xCEC4CA2CAB8FA98C, 'void', vehicle, p1)
end

-- Only used in SP Scripts.
-- Related to Vehicle Speed.
--- @param p0 number
--- @param p1 number
natives.vehicle_n0X012701Ed938B85De = function(p0, p1)
    assert(type(p0) == 'number', 'Argument p0 must be of type number.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x012701ED938B85DE, 'void', p0, p1)
end

natives.vehicle_n0X8379E05871Ad24E0 = function()

    local call = natives.invoke(0x8379E05871AD24E0, 'void')
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.vehicle_setHorseTrafficGroupingDistribution = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xF5FFB08976911B50, 'void', p0, p1, p2, p3)
end

--- @param mount integer
--- @param draft integer
--- @param harnessid integer
--- @return boolean
natives.vehicle_attachDraftVehicleHarnessPed = function(mount, draft, harnessid)
    assert(type(mount) == 'integer', 'Argument mount must be of type integer.')
    assert(type(draft) == 'integer', 'Argument draft must be of type integer.')
    assert(type(harnessid) == 'integer', 'Argument harnessid must be of type integer.')

    local call = natives.invoke(0x316CDB5B6E8F4110, 'bool', mount, draft, harnessid)
    return call
end

--- @param draft integer
--- @param harnessid integer
--- @return boolean
natives.vehicle_detachDraftVehicleHarnessFromIndex = function(draft, harnessid)
    assert(type(draft) == 'integer', 'Argument draft must be of type integer.')
    assert(type(harnessid) == 'integer', 'Argument harnessid must be of type integer.')

    local call = natives.invoke(0x4402960666000E62, 'bool', draft, harnessid)
    return call
end

--- @param draft integer
--- @param ped integer
--- @return boolean
natives.vehicle_detachDraftVehicleHarnessPed = function(draft, ped)
    assert(type(draft) == 'integer', 'Argument draft must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xB36D3EC70963BE60, 'bool', draft, ped)
    return call
end

--- @param p0 userdata
natives.vehicle_n0X0F7F603Bde08C4D3 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x0F7F603BDE08C4D3, 'void', p0)
end

-- Returns number of horses a wagon can have
--- @param modelhash integer
--- @return number
natives.vehicle_getNumDraftVehicleHarnessPed = function(modelhash)
    assert(type(modelhash) == 'integer', 'Argument modelhash must be of type integer.')

    local call = natives.invoke(0x5B1A26BB18E7D451, 'int', modelhash)
    return call
end

--- @param trackindex integer
--- @param x number
--- @param y number
--- @param z number
--- @param distance number
--- @param direction boolean
--- @return number, number, number
natives.vehicle_getCheckpointTrainSpawnLocation = function(trackindex, x, y, z, distance, direction)
    assert(type(trackindex) == 'integer', 'Argument trackindex must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(distance) == 'number', 'Argument distance must be of type number.')
    assert(type(direction) == 'boolean', 'Argument direction must be of type boolean.')

    local call = natives.invoke(0x35D302397E524939, 'vector3', trackindex, x, y, z, distance, direction)
    return call.x, call.y, call.z
end

--- @param vehicle integer
--- @param p1 boolean
natives.vehicle_n0Xc399Cc89Fba05Da0 = function(vehicle, p1)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xC399CC89FBA05DA0, 'void', vehicle, p1)
end

-- Returns handles of boat paddles entities.
--- @param vehicle integer
--- @param left integer
--- @param right integer
natives.vehicle_getRowingOars = function(vehicle, left, right)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(left) == 'integer', 'Argument left must be of type integer.')
    assert(type(right) == 'integer', 'Argument right must be of type integer.')

    local call = natives.invoke(0xA6E210FB4283B767, 'void', vehicle, left, right)
end

--- @param vehicle integer
--- @return number
natives.vehicle_getDriverOfVehicle = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x2963B5C1637E8A27, 'int', vehicle)
    return call
end

-- Hashes: COACH2_BOOT_LOOT_ITEMS_COACHROB_RSC, COACH2_BOOT_LOOT_ITEMS_COACHROB, COACH2_MARY3
--- @param vehicle integer
--- @param coachrobberyloot integer
natives.vehicle_setForceCoachRobberyLoot = function(vehicle, coachrobberyloot)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(coachrobberyloot) == 'integer', 'Argument coachrobberyloot must be of type integer.')

    local call = natives.invoke(0xF489F94BFEE12BB0, 'void', vehicle, coachrobberyloot)
end

--- @param p0 userdata
--- @return any
natives.vehicle_n0X0Ba4250D20007C2E = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x0BA4250D20007C2E, 'any', p0)
    return call
end

--- @param vehicle integer
--- @param x number
--- @param y number
--- @param z number
--- @param p4 boolean
--- @param p5 number
natives.vehicle_n0X2200Ab13Cbd10F4E = function(vehicle, x, y, z, p4, p5)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')

    local call = natives.invoke(0x2200AB13CBD10F4E, 'void', vehicle, x, y, z, p4, p5)
end

--- @param vehicle integer
--- @param x number
--- @param y number
--- @param z number
natives.vehicle_n0Xb42C87521D1Bdd2F = function(vehicle, x, y, z)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0xB42C87521D1BDD2F, 'void', vehicle, x, y, z)
end

--- @param p0 userdata
natives.vehicle_n0Xc351394B932A6A50 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xC351394B932A6A50, 'void', p0)
end

--- @param p0 userdata
natives.vehicle_n0X172E9Dd35858Dcd7 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x172E9DD35858DCD7, 'void', p0)
end

--- @param vehicle integer
--- @return number
natives.vehicle_getBreakableVehicleLocksState = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0xE015CF1F2C0959D8, 'int', vehicle)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.vehicle_n0X877Ea24Eb1614495 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x877EA24EB1614495, 'any', p0, p1, p2)
    return call
end

--- @param vehicle integer
--- @param index integer
--- @return number
natives.vehicle_getBreakableVehicleLockObject = function(vehicle, index)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0x58F2244C1286D09A, 'integer', vehicle, index)
    return call
end

--- @param vehicle integer
--- @return number
natives.vehicle_getNumBreakableVehicleLockObjects = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x2FA86833E3617E2D, 'int', vehicle)
    return call
end

--- @param vehicle integer
--- @param toggle boolean
natives.vehicle_setBreakableVehicleLocksUnbreakable = function(vehicle, toggle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xBC4735F48CD983EF, 'void', vehicle, toggle)
end

--- @param p0 userdata
natives.vehicle_n0X9D12796Ef4Bf9Ea9 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x9D12796EF4BF9EA9, 'void', p0)
end

--- @param vehicle integer
--- @param p1 userdata
natives.vehicle_n0X850Ce59Dec2028F3 = function(vehicle, p1)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x850CE59DEC2028F3, 'void', vehicle, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.vehicle_n0X0355Fe37240E2C77 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x0355FE37240E2C77, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.vehicle_n0X3D86997A86Feef0D = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x3D86997A86FEEF0D, 'void', p0, p1)
end

--- @param vehicle integer
--- @param p1 userdata
natives.vehicle_n0Xd826690B5Cf3Beff = function(vehicle, p1)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xD826690B5CF3BEFF, 'void', vehicle, p1)
end

-- Params: destroyingForce is usually 100f in R* Scripts
-- Similar to 0xD4F5EFB55769D272, _A*
--- @param vehicle integer
--- @param wheelindex integer
--- @param destroyingforce number
natives.vehicle_breakOffDraftWheel = function(vehicle, wheelindex, destroyingforce)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(wheelindex) == 'integer', 'Argument wheelindex must be of type integer.')
    assert(type(destroyingforce) == 'number', 'Argument destroyingforce must be of type number.')

    local call = natives.invoke(0xC372B6A88F6E4AD8, 'void', vehicle, wheelindex, destroyingforce)
end

--- @param vehicle integer
--- @param expected integer
--- @param actual integer
--- @return boolean
natives.vehicle_getDraftAnimalCount = function(vehicle, expected, actual)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(expected) == 'integer', 'Argument expected must be of type integer.')
    assert(type(actual) == 'integer', 'Argument actual must be of type integer.')

    local call = natives.invoke(0xA19447D83294E29F, 'bool', vehicle, expected, actual)
    return call
end

--- @param p0 userdata
natives.vehicle_n0X165Be2001E5E4B75 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x165BE2001E5E4B75, 'void', p0)
end

--- @param draft integer
--- @param candetach boolean
natives.vehicle_setDraftVehicleAnimalsCanDetach = function(draft, candetach)
    assert(type(draft) == 'integer', 'Argument draft must be of type integer.')
    assert(type(candetach) == 'boolean', 'Argument candetach must be of type boolean.')

    local call = natives.invoke(0x6090A031C69F384E, 'void', draft, candetach)
end

--- @param draft integer
--- @param canbreak boolean
natives.vehicle_setDraftVehicleYokeCanBreak = function(draft, canbreak)
    assert(type(draft) == 'integer', 'Argument draft must be of type integer.')
    assert(type(canbreak) == 'boolean', 'Argument canbreak must be of type boolean.')

    local call = natives.invoke(0x226C6A4E3346D288, 'void', draft, canbreak)
end

--- @param train integer
--- @param trackindex integer
--- @param x number
--- @param y number
--- @param z number
natives.vehicle_addTrainTemporaryStop = function(train, trackindex, x, y, z)
    assert(type(train) == 'integer', 'Argument train must be of type integer.')
    assert(type(trackindex) == 'integer', 'Argument trackindex must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0x41503629D1139ABC, 'void', train, trackindex, x, y, z)
end

-- _SET_VEHICLE_S*
--- @param wagon integer
--- @param p1 boolean
natives.vehicle_n0X0794199B25E499E1 = function(wagon, p1)
    assert(type(wagon) == 'integer', 'Argument wagon must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x0794199B25E499E1, 'void', wagon, p1)
end

-- _SET_VEHICLE_WHEELS_*
--- @param wagon integer
--- @param p1 integer
--- @param p2 boolean
natives.vehicle_n0X73118A3Ee9C9B6Db = function(wagon, p1, p2)
    assert(type(wagon) == 'integer', 'Argument wagon must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x73118A3EE9C9B6DB, 'void', wagon, p1, p2)
end

-- Only used in R* SP Script rcm_abigail31: p1 = 5
-- _GET_VEHICLE_T* - _GET_VO*
--- @param wagon integer
--- @param p1 integer
--- @return boolean
natives.vehicle_n0Xe1C0F8781Bf130C2 = function(wagon, p1)
    assert(type(wagon) == 'integer', 'Argument wagon must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0xE1C0F8781BF130C2, 'bool', wagon, p1)
    return call
end

--- @param vehicle integer
--- @param wheel integer
--- @return boolean
natives.vehicle_isVehicleWheelDestroyed = function(vehicle, wheel)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(wheel) == 'integer', 'Argument wheel must be of type integer.')

    local call = natives.invoke(0xCB2CA620C48BC875, 'bool', vehicle, wheel)
    return call
end

-- _ARE_ANY_VEHICLE_(WHEELS_DESTROYED?)*
--- @param vehicle integer
--- @return boolean
natives.vehicle_n0X18714953Cced17D3 = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x18714953CCED17D3, 'bool', vehicle)
    return call
end

-- _H*
--- @param wagon integer
natives.vehicle_n0X41F0B254Ddf71473 = function(wagon)
    assert(type(wagon) == 'integer', 'Argument wagon must be of type integer.')

    local call = natives.invoke(0x41F0B254DDF71473, 'void', wagon)
end

--- @param vehicle integer
--- @param amount number
--- @param p2 integer
--- @param p3 boolean
natives.vehicle_setVehicleDeterioration = function(vehicle, amount, p2, p3)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(amount) == 'number', 'Argument amount must be of type number.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0x8E5DA070BAD3279E, 'void', vehicle, amount, p2, p3)
end

-- doorId: see SET_VEHICLE_DOOR_SHUT
--- @param vehicle integer
--- @param doorid integer
--- @return boolean
natives.vehicle_isVehicleDoorBroken = function(vehicle, doorid)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(doorid) == 'integer', 'Argument doorid must be of type integer.')

    local call = natives.invoke(0xE979BB5602AD3402, 'bool', vehicle, doorid)
    return call
end

-- wheelIndex 0: left, wheelIndex 1: right, 4 & 5: unknown
--- @param vehicle integer
--- @param wheelindex integer
--- @return number
natives.vehicle_breakOffVehicleWheel = function(vehicle, wheelindex)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(wheelindex) == 'integer', 'Argument wheelindex must be of type integer.')

    local call = natives.invoke(0xD4F5EFB55769D272, 'int', vehicle, wheelindex)
    return call
end

-- Spawn without lanterns set
--- @param vehicle integer
--- @return boolean
natives.vehicle_deleteVehicleLanterns = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0xE1A83D4A3B5D7938, 'bool', vehicle)
    return call
end

-- _SET_INSTANTLY_* - _SET_MISSION_TRAIN*
--- @param vehicle integer
--- @param p1 boolean
natives.vehicle_n0X6De072Ac8A95Ffc1 = function(vehicle, p1)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x6DE072AC8A95FFC1, 'void', vehicle, p1)
end

--- @param vehicle integer
--- @param speed number
natives.vehicle_setDraftVehicleDesiredSpeed = function(vehicle, speed)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(speed) == 'number', 'Argument speed must be of type number.')

    local call = natives.invoke(0x0C3F0F7F92CA847C, 'void', vehicle, speed)
end

-- Returns rage::NumericLimits<float>::kMax (3.402823466e+38) if vehicle is not a valid vehicle of type VEHICLE_TYPE_DRAFT.
--- @param vehicle integer
--- @return number
natives.vehicle_getDraftVehicleDesiredSpeed = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0xC6D7DDC843176701, 'float', vehicle)
    return call
end

-- _SET_DRAFT_VEHICLE_(STOP?)*
--- @param vehicle integer
--- @param p1 boolean
natives.vehicle_n0Xc4A2C11Fc0D41916 = function(vehicle, p1)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xC4A2C11FC0D41916, 'void', vehicle, p1)
end

-- _SET_DRAFT_VEHICLE_*
--- @param vehicle integer
--- @param p1 boolean
natives.vehicle_n0Xfc4F15A7Dddc47B1 = function(vehicle, p1)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xFC4F15A7DDDC47B1, 'void', vehicle, p1)
end

-- Params: p1 usually true in R* Scripts
-- _SET_DRAFT_VEHICLE_*
--- @param vehicle integer
--- @param p1 boolean
natives.vehicle_n0X4C60C333F9Cca2B6 = function(vehicle, p1)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x4C60C333F9CCA2B6, 'void', vehicle, p1)
end

--- @param vehicle integer
--- @param p1 number
natives.vehicle_n0Xcf342503Ca4C8Df1 = function(vehicle, p1)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0xCF342503CA4C8DF1, 'void', vehicle, p1)
end

-- _SET_TRAIN_*
--- @param train integer
--- @param p1 boolean
natives.vehicle_n0X06A09A6E0C6D2A84 = function(train, p1)
    assert(type(train) == 'integer', 'Argument train must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x06A09A6E0C6D2A84, 'void', train, p1)
end

-- _SET_TRAIN_*
--- @param train integer
--- @param p1 boolean
natives.vehicle_n0Xae7E66A61E7C17A5 = function(train, p1)
    assert(type(train) == 'integer', 'Argument train must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xAE7E66A61E7C17A5, 'void', train, p1)
end

-- _SET_TRAIN_*
--- @param train integer
--- @param p1 boolean
natives.vehicle_n0Xef28A614B4B264B8 = function(train, p1)
    assert(type(train) == 'integer', 'Argument train must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xEF28A614B4B264B8, 'void', train, p1)
end

-- _SET_VEHICLE_*
--- @param vehicle integer
natives.vehicle_n0X04F0579Dbdd32F34 = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0x04F0579DBDD32F34, 'void', vehicle)
end

-- Params: coords = GET_ENTITY_VELOCITY
-- _SET_VELOCITY*
--- @param vehicle integer
--- @param x number
--- @param y number
--- @param z number
natives.vehicle_n0X12F6C6Ed3Eff42De = function(vehicle, x, y, z)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0x12F6C6ED3EFF42DE, 'void', vehicle, x, y, z)
end

--- @param vehicle integer
--- @param p1 boolean
natives.vehicle_n0X87B974E54C71Ba7B = function(vehicle, p1)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x87B974E54C71BA7B, 'void', vehicle, p1)
end

--- @param train integer
--- @return boolean
natives.vehicle_hasTrainLoaded = function(train)
    assert(type(train) == 'integer', 'Argument train must be of type integer.')

    local call = natives.invoke(0xBD3C4A2ED509205E, 'bool', train)
    return call
end

-- configHash: https:--alloc8or.re/rdr3/doc/enums/eTrainConfig.txt
-- For more information, see trainconfigs.ymt
-- To make the train AI controlled, set conductor to true and set the speed once.
--- @param confighash integer
--- @param x number
--- @param y number
--- @param z number
--- @param direction boolean
--- @param passengers boolean
--- @param p6 boolean
--- @param conductor boolean
--- @return number
natives.vehicle_createMissionTrain = function(confighash, x, y, z, direction, passengers, p6, conductor)
    assert(type(confighash) == 'integer', 'Argument confighash must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(direction) == 'boolean', 'Argument direction must be of type boolean.')
    assert(type(passengers) == 'boolean', 'Argument passengers must be of type boolean.')
    assert(type(p6) == 'boolean', 'Argument p6 must be of type boolean.')
    assert(type(conductor) == 'boolean', 'Argument conductor must be of type boolean.')

    local call = natives.invoke(0xC239DBD9A57D2A71, 'int', confighash, x, y, z, direction, passengers, p6, conductor)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.vehicle_n0Xd1Efa8D68Bf5D63D = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xD1EFA8D68BF5D63D, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
--- @return any
natives.vehicle_n0X1121B07088Ed3013 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x1121B07088ED3013, 'any', p0)
    return call
end

--- @param p0 userdata
--- @return any
natives.vehicle_n0X42404D57D621601A = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x42404D57D621601A, 'any', p0)
    return call
end

--- @param p0 userdata
--- @return any
natives.vehicle_n0X288Cbb414C3C2Fbb = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x288CBB414C3C2FBB, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.vehicle_n0X6Fd7Bdf10304363A = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x6FD7BDF10304363A, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.vehicle_n0Xceb1F1Eed484A5B4 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xCEB1F1EED484A5B4, 'void', p0, p1)
end

--- @param p0 userdata
--- @return any
natives.vehicle_n0Xf57Db8E83Dcd8349 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xF57DB8E83DCD8349, 'any', p0)
    return call
end

-- Params: 1.0f will make balloon hover
--- @param balloon integer
--- @param p1 number
natives.vehicle_setBalloonHoverState = function(balloon, p1)
    assert(type(balloon) == 'integer', 'Argument balloon must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')

    local call = natives.invoke(0x7C9E45A4CED2E8DA, 'void', balloon, p1)
end

--- @param vehicle integer
--- @param allow boolean
natives.vehicle_setDraftVehicleAllowDraftAnimalAutoCreation = function(vehicle, allow)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(allow) == 'boolean', 'Argument allow must be of type boolean.')

    local call = natives.invoke(0x87344305778E5415, 'void', vehicle, allow)
end

--- @param p0 userdata
--- @param p1 userdata
natives.vehicle_n0X6835Afea10E186F4 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x6835AFEA10E186F4, 'void', p0, p1)
end

--- @param vehicle integer
--- @param seed integer
natives.vehicle_setDraftAnimalRandomSeed = function(vehicle, seed)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(seed) == 'integer', 'Argument seed must be of type integer.')

    local call = natives.invoke(0x8C6D9A399126C194, 'void', vehicle, seed)
end

--- @param p0 userdata
--- @return any
natives.vehicle_n0X14Da8C4Bc2Ccd90A = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x14DA8C4BC2CCD90A, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.vehicle_n0Xcacab2B123Bbdbd6 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xCACAB2B123BBDBD6, 'any', p0, p1, p2)
    return call
end

--- @param p0 userdata
natives.vehicle_n0Xff2B1F59Fb892F14 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xFF2B1F59FB892F14, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
natives.vehicle_n0X5Aadc7Bbbb1Bceeb = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x5AADC7BBBB1BCEEB, 'void', p0, p1, p2, p3, p4)
end

--- @param vehicle integer
--- @return boolean
natives.vehicle_getVehicleIsPropSetApplied = function(vehicle)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')

    local call = natives.invoke(0xD798DF5DB67B1659, 'bool', vehicle)
    return call
end

-- Total height is calculated using: cargo ratio + pelt ratio (by pelt count)
-- Screenshot: https:--imgur.com/a/nsomtiv
--- @param vehicle integer
--- @param height number
--- @param immediately boolean
natives.vehicle_setBatchTarpHeight = function(vehicle, height, immediately)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(height) == 'number', 'Argument height must be of type number.')
    assert(type(immediately) == 'boolean', 'Argument immediately must be of type boolean.')

    local call = natives.invoke(0x31F343383F19C987, 'void', vehicle, height, immediately)
end

--- @param p0 userdata
--- @param p1 userdata
natives.vehicle_n0X07E2E21E799080A0 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x07E2E21E799080A0, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
natives.vehicle_n0Xc2E62678D602853C = function(p0, p1, p2, p3, p4, p5, p6)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0xC2E62678D602853C, 'void', p0, p1, p2, p3, p4, p5, p6)
end

--- @param p0 userdata
natives.vehicle_n0X873Aaf600Cc36Dac = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x873AAF600CC36DAC, 'void', p0)
end

--- @param p0 userdata
--- @return any
natives.vehicle_n0X51C7694E140Fae43 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x51C7694E140FAE43, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.vehicle_n0X8Decd262602548B9 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x8DECD262602548B9, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.vehicle_n0Xcbc7B6F9A56B79F6 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xCBC7B6F9A56B79F6, 'void', p0, p1)
end

--- @param trackindex integer
--- @return boolean
natives.vehicle_n0X37D238Be69F7378A = function(trackindex)
    assert(type(trackindex) == 'integer', 'Argument trackindex must be of type integer.')

    local call = natives.invoke(0x37D238BE69F7378A, 'bool', trackindex)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.vehicle_n0X703D4Fb366Da4452 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x703D4FB366DA4452, 'void', p0, p1)
end

-- Seems to be related while setting a (door) state of specific trains (midlandboxcar05x, privateboxcar01x, privateboxcar02x, midlandrefrigeratorCar, privateArmoured, armoredCar01x)
--- @param traincarriage integer
--- @param p1 boolean
natives.vehicle_n0X762Fdc4C19E5A981 = function(traincarriage, p1)
    assert(type(traincarriage) == 'integer', 'Argument traincarriage must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x762FDC4C19E5A981, 'void', traincarriage, p1)
end

--- @param p0 userdata
--- @return any
natives.vehicle_n0X2045429505158D1A = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x2045429505158D1A, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.vehicle_n0X13Eb275Bf81636D1 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x13EB275BF81636D1, 'void', p0, p1)
end

--- @return boolean
natives.voice_n0Xccf71Fcfa0070B1A = function()

    local call = natives.invoke(0xCCF71FCFA0070B1A, 'bool')
    return call
end

--- @param enabled boolean
natives.voice_n0X79F478Ff5F9F4F05 = function(enabled)
    assert(type(enabled) == 'boolean', 'Argument enabled must be of type boolean.')

    local call = natives.invoke(0x79F478FF5F9F4F05, 'void', enabled)
end

--- @param player integer
--- @return boolean
natives.voice_n0Xaa35Fd9Abab490A3 = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xAA35FD9ABAB490A3, 'bool', player)
    return call
end

--- @param gamerhandle userdata
--- @return boolean
natives.voice_n0X356135B9B10A2A82 = function(gamerhandle)
    assert(type(gamerhandle) == 'userdata', 'Argument gamerhandle must be of type userdata.')

    local call = natives.invoke(0x356135B9B10A2A82, 'bool', gamerhandle)
    return call
end

--- @param player integer
--- @return boolean
natives.voice_n0Xef6F2A35Faaf2Ed7 = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xEF6F2A35FAAF2ED7, 'bool', player)
    return call
end

--- @param player integer
--- @param muted boolean
--- @return boolean
natives.voice_n0X49623Bcfc3A3D829 = function(player, muted)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(muted) == 'boolean', 'Argument muted must be of type boolean.')

    local call = natives.invoke(0x49623BCFC3A3D829, 'bool', player, muted)
    return call
end

--- @param player integer
--- @return boolean
natives.voice_n0X919Af2D93E9Aa89D = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x919AF2D93E9AA89D, 'bool', player)
    return call
end

--- @param player integer
--- @return boolean
natives.voice_n0X0Ded260A1958A82E = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x0DED260A1958A82E, 'bool', player)
    return call
end

--- @param player integer
--- @return boolean
natives.voice_n0X8E462Db1Eaa9C47C = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x8E462DB1EAA9C47C, 'bool', player)
    return call
end

--- @param player integer
--- @return number
natives.voice_n0X5Ca7Fb7D6De49Dcc = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x5CA7FB7D6DE49DCC, 'float', player)
    return call
end

--- @param proximity number
natives.voice_n0X58125B691F6827D5 = function(proximity)
    assert(type(proximity) == 'number', 'Argument proximity must be of type number.')

    local call = natives.invoke(0x58125B691F6827D5, 'void', proximity)
end

--- @param player integer
--- @return number
natives.voice_n0X2F82Cab262C8Ae26 = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0x2F82CAB262C8AE26, 'float', player)
    return call
end

--- @param threshold number
natives.voice_n0X08797A8C03868Cb8 = function(threshold)
    assert(type(threshold) == 'number', 'Argument threshold must be of type number.')

    local call = natives.invoke(0x08797A8C03868CB8, 'void', threshold)
end

--- @param flag boolean
natives.voice_n0Xb779F4Fa19269Aec = function(flag)
    assert(type(flag) == 'boolean', 'Argument flag must be of type boolean.')

    local call = natives.invoke(0xB779F4FA19269AEC, 'void', flag)
end

--- @param p0 integer
natives.voice_n0X1Fbf7F5Ba7E4Be3A = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x1FBF7F5BA7E4BE3A, 'void', p0)
end

--- @param player integer
natives.voice_n0Xdc9B361Cb7776673 = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xDC9B361CB7776673, 'void', player)
end

natives.voice_n0Xec8703E4536A9952 = function()

    local call = natives.invoke(0xEC8703E4536A9952, 'void')
end

--- @param player integer
--- @return any
natives.voice_n0Xdb622Ecd3Dcbe078 = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xDB622ECD3DCBE078, 'any', player)
    return call
end

--- @param teamid integer
--- @param allow boolean
natives.voice_n0Xb6E79850B759A30E = function(teamid, allow)
    assert(type(teamid) == 'integer', 'Argument teamid must be of type integer.')
    assert(type(allow) == 'boolean', 'Argument allow must be of type boolean.')

    local call = natives.invoke(0xB6E79850B759A30E, 'void', teamid, allow)
end

-- Params: p1 = 2; p2 = 3 in R* Script net_main_offline
--- @param player integer
--- @param p1 integer
--- @param p2 integer
natives.voice_n0X4791899615D70Fa2 = function(player, p1, p2)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x4791899615D70FA2, 'void', player, p1, p2)
end

--- @param player integer
natives.voice_n0Xf8938Cf3984092A5 = function(player)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')

    local call = natives.invoke(0xF8938CF3984092A5, 'void', player)
end

-- Returns p2 value of 0x4791899615D70FA2
--- @param player integer
--- @param p1 integer
--- @return number
natives.voice_n0X767931C727Df2Ed7 = function(player, p1)
    assert(type(player) == 'integer', 'Argument player must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x767931C727DF2ED7, 'int', player, p1)
    return call
end

natives.voice_n0X1C38C3577901Af1F = function()

    local call = natives.invoke(0x1C38C3577901AF1F, 'void')
end

natives.voice_n0Xb3E8841F6Bdaf83E = function()

    local call = natives.invoke(0xB3E8841F6BDAF83E, 'void')
end

--- @param volumetype integer
--- @param x number
--- @param y number
--- @param z number
--- @param rotx number
--- @param roty number
--- @param rotz number
--- @param scalex number
--- @param scaley number
--- @param scalez number
--- @return number
natives.volume_createVolumeByHash = function(volumetype, x, y, z, rotx, roty, rotz, scalex, scaley, scalez)
    assert(type(volumetype) == 'integer', 'Argument volumetype must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(rotx) == 'number', 'Argument rotx must be of type number.')
    assert(type(roty) == 'number', 'Argument roty must be of type number.')
    assert(type(rotz) == 'number', 'Argument rotz must be of type number.')
    assert(type(scalex) == 'number', 'Argument scalex must be of type number.')
    assert(type(scaley) == 'number', 'Argument scaley must be of type number.')
    assert(type(scalez) == 'number', 'Argument scalez must be of type number.')

    local call = natives.invoke(0x502022FA1AF9DC86, 'integer', volumetype, x, y, z, rotx, roty, rotz, scalex, scaley, scalez)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @param rotx number
--- @param roty number
--- @param rotz number
--- @param scalex number
--- @param scaley number
--- @param scalez number
--- @return number
natives.volume_createVolumeBox = function(x, y, z, rotx, roty, rotz, scalex, scaley, scalez)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(rotx) == 'number', 'Argument rotx must be of type number.')
    assert(type(roty) == 'number', 'Argument roty must be of type number.')
    assert(type(rotz) == 'number', 'Argument rotz must be of type number.')
    assert(type(scalex) == 'number', 'Argument scalex must be of type number.')
    assert(type(scaley) == 'number', 'Argument scaley must be of type number.')
    assert(type(scalez) == 'number', 'Argument scalez must be of type number.')

    local call = natives.invoke(0xDF85637F22706891, 'integer', x, y, z, rotx, roty, rotz, scalex, scaley, scalez)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @param rotx number
--- @param roty number
--- @param rotz number
--- @param scalex number
--- @param scaley number
--- @param scalez number
--- @return number
natives.volume_createVolumeCylinder = function(x, y, z, rotx, roty, rotz, scalex, scaley, scalez)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(rotx) == 'number', 'Argument rotx must be of type number.')
    assert(type(roty) == 'number', 'Argument roty must be of type number.')
    assert(type(rotz) == 'number', 'Argument rotz must be of type number.')
    assert(type(scalex) == 'number', 'Argument scalex must be of type number.')
    assert(type(scaley) == 'number', 'Argument scaley must be of type number.')
    assert(type(scalez) == 'number', 'Argument scalez must be of type number.')

    local call = natives.invoke(0x0522D4774B82E3E6, 'integer', x, y, z, rotx, roty, rotz, scalex, scaley, scalez)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @param rotx number
--- @param roty number
--- @param rotz number
--- @param scalex number
--- @param scaley number
--- @param scalez number
--- @return number
natives.volume_createVolumeSphere = function(x, y, z, rotx, roty, rotz, scalex, scaley, scalez)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(rotx) == 'number', 'Argument rotx must be of type number.')
    assert(type(roty) == 'number', 'Argument roty must be of type number.')
    assert(type(rotz) == 'number', 'Argument rotz must be of type number.')
    assert(type(scalex) == 'number', 'Argument scalex must be of type number.')
    assert(type(scaley) == 'number', 'Argument scaley must be of type number.')
    assert(type(scalez) == 'number', 'Argument scalez must be of type number.')

    local call = natives.invoke(0xB3FB80A32BAE3065, 'integer', x, y, z, rotx, roty, rotz, scalex, scaley, scalez)
    return call
end

--- @return number
natives.volume_createVolumeAggregate = function()

    local call = natives.invoke(0x59F6F5C1D129F106, 'integer')
    return call
end

--- @param volumetype integer
--- @param x number
--- @param y number
--- @param z number
--- @param rotx number
--- @param roty number
--- @param rotz number
--- @param scalex number
--- @param scaley number
--- @param scalez number
--- @param name string
--- @return number
natives.volume_createVolumeByHashWithCustomName = function(volumetype, x, y, z, rotx, roty, rotz, scalex, scaley, scalez, name)
    assert(type(volumetype) == 'integer', 'Argument volumetype must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(rotx) == 'number', 'Argument rotx must be of type number.')
    assert(type(roty) == 'number', 'Argument roty must be of type number.')
    assert(type(rotz) == 'number', 'Argument rotz must be of type number.')
    assert(type(scalex) == 'number', 'Argument scalex must be of type number.')
    assert(type(scaley) == 'number', 'Argument scaley must be of type number.')
    assert(type(scalez) == 'number', 'Argument scalez must be of type number.')
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0x1F85E4AC774A201E, 'integer', volumetype, x, y, z, rotx, roty, rotz, scalex, scaley, scalez, name)
    return call
end

--- @param volumetype integer
--- @param x number
--- @param y number
--- @param z number
--- @param rotx number
--- @param roty number
--- @param rotz number
--- @param scalex number
--- @param scaley number
--- @param scalez number
--- @return number
natives.volume_createAntiGriefVolume = function(volumetype, x, y, z, rotx, roty, rotz, scalex, scaley, scalez)
    assert(type(volumetype) == 'integer', 'Argument volumetype must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(rotx) == 'number', 'Argument rotx must be of type number.')
    assert(type(roty) == 'number', 'Argument roty must be of type number.')
    assert(type(rotz) == 'number', 'Argument rotz must be of type number.')
    assert(type(scalex) == 'number', 'Argument scalex must be of type number.')
    assert(type(scaley) == 'number', 'Argument scaley must be of type number.')
    assert(type(scalez) == 'number', 'Argument scalez must be of type number.')

    local call = natives.invoke(0x0EB78C2B156635B1, 'integer', volumetype, x, y, z, rotx, roty, rotz, scalex, scaley, scalez)
    return call
end

--- @param volume integer
--- @param toggle boolean
natives.volume_setAntiGriefVolumeBlocksHorse = function(volume, toggle)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xBE551C2CC421185D, 'void', volume, toggle)
end

--- @param volume integer
--- @param toggle boolean
natives.volume_setAntiGriefVolumeBlocksPlayer = function(volume, toggle)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x5B23DFF8E0948BB2, 'void', volume, toggle)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
--- @param p9 userdata
--- @param p10 userdata
--- @param p11 userdata
--- @param p12 userdata
--- @return number
natives.volume_createWalkAndTalkVolume = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')
    assert(type(p10) == 'userdata', 'Argument p10 must be of type userdata.')
    assert(type(p11) == 'userdata', 'Argument p11 must be of type userdata.')
    assert(type(p12) == 'userdata', 'Argument p12 must be of type userdata.')

    local call = natives.invoke(0xFD0E389CD44434B6, 'integer', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @param p7 userdata
--- @param p8 userdata
--- @param p9 userdata
--- @param p10 userdata
--- @param p11 userdata
--- @param p12 userdata
--- @param p13 userdata
--- @param p14 userdata
--- @return number
natives.volume_createSpeedVolume = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')
    assert(type(p7) == 'userdata', 'Argument p7 must be of type userdata.')
    assert(type(p8) == 'userdata', 'Argument p8 must be of type userdata.')
    assert(type(p9) == 'userdata', 'Argument p9 must be of type userdata.')
    assert(type(p10) == 'userdata', 'Argument p10 must be of type userdata.')
    assert(type(p11) == 'userdata', 'Argument p11 must be of type userdata.')
    assert(type(p12) == 'userdata', 'Argument p12 must be of type userdata.')
    assert(type(p13) == 'userdata', 'Argument p13 must be of type userdata.')
    assert(type(p14) == 'userdata', 'Argument p14 must be of type userdata.')

    local call = natives.invoke(0xBBE768E3AE76E07C, 'integer', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @param rotx number
--- @param roty number
--- @param rotz number
--- @param scalex number
--- @param scaley number
--- @param scalez number
--- @param name string
--- @return number
natives.volume_createVolumeBoxWithCustomName = function(x, y, z, rotx, roty, rotz, scalex, scaley, scalez, name)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(rotx) == 'number', 'Argument rotx must be of type number.')
    assert(type(roty) == 'number', 'Argument roty must be of type number.')
    assert(type(rotz) == 'number', 'Argument rotz must be of type number.')
    assert(type(scalex) == 'number', 'Argument scalex must be of type number.')
    assert(type(scaley) == 'number', 'Argument scaley must be of type number.')
    assert(type(scalez) == 'number', 'Argument scalez must be of type number.')
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0xF68485C7495D848E, 'integer', x, y, z, rotx, roty, rotz, scalex, scaley, scalez, name)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @param rotx number
--- @param roty number
--- @param rotz number
--- @param scalex number
--- @param scaley number
--- @param scalez number
--- @param name string
--- @return number
natives.volume_createVolumeCylinderWithCustomName = function(x, y, z, rotx, roty, rotz, scalex, scaley, scalez, name)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(rotx) == 'number', 'Argument rotx must be of type number.')
    assert(type(roty) == 'number', 'Argument roty must be of type number.')
    assert(type(rotz) == 'number', 'Argument rotz must be of type number.')
    assert(type(scalex) == 'number', 'Argument scalex must be of type number.')
    assert(type(scaley) == 'number', 'Argument scaley must be of type number.')
    assert(type(scalez) == 'number', 'Argument scalez must be of type number.')
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0xDF1E350EDDF06E59, 'integer', x, y, z, rotx, roty, rotz, scalex, scaley, scalez, name)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @param rotx number
--- @param roty number
--- @param rotz number
--- @param scalex number
--- @param scaley number
--- @param scalez number
--- @param name string
--- @return number
natives.volume_createVolumeSphereWithCustomName = function(x, y, z, rotx, roty, rotz, scalex, scaley, scalez, name)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(rotx) == 'number', 'Argument rotx must be of type number.')
    assert(type(roty) == 'number', 'Argument roty must be of type number.')
    assert(type(rotz) == 'number', 'Argument rotz must be of type number.')
    assert(type(scalex) == 'number', 'Argument scalex must be of type number.')
    assert(type(scaley) == 'number', 'Argument scaley must be of type number.')
    assert(type(scalez) == 'number', 'Argument scalez must be of type number.')
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0x10157BC3247FF3BA, 'integer', x, y, z, rotx, roty, rotz, scalex, scaley, scalez, name)
    return call
end

--- @param name string
--- @return number
natives.volume_createVolumeAggregateWithCustomName = function(name)
    assert(type(name) == 'string', 'Argument name must be of type string.')

    local call = natives.invoke(0x5D580DE6398BB162, 'integer', name)
    return call
end

-- _ADD_R* - _ADD_V(OLUME?)*
--- @param volume integer
--- @param aggregate integer
natives.volume_addBoundsToAggregateVolume = function(volume, aggregate)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(aggregate) == 'integer', 'Argument aggregate must be of type integer.')

    local call = natives.invoke(0x6E0D3C3F828DA773, 'void', volume, aggregate)
end

-- _REMOVE_E* - _REMOVE_R*
--- @param volume integer
--- @param aggregate integer
natives.volume_removeBoundsFromAggregateVolume = function(volume, aggregate)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(aggregate) == 'integer', 'Argument aggregate must be of type integer.')

    local call = natives.invoke(0xF92FA8890DECECF6, 'void', volume, aggregate)
end

--- @param aggregate integer
--- @param typehash integer
--- @param x number
--- @param y number
--- @param z number
--- @param rotx number
--- @param roty number
--- @param rotz number
--- @param scalex number
--- @param scaley number
--- @param scalez number
natives.volume_addVolumeToVolumeAggregate = function(aggregate, typehash, x, y, z, rotx, roty, rotz, scalex, scaley, scalez)
    assert(type(aggregate) == 'integer', 'Argument aggregate must be of type integer.')
    assert(type(typehash) == 'integer', 'Argument typehash must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(rotx) == 'number', 'Argument rotx must be of type number.')
    assert(type(roty) == 'number', 'Argument roty must be of type number.')
    assert(type(rotz) == 'number', 'Argument rotz must be of type number.')
    assert(type(scalex) == 'number', 'Argument scalex must be of type number.')
    assert(type(scaley) == 'number', 'Argument scaley must be of type number.')
    assert(type(scalez) == 'number', 'Argument scalez must be of type number.')

    local call = natives.invoke(0x12FCAA23F2320422, 'void', aggregate, typehash, x, y, z, rotx, roty, rotz, scalex, scaley, scalez)
end

--- @param aggregate integer
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 number
--- @param p7 number
--- @param p8 number
--- @param p9 number
natives.volume_addBoxVolumeToVolumeAggregate = function(aggregate, p1, p2, p3, p4, p5, p6, p7, p8, p9)
    assert(type(aggregate) == 'integer', 'Argument aggregate must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'number', 'Argument p6 must be of type number.')
    assert(type(p7) == 'number', 'Argument p7 must be of type number.')
    assert(type(p8) == 'number', 'Argument p8 must be of type number.')
    assert(type(p9) == 'number', 'Argument p9 must be of type number.')

    local call = natives.invoke(0x39816F6F94F385AD, 'void', aggregate, p1, p2, p3, p4, p5, p6, p7, p8, p9)
end

--- @param aggregate integer
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 number
--- @param p7 number
--- @param p8 number
--- @param p9 number
natives.volume_addCylinderVolumeToVolumeAggregate = function(aggregate, p1, p2, p3, p4, p5, p6, p7, p8, p9)
    assert(type(aggregate) == 'integer', 'Argument aggregate must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'number', 'Argument p6 must be of type number.')
    assert(type(p7) == 'number', 'Argument p7 must be of type number.')
    assert(type(p8) == 'number', 'Argument p8 must be of type number.')
    assert(type(p9) == 'number', 'Argument p9 must be of type number.')

    local call = natives.invoke(0xBCE668AAF83608BE, 'void', aggregate, p1, p2, p3, p4, p5, p6, p7, p8, p9)
end

--- @param aggregate integer
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 number
--- @param p7 number
--- @param p8 number
--- @param p9 number
natives.volume_addSphereVolumeToVolumeAggregate = function(aggregate, p1, p2, p3, p4, p5, p6, p7, p8, p9)
    assert(type(aggregate) == 'integer', 'Argument aggregate must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'number', 'Argument p6 must be of type number.')
    assert(type(p7) == 'number', 'Argument p7 must be of type number.')
    assert(type(p8) == 'number', 'Argument p8 must be of type number.')
    assert(type(p9) == 'number', 'Argument p9 must be of type number.')

    local call = natives.invoke(0x5B7D7BF36D2DE18B, 'void', aggregate, p1, p2, p3, p4, p5, p6, p7, p8, p9)
end

--- @param volume integer
natives.volume_deleteVolume = function(volume)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')

    local call = natives.invoke(0x43F867EF5C463A53, 'void', volume)
end

--- @param volume integer
--- @return boolean
natives.volume_doesVolumeExist = function(volume)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')

    local call = natives.invoke(0x92A78D0BEDB332A3, 'bool', volume)
    return call
end

-- Old name: _IS_POSITION_INSIDE_VOLUME
--- @param volume integer
--- @param x number
--- @param y number
--- @param z number
--- @return boolean
natives.volume_isPointInVolume = function(volume, x, y, z)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0xF256A75210C5C0EB, 'bool', volume, x, y, z)
    return call
end

--- @param volume integer
--- @return number, number, number
natives.volume_getVolumeCoords = function(volume)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')

    local call = natives.invoke(0xF70F00013A62F866, 'vector3', volume)
    return call.x, call.y, call.z
end

--- @param volume integer
--- @param posx number
--- @param posy number
--- @param posz number
--- @return boolean
natives.volume_setVolumeCoords = function(volume, posx, posy, posz)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(posx) == 'number', 'Argument posx must be of type number.')
    assert(type(posy) == 'number', 'Argument posy must be of type number.')
    assert(type(posz) == 'number', 'Argument posz must be of type number.')

    local call = natives.invoke(0x541B8576615C33DE, 'bool', volume, posx, posy, posz)
    return call
end

--- @param volume integer
--- @return number, number, number
natives.volume_getVolumeRotation = function(volume)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')

    local call = natives.invoke(0x18675BC914891122, 'vector3', volume)
    return call.x, call.y, call.z
end

--- @param volume integer
--- @param rotx number
--- @param roty number
--- @param rotz number
--- @return boolean
natives.volume_setVolumeRotation = function(volume, rotx, roty, rotz)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(rotx) == 'number', 'Argument rotx must be of type number.')
    assert(type(roty) == 'number', 'Argument roty must be of type number.')
    assert(type(rotz) == 'number', 'Argument rotz must be of type number.')

    local call = natives.invoke(0xA07CF1B21B56F041, 'bool', volume, rotx, roty, rotz)
    return call
end

--- @param volume integer
--- @return number, number, number
natives.volume_getVolumeScale = function(volume)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')

    local call = natives.invoke(0x3E2A25B2416DD67E, 'vector3', volume)
    return call.x, call.y, call.z
end

--- @param volume integer
--- @param scalex number
--- @param scaley number
--- @param scalez number
--- @return boolean
natives.volume_setVolumeScale = function(volume, scalex, scaley, scalez)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(scalex) == 'number', 'Argument scalex must be of type number.')
    assert(type(scaley) == 'number', 'Argument scaley must be of type number.')
    assert(type(scalez) == 'number', 'Argument scalez must be of type number.')

    local call = natives.invoke(0xA46E98BDC407E23D, 'bool', volume, scalex, scaley, scalez)
    return call
end

--- @param volume integer
--- @param min integer
--- @param max integer
natives.volume_getVolumeBounds = function(volume, min, max)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(min) == 'integer', 'Argument min must be of type integer.')
    assert(type(max) == 'integer', 'Argument max must be of type integer.')

    local call = natives.invoke(0x5737199AF2DC609F, 'void', volume, min, max)
end

-- nullsub, doesn't do anything
--- @param p0 boolean
natives.volume_n0X748C5F51A18Cb8F0 = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x748C5F51A18CB8F0, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @return any
natives.volume_n0X2B32B11520626229 = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0x2B32B11520626229, 'any', p0, p1, p2, p3, p4)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.volume_n0X40F769D31A00D5A0 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x40F769D31A00D5A0, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @return number, number, number
natives.volume_n0Xd882C5B3991575B7 = function(p0, p1, p2, p3, p4)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')

    local call = natives.invoke(0xD882C5B3991575B7, 'vector3', p0, p1, p2, p3, p4)
    return call.x, call.y, call.z
end

--- @param p0 userdata
--- @param p1 userdata
natives.volume_n0Xb469Cfd9E065Eb99 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xB469CFD9E065EB99, 'void', p0, p1)
end

--- @param p0 userdata
--- @return any
natives.volume_n0X7Fd78Dfd0C5D7B9B = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x7FD78DFD0C5D7B9B, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.volume_n0Xee1D6Ff54Caf7714 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xEE1D6FF54CAF7714, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.volume_n0Xd52Df30355Ea7C8E = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xD52DF30355EA7C8E, 'void', p0, p1, p2)
end

--- @param volume integer
--- @param perschar integer
--- @param p2 boolean
natives.volume_setVolumeOwnerPersistentCharacter = function(volume, perschar, p2)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(perschar) == 'integer', 'Argument perschar must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xE2BE6FFA4A13CBB0, 'void', volume, perschar, p2)
end

--- @param p0 userdata
natives.volume_n0X6D5F9E69Ba1Be783 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x6D5F9E69BA1BE783, 'void', p0)
end

--- @param p0 userdata
natives.volume_n0X998202B206872672 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x998202B206872672, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.volume_n0X4A8Fefc43Fd8Ac9B = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x4A8FEFC43FD8AC9B, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.volume_n0Xf3A2Fba5985C8Cd5 = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xF3A2FBA5985C8CD5, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
natives.volume_n0X53D05D60E5F5B40C = function(p0, p1, p2, p3)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0x53D05D60E5F5B40C, 'void', p0, p1, p2, p3)
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.volume_n0Xca5C90D40665D5Ce = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xCA5C90D40665D5CE, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.volume_n0X3Efabb21E14A6Bd1 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x3EFABB21E14A6BD1, 'void', p0, p1, p2)
end

--- @param volume integer
--- @return boolean
natives.volume_isAggregateVolume = function(volume)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')

    local call = natives.invoke(0xFEFF01B5725BCD22, 'bool', volume)
    return call
end

-- Params: p5 is always 0
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param flag integer
--- @param p5 userdata
--- @return number
natives.volume_createVolumeLock = function(x, y, z, radius, flag, p5)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0x00BBF7CEAE8C666A, 'integer', x, y, z, radius, flag, p5)
    return call
end

-- Params: p3 is always 0
--- @param entity integer
--- @param radius number
--- @param flag integer
--- @param p3 userdata
--- @return number
natives.volume_createVolumeLockAttachedToEntity = function(entity, radius, flag, p3)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(flag) == 'integer', 'Argument flag must be of type integer.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xF383E96C4904DF0C, 'integer', entity, radius, flag, p3)
    return call
end

--- @param vollockrequestid integer
--- @return boolean
natives.volume_isVolumeLockRequestValid2 = function(vollockrequestid)
    assert(type(vollockrequestid) == 'integer', 'Argument vollockrequestid must be of type integer.')

    local call = natives.invoke(0xF6A8A652A6B186CD, 'bool', vollockrequestid)
    return call
end

--- @param vollockrequestid integer
--- @return number, number, number
natives.volume_n0Xc4019Cf9Ae8E931A = function(vollockrequestid)
    assert(type(vollockrequestid) == 'integer', 'Argument vollockrequestid must be of type integer.')

    local call = natives.invoke(0xC4019CF9AE8E931A, 'vector3', vollockrequestid)
    return call.x, call.y, call.z
end

--- @param p0 userdata
--- @return any
natives.volume_n0Xf6Ce6F9C3897804E = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xF6CE6F9C3897804E, 'any', p0)
    return call
end

--- @param p0 userdata
--- @return any
natives.volume_n0Xf6F5447D418Daa82 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xF6F5447D418DAA82, 'any', p0)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.volume_n0Xd4Fa73Fe628Fec63 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xD4FA73FE628FEC63, 'void', p0, p1)
end

--- @param volume integer
--- @param p1 userdata
natives.volume_n0Xb440F4E35393Fc39 = function(volume, p1)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xB440F4E35393FC39, 'void', volume, p1)
end

--- @param volume integer
--- @param p1 userdata
natives.volume_n0Xd460135C98940274 = function(volume, p1)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xD460135C98940274, 'void', volume, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.volume_n0Xeba87B9273835Cf3 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xEBA87B9273835CF3, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @return any
natives.volume_n0Xaa9Ee2Aafc717623 = function(p0, p1, p2, p3, p4, p5)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0xAA9EE2AAFC717623, 'any', p0, p1, p2, p3, p4, p5)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @return any
natives.volume_n0X870E9981Ed27C815 = function(p0, p1, p2, p3, p4, p5)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')

    local call = natives.invoke(0x870E9981ED27C815, 'any', p0, p1, p2, p3, p4, p5)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param p4 boolean
--- @param p5 integer
--- @param p6 integer
--- @return boolean
natives.volume_doesVolumeCollideWithAnyVolumeLock = function(x, y, z, radius, p4, p5, p6)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')
    assert(type(p5) == 'integer', 'Argument p5 must be of type integer.')
    assert(type(p6) == 'integer', 'Argument p6 must be of type integer.')

    local call = natives.invoke(0x397769175A7DBB30, 'bool', x, y, z, radius, p4, p5, p6)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param p4 integer
--- @param p5 integer
--- @param flags integer
--- @return boolean
natives.volume_isPointNearVolumeLockCenter = function(x, y, z, radius, p4, p5, flags)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')
    assert(type(p5) == 'integer', 'Argument p5 must be of type integer.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')

    local call = natives.invoke(0x769BB7626B8CDB06, 'bool', x, y, z, radius, p4, p5, flags)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @param p3 userdata
--- @param p4 userdata
--- @param p5 userdata
--- @param p6 userdata
--- @return any
natives.volume_n0X51E52C9687Fcdeec = function(p0, p1, p2, p3, p4, p5, p6)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')
    assert(type(p4) == 'userdata', 'Argument p4 must be of type userdata.')
    assert(type(p5) == 'userdata', 'Argument p5 must be of type userdata.')
    assert(type(p6) == 'userdata', 'Argument p6 must be of type userdata.')

    local call = natives.invoke(0x51E52C9687FCDEEC, 'any', p0, p1, p2, p3, p4, p5, p6)
    return call
end

--- @param args userdata
--- @return number
natives.volume_findVolumeLockRequestIdWithArgs = function(args)
    assert(type(args) == 'userdata', 'Argument args must be of type userdata.')

    local call = natives.invoke(0x77A6E4AD0C496F81, 'int', args)
    return call
end

--- @param vollock integer
--- @param x number
--- @param y number
--- @param z number
natives.volume_modifyVolumeLockLocation = function(vollock, x, y, z)
    assert(type(vollock) == 'integer', 'Argument vollock must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0xEC43C2FFB70E3F30, 'void', vollock, x, y, z)
end

--- @param p0 userdata
--- @param p1 userdata
natives.volume_n0X695Dac2Db928F308 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x695DAC2DB928F308, 'void', p0, p1)
end

--- @param vollockrequestid integer
natives.volume_releaseLockVolume = function(vollockrequestid)
    assert(type(vollockrequestid) == 'integer', 'Argument vollockrequestid must be of type integer.')

    local call = natives.invoke(0xFDFECC6EE4491E11, 'void', vollockrequestid)
end

--- @param p0 userdata
natives.volume_n0Xac355980681A7F89 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xAC355980681A7F89, 'void', p0)
end

--- @param args userdata
--- @return boolean
natives.volume_addEntryVolumeLock = function(args)
    assert(type(args) == 'userdata', 'Argument args must be of type userdata.')

    local call = natives.invoke(0x58D3803FA639A3BB, 'bool', args)
    return call
end

natives.volume_n0Xc61E2Fd926Dbb406 = function()

    local call = natives.invoke(0xC61E2FD926DBB406, 'void')
end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param p4 integer
--- @param p5 integer
--- @return number
natives.volume_requestVolumeLock = function(x, y, z, radius, p4, p5)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(radius) == 'number', 'Argument radius must be of type number.')
    assert(type(p4) == 'integer', 'Argument p4 must be of type integer.')
    assert(type(p5) == 'integer', 'Argument p5 must be of type integer.')

    local call = natives.invoke(0xF14BCEF290F869E1, 'int', x, y, z, radius, p4, p5)
    return call
end

--- @param args userdata
--- @return number
natives.volume_requestVolumeLockWithArgs = function(args)
    assert(type(args) == 'userdata', 'Argument args must be of type userdata.')

    local call = natives.invoke(0x183C0B6CFEFFCAE4, 'int', args)
    return call
end

--- @param vollockrequestid integer
--- @return boolean
natives.volume_isVolumeLockRequestValid = function(vollockrequestid)
    assert(type(vollockrequestid) == 'integer', 'Argument vollockrequestid must be of type integer.')

    local call = natives.invoke(0xA4A4359320345B34, 'bool', vollockrequestid)
    return call
end

-- enum eVolumeLockRequestStatus
-- {
-- 	VOLUME_LOCK_REQUEST_STATUS_INVALID,
-- 	VOLUME_LOCK_REQUEST_STATUS_READY,
-- 	VOLUME_LOCK_REQUEST_STATUS_IN_PROGRESS,
-- 	VOLUME_LOCK_REQUEST_STATUS_SUCCEEDED,
-- 	VOLUME_LOCK_REQUEST_STATUS_FAILED
-- };
--- @param vollockrequestid integer
--- @return number
natives.volume_getVolumeLockRequestStatus = function(vollockrequestid)
    assert(type(vollockrequestid) == 'integer', 'Argument vollockrequestid must be of type integer.')

    local call = natives.invoke(0xB33A604345F58202, 'int', vollockrequestid)
    return call
end

--- @param p0 userdata
--- @return any
natives.volume_n0X351D71B8B72B858B = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x351D71B8B72B858B, 'any', p0)
    return call
end

-- nullsub, doesn't do anything
natives.volume_n0Xfa15C9A320E707B0 = function()

    local call = natives.invoke(0xFA15C9A320E707B0, 'void')
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.volume_n0X52572B331E693Aed = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x52572B331E693AED, 'void', p0, p1, p2)
end

-- nullsub, doesn't do anything
--- @param p0 userdata
natives.volume_n0X128Fc3A893Bf853A = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x128FC3A893BF853A, 'void', p0)
end

--- @param volume integer
--- @param relationshipgroup integer
natives.volume_setVolumeRelationship = function(volume, relationshipgroup)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')
    assert(type(relationshipgroup) == 'integer', 'Argument relationshipgroup must be of type integer.')

    local call = natives.invoke(0xFD010A2154B40676, 'void', volume, relationshipgroup)
end

-- Returns relationshipGroup Hash
--- @param volume integer
--- @return number
natives.volume_getVolumeRelationship = function(volume)
    assert(type(volume) == 'integer', 'Argument volume must be of type integer.')

    local call = natives.invoke(0x666C2F53ABEFC952, 'integer', volume)
    return call
end

-- Must be called every frame to take full effect.
natives.water_disableWaterLookup = function()

    local call = natives.invoke(0x754616EC6965D1FB, 'void')
end

natives.water_enableWaterLookup = function()

    local call = natives.invoke(0x754616EC6965D1BF, 'void')
end

-- Checks against a global variable that is set by _SET_WORLD_WATER_TYPE. If that is set to one it will fail. Likely not the only issue but part of it.
--- @param x number
--- @param y number
--- @param z number
--- @param height integer
--- @return boolean
natives.water_getWaterHeight = function(x, y, z, height)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(height) == 'integer', 'Argument height must be of type integer.')

    local call = natives.invoke(0xFCA8B23F28813F69, 'bool', x, y, z, height)
    return call
end

--- @param x number
--- @param y number
--- @param z number
--- @param height integer
--- @return boolean
natives.water_getWaterHeightNoWaves = function(x, y, z, height)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(height) == 'integer', 'Argument height must be of type integer.')

    local call = natives.invoke(0xDCF3690AA262C03F, 'bool', x, y, z, height)
    return call
end

-- enum eScriptWaterTestResult
-- {
-- 	SCRIPT_WATER_TEST_RESULT_NONE,
-- 	SCRIPT_WATER_TEST_RESULT_WATER,
-- 	SCRIPT_WATER_TEST_RESULT_BLOCKED,
-- };
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param flags integer
--- @param intersectionpos integer
--- @return number
natives.water_testProbeAgainstAllWater = function(x1, y1, z1, x2, y2, z2, flags, intersectionpos)
    assert(type(x1) == 'number', 'Argument x1 must be of type number.')
    assert(type(y1) == 'number', 'Argument y1 must be of type number.')
    assert(type(z1) == 'number', 'Argument z1 must be of type number.')
    assert(type(x2) == 'number', 'Argument x2 must be of type number.')
    assert(type(y2) == 'number', 'Argument y2 must be of type number.')
    assert(type(z2) == 'number', 'Argument z2 must be of type number.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')
    assert(type(intersectionpos) == 'integer', 'Argument intersectionpos must be of type integer.')

    local call = natives.invoke(0x8974647ED222EA5F, 'int', x1, y1, z1, x2, y2, z2, flags, intersectionpos)
    return call
end

-- Checks against a global variable that is set by _SET_WORLD_WATER_TYPE. If it's set to 1 (Guarma) it will fail.
-- 
-- See TEST_PROBE_AGAINST_ALL_WATER.
--- @param x number
--- @param y number
--- @param z number
--- @param flags integer
--- @param waterheight integer
--- @return number
natives.water_testVerticalProbeAgainstAllWater = function(x, y, z, flags, waterheight)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')
    assert(type(waterheight) == 'integer', 'Argument waterheight must be of type integer.')

    local call = natives.invoke(0x2B3451FA1E3142E2, 'int', x, y, z, flags, waterheight)
    return call
end

-- Only used in rcm_crackpot1 R* Script: p0 = 0
--- @param index integer
natives.water_removeExtraCalmingQuad = function(index)
    assert(type(index) == 'integer', 'Argument index must be of type integer.')

    local call = natives.invoke(0x4BEF8DD75AF6C71C, 'void', index)
end

-- Called together with REMOVE_EXTRA_CALMING_QUAD in rcm_crackpot1 R* Script: p0 = 0
-- _REMOVE_*
--- @param p0 integer
natives.water_n0X09A1C7Dfdce54Fbc = function(p0)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')

    local call = natives.invoke(0x09A1C7DFDCE54FBC, 'void', p0)
end

-- Only used in fishing_core R* Script
--- @param ped integer
natives.water_n0Xf0Fbf193F1F5C0Ea = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xF0FBF193F1F5C0EA, 'void', ped)
end

-- Only used in fishing_core R* Script
natives.water_n0Xa33F5069B0Cb89B8 = function()

    local call = natives.invoke(0xA33F5069B0CB89B8, 'void')
end

-- Used in bounty1, fanale3, sean1 R* Scripts
--- @param entity integer
natives.water_n0Xb34A6009A0Db80B8 = function(entity)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')

    local call = natives.invoke(0xB34A6009A0DB80B8, 'void', entity)
end

-- Only used in R* Script guama1
--- @param wavesheight number
--- @param p1 number
--- @param p2 integer
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 number
--- @param wavesstrength number
--- @param p8 integer
natives.water_setOceanGuarmaWaterQuadrant = function(wavesheight, p1, p2, p3, p4, p5, p6, wavesstrength, p8)
    assert(type(wavesheight) == 'number', 'Argument wavesheight must be of type number.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'number', 'Argument p3 must be of type number.')
    assert(type(p4) == 'number', 'Argument p4 must be of type number.')
    assert(type(p5) == 'number', 'Argument p5 must be of type number.')
    assert(type(p6) == 'number', 'Argument p6 must be of type number.')
    assert(type(wavesstrength) == 'number', 'Argument wavesstrength must be of type number.')
    assert(type(p8) == 'integer', 'Argument p8 must be of type integer.')

    local call = natives.invoke(0xC63540AEF8384732, 'void', wavesheight, p1, p2, p3, p4, p5, p6, wavesstrength, p8)
end

-- Only used in guama1 / guama3 R* Script
-- _REQUEST_* or _RESET_*
natives.water_resetGuarmaWaterState = function()

    local call = natives.invoke(0xC63540AEF8384769, 'void')
end

-- 0 = World
-- 1 = Guarma
--- @param watertype integer
natives.water_setWorldWaterType = function(watertype)
    assert(type(watertype) == 'integer', 'Argument watertype must be of type integer.')

    local call = natives.invoke(0xE8770EE02AEE45C2, 'void', watertype)
end

--- @return number
natives.water_getWorldWaterType = function()

    local call = natives.invoke(0x189739A7631C1867, 'int')
    return call
end

-- Only used in native_son1 R* Script: p1 = 1
--- @param entity integer
--- @param p1 integer
natives.water_n0X0Dcec6A92E497E17 = function(entity, p1)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x0DCEC6A92E497E17, 'void', entity, p1)
end

-- Only used in fussar1 / train_robbery2 R* Script
natives.water_n0Xe8126623008372Aa = function()

    local call = natives.invoke(0xE8126623008372AA, 'void')
end

--- @param weaponhash integer
--- @return number
natives.weapon_getWeaponUnlock = function(weaponhash)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0x865F36299079FB75, 'integer', weaponhash)
    return call
end

-- addReason:
-- enum eAddItemReason : Hash
-- {
-- 	ADD_REASON_AWARDS = 0xB784AD1E,
-- 	ADD_REASON_CREATE_CHARACTER = 0xE2C4FF71,
-- 	ADD_REASON_DEBUG = 0x5C05C64D,
-- 	ADD_REASON_DEFAULT = 0x2CD419DC,
-- 	ADD_REASON_GET_INVENTORY = 0xD8188685,
-- 	ADD_REASON_INCENTIVE = 0x8ADC2E95,
-- 	ADD_REASON_LOADOUT = 0xCA3454E6,
-- 	ADD_REASON_LOAD_SAVEGAME = 0x56212906,
-- 	ADD_REASON_LOOTED = 0xCA806A55,
-- 	ADD_REASON_MELEE = 0x7B9BDCE7,
-- 	ADD_REASON_MP_MISSION = 0xEC0E0194,
-- 	ADD_REASON_NOTIFICATION = 0xC56292D2,
-- 	ADD_REASON_PICKUP = 0x1A770E22,
-- 	ADD_REASON_PURCHASED = 0x4A6726C9,
-- 	ADD_REASON_SET_AMOUNT = 0x4504731E,
-- 	ADD_REASON_SYNCING = 0x8D4B4FF4,
-- 	ADD_REASON_USE_FAILED = 0xD385B670
-- };
--- @param ped integer
--- @param weaponhash integer
--- @param amount integer
--- @param addreason integer
natives.weapon_addAmmoToPed = function(ped, weaponhash, amount, addreason)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')
    assert(type(amount) == 'integer', 'Argument amount must be of type integer.')
    assert(type(addreason) == 'integer', 'Argument addreason must be of type integer.')

    local call = natives.invoke(0xB190BCA3F4042F95, 'void', ped, weaponhash, amount, addreason)
end

-- addReason: see _ADD_AMMO_TO_PED
--- @param ped integer
--- @param ammotype integer
--- @param amount integer
--- @param addreason integer
natives.weapon_addAmmoToPedByType = function(ped, ammotype, amount, addreason)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(ammotype) == 'integer', 'Argument ammotype must be of type integer.')
    assert(type(amount) == 'integer', 'Argument amount must be of type integer.')
    assert(type(addreason) == 'integer', 'Argument addreason must be of type integer.')

    local call = natives.invoke(0x106A811C6D3035F3, 'void', ped, ammotype, amount, addreason)
end

-- removeReason must be REMOVE_REASON_USED, REMOVE_REASON_GIVEN, REMOVE_REASON_DROPPED or REMOVE_REASON_DEBUG, unless amount is -1
-- 
-- removeReason: see REMOVE_WEAPON_FROM_PED
--- @param ped integer
--- @param weaponhash integer
--- @param amount integer
--- @param removereason integer
natives.weapon_removeAmmoFromPed = function(ped, weaponhash, amount, removereason)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')
    assert(type(amount) == 'integer', 'Argument amount must be of type integer.')
    assert(type(removereason) == 'integer', 'Argument removereason must be of type integer.')

    local call = natives.invoke(0xF4823C813CB8277D, 'void', ped, weaponhash, amount, removereason)
end

-- removeReason must be REMOVE_REASON_USED, REMOVE_REASON_GIVEN, REMOVE_REASON_DROPPED or REMOVE_REASON_DEBUG, unless amount is -1
-- 
-- removeReason: see REMOVE_WEAPON_FROM_PED
--- @param ped integer
--- @param ammohash integer
--- @param amount integer
--- @param removereason integer
natives.weapon_removeAmmoFromPedByType = function(ped, ammohash, amount, removereason)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(ammohash) == 'integer', 'Argument ammohash must be of type integer.')
    assert(type(amount) == 'integer', 'Argument amount must be of type integer.')
    assert(type(removereason) == 'integer', 'Argument removereason must be of type integer.')

    local call = natives.invoke(0xB6CFEC32E3742779, 'void', ped, ammohash, amount, removereason)
end

--- @param ped integer
natives.weapon_removeAllPedAmmo = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x1B83C0DEEBCBB214, 'void', ped)
end

--- @param ped integer
--- @param weaponhash integer
--- @param ammo integer
natives.weapon_setPedAmmo = function(ped, weaponhash, ammo)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')
    assert(type(ammo) == 'integer', 'Argument ammo must be of type integer.')

    local call = natives.invoke(0x14E56BC5B5DB6A19, 'void', ped, weaponhash, ammo)
end

-- Only used in R* SP Scripts native_son2, native_son3 and smuggler2
-- Params: p2 = -1
--- @param ped integer
--- @param p1 boolean
--- @param p2 integer
natives.weapon_n0X8A779706Da5Ca3Dd = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0x8A779706DA5CA3DD, 'void', ped, p1, p2)
end

-- Only used in R* SP Script guama3
--- @param vehicle integer
--- @param p1 boolean
natives.weapon_n0X9409C62504A8F9E9 = function(vehicle, p1)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x9409C62504A8F9E9, 'void', vehicle, p1)
end

--- @param vehicle integer
--- @param p1 integer
--- @param minheading number
--- @param maxheading number
natives.weapon_setVehicleWeaponHeadingLimits = function(vehicle, p1, minheading, maxheading)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(minheading) == 'number', 'Argument minheading must be of type number.')
    assert(type(maxheading) == 'number', 'Argument maxheading must be of type number.')

    local call = natives.invoke(0x56CB3B4305A4F7CE, 'void', vehicle, p1, minheading, maxheading)
end

--- @param vehicle integer
--- @param p1 integer
--- @param minheading number
--- @param maxheading number
--- @return any
natives.weapon_setVehicleWeaponHeadingLimits2 = function(vehicle, p1, minheading, maxheading)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(minheading) == 'number', 'Argument minheading must be of type number.')
    assert(type(maxheading) == 'number', 'Argument maxheading must be of type number.')

    local call = natives.invoke(0xBF5987E1CDE63501, 'any', vehicle, p1, minheading, maxheading)
    return call
end

--- @param vehicle integer
--- @param seatindex integer
--- @param heading number
--- @param p3 boolean
natives.weapon_setVehicleWeaponHeading = function(vehicle, seatindex, heading, p3)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(seatindex) == 'integer', 'Argument seatindex must be of type integer.')
    assert(type(heading) == 'number', 'Argument heading must be of type number.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0x194D877FC5597B7D, 'void', vehicle, seatindex, heading, p3)
end

--- @param ped integer
--- @param toggle boolean
--- @param weaponhash integer
natives.weapon_setPedInfiniteAmmo = function(ped, toggle, weaponhash)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0x3EDCB0505123623B, 'void', ped, toggle, weaponhash)
end

--- @param ped integer
--- @param toggle boolean
natives.weapon_setPedInfiniteAmmoClip = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xFBAA1E06B6BCA741, 'void', ped, toggle)
end

--- @param ped integer
--- @param weaponhash integer
--- @return number
natives.weapon_getAmmoInPedWeapon = function(ped, weaponhash)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0x015A522136D7F951, 'int', ped, weaponhash)
    return call
end

--- @param ped integer
--- @param weaponhash integer
--- @param p2 boolean
--- @return number
natives.weapon_getMaxAmmoInClip = function(ped, weaponhash, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xA38DCFFCEA8962FA, 'int', ped, weaponhash, p2)
    return call
end

--- @param ped integer
--- @param ammo integer
--- @param weaponhash integer
--- @return boolean
natives.weapon_getAmmoInClip = function(ped, ammo, weaponhash)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(ammo) == 'integer', 'Argument ammo must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0x2E1202248937775C, 'bool', ped, ammo, weaponhash)
    return call
end

--- @param ped integer
--- @param ammo integer
--- @param inventoryuid userdata
--- @return boolean
natives.weapon_getAmmoInClipByInventoryUid = function(ped, ammo, inventoryuid)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(ammo) == 'integer', 'Argument ammo must be of type integer.')
    assert(type(inventoryuid) == 'userdata', 'Argument inventoryuid must be of type userdata.')

    local call = natives.invoke(0x678F00858980F516, 'bool', ped, ammo, inventoryuid)
    return call
end

--- @param ped integer
--- @param weaponhash integer
--- @param ammo integer
--- @return boolean
natives.weapon_setAmmoInClip = function(ped, weaponhash, ammo)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')
    assert(type(ammo) == 'integer', 'Argument ammo must be of type integer.')

    local call = natives.invoke(0xDCD2A934D65CB497, 'bool', ped, weaponhash, ammo)
    return call
end

--- @param ped integer
--- @param clipinventoryuid userdata
--- @param p2 integer
--- @return any
natives.weapon_refillAmmoInClip = function(ped, clipinventoryuid, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(clipinventoryuid) == 'userdata', 'Argument clipinventoryuid must be of type userdata.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0xDF4A3404D022ADDE, 'any', ped, clipinventoryuid, p2)
    return call
end

--- @param ped integer
--- @param ammo integer
--- @param weaponhash integer
--- @return boolean
natives.weapon_getMaxAmmo = function(ped, ammo, weaponhash)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(ammo) == 'integer', 'Argument ammo must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0xDC16122C7A20C933, 'bool', ped, ammo, weaponhash)
    return call
end

--- @param ped integer
--- @param ammotype integer
--- @param ammo integer
natives.weapon_setPedAmmoByType = function(ped, ammotype, ammo)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(ammotype) == 'integer', 'Argument ammotype must be of type integer.')
    assert(type(ammo) == 'integer', 'Argument ammo must be of type integer.')

    local call = natives.invoke(0x5FD1E1F011E76D7E, 'void', ped, ammotype, ammo)
end

--- @param ped integer
--- @param ammotype integer
--- @return number
natives.weapon_getPedAmmoByType = function(ped, ammotype)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(ammotype) == 'integer', 'Argument ammotype must be of type integer.')

    local call = natives.invoke(0x39D22031557946C1, 'int', ped, ammotype)
    return call
end

--- @param ped integer
--- @param p1 integer
--- @param p2 integer
natives.weapon_setPedAmmoToDrop = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')

    local call = natives.invoke(0xA4EFEF9440A5B0EF, 'void', ped, p1, p2)
end

--- @param weaponhash integer
--- @return number
natives.weapon_getAmmoTypeForWeapon = function(weaponhash)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0x5C2EA6C44F515F34, 'integer', weaponhash)
    return call
end

-- Returns the current ammo type of the specified ped's specified weapon.
--- @param ped integer
--- @param weaponhash integer
--- @return number
natives.weapon_getPedAmmoTypeFromWeapon = function(ped, weaponhash)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0x7FEAD38B326B9F74, 'integer', ped, weaponhash)
    return call
end

--- @param ammotype integer
--- @return number
natives.weapon_getWeaponTypeFromAmmoType = function(ammotype)
    assert(type(ammotype) == 'integer', 'Argument ammotype must be of type integer.')

    local call = natives.invoke(0x7AA043F6C41D151E, 'integer', ammotype)
    return call
end

--- @param componenthash integer
--- @return number
natives.weapon_getWeaponComponentTypeModel = function(componenthash)
    assert(type(componenthash) == 'integer', 'Argument componenthash must be of type integer.')

    local call = natives.invoke(0x59DE03442B6C9598, 'integer', componenthash)
    return call
end

-- Gets the model hash from the weapon hash.
--- @param weaponhash integer
--- @return number
natives.weapon_getWeapontypeModel = function(weaponhash)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0xF70825EB340E7D15, 'integer', weaponhash)
    return call
end

-- Returns hash where WEAPON_ is replaced with SLOT_
--- @param weaponhash integer
--- @return number
natives.weapon_getWeapontypeSlot = function(weaponhash)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0x46F032B8DDF46CDE, 'integer', weaponhash)
    return call
end

--- @param weaponhash integer
--- @return number
natives.weapon_getWeapontypeGroup = function(weaponhash)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0xEDCA14CA5199FF25, 'integer', weaponhash)
    return call
end

-- Returns weaponHash
--- @param weapongrouphash integer
--- @param p1 number
--- @param p2 number
--- @param p3 userdata
--- @return number
natives.weapon_n0Xf8204Ef17410Bf43 = function(weapongrouphash, p1, p2, p3)
    assert(type(weapongrouphash) == 'integer', 'Argument weapongrouphash must be of type integer.')
    assert(type(p1) == 'number', 'Argument p1 must be of type number.')
    assert(type(p2) == 'number', 'Argument p2 must be of type number.')
    assert(type(p3) == 'userdata', 'Argument p3 must be of type userdata.')

    local call = natives.invoke(0xF8204EF17410BF43, 'integer', weapongrouphash, p1, p2, p3)
    return call
end

-- Returns true when the weapon passed is either a lasso, the camera or the binoculars
-- _IS_WEAPON_M* - _IS_WEAPON_P*
--- @param weaponhash integer
--- @return boolean
natives.weapon_isWeaponKit = function(weaponhash)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0x6ABAD7B0A854F8FB, 'bool', weaponhash)
    return call
end

-- Returns true when the weapon passed is either the fishingrod, a lasso, the camera or the binoculars
-- _IS_WEAPON_M* - _IS_WEAPON_P*
--- @param weaponhash integer
--- @return boolean
natives.weapon_isWeaponKit2 = function(weaponhash)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0x49E40483948AF062, 'bool', weaponhash)
    return call
end

--- @param weaponhash integer
--- @return boolean
natives.weapon_isWeaponBow = function(weaponhash)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0xC4DEC3CA8C365A5D, 'bool', weaponhash)
    return call
end

--- @param weaponhash integer
--- @return boolean
natives.weapon_isWeaponLantern = function(weaponhash)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0x79407D33328286C6, 'bool', weaponhash)
    return call
end

--- @param weaponhash integer
--- @return boolean
natives.weapon_isWeaponTorch = function(weaponhash)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0x506F1DE1BFC75304, 'bool', weaponhash)
    return call
end

--- @param ped integer
--- @param data userdata
--- @param outdata userdata
--- @return boolean
natives.weapon_giveWeaponToPedWithOptions = function(ped, data, outdata)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(data) == 'userdata', 'Argument data must be of type userdata.')
    assert(type(outdata) == 'userdata', 'Argument outdata must be of type userdata.')

    local call = natives.invoke(0xBE7E42B07FD317AC, 'bool', ped, data, outdata)
    return call
end

-- Gives the ped the weapon.
-- List: https:--github.com/femga/rdr3_discoveries/blob/master/weapons/weapons.lua
-- 
-- Params: p7 is 0.5f, and p8 is 1.0f. p11 and p12 are both 0 in R* Scripts
-- attachPoint: see SET_CURRENT_PED_WEAPON
-- addReason: see _ADD_AMMO_TO_PED
-- permanentDegradation: default 0.5, any higher than 0 it will automatically make the weapon worn, you can also adjust the value to change the weapons maximum cleanliness
--- @param ped integer
--- @param weaponhash integer
--- @param ammocount integer
--- @param bforceinhand boolean
--- @param bforceinholster boolean
--- @param attachpoint integer
--- @param ballowmultiplecopies boolean
--- @param p7 number
--- @param p8 number
--- @param addreason integer
--- @param bignoreunlocks boolean
--- @param permanentdegradation number
--- @param p12 boolean
--- @return number
natives.weapon_giveWeaponToPed = function(ped, weaponhash, ammocount, bforceinhand, bforceinholster, attachpoint, ballowmultiplecopies, p7, p8, addreason, bignoreunlocks, permanentdegradation, p12)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')
    assert(type(ammocount) == 'integer', 'Argument ammocount must be of type integer.')
    assert(type(bforceinhand) == 'boolean', 'Argument bforceinhand must be of type boolean.')
    assert(type(bforceinholster) == 'boolean', 'Argument bforceinholster must be of type boolean.')
    assert(type(attachpoint) == 'integer', 'Argument attachpoint must be of type integer.')
    assert(type(ballowmultiplecopies) == 'boolean', 'Argument ballowmultiplecopies must be of type boolean.')
    assert(type(p7) == 'number', 'Argument p7 must be of type number.')
    assert(type(p8) == 'number', 'Argument p8 must be of type number.')
    assert(type(addreason) == 'integer', 'Argument addreason must be of type integer.')
    assert(type(bignoreunlocks) == 'boolean', 'Argument bignoreunlocks must be of type boolean.')
    assert(type(permanentdegradation) == 'number', 'Argument permanentdegradation must be of type number.')
    assert(type(p12) == 'boolean', 'Argument p12 must be of type boolean.')

    local call = natives.invoke(0x5E3BDDBCB83F3D84, 'integer', ped, weaponhash, ammocount, bforceinhand, bforceinholster, attachpoint, ballowmultiplecopies, p7, p8, addreason, bignoreunlocks, permanentdegradation, p12)
    return call
end

--- @param ped integer
--- @param attachpoint integer
natives.weapon_setForceCurrentWeaponIntoCockedState = function(ped, attachpoint)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(attachpoint) == 'integer', 'Argument attachpoint must be of type integer.')

    local call = natives.invoke(0x5230D3F6EE56CFE6, 'void', ped, attachpoint)
end

--- @param p0 boolean
--- @return any
natives.weapon_n0X9F0E1892C7F228A8 = function(p0)
    assert(type(p0) == 'boolean', 'Argument p0 must be of type boolean.')

    local call = natives.invoke(0x9F0E1892C7F228A8, 'any', p0)
    return call
end

--- @param ped integer
--- @param p1 boolean
--- @param p2 boolean
--- @param p3 boolean
--- @param immediately boolean
natives.weapon_holsterPedWeapons = function(ped, p1, p2, p3, immediately)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')
    assert(type(immediately) == 'boolean', 'Argument immediately must be of type boolean.')

    local call = natives.invoke(0x94A3C1B804D291EC, 'void', ped, p1, p2, p3, immediately)
end

-- Unequip current weapon and set current weapon to WEAPON_UNARMED.
-- p0 usually 2 in R* scripts. Doesn't seem to have any effect if changed....
-- immediately: if true it will instantly switch to unarmed
--- @param ped integer
--- @param p0 integer
--- @param immediately boolean
natives.weapon_hidePedWeapons = function(ped, p0, immediately)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(immediately) == 'boolean', 'Argument immediately must be of type boolean.')

    local call = natives.invoke(0xFCCC886EDE3C63EC, 'void', ped, p0, immediately)
end

--- @param p0 userdata
--- @param p1 userdata
natives.weapon_n0X4820A6939D7Cef28 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x4820A6939D7CEF28, 'void', p0, p1)
end

-- attachPoint:
-- enum eWeaponAttachPoint
-- {
-- 	WEAPON_ATTACH_POINT_INVALID = -1,
-- 	WEAPON_ATTACH_POINT_HAND_PRIMARY = 0,
-- 	WEAPON_ATTACH_POINT_HAND_SECONDARY = 1,
-- 	WEAPON_ATTACH_POINT_PISTOL_R = 2,
-- 	MAX_HAND_WEAPON_ATTACH_POINTS = 2,
-- 	WEAPON_ATTACH_POINT_PISTOL_L = 3,
-- 	WEAPON_ATTACH_POINT_KNIFE = 4,
-- 	WEAPON_ATTACH_POINT_LASSO = 5,
-- 	WEAPON_ATTACH_POINT_THROWER = 6,
-- 	WEAPON_ATTACH_POINT_BOW = 7,
-- 	WEAPON_ATTACH_POINT_BOW_ALTERNATE = 8,
-- 	WEAPON_ATTACH_POINT_RIFLE = 9,
-- 	WEAPON_ATTACH_POINT_RIFLE_ALTERNATE = 10,
-- 	WEAPON_ATTACH_POINT_LANTERN = 11,
-- 	WEAPON_ATTACH_POINT_TEMP_LANTERN = 12,
-- 	WEAPON_ATTACH_POINT_MELEE = 13,
-- 	MAX_SYNCED_WEAPON_ATTACH_POINTS = 13,
-- 	WEAPON_ATTACH_POINT_HIP = 14,
-- 	WEAPON_ATTACH_POINT_BOOT = 15,
-- 	WEAPON_ATTACH_POINT_BACK = 16,
-- 	WEAPON_ATTACH_POINT_FRONT = 17,
-- 	WEAPON_ATTACH_POINT_SHOULDERSLING = 18,
-- 	WEAPON_ATTACH_POINT_LEFTBREAST = 19,
-- 	WEAPON_ATTACH_POINT_RIGHTBREAST = 20,
-- 	WEAPON_ATTACH_POINT_LEFTARMPIT = 21,
-- 	WEAPON_ATTACH_POINT_RIGHTARMPIT = 22,
-- 	WEAPON_ATTACH_POINT_LEFTARMPIT_RIFLE = 23,
-- 	WEAPON_ATTACH_POINT_SATCHEL = 24,
-- 	WEAPON_ATTACH_POINT_LEFTARMPIT_BOW = 25,
-- 	WEAPON_ATTACH_POINT_RIGHT_HAND_EXTRA = 26,
-- 	WEAPON_ATTACH_POINT_LEFT_HAND_EXTRA = 27,
-- 	WEAPON_ATTACH_POINT_RIGHT_HAND_AUX = 28,
-- 	MAX_WEAPON_ATTACH_POINTS = 29
-- };
--- @param ped integer
--- @param weaponhash integer
--- @param equipnow boolean
--- @param attachpoint integer
--- @param p4 boolean
--- @param p5 boolean
natives.weapon_setCurrentPedWeapon = function(ped, weaponhash, equipnow, attachpoint, p4, p5)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')
    assert(type(equipnow) == 'boolean', 'Argument equipnow must be of type boolean.')
    assert(type(attachpoint) == 'integer', 'Argument attachpoint must be of type integer.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')

    local call = natives.invoke(0xADF692B254977C0C, 'void', ped, weaponhash, equipnow, attachpoint, p4, p5)
end

-- attachPoint: see SET_CURRENT_PED_WEAPON
--- @param ped integer
--- @param weaponhash integer
--- @param p2 boolean
--- @param attachpoint integer
--- @param p4 boolean
--- @return boolean
natives.weapon_getCurrentPedWeapon = function(ped, weaponhash, p2, attachpoint, p4)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(attachpoint) == 'integer', 'Argument attachpoint must be of type integer.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')

    local call = natives.invoke(0x3A87E44BB9A01D54, 'bool', ped, weaponhash, p2, attachpoint, p4)
    return call
end

-- Returns weaponObject, attachPoint: see SET_CURRENT_PED_WEAPON
--- @param ped integer
--- @param attachpoint integer
--- @return number
natives.weapon_getCurrentPedWeaponEntityIndex = function(ped, attachpoint)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(attachpoint) == 'integer', 'Argument attachpoint must be of type integer.')

    local call = natives.invoke(0x3B390A939AF0B5FC, 'int', ped, attachpoint)
    return call
end

--- @param ped integer
--- @return boolean
natives.weapon_enableWeaponRestore = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xC395355843BE134B, 'bool', ped)
    return call
end

--- @param ped integer
--- @param p1 boolean
--- @return number
natives.weapon_getPedBackupWeapon = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xC71FE230A513C30F, 'integer', ped, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.weapon_n0X486C96A0Dcd2Bc92 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x486C96A0DCD2BC92, 'any', p0, p1)
    return call
end

--- @param ped integer
--- @param p1 boolean
--- @param p2 boolean
--- @param p3 boolean
--- @return number
natives.weapon_getPedWorstWeapon = function(ped, p1, p2, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0xDA37A053C1522F5D, 'integer', ped, p1, p2, p3)
    return call
end

--- @param ped integer
--- @param p1 boolean
--- @param p2 boolean
--- @return number
natives.weapon_getBestPedWeapon = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x8483E98E8B888AE2, 'integer', ped, p1, p2)
    return call
end

--- @param ped integer
--- @param p1 userdata
--- @param guidprimary userdata
--- @return any
natives.weapon_getBestPedWeaponInInventory = function(ped, p1, guidprimary)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(guidprimary) == 'userdata', 'Argument guidprimary must be of type userdata.')

    local call = natives.invoke(0x7B98500614C8E8B8, 'any', ped, p1, guidprimary)
    return call
end

--- @param ped integer
--- @param outguid userdata
--- @param p2 boolean
--- @param p3 boolean
natives.weapon_getBestPedShortarmGuid = function(ped, outguid, p2, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(outguid) == 'userdata', 'Argument outguid must be of type userdata.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0xF52BD94B47CCF736, 'void', ped, outguid, p2, p3)
end

--- @param ped integer
--- @param attachpoint integer
--- @param weaponguid userdata
--- @return boolean
natives.weapon_getPedWeaponGuidAtAttachPoint = function(ped, attachpoint, weaponguid)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(attachpoint) == 'integer', 'Argument attachpoint must be of type integer.')
    assert(type(weaponguid) == 'userdata', 'Argument weaponguid must be of type userdata.')

    local call = natives.invoke(0x6929E22158E52265, 'bool', ped, attachpoint, weaponguid)
    return call
end

-- If near your horse when called, weapons stored on your horse will be considered
-- Returns weaponHash
--- @param ped integer
--- @param weapongroup integer
--- @param p2 boolean
--- @param p3 boolean
--- @return number
natives.weapon_getBestPedWeaponInGroup = function(ped, weapongroup, p2, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weapongroup) == 'integer', 'Argument weapongroup must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0x9F67929D98E7C6E8, 'integer', ped, weapongroup, p2, p3)
    return call
end

-- Returns the ped's default unarmed weapon hash as defined in CPedModelInfo (DefaultUnarmedWeapon).
-- Falls back to WEAPON_UNARMED if the ped doesn't have a valid model info pointer, or 0 if the ped doesn't exist.
--- @param ped integer
--- @return number
natives.weapon_getDefaultUnarmedWeaponHash = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x08FF1099ED2E6E21, 'integer', ped)
    return call
end

-- turretHash: WEAPON_TURRET_MAXIUM, WEAPON_TURRET_GATLING, WEAPON_TURRET_CANNON, WEAPON_TURRET_REVOLVING_CANNON
--- @param vehicle integer
--- @param turrethash integer
--- @param ammo integer
natives.weapon_setAmmoInTurret = function(vehicle, turrethash, ammo)
    assert(type(vehicle) == 'integer', 'Argument vehicle must be of type integer.')
    assert(type(turrethash) == 'integer', 'Argument turrethash must be of type integer.')
    assert(type(ammo) == 'integer', 'Argument ammo must be of type integer.')

    local call = natives.invoke(0xBDDA0C290C228159, 'void', vehicle, turrethash, ammo)
end

--- @param ped integer
--- @param weaponhash integer
--- @return boolean
natives.weapon_setCurrentPedVehicleWeapon = function(ped, weaponhash)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0x75C55983C2C39DAA, 'bool', ped, weaponhash)
    return call
end

--- @param ped integer
--- @param weaponhash integer
--- @return boolean
natives.weapon_getCurrentPedVehicleWeapon = function(ped, weaponhash)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0x1017582BCD3832DC, 'bool', ped, weaponhash)
    return call
end

--- @param ped integer
--- @param flags integer
--- @return boolean
natives.weapon_isPedArmed = function(ped, flags)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(flags) == 'integer', 'Argument flags must be of type integer.')

    local call = natives.invoke(0xCB690F680A3EA971, 'bool', ped, flags)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.weapon_n0Xa2091482Ed42Ef85 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xA2091482ED42EF85, 'any', p0, p1)
    return call
end

-- Returns true if the ped is currently holstering or unholstering a weapon
--- @param ped integer
--- @return boolean
natives.weapon_isWeaponHolsterStateChanging = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x2387D6E9C6B478AA, 'bool', ped)
    return call
end

--- @param weaponhash integer
--- @return boolean
natives.weapon_isWeaponValid = function(weaponhash)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0x937C71165CF334B3, 'bool', weaponhash)
    return call
end

--- @param ammohash integer
--- @return boolean
natives.weapon_isAmmoValid = function(ammohash)
    assert(type(ammohash) == 'integer', 'Argument ammohash must be of type integer.')

    local call = natives.invoke(0x1F7977C9101F807F, 'bool', ammohash)
    return call
end

--- @param p0 userdata
--- @return any
natives.weapon_n0X23Bf601A42F329A0 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x23BF601A42F329A0, 'any', p0)
    return call
end

--- @param ped integer
--- @param weaponhash integer
--- @return boolean
natives.weapon_isPedCarryingWeapon = function(ped, weaponhash)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0xF29A186ED428B552, 'bool', ped, weaponhash)
    return call
end

--- @param ped integer
--- @param weaponhash integer
--- @param p2 integer
--- @param p3 boolean
--- @return boolean
natives.weapon_hasPedGotWeapon = function(ped, weaponhash, p2, p3)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')
    assert(type(p2) == 'integer', 'Argument p2 must be of type integer.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0x8DECB02F88F428BC, 'bool', ped, weaponhash, p2, p3)
    return call
end

-- Seems to return true if the passed weapon is some sort of non-lethal melee weapon.
-- Weapon must currently be held/equipped by the ped.
--- @param ped integer
--- @param weapon integer
--- @return boolean
natives.weapon_n0X07E1C35F0078C3F9 = function(ped, weapon)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weapon) == 'integer', 'Argument weapon must be of type integer.')

    local call = natives.invoke(0x07E1C35F0078C3F9, 'bool', ped, weapon)
    return call
end

--- @param ped integer
--- @return boolean
natives.weapon_isPedWeaponReadyToShoot = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xB80CA294F2F26749, 'bool', ped)
    return call
end

-- slotHash is usually just the weaponHash name, but WEAPON_* is replaced with SLOT_*
--- @param ped integer
--- @param slothash integer
--- @return number
natives.weapon_getPedWeaponInSlot = function(ped, slothash)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(slothash) == 'integer', 'Argument slothash must be of type integer.')

    local call = natives.invoke(0xDBC4B552B2AE9A83, 'integer', ped, slothash)
    return call
end

-- addReason: see _ADD_AMMO_TO_PED
--- @param ped integer
--- @param weaponhash integer
--- @param ammocount integer
--- @param p3 boolean
--- @param addreason integer
natives.weapon_giveDelayedWeaponToPed = function(ped, weaponhash, ammocount, p3, addreason)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')
    assert(type(ammocount) == 'integer', 'Argument ammocount must be of type integer.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')
    assert(type(addreason) == 'integer', 'Argument addreason must be of type integer.')

    local call = natives.invoke(0xB282DC6EBD803C75, 'void', ped, weaponhash, ammocount, p3, addreason)
end

--- @param ped integer
--- @param p1 boolean
--- @param p2 boolean
natives.weapon_removeAllPedWeapons = function(ped, p1, p2)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xF25DF915FA38C5F3, 'void', ped, p1, p2)
end

-- removeReason:
-- enum eRemoveItemReason : Hash
-- {
-- 	REMOVE_REASON_CLIENT_PURGED = 0x4A4E94DC,
-- 	REMOVE_REASON_COALESCE = 0x2ABE393E,
-- 	REMOVE_REASON_DEBUG = 0xA07362E6,
-- 	REMOVE_REASON_DEFAULT = 0xF77DE93D,
-- 	REMOVE_REASON_DELETE_CHARACTER = 0x20AFBDE9,
-- 	REMOVE_REASON_DROPPED = 0xEC7FB5D5,
-- 	REMOVE_REASON_DUPLICATE = 0x19047132,
-- 	REMOVE_REASON_GIFTED_INCORRECTLY = 0x9C4E3829,
-- 	REMOVE_REASON_GIVEN = 0xAD5377D4,
-- 	REMOVE_REASON_INSUFFICIENT_INVENTORY = 0x518D1AAE,
-- 	REMOVE_REASON_ITEM_DOES_NOT_EXIST = 0xEAD5D889,
-- 	REMOVE_REASON_LOADOUT = 0x1B94E3BA,
-- 	REMOVE_REASON_SET_AMOUNT = 0x19D5CFA5,
-- 	REMOVE_REASON_SOLD = 0x76C4B482,
-- 	REMOVE_REASON_USED = 0x2188E0A3,
-- 	REMOVE_REASON_USE_FAILED = 0x671F9EAD
-- };
--- @param ped integer
--- @param weaponhash integer
--- @param p2 boolean
--- @param removereason integer
natives.weapon_removeWeaponFromPed = function(ped, weaponhash, p2, removereason)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(removereason) == 'integer', 'Argument removereason must be of type integer.')

    local call = natives.invoke(0x4899CB088EDF59B8, 'void', ped, weaponhash, p2, removereason)
end

--- @param ped integer
--- @param weaponguid userdata
--- @param removereason integer
natives.weapon_removeWeaponFromPedByGuid = function(ped, weaponguid, removereason)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weaponguid) == 'userdata', 'Argument weaponguid must be of type userdata.')
    assert(type(removereason) == 'integer', 'Argument removereason must be of type integer.')

    local call = natives.invoke(0x51C3B71591811485, 'void', ped, weaponguid, removereason)
end

-- Hides the ped's weapon during a cutscene.
--- @param ped integer
--- @param toggle boolean
natives.weapon_hidePedWeaponForScriptedCutscene = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x6F6981D2253C208F, 'void', ped, toggle)
end

--- @param ped integer
--- @param visible boolean
--- @param deselectweapon boolean
--- @param p3 boolean
--- @param p4 boolean
natives.weapon_setPedCurrentWeaponVisible = function(ped, visible, deselectweapon, p3, p4)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(visible) == 'boolean', 'Argument visible must be of type boolean.')
    assert(type(deselectweapon) == 'boolean', 'Argument deselectweapon must be of type boolean.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')

    local call = natives.invoke(0x0725A4CCFDED9A70, 'void', ped, visible, deselectweapon, p3, p4)
end

-- attachPoint: see SET_CURRENT_PED_WEAPON
--- @param ped integer
--- @param attachpoint integer
--- @param visible boolean
natives.weapon_setPedWeaponAttachPointVisibility = function(ped, attachpoint, visible)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(attachpoint) == 'integer', 'Argument attachpoint must be of type integer.')
    assert(type(visible) == 'boolean', 'Argument visible must be of type boolean.')

    local call = natives.invoke(0x67E21ACC5C0C970C, 'void', ped, attachpoint, visible)
end

--- @param ped integer
--- @param visible boolean
natives.weapon_setPedAllWeaponsVisibility = function(ped, visible)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(visible) == 'boolean', 'Argument visible must be of type boolean.')

    local call = natives.invoke(0x4F806A6CFED89468, 'void', ped, visible)
end

--- @param ped integer
--- @param toggle boolean
natives.weapon_setPedDropsWeaponsWhenDead = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x476AE72C1D19D1A8, 'void', ped, toggle)
end

--- @param ped integer
--- @param toggle boolean
natives.weapon_n0X431240A58484D5D0 = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x431240A58484D5D0, 'void', ped, toggle)
end

--- @param ped integer
--- @param toggle boolean
natives.weapon_n0X45E57Fdd531C9477 = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x45E57FDD531C9477, 'void', ped, toggle)
end

--- @param ped integer
--- @param toggle boolean
natives.weapon_n0Xf08D8Feb455F2C8C = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xF08D8FEB455F2C8C, 'void', ped, toggle)
end

--- @param ped integer
--- @param toggle boolean
natives.weapon_n0X16D9841A85Fa627E = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x16D9841A85FA627E, 'void', ped, toggle)
end

--- @param ped integer
--- @param coords integer
--- @return boolean
natives.weapon_getPedLastWeaponImpactCoord = function(ped, coords)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(coords) == 'integer', 'Argument coords must be of type integer.')

    local call = natives.invoke(0x6C4D0409BA1A2BC2, 'bool', ped, coords)
    return call
end

--- @param ped integer
natives.weapon_clearPedLastWeaponDamage = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x087D8F4BC65F68E4, 'void', ped)
end

--- @param entity integer
--- @param weaponname integer
--- @param weapontype integer
--- @return boolean
natives.weapon_hasEntityBeenDamagedByWeapon = function(entity, weaponname, weapontype)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(weaponname) == 'integer', 'Argument weaponname must be of type integer.')
    assert(type(weapontype) == 'integer', 'Argument weapontype must be of type integer.')

    local call = natives.invoke(0xDCF06D0CDFF68424, 'bool', entity, weaponname, weapontype)
    return call
end

--- @param ped integer
--- @param weaponhash integer
--- @param xoffset number
--- @param yoffset number
--- @param zoffset number
--- @param ammocount integer
natives.weapon_setPedDropsInventoryWeapon = function(ped, weaponhash, xoffset, yoffset, zoffset, ammocount)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')
    assert(type(xoffset) == 'number', 'Argument xoffset must be of type number.')
    assert(type(yoffset) == 'number', 'Argument yoffset must be of type number.')
    assert(type(zoffset) == 'number', 'Argument zoffset must be of type number.')
    assert(type(ammocount) == 'integer', 'Argument ammocount must be of type integer.')

    local call = natives.invoke(0x208A1888007FC0E6, 'void', ped, weaponhash, xoffset, yoffset, zoffset, ammocount)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.weapon_n0Xb0Fb9B196A3D13F0 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xB0FB9B196A3D13F0, 'void', p0, p1, p2)
end

-- _SET_A* - _SET_B*
--- @param ped integer
--- @param p1 integer
natives.weapon_n0X2Ebf70E1D8C06683 = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x2EBF70E1D8C06683, 'void', ped, p1)
end

-- Only used in R* Script fme_escaped_convicts, p0 = 0
--- @param p0 userdata
natives.weapon_n0X63B83A526329Afbc = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x63B83A526329AFBC, 'void', p0)
end

--- @param ped integer
--- @return any
natives.weapon_makePedReload = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x79E1E511FF7EFB13, 'any', ped)
    return call
end

--- @param ped integer
--- @return any
natives.weapon_refillAmmoInCurrentPedWeapon = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x0A2AB7B7ABC055F4, 'any', ped)
    return call
end

-- Old name: _DROP_CURRENT_PED_WEAPON
--- @param ped integer
--- @param p1 boolean
--- @param attachpoint integer
--- @param p3 boolean
--- @param p4 boolean
--- @return number
natives.weapon_makePedDropWeapon = function(ped, p1, attachpoint, p3, p4)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')
    assert(type(attachpoint) == 'integer', 'Argument attachpoint must be of type integer.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')

    local call = natives.invoke(0xCEF4C65DE502D367, 'int', ped, p1, attachpoint, p3, p4)
    return call
end

-- Returns eCurrentHeldWeapon
-- _GET_R* - _GET_T*
--- @param ped integer
--- @return number
natives.weapon_getPedCurrentHeldWeapon = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x8425C5F057012DAB, 'integer', ped)
    return call
end

--- @param ped integer
--- @param toggle boolean
natives.weapon_setAllowAnyWeaponDrop = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x78030C7867D8B9B6, 'void', ped, toggle)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.weapon_n0Xa3716A77Dcf17424 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xA3716A77DCF17424, 'void', p0, p1, p2)
end

--- @param p0 userdata
natives.weapon_n0X457B16951Ad77C1B = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x457B16951AD77C1B, 'void', p0)
end

--- @param p0 userdata
--- @return any
natives.weapon_n0X3799Efcc3C8Cd5E1 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x3799EFCC3C8CD5E1, 'any', p0)
    return call
end

--- @param ped integer
--- @return number
natives.weapon_getMaxLockonDistanceOfCurrentPedWeapon = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x79B1A6E780266DB0, 'float', ped)
    return call
end

--- @param ped integer
--- @param componenthash integer
--- @param weaponhash integer
natives.weapon_removeWeaponComponentFromPed = function(ped, componenthash, weaponhash)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(componenthash) == 'integer', 'Argument componenthash must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0x19F70C4D80494FF8, 'void', ped, componenthash, weaponhash)
end

--- @param ped integer
--- @param componenthash integer
--- @param weaponhash integer
--- @return boolean
natives.weapon_hasPedGotWeaponComponent = function(ped, componenthash, weaponhash)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(componenthash) == 'integer', 'Argument componenthash must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0xBBC67A6F965C688A, 'bool', ped, componenthash, weaponhash)
    return call
end

--- @param ped integer
--- @return boolean
natives.weapon_isPedCurrentWeaponHolstered = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0xBDD9C235D8D1052E, 'bool', ped)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.weapon_n0Xd2209866B0Cb72Ea = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xD2209866B0CB72EA, 'any', p0, p1)
    return call
end

--- @param weaponhash integer
--- @param p1 integer
--- @param p2 boolean
natives.weapon_requestWeaponAsset = function(weaponhash, p1, p2)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x72D4CB5DB927009C, 'void', weaponhash, p1, p2)
end

--- @param weaponhash integer
--- @return boolean
natives.weapon_hasWeaponAssetLoaded = function(weaponhash)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0xFF07CF465F48B830, 'bool', weaponhash)
    return call
end

--- @param weaponhash integer
natives.weapon_removeWeaponAsset = function(weaponhash)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0xC3896D03E2852236, 'void', weaponhash)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.weapon_n0Xe9B3Fec825668291 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xE9B3FEC825668291, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
--- @return any
natives.weapon_n0X9Cca3131E6B53C68 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0x9CCA3131E6B53C68, 'any', p0, p1, p2)
    return call
end

--- @param weaponhash integer
--- @return string
natives.weapon_getWeaponName2 = function(weaponhash)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0x6D3AC61694A791C5, 'string', weaponhash)
    return call
end

-- Returns "WNS_INVALID" if the weapon is invalid/doesn't exist.
--- @param weaponhash integer
--- @return string
natives.weapon_getWeaponName = function(weaponhash)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0x89CF5FF3D363311E, 'string', weaponhash)
    return call
end

--- @param weaponhash integer
--- @param permanentdegradationlevel number
--- @return string
natives.weapon_getWeaponNameWithPermanentDegradation = function(weaponhash, permanentdegradationlevel)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')
    assert(type(permanentdegradationlevel) == 'number', 'Argument permanentdegradationlevel must be of type number.')

    local call = natives.invoke(0x7A56D66C78D8EF8E, 'string', weaponhash, permanentdegradationlevel)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.weapon_n0Xb832F1A686B9B810 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xB832F1A686B9B810, 'void', p0, p1, p2)
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.weapon_n0X5A695Bd328586B44 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x5A695BD328586B44, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
natives.weapon_n0X641351E9Ad103890 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x641351E9AD103890, 'void', p0, p1)
end

--- @param ped integer
--- @param toggle boolean
natives.weapon_setInstantlyEquipWeaponPickups = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0x739B9C6D0E7F7F93, 'void', ped, toggle)
end

--- @param ped integer
--- @param toggle boolean
natives.weapon_setForceAutoEquip = function(ped, toggle)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(toggle) == 'boolean', 'Argument toggle must be of type boolean.')

    local call = natives.invoke(0xBE711B14A159E84F, 'void', ped, toggle)
end

-- Appears to just send specified weapon to your horse holster without having to be close
-- However, the weapon is not visible on the horse holster, but you can reach the weapon on the weapon wheel
--- @param ped integer
--- @param weaponhash integer
natives.weapon_sendWeaponToInventory = function(ped, weaponhash)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0xE9BD19F8121ADE3E, 'void', ped, weaponhash)
end

-- Puts the gun visibly in your horse's holster without having to be close to the horse. Use 0xE9BD19F8121ADE3E before using this native
-- _A* or _B*
--- @param horse integer
--- @param weaponhash integer
--- @param ped integer
natives.weapon_n0X14Ff0C2545527F9B = function(horse, weaponhash, ped)
    assert(type(horse) == 'integer', 'Argument horse must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x14FF0C2545527F9B, 'void', horse, weaponhash, ped)
end

--- @param p0 userdata
natives.weapon_n0Xd4C6E24D955Ff061 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xD4C6E24D955FF061, 'void', p0)
end

--- @param p0 userdata
--- @return any
natives.weapon_n0Xaffd0Ccf31F469B8 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xAFFD0CCF31F469B8, 'any', p0)
    return call
end

--- @param weaponhash integer
--- @return number
natives.weapon_getWeaponStatId = function(weaponhash)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0x8EC44AE8DECFF841, 'integer', weaponhash)
    return call
end

--- @param entity integer
--- @param weaponhash integer
--- @param ms integer
--- @return boolean
natives.weapon_hasEntityBeenDamagedByWeaponRecently = function(entity, weaponhash, ms)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')
    assert(type(ms) == 'integer', 'Argument ms must be of type integer.')

    local call = natives.invoke(0x9E2D5D6BC97A5F1E, 'bool', entity, weaponhash, ms)
    return call
end

--- @param ped integer
--- @return number
natives.weapon_getPedHogtieWeapon = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x90EB1CB189923587, 'integer', ped)
    return call
end

--- @param weaponhash integer
--- @param ammocount integer
--- @param x number
--- @param y number
--- @param z number
--- @param showworldmodel boolean
--- @param scale number
--- @return number
natives.weapon_createWeaponObject = function(weaponhash, ammocount, x, y, z, showworldmodel, scale)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')
    assert(type(ammocount) == 'integer', 'Argument ammocount must be of type integer.')
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(showworldmodel) == 'boolean', 'Argument showworldmodel must be of type boolean.')
    assert(type(scale) == 'number', 'Argument scale must be of type number.')

    local call = natives.invoke(0x9888652B8BA77F73, 'integer', weaponhash, ammocount, x, y, z, showworldmodel, scale)
    return call
end

--- @param weaponobject integer
--- @param component integer
natives.weapon_removeWeaponComponentFromWeaponObject = function(weaponobject, component)
    assert(type(weaponobject) == 'integer', 'Argument weaponobject must be of type integer.')
    assert(type(component) == 'integer', 'Argument component must be of type integer.')

    local call = natives.invoke(0xF7D82B0D66777611, 'void', weaponobject, component)
end

--- @param weapon integer
--- @param addonhash integer
--- @return boolean
natives.weapon_hasWeaponGotWeaponComponent = function(weapon, addonhash)
    assert(type(weapon) == 'integer', 'Argument weapon must be of type integer.')
    assert(type(addonhash) == 'integer', 'Argument addonhash must be of type integer.')

    local call = natives.invoke(0x76A18844E743BF91, 'bool', weapon, addonhash)
    return call
end

--- @param weaponobject integer
--- @param ped integer
--- @param componenthash integer
--- @param p3 boolean
natives.weapon_giveWeaponComponentToWeaponObject = function(weaponobject, ped, componenthash, p3)
    assert(type(weaponobject) == 'integer', 'Argument weaponobject must be of type integer.')
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(componenthash) == 'integer', 'Argument componenthash must be of type integer.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0x1A47699E8D533E8F, 'void', weaponobject, ped, componenthash, p3)
end

-- Detaches the weapon from the ped and actually removes the ped's weapon
--- @param ped integer
--- @param p1 boolean
--- @return number
natives.weapon_getWeaponObjectFromPed = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xC6A6789BB405D11C, 'integer', ped, p1)
    return call
end

-- _GET_M* - _GET_PED_A*
--- @param ped integer
--- @param p1 boolean
--- @return number
natives.weapon_getPedWeaponObject = function(ped, p1)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0x6CA484C9A7377E4F, 'integer', ped, p1)
    return call
end

-- entity can be a ped or weapon object.
--- @param entity integer
--- @param componenthash integer
--- @param weaponhash integer
--- @param p3 boolean
natives.weapon_giveWeaponComponentToEntity = function(entity, componenthash, weaponhash, p3)
    assert(type(entity) == 'integer', 'Argument entity must be of type integer.')
    assert(type(componenthash) == 'integer', 'Argument componenthash must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')

    local call = natives.invoke(0x74C9090FDD1BB48E, 'void', entity, componenthash, weaponhash, p3)
end

--- @param p0 userdata
--- @param p1 userdata
natives.weapon_n0X74C9080Fdd1Bb48E = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x74C9080FDD1BB48E, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.weapon_n0X74C9080Fdd1Bb48F = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x74C9080FDD1BB48F, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
natives.weapon_n0X74C2365Fdd1Bb48F = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x74C2365FDD1BB48F, 'void', p0, p1)
end

--- @param p0 userdata
natives.weapon_n0X74C90Aaacc1Dd48F = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x74C90AAACC1DD48F, 'void', p0)
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.weapon_n0X74C8000Fdd1Bb111 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x74C8000FDD1BB111, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.weapon_n0X74C8000Fdd1Bb222 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x74C8000FDD1BB222, 'any', p0, p1)
    return call
end

-- Returns iSpinHash
--- @param emote integer
--- @param weaponemotetricktype integer
--- @return number
natives.weapon_getWeaponGunSpinningWeaponEmoteTrickTypeHash = function(emote, weaponemotetricktype)
    assert(type(emote) == 'integer', 'Argument emote must be of type integer.')
    assert(type(weaponemotetricktype) == 'integer', 'Argument weaponemotetricktype must be of type integer.')

    local call = natives.invoke(0xF4601C1203B1A78D, 'integer', emote, weaponemotetricktype)
    return call
end

-- emote hashes: KIT_EMOTE_TWIRL_GUN, KIT_EMOTE_TWIRL_GUN_LEFT_HOLSTER, KIT_EMOTE_TWIRL_GUN_DUAL, 0 (to unequip)
--- @param ped integer
--- @param emote integer
natives.weapon_setActiveGunSpinningEquipKitEmoteTwirl = function(ped, emote)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(emote) == 'integer', 'Argument emote must be of type integer.')

    local call = natives.invoke(0xCBCFFF805F1B4596, 'void', ped, emote)
end

-- Returns emote Hash
--- @param ped integer
--- @return number
natives.weapon_getPedGunSpinningEquippedKitEmoteTwirl = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x2C4FEC3D0EFA9FC0, 'integer', ped)
    return call
end

-- spinHash can be -1, 0 to disable
--- @param ped integer
--- @param weaponemotetricktype integer
--- @param spin integer
natives.weapon_setActiveGunSpinningKitEmoteTwirl = function(ped, weaponemotetricktype, spin)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weaponemotetricktype) == 'integer', 'Argument weaponemotetricktype must be of type integer.')
    assert(type(spin) == 'integer', 'Argument spin must be of type integer.')

    local call = natives.invoke(0x01F661BB9C71B465, 'void', ped, weaponemotetricktype, spin)
end

-- Returns iSpinHash / iVariationSpin
--- @param ped integer
--- @param weaponemotevariation integer
--- @return number
natives.weapon_getPedGunSpinningHashFromWeaponEmoteVariation = function(ped, weaponemotevariation)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weaponemotevariation) == 'integer', 'Argument weaponemotevariation must be of type integer.')

    local call = natives.invoke(0xF3B1620B920D1708, 'integer', ped, weaponemotevariation)
    return call
end

-- Returns weaponEmoteVariation
-- 
-- WEAPON_EMOTE_VARIATION_INVALID = -2,
-- WEAPON_EMOTE_VARIATION_BASE,
-- WEAPON_EMOTE_VARIATION_A,
-- WEAPON_EMOTE_VARIATION_B,
-- WEAPON_EMOTE_VARIATION_C,
-- WEAPON_EMOTE_VARIATION_D,
-- WEAPON_EMOTE_VARIATION_PREVIEW,
-- WEAPON_EMOTE_NUM_VARIATIONS
--- @param ped integer
--- @param variation integer
--- @return number
natives.weapon_getWeaponEmoteVariation = function(ped, variation)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(variation) == 'integer', 'Argument variation must be of type integer.')

    local call = natives.invoke(0x86147D05FA831D3A, 'int', ped, variation)
    return call
end

-- _STOP_* - _TEST_*
--- @param ped integer
--- @param emotetype integer
natives.weapon_setGunSpinningInventorySlotIdActivate = function(ped, emotetype)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(emotetype) == 'integer', 'Argument emotetype must be of type integer.')

    local call = natives.invoke(0x408CF580C5E96D49, 'void', ped, emotetype)
end

--- @param weaponhash integer
--- @return boolean
natives.weapon_getCanTwirlWeapon = function(weaponhash)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0x6554ECCE226F2A2A, 'bool', weaponhash)
    return call
end

-- _GET_BEST_* - _GET_CLOSEST_*
--- @param ped integer
--- @param weaponguid userdata
--- @return boolean
natives.weapon_getCorrectKitEmoteTwirlGun = function(ped, weaponguid)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weaponguid) == 'userdata', 'Argument weaponguid must be of type userdata.')

    local call = natives.invoke(0xCD356B42C57BFE01, 'bool', ped, weaponguid)
    return call
end

--- @param p0 userdata
--- @return any
natives.weapon_n0Xbc9444F2Ff94A9C0 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xBC9444F2FF94A9C0, 'any', p0)
    return call
end

-- Returns weaponCollection Hash
-- Example: RE_POLICECHASE_MALES_01: Carbine Repeater + Knife, LO_AGRO_PED
--- @param pedmodel integer
--- @return number
natives.weapon_getDefaultPedWeaponCollection = function(pedmodel)
    assert(type(pedmodel) == 'integer', 'Argument pedmodel must be of type integer.')

    local call = natives.invoke(0xD42514C182121C23, 'integer', pedmodel)
    return call
end

--- @param ped integer
--- @param weaponcollection integer
natives.weapon_giveWeaponCollectionToPed = function(ped, weaponcollection)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weaponcollection) == 'integer', 'Argument weaponcollection must be of type integer.')

    local call = natives.invoke(0x899A04AFCC725D04, 'void', ped, weaponcollection)
end

--- @param weaponcollection integer
--- @param dualwieldvariant integer
--- @return boolean
natives.weapon_n0Xf252A85B8F3F8C58 = function(weaponcollection, dualwieldvariant)
    assert(type(weaponcollection) == 'integer', 'Argument weaponcollection must be of type integer.')
    assert(type(dualwieldvariant) == 'integer', 'Argument dualwieldvariant must be of type integer.')

    local call = natives.invoke(0xF252A85B8F3F8C58, 'bool', weaponcollection, dualwieldvariant)
    return call
end

-- Returns weaponHash
--- @param weaponcollection integer
--- @param weapongroup integer
--- @return number
natives.weapon_n0X9Eefd670F10656D7 = function(weaponcollection, weapongroup)
    assert(type(weaponcollection) == 'integer', 'Argument weaponcollection must be of type integer.')
    assert(type(weapongroup) == 'integer', 'Argument weapongroup must be of type integer.')

    local call = natives.invoke(0x9EEFD670F10656D7, 'integer', weaponcollection, weapongroup)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.weapon_n0Xf2F585411E748B9C = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xF2F585411E748B9C, 'any', p0, p1)
    return call
end

--- @param weaponhash integer
--- @return number
natives.weapon_getWeaponClipSize = function(weaponhash)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0xD3750CCC00635FC2, 'int', weaponhash)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.weapon_n0Xa769D753922B031B = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xA769D753922B031B, 'void', p0, p1, p2)
end

--- @param p0 userdata
natives.weapon_n0Xc5899C4Cd2E2495D = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xC5899C4CD2E2495D, 'void', p0)
end

--- @param ped integer
--- @return boolean
natives.weapon_getAllowDualWield = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x918990BD9CE08582, 'bool', ped)
    return call
end

--- @param ped integer
--- @param allow boolean
natives.weapon_setAllowDualWield = function(ped, allow)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(allow) == 'boolean', 'Argument allow must be of type boolean.')

    local call = natives.invoke(0x83B8D50EB9446BBA, 'void', ped, allow)
end

--- @param ped integer
--- @param ammohash integer
--- @return boolean
natives.weapon_n0X44C8F4908F1B2622 = function(ped, ammohash)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(ammohash) == 'integer', 'Argument ammohash must be of type integer.')

    local call = natives.invoke(0x44C8F4908F1B2622, 'bool', ped, ammohash)
    return call
end

--- @param weaponhash integer
--- @return boolean
natives.weapon_isWeaponKnife = function(weaponhash)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0x792E3EF76C911959, 'bool', weaponhash)
    return call
end

--- @param weaponhash integer
--- @return boolean
natives.weapon_isWeaponRevolver = function(weaponhash)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0xC212F1D05A8232BB, 'bool', weaponhash)
    return call
end

--- @param weaponhash integer
--- @return boolean
natives.weapon_isWeaponPistol = function(weaponhash)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0xDDC64F5E31EEDAB6, 'bool', weaponhash)
    return call
end

--- @param weaponhash integer
--- @return boolean
natives.weapon_isWeaponRepeater = function(weaponhash)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0xDDB2578E95EF7138, 'bool', weaponhash)
    return call
end

--- @param weaponhash integer
--- @return boolean
natives.weapon_isWeaponRifle = function(weaponhash)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0x0A82317B7EBFC420, 'bool', weaponhash)
    return call
end

--- @param weaponhash integer
--- @return boolean
natives.weapon_isWeaponShotgun = function(weaponhash)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0xC75386174ECE95D5, 'bool', weaponhash)
    return call
end

--- @param weaponhash integer
--- @return boolean
natives.weapon_isWeaponSniper = function(weaponhash)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0x6AD66548840472E5, 'bool', weaponhash)
    return call
end

--- @param weaponhash integer
--- @return boolean
natives.weapon_isWeaponMeleeWeapon = function(weaponhash)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0x959383DCD42040DA, 'bool', weaponhash)
    return call
end

--- @param weaponhash integer
--- @return boolean
natives.weapon_isWeaponThrowable = function(weaponhash)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0x30E7C16B12DA8211, 'bool', weaponhash)
    return call
end

--- @param weaponhash integer
--- @return boolean
natives.weapon_isWeaponLasso = function(weaponhash)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0x6E4E1A82081EABED, 'bool', weaponhash)
    return call
end

--- @param weaponhash integer
--- @return boolean
natives.weapon_isWeaponBinoculars = function(weaponhash)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0xC853230E76A152DF, 'bool', weaponhash)
    return call
end

-- Returns true if CWeaponInfoFlags::Flags::Gun is set.
--- @param weaponhash integer
--- @return boolean
natives.weapon_isWeaponAGun = function(weaponhash)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0x705BE297EEBDB95D, 'bool', weaponhash)
    return call
end

--- @param weaponhash integer
--- @return boolean
natives.weapon_isWeaponTwoHanded = function(weaponhash)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0x0556E9D2ECF39D01, 'bool', weaponhash)
    return call
end

--- @param weaponhash integer
--- @return boolean
natives.weapon_isWeaponOneHanded = function(weaponhash)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0xD955FEE4B87AFA07, 'bool', weaponhash)
    return call
end

--- @param weaponhash integer
--- @return boolean
natives.weapon_isWeaponSilent = function(weaponhash)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0x5809DBCA0A37C82B, 'bool', weaponhash)
    return call
end

--- @param p0 userdata
--- @return any
natives.weapon_n0Xea522F991E120D45 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xEA522F991E120D45, 'any', p0)
    return call
end

--- @param ammohash integer
--- @return boolean
natives.weapon_isAmmoSilent = function(ammohash)
    assert(type(ammohash) == 'integer', 'Argument ammohash must be of type integer.')

    local call = natives.invoke(0xD2866CBA797E872E, 'bool', ammohash)
    return call
end

--- @param ammohash integer
--- @return boolean
natives.weapon_isAmmoSilent2 = function(ammohash)
    assert(type(ammohash) == 'integer', 'Argument ammohash must be of type integer.')

    local call = natives.invoke(0x7EFACC589B98C488, 'bool', ammohash)
    return call
end

--- @param weaponhash integer
--- @return boolean
natives.weapon_shouldWeaponBeDiscardedWhenSwapped = function(weaponhash)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0x2C83212A7AA51D3D, 'bool', weaponhash)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.weapon_n0X5B235F24472F2C3B = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x5B235F24472F2C3B, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.weapon_n0Xbfca7Afabf9D7967 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xBFCA7AFABF9D7967, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.weapon_n0X495A04Caec263Af8 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x495A04CAEC263AF8, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.weapon_n0X95Ca12E2C68043E5 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x95CA12E2C68043E5, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.weapon_n0Xabc18A28Bad4B46F = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xABC18A28BAD4B46F, 'any', p0, p1)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.weapon_n0X80Bb243789008A82 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x80BB243789008A82, 'any', p0, p1)
    return call
end

-- Related to weapon visual damage, not actual damage.
--- @param weaponobject integer
--- @return number
natives.weapon_getWeaponDamage = function(weaponobject)
    assert(type(weaponobject) == 'integer', 'Argument weaponobject must be of type integer.')

    local call = natives.invoke(0x904103D5D2333977, 'float', weaponobject)
    return call
end

-- Related to weapon visual damage, not actual damage.
--- @param weaponobject integer
--- @param level number
--- @param p2 boolean
natives.weapon_setWeaponDamage = function(weaponobject, level, p2)
    assert(type(weaponobject) == 'integer', 'Argument weaponobject must be of type integer.')
    assert(type(level) == 'number', 'Argument level must be of type number.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xE22060121602493B, 'void', weaponobject, level, p2)
end

--- @param weaponobject integer
--- @return number
natives.weapon_getWeaponDirt = function(weaponobject)
    assert(type(weaponobject) == 'integer', 'Argument weaponobject must be of type integer.')

    local call = natives.invoke(0x810E8AE9AFEA7E54, 'float', weaponobject)
    return call
end

--- @param weaponobject integer
--- @param level number
--- @param p2 boolean
natives.weapon_setWeaponDirt = function(weaponobject, level, p2)
    assert(type(weaponobject) == 'integer', 'Argument weaponobject must be of type integer.')
    assert(type(level) == 'number', 'Argument level must be of type number.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0x812CE61DEBCAB948, 'void', weaponobject, level, p2)
end

--- @param weaponobject integer
--- @return number
natives.weapon_getWeaponSoot = function(weaponobject)
    assert(type(weaponobject) == 'integer', 'Argument weaponobject must be of type integer.')

    local call = natives.invoke(0x4BF66F8878F67663, 'float', weaponobject)
    return call
end

--- @param weaponobject integer
--- @param level number
--- @param p2 boolean
natives.weapon_setWeaponSoot = function(weaponobject, level, p2)
    assert(type(weaponobject) == 'integer', 'Argument weaponobject must be of type integer.')
    assert(type(level) == 'number', 'Argument level must be of type number.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')

    local call = natives.invoke(0xA9EF4AD10BDDDB57, 'void', weaponobject, level, p2)
end

-- every other level will have the max value of (brokeLevel - threshold)
--- @param weaponobject integer
--- @param threshold number
natives.weapon_setWeaponLevelThreshold = function(weaponobject, threshold)
    assert(type(weaponobject) == 'integer', 'Argument weaponobject must be of type integer.')
    assert(type(threshold) == 'number', 'Argument threshold must be of type number.')

    local call = natives.invoke(0xD4071EFC83794B2F, 'void', weaponobject, threshold)
end

-- 0.0: good condition, 1.0: poor condition
--- @param weaponobject integer
--- @return number
natives.weapon_getWeaponDegradation = function(weaponobject)
    assert(type(weaponobject) == 'integer', 'Argument weaponobject must be of type integer.')

    local call = natives.invoke(0x0D78E1097F89E637, 'float', weaponobject)
    return call
end

-- Related to rust of weapons
--- @param weaponobject integer
--- @return number
natives.weapon_getWeaponPermanentDegradation = function(weaponobject)
    assert(type(weaponobject) == 'integer', 'Argument weaponobject must be of type integer.')

    local call = natives.invoke(0xD56E5F336C675EFA, 'float', weaponobject)
    return call
end

--- @param weaponobject integer
--- @param level number
natives.weapon_setWeaponDegradation = function(weaponobject, level)
    assert(type(weaponobject) == 'integer', 'Argument weaponobject must be of type integer.')
    assert(type(level) == 'number', 'Argument level must be of type number.')

    local call = natives.invoke(0xA7A57E89E965D839, 'void', weaponobject, level)
end

--- @param listen boolean
natives.weapon_listenProjectileHitEvents = function(listen)
    assert(type(listen) == 'boolean', 'Argument listen must be of type boolean.')

    local call = natives.invoke(0xDA5D3F2C6DD5B5D4, 'void', listen)
end

--- @param weaponobject integer
--- @return number
natives.weapon_getWeaponScale = function(weaponobject)
    assert(type(weaponobject) == 'integer', 'Argument weaponobject must be of type integer.')

    local call = natives.invoke(0x22084CA699219624, 'float', weaponobject)
    return call
end

--- @param weaponobject integer
--- @param scale number
natives.weapon_setWeaponScale = function(weaponobject, scale)
    assert(type(weaponobject) == 'integer', 'Argument weaponobject must be of type integer.')
    assert(type(scale) == 'number', 'Argument scale must be of type number.')

    local call = natives.invoke(0xC3544AD0522E69B4, 'void', weaponobject, scale)
end

--- @param p0 userdata
--- @return any
natives.weapon_n0X58425Fca3D3A2D15 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x58425FCA3D3A2D15, 'any', p0)
    return call
end

--- @param p0 userdata
--- @return any
natives.weapon_n0Xec97101A8F311282 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xEC97101A8F311282, 'any', p0)
    return call
end

-- Returns ammoHash from weaponObject (Returned by 0x6CA484C9A7377E4F)
--- @param ped integer
--- @param weaponobject integer
--- @return number
natives.weapon_getCurrentPedWeaponAmmoType = function(ped, weaponobject)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weaponobject) == 'integer', 'Argument weaponobject must be of type integer.')

    local call = natives.invoke(0x7E7B19A4355FEE13, 'integer', ped, weaponobject)
    return call
end

-- Returns ammoHash
--- @param ped integer
--- @param weaponguid userdata
--- @return number
natives.weapon_getCurrentAmmoTypeFromGuid = function(ped, weaponguid)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weaponguid) == 'userdata', 'Argument weaponguid must be of type userdata.')

    local call = natives.invoke(0xAF9D167A5656D6A6, 'integer', ped, weaponguid)
    return call
end

--- @param weaponhash integer
--- @param ammohash integer
--- @return boolean
natives.weapon_isAmmoTypeValidForWeapon = function(weaponhash, ammohash)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')
    assert(type(ammohash) == 'integer', 'Argument ammohash must be of type integer.')

    local call = natives.invoke(0xC570B881754DF609, 'bool', weaponhash, ammohash)
    return call
end

--- @param ped integer
--- @param weaponhash integer
--- @param ammohash integer
natives.weapon_setAmmoTypeForPedWeapon = function(ped, weaponhash, ammohash)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')
    assert(type(ammohash) == 'integer', 'Argument ammohash must be of type integer.')

    local call = natives.invoke(0xCC9C4393523833E2, 'void', ped, weaponhash, ammohash)
end

--- @param p0 userdata
--- @param p1 userdata
natives.weapon_n0X183Ce355115B6E75 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x183CE355115B6E75, 'void', p0, p1)
end

--- @param ped integer
--- @param weaponinventoryuid userdata
--- @param ammohash integer
natives.weapon_setAmmoTypeForPedWeaponInventory = function(ped, weaponinventoryuid, ammohash)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weaponinventoryuid) == 'userdata', 'Argument weaponinventoryuid must be of type userdata.')
    assert(type(ammohash) == 'integer', 'Argument ammohash must be of type integer.')

    local call = natives.invoke(0xEBE46B501BC3FBCF, 'void', ped, weaponinventoryuid, ammohash)
end

--- @param ped integer
--- @param weaponhash integer
--- @param ammohash integer
natives.weapon_disableAmmoTypeForPedWeapon = function(ped, weaponhash, ammohash)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')
    assert(type(ammohash) == 'integer', 'Argument ammohash must be of type integer.')

    local call = natives.invoke(0xF0D728EEA3C99775, 'void', ped, weaponhash, ammohash)
end

--- @param ped integer
--- @param ammohash integer
natives.weapon_disableAmmoTypeForPed = function(ped, ammohash)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(ammohash) == 'integer', 'Argument ammohash must be of type integer.')

    local call = natives.invoke(0xAA5A52204E077883, 'void', ped, ammohash)
end

--- @param p0 userdata
--- @param p1 userdata
natives.weapon_n0Xd63B4Ba3A02A99E0 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0xD63B4BA3A02A99E0, 'void', p0, p1)
end

--- @param ped integer
--- @param weaponhash integer
--- @param ammohash integer
natives.weapon_enableAmmoTypeForPedWeapon = function(ped, weaponhash, ammohash)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')
    assert(type(ammohash) == 'integer', 'Argument ammohash must be of type integer.')

    local call = natives.invoke(0x23FB9FACA28779C1, 'void', ped, weaponhash, ammohash)
end

--- @param ped integer
--- @param weaponhash integer
natives.weapon_enableAmmoTypeForPed = function(ped, weaponhash)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0x3B7B7908B7ADFB4B, 'void', ped, weaponhash)
end

--- @param p0 userdata
--- @param p1 userdata
natives.weapon_n0X404514D231Db27A0 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x404514D231DB27A0, 'void', p0, p1)
end

--- @param p0 userdata
--- @param p1 userdata
--- @param p2 userdata
natives.weapon_n0Xd53846B9C931C181 = function(p0, p1, p2)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')
    assert(type(p2) == 'userdata', 'Argument p2 must be of type userdata.')

    local call = natives.invoke(0xD53846B9C931C181, 'void', p0, p1, p2)
end

--- @param p0 userdata
natives.weapon_n0X000Fa7A4A8443Af7 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0x000FA7A4A8443AF7, 'void', p0)
end

--- @param p0 userdata
natives.weapon_n0Xecbb26529A737Ef6 = function(p0)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')

    local call = natives.invoke(0xECBB26529A737EF6, 'void', p0)
end

-- Returns WeaponAttachPoint
--- @param ped integer
--- @param attachpoint integer
--- @return number
natives.weapon_getWeaponAttachPoint = function(ped, attachpoint)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(attachpoint) == 'integer', 'Argument attachpoint must be of type integer.')

    local call = natives.invoke(0xCAD4FE9398820D24, 'int', ped, attachpoint)
    return call
end

--- @param p0 userdata
--- @param p1 userdata
--- @return any
natives.weapon_n0X4823F13A21F51964 = function(p0, p1)
    assert(type(p0) == 'userdata', 'Argument p0 must be of type userdata.')
    assert(type(p1) == 'userdata', 'Argument p1 must be of type userdata.')

    local call = natives.invoke(0x4823F13A21F51964, 'any', p0, p1)
    return call
end

-- Equips a weapon from a weaponItem, similar to GIVE_WEAPON_TO_PED
--- @param ped integer
--- @param weaponuid userdata
--- @param p2 boolean
--- @param p3 boolean
--- @param p4 boolean
--- @param p5 boolean
natives.weapon_setCurrentPedWeaponByGuid = function(ped, weaponuid, p2, p3, p4, p5)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(weaponuid) == 'userdata', 'Argument weaponuid must be of type userdata.')
    assert(type(p2) == 'boolean', 'Argument p2 must be of type boolean.')
    assert(type(p3) == 'boolean', 'Argument p3 must be of type boolean.')
    assert(type(p4) == 'boolean', 'Argument p4 must be of type boolean.')
    assert(type(p5) == 'boolean', 'Argument p5 must be of type boolean.')

    local call = natives.invoke(0x12FB95FE3D579238, 'void', ped, weaponuid, p2, p3, p4, p5)
end

--- @param ped integer
--- @param guidprimary userdata
--- @param guidsecondary userdata
natives.weapon_setPlayerPedQuickSwapWeaponByGuid = function(ped, guidprimary, guidsecondary)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(guidprimary) == 'userdata', 'Argument guidprimary must be of type userdata.')
    assert(type(guidsecondary) == 'userdata', 'Argument guidsecondary must be of type userdata.')

    local call = natives.invoke(0xEC1F85DA51D3D6C4, 'void', ped, guidprimary, guidsecondary)
end

-- Outputs cached guids
--- @param ped integer
--- @param guidprimary userdata
--- @param guidsecondary userdata
natives.weapon_getPlayerPedQuickSwapWeaponByGuid = function(ped, guidprimary, guidsecondary)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(guidprimary) == 'userdata', 'Argument guidprimary must be of type userdata.')
    assert(type(guidsecondary) == 'userdata', 'Argument guidsecondary must be of type userdata.')

    local call = natives.invoke(0xB7E52A058B07C7E2, 'void', ped, guidprimary, guidsecondary)
end

-- _GET_D* - _GET_L*
--- @param ped integer
--- @return boolean
natives.weapon_n0X0De0944Eccb3Df5D = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x0DE0944ECCB3DF5D, 'bool', ped)
    return call
end

-- _GET_NUM_*
--- @param ped integer
--- @return any
natives.weapon_n0X46D42883E873C1D7 = function(ped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')

    local call = natives.invoke(0x46D42883E873C1D7, 'any', ped)
    return call
end

--- @param ped integer
--- @param targetped integer
--- @return boolean
natives.weapon_isTargetPedConstrainedByPedUsingBolas = function(ped, targetped)
    assert(type(ped) == 'integer', 'Argument ped must be of type integer.')
    assert(type(targetped) == 'integer', 'Argument targetped must be of type integer.')

    local call = natives.invoke(0x8D50F43298AB9545, 'bool', ped, targetped)
    return call
end

-- Returns attachPoint
--- @param weaponhash integer
--- @return number
natives.weapon_n0X65Dc4Ac5B96614Cb = function(weaponhash)
    assert(type(weaponhash) == 'integer', 'Argument weaponhash must be of type integer.')

    local call = natives.invoke(0x65DC4AC5B96614CB, 'int', weaponhash)
    return call
end

-- Returns name hash, see common:/data/levels/rdr3/mapzones.meta
-- 
-- type (-1 matches any type):
-- class CMapZone
-- {
-- public:
-- 	enum class Type
-- 	{
-- 		STATE,
-- 		TOWN,
-- 		LAKE,
-- 		RIVER,
-- 		OIL_SPILL,
-- 		SWAMP,
-- 		OCEAN,
-- 		CREEK,
-- 		POND,
-- 		GLACIER,
-- 		DISTRICT,
-- 		TEXT_PRINTED,
-- 		TEXT_WRITTEN
-- 	};
-- };
-- 
-- https:--github.com/femga/rdr3_discoveries/tree/master/zones & https:--alloc8or.re/rdr3/doc/enums/CMapZone__Type.txt
--- @param x number
--- @param y number
--- @param z number
--- @param type integer
--- @return number
natives.zone_getMapZoneAtCoords = function(x, y, z, type)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')
    assert(type(type) == 'integer', 'Argument type must be of type integer.')

    local call = natives.invoke(0x43AD8FC02B429D33, 'integer', x, y, z, type)
    return call
end

-- Returns the zone's name hash if its type matches one of the following:
-- - LAKE
-- - RIVER
-- - OIL_SPILL
-- - SWAMP
-- - OCEAN
-- - CREEK
-- - POND
-- - GLACIER
--- @param x number
--- @param y number
--- @param z number
--- @return number
natives.zone_getWaterMapZoneAtCoords = function(x, y, z)
    assert(type(x) == 'number', 'Argument x must be of type number.')
    assert(type(y) == 'number', 'Argument y must be of type number.')
    assert(type(z) == 'number', 'Argument z must be of type number.')

    local call = natives.invoke(0x5BA7A68A346A5A91, 'integer', x, y, z)
    return call
end

-- nullsub, doesn't do anything
--- @param p0 integer
--- @param p1 boolean
natives.compapp_n0Xb6Fd96420C0126A1 = function(p0, p1)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'boolean', 'Argument p1 must be of type boolean.')

    local call = natives.invoke(0xB6FD96420C0126A1, 'void', p0, p1)
end

-- nullsub, doesn't do anything
--- @param p0 integer
--- @param p1 integer
natives.compapp_n0X74Bcceb233Ad95B2 = function(p0, p1)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'integer', 'Argument p1 must be of type integer.')

    local call = natives.invoke(0x74BCCEB233AD95B2, 'void', p0, p1)
end

-- nullsub, doesn't do anything
--- @param p0 integer
--- @param p1 string
natives.compapp_n0X29C733459A9011Eb = function(p0, p1)
    assert(type(p0) == 'integer', 'Argument p0 must be of type integer.')
    assert(type(p1) == 'string', 'Argument p1 must be of type string.')

    local call = natives.invoke(0x29C733459A9011EB, 'void', p0, p1)
end

-- Hardcoded to return false.
--- @return boolean
natives.compapp_n0X7Af1Bb4504Ea5Ed9 = function()

    local call = natives.invoke(0x7AF1BB4504EA5ED9, 'bool')
    return call
end

-- nullsub, doesn't do anything
natives.compapp_n0Xccb4635A071Fb62D = function()

    local call = natives.invoke(0xCCB4635A071FB62D, 'void')
end

-- #endregion



local main = {}

function main.init()
    --pass
end

return main
